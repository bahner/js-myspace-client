(function () {
  'use strict';

  function _regeneratorRuntime() {
    _regeneratorRuntime = function () {
      return exports;
    };
    var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      defineProperty = Object.defineProperty || function (obj, key, desc) {
        obj[key] = desc.value;
      },
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
      return Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), obj[key];
    }
    try {
      define({}, "");
    } catch (err) {
      define = function (obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
      return defineProperty(generator, "_invoke", {
        value: makeInvokeMethod(innerFn, self, context)
      }), generator;
    }
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
    exports.wrap = wrap;
    var ContinueSentinel = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if ("throw" !== record.type) {
          var result = record.arg,
            value = result.value;
          return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          }) : PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped, resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
        reject(record.arg);
      }
      var previousPromise;
      defineProperty(this, "_invoke", {
        value: function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");
        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }
        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);
          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }
          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }
    function maybeInvokeDelegate(delegate, context) {
      var methodName = context.method,
        method = delegate.iterator[methodName];
      if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
      var record = tryCatch(method, delegate.iterator, context.arg);
      if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal", delete record.arg, entry.completion = record;
    }
    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next) return iterable;
        if (!isNaN(iterable.length)) {
          var i = -1,
            next = function next() {
              for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              return next.value = undefined, next.done = !0, next;
            };
          return next.next = next;
        }
      }
      return {
        next: doneResult
      };
    }
    function doneResult() {
      return {
        value: undefined,
        done: !0
      };
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), defineProperty(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function (genFun) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function (arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
      return this;
    }), define(Gp, "toString", function () {
      return "[object Generator]";
    }), exports.keys = function (val) {
      var object = Object(val),
        keys = [];
      for (var key in object) keys.push(key);
      return keys.reverse(), function next() {
        for (; keys.length;) {
          var key = keys.pop();
          if (key in object) return next.value = key, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, exports.values = values, Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      },
      stop: function () {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) throw exception;
        var context = this;
        function handle(loc, caught) {
          return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i],
            record = entry.completion;
          if ("root" === entry.tryLoc) return handle("end");
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
      },
      complete: function (record, afterLoc) {
        if ("throw" === record.type) throw record.arg;
        return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
        }
      },
      catch: function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        return this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
      }
    }, exports;
  }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
        args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var f = n.default;
  	if (typeof f == "function") {
  		var a = function a () {
  			if (this instanceof a) {
          return Reflect.construct(f, arguments, this.constructor);
  			}
  			return f.apply(this, arguments);
  		};
  		a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var xterm = {exports: {}};

  (function (module, exports) {
  	!function(e,t){module.exports=t();}(self,(()=>(()=>{var e={4567:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.AccessibilityManager=void 0;const n=i(9042),o=i(6114),a=i(9924),h=i(844),c=i(5596),l=i(4725),d=i(3656);let _=class extends h.Disposable{constructor(e,t){super(),this._terminal=e,this._renderService=t,this._liveRegionLineCount=0,this._charsToConsume=[],this._charsToAnnounce="",this._accessibilityContainer=document.createElement("div"),this._accessibilityContainer.classList.add("xterm-accessibility"),this._rowContainer=document.createElement("div"),this._rowContainer.setAttribute("role","list"),this._rowContainer.classList.add("xterm-accessibility-tree"),this._rowElements=[];for(let e=0;e<this._terminal.rows;e++)this._rowElements[e]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[e]);if(this._topBoundaryFocusListener=e=>this._handleBoundaryFocus(e,0),this._bottomBoundaryFocusListener=e=>this._handleBoundaryFocus(e,1),this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions(),this._accessibilityContainer.appendChild(this._rowContainer),this._liveRegion=document.createElement("div"),this._liveRegion.classList.add("live-region"),this._liveRegion.setAttribute("aria-live","assertive"),this._accessibilityContainer.appendChild(this._liveRegion),this._liveRegionDebouncer=this.register(new a.TimeBasedDebouncer(this._announceCharacters.bind(this))),!this._terminal.element)throw new Error("Cannot enable accessibility before Terminal.open");this._terminal.element.insertAdjacentElement("afterbegin",this._accessibilityContainer),this.register(this._liveRegionDebouncer),this.register(this._terminal.onResize((e=>this._handleResize(e.rows)))),this.register(this._terminal.onRender((e=>this._refreshRows(e.start,e.end)))),this.register(this._terminal.onScroll((()=>this._refreshRows()))),this.register(this._terminal.onA11yChar((e=>this._handleChar(e)))),this.register(this._terminal.onLineFeed((()=>this._handleChar("\n")))),this.register(this._terminal.onA11yTab((e=>this._handleTab(e)))),this.register(this._terminal.onKey((e=>this._handleKey(e.key)))),this.register(this._terminal.onBlur((()=>this._clearLiveRegion()))),this.register(this._renderService.onDimensionsChange((()=>this._refreshRowsDimensions()))),this._screenDprMonitor=new c.ScreenDprMonitor(window),this.register(this._screenDprMonitor),this._screenDprMonitor.setListener((()=>this._refreshRowsDimensions())),this.register((0, d.addDisposableDomListener)(window,"resize",(()=>this._refreshRowsDimensions()))),this._refreshRows(),this.register((0, h.toDisposable)((()=>{this._accessibilityContainer.remove(),this._rowElements.length=0;})));}_handleTab(e){for(let t=0;t<e;t++)this._handleChar(" ");}_handleChar(e){this._liveRegionLineCount<21&&(this._charsToConsume.length>0?this._charsToConsume.shift()!==e&&(this._charsToAnnounce+=e):this._charsToAnnounce+=e,"\n"===e&&(this._liveRegionLineCount++,21===this._liveRegionLineCount&&(this._liveRegion.textContent+=n.tooMuchOutput)),o.isMac&&this._liveRegion.textContent&&this._liveRegion.textContent.length>0&&!this._liveRegion.parentNode&&setTimeout((()=>{this._accessibilityContainer.appendChild(this._liveRegion);}),0));}_clearLiveRegion(){this._liveRegion.textContent="",this._liveRegionLineCount=0,o.isMac&&this._liveRegion.remove();}_handleKey(e){this._clearLiveRegion(),/\p{Control}/u.test(e)||this._charsToConsume.push(e);}_refreshRows(e,t){this._liveRegionDebouncer.refresh(e,t,this._terminal.rows);}_announceCharacters(){0!==this._charsToAnnounce.length&&(this._liveRegion.textContent+=this._charsToAnnounce,this._charsToAnnounce="");}_handleBoundaryFocus(e,t){const i=e.target,s=this._rowElements[0===t?1:this._rowElements.length-2];if(i.getAttribute("aria-posinset")===(0===t?"1":`${this._terminal.buffer.lines.length}`))return;if(e.relatedTarget!==s)return;let r,n;if(0===t?(r=i,n=this._rowElements.pop(),this._rowContainer.removeChild(n)):(r=this._rowElements.shift(),n=i,this._rowContainer.removeChild(r)),r.removeEventListener("focus",this._topBoundaryFocusListener),n.removeEventListener("focus",this._bottomBoundaryFocusListener),0===t){const e=this._createAccessibilityTreeNode();this._rowElements.unshift(e),this._rowContainer.insertAdjacentElement("afterbegin",e);}else {const e=this._createAccessibilityTreeNode();this._rowElements.push(e),this._rowContainer.appendChild(e);}this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._terminal.scrollLines(0===t?-1:1),this._rowElements[0===t?1:this._rowElements.length-2].focus(),e.preventDefault(),e.stopImmediatePropagation();}_handleResize(e){this._rowElements[this._rowElements.length-1].removeEventListener("focus",this._bottomBoundaryFocusListener);for(let e=this._rowContainer.children.length;e<this._terminal.rows;e++)this._rowElements[e]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[e]);for(;this._rowElements.length>e;)this._rowContainer.removeChild(this._rowElements.pop());this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions();}_createAccessibilityTreeNode(){const e=document.createElement("div");return e.setAttribute("role","listitem"),e.tabIndex=-1,this._refreshRowDimensions(e),e}_refreshRowsDimensions(){if(this._renderService.dimensions.css.cell.height){this._accessibilityContainer.style.width=`${this._renderService.dimensions.css.canvas.width}px`,this._rowElements.length!==this._terminal.rows&&this._handleResize(this._terminal.rows);for(let e=0;e<this._terminal.rows;e++)this._refreshRowDimensions(this._rowElements[e]);}}_refreshRowDimensions(e){e.style.height=`${this._renderService.dimensions.css.cell.height}px`;}};_=s([r(1,l.IRenderService)],_),t.AccessibilityManager=_;},3614:(e,t)=>{function i(e){return e.replace(/\r?\n/g,"\r")}function s(e,t){return t?"[200~"+e+"[201~":e}function r(e,t,r){e=s(e=i(e),r.decPrivateModes.bracketedPasteMode),r.triggerDataEvent(e,!0),t.value="";}function n(e,t,i){const s=i.getBoundingClientRect(),r=e.clientX-s.left-10,n=e.clientY-s.top-10;t.style.width="20px",t.style.height="20px",t.style.left=`${r}px`,t.style.top=`${n}px`,t.style.zIndex="1000",t.focus();}Object.defineProperty(t,"__esModule",{value:!0}),t.rightClickHandler=t.moveTextAreaUnderMouseCursor=t.paste=t.handlePasteEvent=t.copyHandler=t.bracketTextForPaste=t.prepareTextForTerminal=void 0,t.prepareTextForTerminal=i,t.bracketTextForPaste=s,t.copyHandler=function(e,t){e.clipboardData&&e.clipboardData.setData("text/plain",t.selectionText),e.preventDefault();},t.handlePasteEvent=function(e,t,i){e.stopPropagation(),e.clipboardData&&r(e.clipboardData.getData("text/plain"),t,i);},t.paste=r,t.moveTextAreaUnderMouseCursor=n,t.rightClickHandler=function(e,t,i,s,r){n(e,t,i),r&&s.rightClickSelect(e),t.value=s.selectionText,t.select();};},7239:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ColorContrastCache=void 0;const s=i(1505);t.ColorContrastCache=class{constructor(){this._color=new s.TwoKeyMap,this._css=new s.TwoKeyMap;}setCss(e,t,i){this._css.set(e,t,i);}getCss(e,t){return this._css.get(e,t)}setColor(e,t,i){this._color.set(e,t,i);}getColor(e,t){return this._color.get(e,t)}clear(){this._color.clear(),this._css.clear();}};},3656:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addDisposableDomListener=void 0,t.addDisposableDomListener=function(e,t,i,s){e.addEventListener(t,i,s);let r=!1;return {dispose:()=>{r||(r=!0,e.removeEventListener(t,i,s));}}};},6465:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.Linkifier2=void 0;const n=i(2585),o=i(8460),a=i(844),h=i(3656);let c=class extends a.Disposable{constructor(e){super(),this._bufferService=e,this._linkProviders=[],this._linkCacheDisposables=[],this._isMouseOut=!0,this._wasResized=!1,this._activeLine=-1,this._onShowLinkUnderline=this.register(new o.EventEmitter),this.onShowLinkUnderline=this._onShowLinkUnderline.event,this._onHideLinkUnderline=this.register(new o.EventEmitter),this.onHideLinkUnderline=this._onHideLinkUnderline.event,this.register((0, a.getDisposeArrayDisposable)(this._linkCacheDisposables)),this.register((0, a.toDisposable)((()=>{this._lastMouseEvent=void 0;}))),this.register(this._bufferService.onResize((()=>{this._clearCurrentLink(),this._wasResized=!0;})));}get currentLink(){return this._currentLink}registerLinkProvider(e){return this._linkProviders.push(e),{dispose:()=>{const t=this._linkProviders.indexOf(e);-1!==t&&this._linkProviders.splice(t,1);}}}attachToDom(e,t,i){this._element=e,this._mouseService=t,this._renderService=i,this.register((0, h.addDisposableDomListener)(this._element,"mouseleave",(()=>{this._isMouseOut=!0,this._clearCurrentLink();}))),this.register((0, h.addDisposableDomListener)(this._element,"mousemove",this._handleMouseMove.bind(this))),this.register((0, h.addDisposableDomListener)(this._element,"mousedown",this._handleMouseDown.bind(this))),this.register((0, h.addDisposableDomListener)(this._element,"mouseup",this._handleMouseUp.bind(this)));}_handleMouseMove(e){if(this._lastMouseEvent=e,!this._element||!this._mouseService)return;const t=this._positionFromMouseEvent(e,this._element,this._mouseService);if(!t)return;this._isMouseOut=!1;const i=e.composedPath();for(let e=0;e<i.length;e++){const t=i[e];if(t.classList.contains("xterm"))break;if(t.classList.contains("xterm-hover"))return}this._lastBufferCell&&t.x===this._lastBufferCell.x&&t.y===this._lastBufferCell.y||(this._handleHover(t),this._lastBufferCell=t);}_handleHover(e){if(this._activeLine!==e.y||this._wasResized)return this._clearCurrentLink(),this._askForLink(e,!1),void(this._wasResized=!1);this._currentLink&&this._linkAtPosition(this._currentLink.link,e)||(this._clearCurrentLink(),this._askForLink(e,!0));}_askForLink(e,t){var i,s;this._activeProviderReplies&&t||(null===(i=this._activeProviderReplies)||void 0===i||i.forEach((e=>{null==e||e.forEach((e=>{e.link.dispose&&e.link.dispose();}));})),this._activeProviderReplies=new Map,this._activeLine=e.y);let r=!1;for(const[i,n]of this._linkProviders.entries())t?(null===(s=this._activeProviderReplies)||void 0===s?void 0:s.get(i))&&(r=this._checkLinkProviderResult(i,e,r)):n.provideLinks(e.y,(t=>{var s,n;if(this._isMouseOut)return;const o=null==t?void 0:t.map((e=>({link:e})));null===(s=this._activeProviderReplies)||void 0===s||s.set(i,o),r=this._checkLinkProviderResult(i,e,r),(null===(n=this._activeProviderReplies)||void 0===n?void 0:n.size)===this._linkProviders.length&&this._removeIntersectingLinks(e.y,this._activeProviderReplies);}));}_removeIntersectingLinks(e,t){const i=new Set;for(let s=0;s<t.size;s++){const r=t.get(s);if(r)for(let t=0;t<r.length;t++){const s=r[t],n=s.link.range.start.y<e?0:s.link.range.start.x,o=s.link.range.end.y>e?this._bufferService.cols:s.link.range.end.x;for(let e=n;e<=o;e++){if(i.has(e)){r.splice(t--,1);break}i.add(e);}}}}_checkLinkProviderResult(e,t,i){var s;if(!this._activeProviderReplies)return i;const r=this._activeProviderReplies.get(e);let n=!1;for(let t=0;t<e;t++)this._activeProviderReplies.has(t)&&!this._activeProviderReplies.get(t)||(n=!0);if(!n&&r){const e=r.find((e=>this._linkAtPosition(e.link,t)));e&&(i=!0,this._handleNewLink(e));}if(this._activeProviderReplies.size===this._linkProviders.length&&!i)for(let e=0;e<this._activeProviderReplies.size;e++){const r=null===(s=this._activeProviderReplies.get(e))||void 0===s?void 0:s.find((e=>this._linkAtPosition(e.link,t)));if(r){i=!0,this._handleNewLink(r);break}}return i}_handleMouseDown(){this._mouseDownLink=this._currentLink;}_handleMouseUp(e){if(!this._element||!this._mouseService||!this._currentLink)return;const t=this._positionFromMouseEvent(e,this._element,this._mouseService);t&&this._mouseDownLink===this._currentLink&&this._linkAtPosition(this._currentLink.link,t)&&this._currentLink.link.activate(e,this._currentLink.link.text);}_clearCurrentLink(e,t){this._element&&this._currentLink&&this._lastMouseEvent&&(!e||!t||this._currentLink.link.range.start.y>=e&&this._currentLink.link.range.end.y<=t)&&(this._linkLeave(this._element,this._currentLink.link,this._lastMouseEvent),this._currentLink=void 0,(0, a.disposeArray)(this._linkCacheDisposables));}_handleNewLink(e){if(!this._element||!this._lastMouseEvent||!this._mouseService)return;const t=this._positionFromMouseEvent(this._lastMouseEvent,this._element,this._mouseService);t&&this._linkAtPosition(e.link,t)&&(this._currentLink=e,this._currentLink.state={decorations:{underline:void 0===e.link.decorations||e.link.decorations.underline,pointerCursor:void 0===e.link.decorations||e.link.decorations.pointerCursor},isHovered:!0},this._linkHover(this._element,e.link,this._lastMouseEvent),e.link.decorations={},Object.defineProperties(e.link.decorations,{pointerCursor:{get:()=>{var e,t;return null===(t=null===(e=this._currentLink)||void 0===e?void 0:e.state)||void 0===t?void 0:t.decorations.pointerCursor},set:e=>{var t,i;(null===(t=this._currentLink)||void 0===t?void 0:t.state)&&this._currentLink.state.decorations.pointerCursor!==e&&(this._currentLink.state.decorations.pointerCursor=e,this._currentLink.state.isHovered&&(null===(i=this._element)||void 0===i||i.classList.toggle("xterm-cursor-pointer",e)));}},underline:{get:()=>{var e,t;return null===(t=null===(e=this._currentLink)||void 0===e?void 0:e.state)||void 0===t?void 0:t.decorations.underline},set:t=>{var i,s,r;(null===(i=this._currentLink)||void 0===i?void 0:i.state)&&(null===(r=null===(s=this._currentLink)||void 0===s?void 0:s.state)||void 0===r?void 0:r.decorations.underline)!==t&&(this._currentLink.state.decorations.underline=t,this._currentLink.state.isHovered&&this._fireUnderlineEvent(e.link,t));}}}),this._renderService&&this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange((e=>{if(!this._currentLink)return;const t=0===e.start?0:e.start+1+this._bufferService.buffer.ydisp,i=this._bufferService.buffer.ydisp+1+e.end;if(this._currentLink.link.range.start.y>=t&&this._currentLink.link.range.end.y<=i&&(this._clearCurrentLink(t,i),this._lastMouseEvent&&this._element)){const e=this._positionFromMouseEvent(this._lastMouseEvent,this._element,this._mouseService);e&&this._askForLink(e,!1);}}))));}_linkHover(e,t,i){var s;(null===(s=this._currentLink)||void 0===s?void 0:s.state)&&(this._currentLink.state.isHovered=!0,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!0),this._currentLink.state.decorations.pointerCursor&&e.classList.add("xterm-cursor-pointer")),t.hover&&t.hover(i,t.text);}_fireUnderlineEvent(e,t){const i=e.range,s=this._bufferService.buffer.ydisp,r=this._createLinkUnderlineEvent(i.start.x-1,i.start.y-s-1,i.end.x,i.end.y-s-1,void 0);(t?this._onShowLinkUnderline:this._onHideLinkUnderline).fire(r);}_linkLeave(e,t,i){var s;(null===(s=this._currentLink)||void 0===s?void 0:s.state)&&(this._currentLink.state.isHovered=!1,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!1),this._currentLink.state.decorations.pointerCursor&&e.classList.remove("xterm-cursor-pointer")),t.leave&&t.leave(i,t.text);}_linkAtPosition(e,t){const i=e.range.start.y*this._bufferService.cols+e.range.start.x,s=e.range.end.y*this._bufferService.cols+e.range.end.x,r=t.y*this._bufferService.cols+t.x;return i<=r&&r<=s}_positionFromMouseEvent(e,t,i){const s=i.getCoords(e,t,this._bufferService.cols,this._bufferService.rows);if(s)return {x:s[0],y:s[1]+this._bufferService.buffer.ydisp}}_createLinkUnderlineEvent(e,t,i,s,r){return {x1:e,y1:t,x2:i,y2:s,cols:this._bufferService.cols,fg:r}}};c=s([r(0,n.IBufferService)],c),t.Linkifier2=c;},9042:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tooMuchOutput=t.promptLabel=void 0,t.promptLabel="Terminal input",t.tooMuchOutput="Too much output to announce, navigate to rows manually to read";},3730:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.OscLinkProvider=void 0;const n=i(511),o=i(2585);let a=class{constructor(e,t,i){this._bufferService=e,this._optionsService=t,this._oscLinkService=i;}provideLinks(e,t){var i;const s=this._bufferService.buffer.lines.get(e-1);if(!s)return void t(void 0);const r=[],o=this._optionsService.rawOptions.linkHandler,a=new n.CellData,c=s.getTrimmedLength();let l=-1,d=-1,_=!1;for(let t=0;t<c;t++)if(-1!==d||s.hasContent(t)){if(s.loadCell(t,a),a.hasExtendedAttrs()&&a.extended.urlId){if(-1===d){d=t,l=a.extended.urlId;continue}_=a.extended.urlId!==l;}else -1!==d&&(_=!0);if(_||-1!==d&&t===c-1){const s=null===(i=this._oscLinkService.getLinkData(l))||void 0===i?void 0:i.uri;if(s){const i={start:{x:d+1,y:e},end:{x:t+(_||t!==c-1?0:1),y:e}};let n=!1;if(!(null==o?void 0:o.allowNonHttpProtocols))try{const e=new URL(s);["http:","https:"].includes(e.protocol)||(n=!0);}catch(e){n=!0;}n||r.push({text:s,range:i,activate:(e,t)=>o?o.activate(e,t,i):h(0,t),hover:(e,t)=>{var s;return null===(s=null==o?void 0:o.hover)||void 0===s?void 0:s.call(o,e,t,i)},leave:(e,t)=>{var s;return null===(s=null==o?void 0:o.leave)||void 0===s?void 0:s.call(o,e,t,i)}});}_=!1,a.hasExtendedAttrs()&&a.extended.urlId?(d=t,l=a.extended.urlId):(d=-1,l=-1);}}t(r);}};function h(e,t){if(confirm(`Do you want to navigate to ${t}?\n\nWARNING: This link could potentially be dangerous`)){const e=window.open();if(e){try{e.opener=null;}catch(e){}e.location.href=t;}else console.warn("Opening link blocked as opener could not be cleared");}}a=s([r(0,o.IBufferService),r(1,o.IOptionsService),r(2,o.IOscLinkService)],a),t.OscLinkProvider=a;},6193:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RenderDebouncer=void 0,t.RenderDebouncer=class{constructor(e,t){this._parentWindow=e,this._renderCallback=t,this._refreshCallbacks=[];}dispose(){this._animationFrame&&(this._parentWindow.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0);}addRefreshCallback(e){return this._refreshCallbacks.push(e),this._animationFrame||(this._animationFrame=this._parentWindow.requestAnimationFrame((()=>this._innerRefresh()))),this._animationFrame}refresh(e,t,i){this._rowCount=i,e=void 0!==e?e:0,t=void 0!==t?t:this._rowCount-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,e):e,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,t):t,this._animationFrame||(this._animationFrame=this._parentWindow.requestAnimationFrame((()=>this._innerRefresh())));}_innerRefresh(){if(this._animationFrame=void 0,void 0===this._rowStart||void 0===this._rowEnd||void 0===this._rowCount)return void this._runRefreshCallbacks();const e=Math.max(this._rowStart,0),t=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._renderCallback(e,t),this._runRefreshCallbacks();}_runRefreshCallbacks(){for(const e of this._refreshCallbacks)e(0);this._refreshCallbacks=[];}};},5596:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ScreenDprMonitor=void 0;const s=i(844);class r extends s.Disposable{constructor(e){super(),this._parentWindow=e,this._currentDevicePixelRatio=this._parentWindow.devicePixelRatio,this.register((0, s.toDisposable)((()=>{this.clearListener();})));}setListener(e){this._listener&&this.clearListener(),this._listener=e,this._outerListener=()=>{this._listener&&(this._listener(this._parentWindow.devicePixelRatio,this._currentDevicePixelRatio),this._updateDpr());},this._updateDpr();}_updateDpr(){var e;this._outerListener&&(null===(e=this._resolutionMediaMatchList)||void 0===e||e.removeListener(this._outerListener),this._currentDevicePixelRatio=this._parentWindow.devicePixelRatio,this._resolutionMediaMatchList=this._parentWindow.matchMedia(`screen and (resolution: ${this._parentWindow.devicePixelRatio}dppx)`),this._resolutionMediaMatchList.addListener(this._outerListener));}clearListener(){this._resolutionMediaMatchList&&this._listener&&this._outerListener&&(this._resolutionMediaMatchList.removeListener(this._outerListener),this._resolutionMediaMatchList=void 0,this._listener=void 0,this._outerListener=void 0);}}t.ScreenDprMonitor=r;},3236:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Terminal=void 0;const s=i(2950),r=i(1680),n=i(3614),o=i(2584),a=i(5435),h=i(9312),c=i(6114),l=i(3656),d=i(9042),_=i(4567),u=i(1296),f=i(7399),v=i(8460),g=i(8437),p=i(3230),S=i(4725),m=i(428),C=i(8934),b=i(6465),y=i(5114),w=i(8969),E=i(8055),L=i(4269),k=i(5941),R=i(3107),D=i(5744),A=i(9074),x=i(2585),B=i(3730),T=i(844),M=i(6731),O="undefined"!=typeof window?window.document:null;class I extends w.CoreTerminal{constructor(e={}){super(e),this.browser=c,this._keyDownHandled=!1,this._keyDownSeen=!1,this._keyPressHandled=!1,this._unprocessedDeadKey=!1,this._onCursorMove=this.register(new v.EventEmitter),this.onCursorMove=this._onCursorMove.event,this._onKey=this.register(new v.EventEmitter),this.onKey=this._onKey.event,this._onRender=this.register(new v.EventEmitter),this.onRender=this._onRender.event,this._onSelectionChange=this.register(new v.EventEmitter),this.onSelectionChange=this._onSelectionChange.event,this._onTitleChange=this.register(new v.EventEmitter),this.onTitleChange=this._onTitleChange.event,this._onBell=this.register(new v.EventEmitter),this.onBell=this._onBell.event,this._onFocus=this.register(new v.EventEmitter),this._onBlur=this.register(new v.EventEmitter),this._onA11yCharEmitter=this.register(new v.EventEmitter),this._onA11yTabEmitter=this.register(new v.EventEmitter),this._onWillOpen=this.register(new v.EventEmitter),this._setup(),this.linkifier2=this.register(this._instantiationService.createInstance(b.Linkifier2)),this.linkifier2.registerLinkProvider(this._instantiationService.createInstance(B.OscLinkProvider)),this._decorationService=this._instantiationService.createInstance(A.DecorationService),this._instantiationService.setService(x.IDecorationService,this._decorationService),this.register(this._inputHandler.onRequestBell((()=>this._onBell.fire()))),this.register(this._inputHandler.onRequestRefreshRows(((e,t)=>this.refresh(e,t)))),this.register(this._inputHandler.onRequestSendFocus((()=>this._reportFocus()))),this.register(this._inputHandler.onRequestReset((()=>this.reset()))),this.register(this._inputHandler.onRequestWindowsOptionsReport((e=>this._reportWindowsOptions(e)))),this.register(this._inputHandler.onColor((e=>this._handleColorEvent(e)))),this.register((0, v.forwardEvent)(this._inputHandler.onCursorMove,this._onCursorMove)),this.register((0, v.forwardEvent)(this._inputHandler.onTitleChange,this._onTitleChange)),this.register((0, v.forwardEvent)(this._inputHandler.onA11yChar,this._onA11yCharEmitter)),this.register((0, v.forwardEvent)(this._inputHandler.onA11yTab,this._onA11yTabEmitter)),this.register(this._bufferService.onResize((e=>this._afterResize(e.cols,e.rows)))),this.register((0, T.toDisposable)((()=>{var e,t;this._customKeyEventHandler=void 0,null===(t=null===(e=this.element)||void 0===e?void 0:e.parentNode)||void 0===t||t.removeChild(this.element);})));}get onFocus(){return this._onFocus.event}get onBlur(){return this._onBlur.event}get onA11yChar(){return this._onA11yCharEmitter.event}get onA11yTab(){return this._onA11yTabEmitter.event}get onWillOpen(){return this._onWillOpen.event}_handleColorEvent(e){if(this._themeService)for(const t of e){let e,i="";switch(t.index){case 256:e="foreground",i="10";break;case 257:e="background",i="11";break;case 258:e="cursor",i="12";break;default:e="ansi",i="4;"+t.index;}switch(t.type){case 0:const s=E.color.toColorRGB("ansi"===e?this._themeService.colors.ansi[t.index]:this._themeService.colors[e]);this.coreService.triggerDataEvent(`${o.C0.ESC}]${i};${(0, k.toRgbString)(s)}${o.C1_ESCAPED.ST}`);break;case 1:if("ansi"===e)this._themeService.modifyColors((e=>e.ansi[t.index]=E.rgba.toColor(...t.color)));else {const i=e;this._themeService.modifyColors((e=>e[i]=E.rgba.toColor(...t.color)));}break;case 2:this._themeService.restoreColor(t.index);}}}_setup(){super._setup(),this._customKeyEventHandler=void 0;}get buffer(){return this.buffers.active}focus(){this.textarea&&this.textarea.focus({preventScroll:!0});}_handleScreenReaderModeOptionChange(e){var t;e?!this._accessibilityManager&&this._renderService&&(this._accessibilityManager=this._instantiationService.createInstance(_.AccessibilityManager,this)):(null===(t=this._accessibilityManager)||void 0===t||t.dispose(),this._accessibilityManager=void 0);}_handleTextAreaFocus(e){this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(o.C0.ESC+"[I"),this.updateCursorStyle(e),this.element.classList.add("focus"),this._showCursor(),this._onFocus.fire();}blur(){var e;return null===(e=this.textarea)||void 0===e?void 0:e.blur()}_handleTextAreaBlur(){this.textarea.value="",this.refresh(this.buffer.y,this.buffer.y),this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(o.C0.ESC+"[O"),this.element.classList.remove("focus"),this._onBlur.fire();}_syncTextArea(){if(!this.textarea||!this.buffer.isCursorInViewport||this._compositionHelper.isComposing||!this._renderService)return;const e=this.buffer.ybase+this.buffer.y,t=this.buffer.lines.get(e);if(!t)return;const i=Math.min(this.buffer.x,this.cols-1),s=this._renderService.dimensions.css.cell.height,r=t.getWidth(i),n=this._renderService.dimensions.css.cell.width*r,o=this.buffer.y*this._renderService.dimensions.css.cell.height,a=i*this._renderService.dimensions.css.cell.width;this.textarea.style.left=a+"px",this.textarea.style.top=o+"px",this.textarea.style.width=n+"px",this.textarea.style.height=s+"px",this.textarea.style.lineHeight=s+"px",this.textarea.style.zIndex="-5";}_initGlobal(){this._bindKeys(),this.register((0, l.addDisposableDomListener)(this.element,"copy",(e=>{this.hasSelection()&&(0, n.copyHandler)(e,this._selectionService);})));const e=e=>(0, n.handlePasteEvent)(e,this.textarea,this.coreService);this.register((0, l.addDisposableDomListener)(this.textarea,"paste",e)),this.register((0, l.addDisposableDomListener)(this.element,"paste",e)),c.isFirefox?this.register((0, l.addDisposableDomListener)(this.element,"mousedown",(e=>{2===e.button&&(0, n.rightClickHandler)(e,this.textarea,this.screenElement,this._selectionService,this.options.rightClickSelectsWord);}))):this.register((0, l.addDisposableDomListener)(this.element,"contextmenu",(e=>{(0, n.rightClickHandler)(e,this.textarea,this.screenElement,this._selectionService,this.options.rightClickSelectsWord);}))),c.isLinux&&this.register((0, l.addDisposableDomListener)(this.element,"auxclick",(e=>{1===e.button&&(0, n.moveTextAreaUnderMouseCursor)(e,this.textarea,this.screenElement);})));}_bindKeys(){this.register((0, l.addDisposableDomListener)(this.textarea,"keyup",(e=>this._keyUp(e)),!0)),this.register((0, l.addDisposableDomListener)(this.textarea,"keydown",(e=>this._keyDown(e)),!0)),this.register((0, l.addDisposableDomListener)(this.textarea,"keypress",(e=>this._keyPress(e)),!0)),this.register((0, l.addDisposableDomListener)(this.textarea,"compositionstart",(()=>this._compositionHelper.compositionstart()))),this.register((0, l.addDisposableDomListener)(this.textarea,"compositionupdate",(e=>this._compositionHelper.compositionupdate(e)))),this.register((0, l.addDisposableDomListener)(this.textarea,"compositionend",(()=>this._compositionHelper.compositionend()))),this.register((0, l.addDisposableDomListener)(this.textarea,"input",(e=>this._inputEvent(e)),!0)),this.register(this.onRender((()=>this._compositionHelper.updateCompositionElements())));}open(e){var t;if(!e)throw new Error("Terminal requires a parent element.");e.isConnected||this._logService.debug("Terminal.open was called on an element that was not attached to the DOM"),this._document=e.ownerDocument,this.element=this._document.createElement("div"),this.element.dir="ltr",this.element.classList.add("terminal"),this.element.classList.add("xterm"),e.appendChild(this.element);const i=O.createDocumentFragment();this._viewportElement=O.createElement("div"),this._viewportElement.classList.add("xterm-viewport"),i.appendChild(this._viewportElement),this._viewportScrollArea=O.createElement("div"),this._viewportScrollArea.classList.add("xterm-scroll-area"),this._viewportElement.appendChild(this._viewportScrollArea),this.screenElement=O.createElement("div"),this.screenElement.classList.add("xterm-screen"),this._helperContainer=O.createElement("div"),this._helperContainer.classList.add("xterm-helpers"),this.screenElement.appendChild(this._helperContainer),i.appendChild(this.screenElement),this.textarea=O.createElement("textarea"),this.textarea.classList.add("xterm-helper-textarea"),this.textarea.setAttribute("aria-label",d.promptLabel),c.isChromeOS||this.textarea.setAttribute("aria-multiline","false"),this.textarea.setAttribute("autocorrect","off"),this.textarea.setAttribute("autocapitalize","off"),this.textarea.setAttribute("spellcheck","false"),this.textarea.tabIndex=0,this._coreBrowserService=this._instantiationService.createInstance(y.CoreBrowserService,this.textarea,null!==(t=this._document.defaultView)&&void 0!==t?t:window),this._instantiationService.setService(S.ICoreBrowserService,this._coreBrowserService),this.register((0, l.addDisposableDomListener)(this.textarea,"focus",(e=>this._handleTextAreaFocus(e)))),this.register((0, l.addDisposableDomListener)(this.textarea,"blur",(()=>this._handleTextAreaBlur()))),this._helperContainer.appendChild(this.textarea),this._charSizeService=this._instantiationService.createInstance(m.CharSizeService,this._document,this._helperContainer),this._instantiationService.setService(S.ICharSizeService,this._charSizeService),this._themeService=this._instantiationService.createInstance(M.ThemeService),this._instantiationService.setService(S.IThemeService,this._themeService),this._characterJoinerService=this._instantiationService.createInstance(L.CharacterJoinerService),this._instantiationService.setService(S.ICharacterJoinerService,this._characterJoinerService),this._renderService=this.register(this._instantiationService.createInstance(p.RenderService,this.rows,this.screenElement)),this._instantiationService.setService(S.IRenderService,this._renderService),this.register(this._renderService.onRenderedViewportChange((e=>this._onRender.fire(e)))),this.onResize((e=>this._renderService.resize(e.cols,e.rows))),this._compositionView=O.createElement("div"),this._compositionView.classList.add("composition-view"),this._compositionHelper=this._instantiationService.createInstance(s.CompositionHelper,this.textarea,this._compositionView),this._helperContainer.appendChild(this._compositionView),this.element.appendChild(i);try{this._onWillOpen.fire(this.element);}catch(e){}this._renderService.hasRenderer()||this._renderService.setRenderer(this._createRenderer()),this._mouseService=this._instantiationService.createInstance(C.MouseService),this._instantiationService.setService(S.IMouseService,this._mouseService),this.viewport=this._instantiationService.createInstance(r.Viewport,(e=>this.scrollLines(e,!0,1)),this._viewportElement,this._viewportScrollArea),this.register(this._inputHandler.onRequestSyncScrollBar((()=>this.viewport.syncScrollArea()))),this.register(this.viewport),this.register(this.onCursorMove((()=>{this._renderService.handleCursorMove(),this._syncTextArea();}))),this.register(this.onResize((()=>this._renderService.handleResize(this.cols,this.rows)))),this.register(this.onBlur((()=>this._renderService.handleBlur()))),this.register(this.onFocus((()=>this._renderService.handleFocus()))),this.register(this._renderService.onDimensionsChange((()=>this.viewport.syncScrollArea()))),this._selectionService=this.register(this._instantiationService.createInstance(h.SelectionService,this.element,this.screenElement,this.linkifier2)),this._instantiationService.setService(S.ISelectionService,this._selectionService),this.register(this._selectionService.onRequestScrollLines((e=>this.scrollLines(e.amount,e.suppressScrollEvent)))),this.register(this._selectionService.onSelectionChange((()=>this._onSelectionChange.fire()))),this.register(this._selectionService.onRequestRedraw((e=>this._renderService.handleSelectionChanged(e.start,e.end,e.columnSelectMode)))),this.register(this._selectionService.onLinuxMouseSelection((e=>{this.textarea.value=e,this.textarea.focus(),this.textarea.select();}))),this.register(this._onScroll.event((e=>{this.viewport.syncScrollArea(),this._selectionService.refresh();}))),this.register((0, l.addDisposableDomListener)(this._viewportElement,"scroll",(()=>this._selectionService.refresh()))),this.linkifier2.attachToDom(this.screenElement,this._mouseService,this._renderService),this.register(this._instantiationService.createInstance(R.BufferDecorationRenderer,this.screenElement)),this.register((0, l.addDisposableDomListener)(this.element,"mousedown",(e=>this._selectionService.handleMouseDown(e)))),this.coreMouseService.areMouseEventsActive?(this._selectionService.disable(),this.element.classList.add("enable-mouse-events")):this._selectionService.enable(),this.options.screenReaderMode&&(this._accessibilityManager=this._instantiationService.createInstance(_.AccessibilityManager,this)),this.register(this.optionsService.onSpecificOptionChange("screenReaderMode",(e=>this._handleScreenReaderModeOptionChange(e)))),this.options.overviewRulerWidth&&(this._overviewRulerRenderer=this.register(this._instantiationService.createInstance(D.OverviewRulerRenderer,this._viewportElement,this.screenElement))),this.optionsService.onSpecificOptionChange("overviewRulerWidth",(e=>{!this._overviewRulerRenderer&&e&&this._viewportElement&&this.screenElement&&(this._overviewRulerRenderer=this.register(this._instantiationService.createInstance(D.OverviewRulerRenderer,this._viewportElement,this.screenElement)));})),this._charSizeService.measure(),this.refresh(0,this.rows-1),this._initGlobal(),this.bindMouse();}_createRenderer(){return this._instantiationService.createInstance(u.DomRenderer,this.element,this.screenElement,this._viewportElement,this.linkifier2)}bindMouse(){const e=this,t=this.element;function i(t){const i=e._mouseService.getMouseReportCoords(t,e.screenElement);if(!i)return !1;let s,r;switch(t.overrideType||t.type){case"mousemove":r=32,void 0===t.buttons?(s=3,void 0!==t.button&&(s=t.button<3?t.button:3)):s=1&t.buttons?0:4&t.buttons?1:2&t.buttons?2:3;break;case"mouseup":r=0,s=t.button<3?t.button:3;break;case"mousedown":r=1,s=t.button<3?t.button:3;break;case"wheel":if(0===e.viewport.getLinesScrolled(t))return !1;r=t.deltaY<0?0:1,s=4;break;default:return !1}return !(void 0===r||void 0===s||s>4)&&e.coreMouseService.triggerMouseEvent({col:i.col,row:i.row,x:i.x,y:i.y,button:s,action:r,ctrl:t.ctrlKey,alt:t.altKey,shift:t.shiftKey})}const s={mouseup:null,wheel:null,mousedrag:null,mousemove:null},r={mouseup:e=>(i(e),e.buttons||(this._document.removeEventListener("mouseup",s.mouseup),s.mousedrag&&this._document.removeEventListener("mousemove",s.mousedrag)),this.cancel(e)),wheel:e=>(i(e),this.cancel(e,!0)),mousedrag:e=>{e.buttons&&i(e);},mousemove:e=>{e.buttons||i(e);}};this.register(this.coreMouseService.onProtocolChange((e=>{e?("debug"===this.optionsService.rawOptions.logLevel&&this._logService.debug("Binding to mouse events:",this.coreMouseService.explainEvents(e)),this.element.classList.add("enable-mouse-events"),this._selectionService.disable()):(this._logService.debug("Unbinding from mouse events."),this.element.classList.remove("enable-mouse-events"),this._selectionService.enable()),8&e?s.mousemove||(t.addEventListener("mousemove",r.mousemove),s.mousemove=r.mousemove):(t.removeEventListener("mousemove",s.mousemove),s.mousemove=null),16&e?s.wheel||(t.addEventListener("wheel",r.wheel,{passive:!1}),s.wheel=r.wheel):(t.removeEventListener("wheel",s.wheel),s.wheel=null),2&e?s.mouseup||(s.mouseup=r.mouseup):(this._document.removeEventListener("mouseup",s.mouseup),s.mouseup=null),4&e?s.mousedrag||(s.mousedrag=r.mousedrag):(this._document.removeEventListener("mousemove",s.mousedrag),s.mousedrag=null);}))),this.coreMouseService.activeProtocol=this.coreMouseService.activeProtocol,this.register((0, l.addDisposableDomListener)(t,"mousedown",(e=>{if(e.preventDefault(),this.focus(),this.coreMouseService.areMouseEventsActive&&!this._selectionService.shouldForceSelection(e))return i(e),s.mouseup&&this._document.addEventListener("mouseup",s.mouseup),s.mousedrag&&this._document.addEventListener("mousemove",s.mousedrag),this.cancel(e)}))),this.register((0, l.addDisposableDomListener)(t,"wheel",(e=>{if(!s.wheel){if(!this.buffer.hasScrollback){const t=this.viewport.getLinesScrolled(e);if(0===t)return;const i=o.C0.ESC+(this.coreService.decPrivateModes.applicationCursorKeys?"O":"[")+(e.deltaY<0?"A":"B");let s="";for(let e=0;e<Math.abs(t);e++)s+=i;return this.coreService.triggerDataEvent(s,!0),this.cancel(e,!0)}return this.viewport.handleWheel(e)?this.cancel(e):void 0}}),{passive:!1})),this.register((0, l.addDisposableDomListener)(t,"touchstart",(e=>{if(!this.coreMouseService.areMouseEventsActive)return this.viewport.handleTouchStart(e),this.cancel(e)}),{passive:!0})),this.register((0, l.addDisposableDomListener)(t,"touchmove",(e=>{if(!this.coreMouseService.areMouseEventsActive)return this.viewport.handleTouchMove(e)?void 0:this.cancel(e)}),{passive:!1}));}refresh(e,t){var i;null===(i=this._renderService)||void 0===i||i.refreshRows(e,t);}updateCursorStyle(e){var t;(null===(t=this._selectionService)||void 0===t?void 0:t.shouldColumnSelect(e))?this.element.classList.add("column-select"):this.element.classList.remove("column-select");}_showCursor(){this.coreService.isCursorInitialized||(this.coreService.isCursorInitialized=!0,this.refresh(this.buffer.y,this.buffer.y));}scrollLines(e,t,i=0){super.scrollLines(e,t,i),this.refresh(0,this.rows-1);}paste(e){(0, n.paste)(e,this.textarea,this.coreService);}attachCustomKeyEventHandler(e){this._customKeyEventHandler=e;}registerLinkProvider(e){return this.linkifier2.registerLinkProvider(e)}registerCharacterJoiner(e){if(!this._characterJoinerService)throw new Error("Terminal must be opened first");const t=this._characterJoinerService.register(e);return this.refresh(0,this.rows-1),t}deregisterCharacterJoiner(e){if(!this._characterJoinerService)throw new Error("Terminal must be opened first");this._characterJoinerService.deregister(e)&&this.refresh(0,this.rows-1);}get markers(){return this.buffer.markers}addMarker(e){return this.buffer.addMarker(this.buffer.ybase+this.buffer.y+e)}registerDecoration(e){return this._decorationService.registerDecoration(e)}hasSelection(){return !!this._selectionService&&this._selectionService.hasSelection}select(e,t,i){this._selectionService.setSelection(e,t,i);}getSelection(){return this._selectionService?this._selectionService.selectionText:""}getSelectionPosition(){if(this._selectionService&&this._selectionService.hasSelection)return {start:{x:this._selectionService.selectionStart[0],y:this._selectionService.selectionStart[1]},end:{x:this._selectionService.selectionEnd[0],y:this._selectionService.selectionEnd[1]}}}clearSelection(){var e;null===(e=this._selectionService)||void 0===e||e.clearSelection();}selectAll(){var e;null===(e=this._selectionService)||void 0===e||e.selectAll();}selectLines(e,t){var i;null===(i=this._selectionService)||void 0===i||i.selectLines(e,t);}_keyDown(e){if(this._keyDownHandled=!1,this._keyDownSeen=!0,this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return !1;const t=this.browser.isMac&&this.options.macOptionIsMeta&&e.altKey;if(!t&&!this._compositionHelper.keydown(e))return this.options.scrollOnUserInput&&this.buffer.ybase!==this.buffer.ydisp&&this._bufferService.scrollToBottom(),!1;t||"Dead"!==e.key&&"AltGraph"!==e.key||(this._unprocessedDeadKey=!0);const i=(0, f.evaluateKeyboardEvent)(e,this.coreService.decPrivateModes.applicationCursorKeys,this.browser.isMac,this.options.macOptionIsMeta);if(this.updateCursorStyle(e),3===i.type||2===i.type){const t=this.rows-1;return this.scrollLines(2===i.type?-t:t),this.cancel(e,!0)}return 1===i.type&&this.selectAll(),!!this._isThirdLevelShift(this.browser,e)||(i.cancel&&this.cancel(e,!0),!i.key||!!(e.key&&!e.ctrlKey&&!e.altKey&&!e.metaKey&&1===e.key.length&&e.key.charCodeAt(0)>=65&&e.key.charCodeAt(0)<=90)||(this._unprocessedDeadKey?(this._unprocessedDeadKey=!1,!0):(i.key!==o.C0.ETX&&i.key!==o.C0.CR||(this.textarea.value=""),this._onKey.fire({key:i.key,domEvent:e}),this._showCursor(),this.coreService.triggerDataEvent(i.key,!0),!this.optionsService.rawOptions.screenReaderMode||e.altKey||e.ctrlKey?this.cancel(e,!0):void(this._keyDownHandled=!0))))}_isThirdLevelShift(e,t){const i=e.isMac&&!this.options.macOptionIsMeta&&t.altKey&&!t.ctrlKey&&!t.metaKey||e.isWindows&&t.altKey&&t.ctrlKey&&!t.metaKey||e.isWindows&&t.getModifierState("AltGraph");return "keypress"===t.type?i:i&&(!t.keyCode||t.keyCode>47)}_keyUp(e){this._keyDownSeen=!1,this._customKeyEventHandler&&!1===this._customKeyEventHandler(e)||(function(e){return 16===e.keyCode||17===e.keyCode||18===e.keyCode}(e)||this.focus(),this.updateCursorStyle(e),this._keyPressHandled=!1);}_keyPress(e){let t;if(this._keyPressHandled=!1,this._keyDownHandled)return !1;if(this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return !1;if(this.cancel(e),e.charCode)t=e.charCode;else if(null===e.which||void 0===e.which)t=e.keyCode;else {if(0===e.which||0===e.charCode)return !1;t=e.which;}return !(!t||(e.altKey||e.ctrlKey||e.metaKey)&&!this._isThirdLevelShift(this.browser,e)||(t=String.fromCharCode(t),this._onKey.fire({key:t,domEvent:e}),this._showCursor(),this.coreService.triggerDataEvent(t,!0),this._keyPressHandled=!0,this._unprocessedDeadKey=!1,0))}_inputEvent(e){if(e.data&&"insertText"===e.inputType&&(!e.composed||!this._keyDownSeen)&&!this.optionsService.rawOptions.screenReaderMode){if(this._keyPressHandled)return !1;this._unprocessedDeadKey=!1;const t=e.data;return this.coreService.triggerDataEvent(t,!0),this.cancel(e),!0}return !1}resize(e,t){e!==this.cols||t!==this.rows?super.resize(e,t):this._charSizeService&&!this._charSizeService.hasValidSize&&this._charSizeService.measure();}_afterResize(e,t){var i,s;null===(i=this._charSizeService)||void 0===i||i.measure(),null===(s=this.viewport)||void 0===s||s.syncScrollArea(!0);}clear(){if(0!==this.buffer.ybase||0!==this.buffer.y){this.buffer.clearAllMarkers(),this.buffer.lines.set(0,this.buffer.lines.get(this.buffer.ybase+this.buffer.y)),this.buffer.lines.length=1,this.buffer.ydisp=0,this.buffer.ybase=0,this.buffer.y=0;for(let e=1;e<this.rows;e++)this.buffer.lines.push(this.buffer.getBlankLine(g.DEFAULT_ATTR_DATA));this.refresh(0,this.rows-1),this._onScroll.fire({position:this.buffer.ydisp,source:0});}}reset(){var e,t;this.options.rows=this.rows,this.options.cols=this.cols;const i=this._customKeyEventHandler;this._setup(),super.reset(),null===(e=this._selectionService)||void 0===e||e.reset(),this._decorationService.reset(),this._customKeyEventHandler=i,this.refresh(0,this.rows-1),null===(t=this.viewport)||void 0===t||t.syncScrollArea();}clearTextureAtlas(){var e;null===(e=this._renderService)||void 0===e||e.clearTextureAtlas();}_reportFocus(){var e;(null===(e=this.element)||void 0===e?void 0:e.classList.contains("focus"))?this.coreService.triggerDataEvent(o.C0.ESC+"[I"):this.coreService.triggerDataEvent(o.C0.ESC+"[O");}_reportWindowsOptions(e){if(this._renderService)switch(e){case a.WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:const e=this._renderService.dimensions.css.canvas.width.toFixed(0),t=this._renderService.dimensions.css.canvas.height.toFixed(0);this.coreService.triggerDataEvent(`${o.C0.ESC}[4;${t};${e}t`);break;case a.WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:const i=this._renderService.dimensions.css.cell.width.toFixed(0),s=this._renderService.dimensions.css.cell.height.toFixed(0);this.coreService.triggerDataEvent(`${o.C0.ESC}[6;${s};${i}t`);}}cancel(e,t){if(this.options.cancelEvents||t)return e.preventDefault(),e.stopPropagation(),!1}}t.Terminal=I;},9924:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TimeBasedDebouncer=void 0,t.TimeBasedDebouncer=class{constructor(e,t=1e3){this._renderCallback=e,this._debounceThresholdMS=t,this._lastRefreshMs=0,this._additionalRefreshRequested=!1;}dispose(){this._refreshTimeoutID&&clearTimeout(this._refreshTimeoutID);}refresh(e,t,i){this._rowCount=i,e=void 0!==e?e:0,t=void 0!==t?t:this._rowCount-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,e):e,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,t):t;const s=Date.now();if(s-this._lastRefreshMs>=this._debounceThresholdMS)this._lastRefreshMs=s,this._innerRefresh();else if(!this._additionalRefreshRequested){const e=s-this._lastRefreshMs,t=this._debounceThresholdMS-e;this._additionalRefreshRequested=!0,this._refreshTimeoutID=window.setTimeout((()=>{this._lastRefreshMs=Date.now(),this._innerRefresh(),this._additionalRefreshRequested=!1,this._refreshTimeoutID=void 0;}),t);}}_innerRefresh(){if(void 0===this._rowStart||void 0===this._rowEnd||void 0===this._rowCount)return;const e=Math.max(this._rowStart,0),t=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._renderCallback(e,t);}};},1680:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.Viewport=void 0;const n=i(844),o=i(3656),a=i(4725),h=i(2585);let c=class extends n.Disposable{constructor(e,t,i,s,r,n,a,h,c){super(),this._scrollLines=e,this._viewportElement=t,this._scrollArea=i,this._bufferService=s,this._optionsService=r,this._charSizeService=n,this._renderService=a,this._coreBrowserService=h,this.scrollBarWidth=0,this._currentRowHeight=0,this._currentDeviceCellHeight=0,this._lastRecordedBufferLength=0,this._lastRecordedViewportHeight=0,this._lastRecordedBufferHeight=0,this._lastTouchY=0,this._lastScrollTop=0,this._wheelPartialScroll=0,this._refreshAnimationFrame=null,this._ignoreNextScrollEvent=!1,this._smoothScrollState={startTime:0,origin:-1,target:-1},this.scrollBarWidth=this._viewportElement.offsetWidth-this._scrollArea.offsetWidth||15,this.register((0, o.addDisposableDomListener)(this._viewportElement,"scroll",this._handleScroll.bind(this))),this._activeBuffer=this._bufferService.buffer,this.register(this._bufferService.buffers.onBufferActivate((e=>this._activeBuffer=e.activeBuffer))),this._renderDimensions=this._renderService.dimensions,this.register(this._renderService.onDimensionsChange((e=>this._renderDimensions=e))),this._handleThemeChange(c.colors),this.register(c.onChangeColors((e=>this._handleThemeChange(e)))),this.register(this._optionsService.onSpecificOptionChange("scrollback",(()=>this.syncScrollArea()))),setTimeout((()=>this.syncScrollArea()),0);}_handleThemeChange(e){this._viewportElement.style.backgroundColor=e.background.css;}_refresh(e){if(e)return this._innerRefresh(),void(null!==this._refreshAnimationFrame&&this._coreBrowserService.window.cancelAnimationFrame(this._refreshAnimationFrame));null===this._refreshAnimationFrame&&(this._refreshAnimationFrame=this._coreBrowserService.window.requestAnimationFrame((()=>this._innerRefresh())));}_innerRefresh(){if(this._charSizeService.height>0){this._currentRowHeight=this._renderService.dimensions.device.cell.height/this._coreBrowserService.dpr,this._currentDeviceCellHeight=this._renderService.dimensions.device.cell.height,this._lastRecordedViewportHeight=this._viewportElement.offsetHeight;const e=Math.round(this._currentRowHeight*this._lastRecordedBufferLength)+(this._lastRecordedViewportHeight-this._renderService.dimensions.css.canvas.height);this._lastRecordedBufferHeight!==e&&(this._lastRecordedBufferHeight=e,this._scrollArea.style.height=this._lastRecordedBufferHeight+"px");}const e=this._bufferService.buffer.ydisp*this._currentRowHeight;this._viewportElement.scrollTop!==e&&(this._ignoreNextScrollEvent=!0,this._viewportElement.scrollTop=e),this._refreshAnimationFrame=null;}syncScrollArea(e=!1){if(this._lastRecordedBufferLength!==this._bufferService.buffer.lines.length)return this._lastRecordedBufferLength=this._bufferService.buffer.lines.length,void this._refresh(e);this._lastRecordedViewportHeight===this._renderService.dimensions.css.canvas.height&&this._lastScrollTop===this._activeBuffer.ydisp*this._currentRowHeight&&this._renderDimensions.device.cell.height===this._currentDeviceCellHeight||this._refresh(e);}_handleScroll(e){if(this._lastScrollTop=this._viewportElement.scrollTop,!this._viewportElement.offsetParent)return;if(this._ignoreNextScrollEvent)return this._ignoreNextScrollEvent=!1,void this._scrollLines(0);const t=Math.round(this._lastScrollTop/this._currentRowHeight)-this._bufferService.buffer.ydisp;this._scrollLines(t);}_smoothScroll(){if(this._isDisposed||-1===this._smoothScrollState.origin||-1===this._smoothScrollState.target)return;const e=this._smoothScrollPercent();this._viewportElement.scrollTop=this._smoothScrollState.origin+Math.round(e*(this._smoothScrollState.target-this._smoothScrollState.origin)),e<1?this._coreBrowserService.window.requestAnimationFrame((()=>this._smoothScroll())):this._clearSmoothScrollState();}_smoothScrollPercent(){return this._optionsService.rawOptions.smoothScrollDuration&&this._smoothScrollState.startTime?Math.max(Math.min((Date.now()-this._smoothScrollState.startTime)/this._optionsService.rawOptions.smoothScrollDuration,1),0):1}_clearSmoothScrollState(){this._smoothScrollState.startTime=0,this._smoothScrollState.origin=-1,this._smoothScrollState.target=-1;}_bubbleScroll(e,t){const i=this._viewportElement.scrollTop+this._lastRecordedViewportHeight;return !(t<0&&0!==this._viewportElement.scrollTop||t>0&&i<this._lastRecordedBufferHeight)||(e.cancelable&&e.preventDefault(),!1)}handleWheel(e){const t=this._getPixelsScrolled(e);return 0!==t&&(this._optionsService.rawOptions.smoothScrollDuration?(this._smoothScrollState.startTime=Date.now(),this._smoothScrollPercent()<1?(this._smoothScrollState.origin=this._viewportElement.scrollTop,-1===this._smoothScrollState.target?this._smoothScrollState.target=this._viewportElement.scrollTop+t:this._smoothScrollState.target+=t,this._smoothScrollState.target=Math.max(Math.min(this._smoothScrollState.target,this._viewportElement.scrollHeight),0),this._smoothScroll()):this._clearSmoothScrollState()):this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))}_getPixelsScrolled(e){if(0===e.deltaY||e.shiftKey)return 0;let t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_LINE?t*=this._currentRowHeight:e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._currentRowHeight*this._bufferService.rows),t}getBufferElements(e,t){var i;let s,r="";const n=[],o=null!=t?t:this._bufferService.buffer.lines.length,a=this._bufferService.buffer.lines;for(let t=e;t<o;t++){const e=a.get(t);if(!e)continue;const o=null===(i=a.get(t+1))||void 0===i?void 0:i.isWrapped;if(r+=e.translateToString(!o),!o||t===a.length-1){const e=document.createElement("div");e.textContent=r,n.push(e),r.length>0&&(s=e),r="";}}return {bufferElements:n,cursorElement:s}}getLinesScrolled(e){if(0===e.deltaY||e.shiftKey)return 0;let t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_PIXEL?(t/=this._currentRowHeight+0,this._wheelPartialScroll+=t,t=Math.floor(Math.abs(this._wheelPartialScroll))*(this._wheelPartialScroll>0?1:-1),this._wheelPartialScroll%=1):e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._bufferService.rows),t}_applyScrollModifier(e,t){const i=this._optionsService.rawOptions.fastScrollModifier;return "alt"===i&&t.altKey||"ctrl"===i&&t.ctrlKey||"shift"===i&&t.shiftKey?e*this._optionsService.rawOptions.fastScrollSensitivity*this._optionsService.rawOptions.scrollSensitivity:e*this._optionsService.rawOptions.scrollSensitivity}handleTouchStart(e){this._lastTouchY=e.touches[0].pageY;}handleTouchMove(e){const t=this._lastTouchY-e.touches[0].pageY;return this._lastTouchY=e.touches[0].pageY,0!==t&&(this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))}};c=s([r(3,h.IBufferService),r(4,h.IOptionsService),r(5,a.ICharSizeService),r(6,a.IRenderService),r(7,a.ICoreBrowserService),r(8,a.IThemeService)],c),t.Viewport=c;},3107:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.BufferDecorationRenderer=void 0;const n=i(3656),o=i(4725),a=i(844),h=i(2585);let c=class extends a.Disposable{constructor(e,t,i,s){super(),this._screenElement=e,this._bufferService=t,this._decorationService=i,this._renderService=s,this._decorationElements=new Map,this._altBufferIsActive=!1,this._dimensionsChanged=!1,this._container=document.createElement("div"),this._container.classList.add("xterm-decoration-container"),this._screenElement.appendChild(this._container),this.register(this._renderService.onRenderedViewportChange((()=>this._doRefreshDecorations()))),this.register(this._renderService.onDimensionsChange((()=>{this._dimensionsChanged=!0,this._queueRefresh();}))),this.register((0, n.addDisposableDomListener)(window,"resize",(()=>this._queueRefresh()))),this.register(this._bufferService.buffers.onBufferActivate((()=>{this._altBufferIsActive=this._bufferService.buffer===this._bufferService.buffers.alt;}))),this.register(this._decorationService.onDecorationRegistered((()=>this._queueRefresh()))),this.register(this._decorationService.onDecorationRemoved((e=>this._removeDecoration(e)))),this.register((0, a.toDisposable)((()=>{this._container.remove(),this._decorationElements.clear();})));}_queueRefresh(){void 0===this._animationFrame&&(this._animationFrame=this._renderService.addRefreshCallback((()=>{this._doRefreshDecorations(),this._animationFrame=void 0;})));}_doRefreshDecorations(){for(const e of this._decorationService.decorations)this._renderDecoration(e);this._dimensionsChanged=!1;}_renderDecoration(e){this._refreshStyle(e),this._dimensionsChanged&&this._refreshXPosition(e);}_createElement(e){var t,i;const s=document.createElement("div");s.classList.add("xterm-decoration"),s.classList.toggle("xterm-decoration-top-layer","top"===(null===(t=null==e?void 0:e.options)||void 0===t?void 0:t.layer)),s.style.width=`${Math.round((e.options.width||1)*this._renderService.dimensions.css.cell.width)}px`,s.style.height=(e.options.height||1)*this._renderService.dimensions.css.cell.height+"px",s.style.top=(e.marker.line-this._bufferService.buffers.active.ydisp)*this._renderService.dimensions.css.cell.height+"px",s.style.lineHeight=`${this._renderService.dimensions.css.cell.height}px`;const r=null!==(i=e.options.x)&&void 0!==i?i:0;return r&&r>this._bufferService.cols&&(s.style.display="none"),this._refreshXPosition(e,s),s}_refreshStyle(e){const t=e.marker.line-this._bufferService.buffers.active.ydisp;if(t<0||t>=this._bufferService.rows)e.element&&(e.element.style.display="none",e.onRenderEmitter.fire(e.element));else {let i=this._decorationElements.get(e);i||(i=this._createElement(e),e.element=i,this._decorationElements.set(e,i),this._container.appendChild(i)),i.style.top=t*this._renderService.dimensions.css.cell.height+"px",i.style.display=this._altBufferIsActive?"none":"block",e.onRenderEmitter.fire(i);}}_refreshXPosition(e,t=e.element){var i;if(!t)return;const s=null!==(i=e.options.x)&&void 0!==i?i:0;"right"===(e.options.anchor||"left")?t.style.right=s?s*this._renderService.dimensions.css.cell.width+"px":"":t.style.left=s?s*this._renderService.dimensions.css.cell.width+"px":"";}_removeDecoration(e){var t;null===(t=this._decorationElements.get(e))||void 0===t||t.remove(),this._decorationElements.delete(e),e.dispose();}};c=s([r(1,h.IBufferService),r(2,h.IDecorationService),r(3,o.IRenderService)],c),t.BufferDecorationRenderer=c;},5871:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ColorZoneStore=void 0,t.ColorZoneStore=class{constructor(){this._zones=[],this._zonePool=[],this._zonePoolIndex=0,this._linePadding={full:0,left:0,center:0,right:0};}get zones(){return this._zonePool.length=Math.min(this._zonePool.length,this._zones.length),this._zones}clear(){this._zones.length=0,this._zonePoolIndex=0;}addDecoration(e){if(e.options.overviewRulerOptions){for(const t of this._zones)if(t.color===e.options.overviewRulerOptions.color&&t.position===e.options.overviewRulerOptions.position){if(this._lineIntersectsZone(t,e.marker.line))return;if(this._lineAdjacentToZone(t,e.marker.line,e.options.overviewRulerOptions.position))return void this._addLineToZone(t,e.marker.line)}if(this._zonePoolIndex<this._zonePool.length)return this._zonePool[this._zonePoolIndex].color=e.options.overviewRulerOptions.color,this._zonePool[this._zonePoolIndex].position=e.options.overviewRulerOptions.position,this._zonePool[this._zonePoolIndex].startBufferLine=e.marker.line,this._zonePool[this._zonePoolIndex].endBufferLine=e.marker.line,void this._zones.push(this._zonePool[this._zonePoolIndex++]);this._zones.push({color:e.options.overviewRulerOptions.color,position:e.options.overviewRulerOptions.position,startBufferLine:e.marker.line,endBufferLine:e.marker.line}),this._zonePool.push(this._zones[this._zones.length-1]),this._zonePoolIndex++;}}setPadding(e){this._linePadding=e;}_lineIntersectsZone(e,t){return t>=e.startBufferLine&&t<=e.endBufferLine}_lineAdjacentToZone(e,t,i){return t>=e.startBufferLine-this._linePadding[i||"full"]&&t<=e.endBufferLine+this._linePadding[i||"full"]}_addLineToZone(e,t){e.startBufferLine=Math.min(e.startBufferLine,t),e.endBufferLine=Math.max(e.endBufferLine,t);}};},5744:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.OverviewRulerRenderer=void 0;const n=i(5871),o=i(3656),a=i(4725),h=i(844),c=i(2585),l={full:0,left:0,center:0,right:0},d={full:0,left:0,center:0,right:0},_={full:0,left:0,center:0,right:0};let u=class extends h.Disposable{constructor(e,t,i,s,r,o,a){var c;super(),this._viewportElement=e,this._screenElement=t,this._bufferService=i,this._decorationService=s,this._renderService=r,this._optionsService=o,this._coreBrowseService=a,this._colorZoneStore=new n.ColorZoneStore,this._shouldUpdateDimensions=!0,this._shouldUpdateAnchor=!0,this._lastKnownBufferLength=0,this._canvas=document.createElement("canvas"),this._canvas.classList.add("xterm-decoration-overview-ruler"),this._refreshCanvasDimensions(),null===(c=this._viewportElement.parentElement)||void 0===c||c.insertBefore(this._canvas,this._viewportElement);const l=this._canvas.getContext("2d");if(!l)throw new Error("Ctx cannot be null");this._ctx=l,this._registerDecorationListeners(),this._registerBufferChangeListeners(),this._registerDimensionChangeListeners(),this.register((0, h.toDisposable)((()=>{var e;null===(e=this._canvas)||void 0===e||e.remove();})));}get _width(){return this._optionsService.options.overviewRulerWidth||0}_registerDecorationListeners(){this.register(this._decorationService.onDecorationRegistered((()=>this._queueRefresh(void 0,!0)))),this.register(this._decorationService.onDecorationRemoved((()=>this._queueRefresh(void 0,!0))));}_registerBufferChangeListeners(){this.register(this._renderService.onRenderedViewportChange((()=>this._queueRefresh()))),this.register(this._bufferService.buffers.onBufferActivate((()=>{this._canvas.style.display=this._bufferService.buffer===this._bufferService.buffers.alt?"none":"block";}))),this.register(this._bufferService.onScroll((()=>{this._lastKnownBufferLength!==this._bufferService.buffers.normal.lines.length&&(this._refreshDrawHeightConstants(),this._refreshColorZonePadding());})));}_registerDimensionChangeListeners(){this.register(this._renderService.onRender((()=>{this._containerHeight&&this._containerHeight===this._screenElement.clientHeight||(this._queueRefresh(!0),this._containerHeight=this._screenElement.clientHeight);}))),this.register(this._optionsService.onSpecificOptionChange("overviewRulerWidth",(()=>this._queueRefresh(!0)))),this.register((0, o.addDisposableDomListener)(this._coreBrowseService.window,"resize",(()=>this._queueRefresh(!0)))),this._queueRefresh(!0);}_refreshDrawConstants(){const e=Math.floor(this._canvas.width/3),t=Math.ceil(this._canvas.width/3);d.full=this._canvas.width,d.left=e,d.center=t,d.right=e,this._refreshDrawHeightConstants(),_.full=0,_.left=0,_.center=d.left,_.right=d.left+d.center;}_refreshDrawHeightConstants(){l.full=Math.round(2*this._coreBrowseService.dpr);const e=this._canvas.height/this._bufferService.buffer.lines.length,t=Math.round(Math.max(Math.min(e,12),6)*this._coreBrowseService.dpr);l.left=t,l.center=t,l.right=t;}_refreshColorZonePadding(){this._colorZoneStore.setPadding({full:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*l.full),left:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*l.left),center:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*l.center),right:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*l.right)}),this._lastKnownBufferLength=this._bufferService.buffers.normal.lines.length;}_refreshCanvasDimensions(){this._canvas.style.width=`${this._width}px`,this._canvas.width=Math.round(this._width*this._coreBrowseService.dpr),this._canvas.style.height=`${this._screenElement.clientHeight}px`,this._canvas.height=Math.round(this._screenElement.clientHeight*this._coreBrowseService.dpr),this._refreshDrawConstants(),this._refreshColorZonePadding();}_refreshDecorations(){this._shouldUpdateDimensions&&this._refreshCanvasDimensions(),this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height),this._colorZoneStore.clear();for(const e of this._decorationService.decorations)this._colorZoneStore.addDecoration(e);this._ctx.lineWidth=1;const e=this._colorZoneStore.zones;for(const t of e)"full"!==t.position&&this._renderColorZone(t);for(const t of e)"full"===t.position&&this._renderColorZone(t);this._shouldUpdateDimensions=!1,this._shouldUpdateAnchor=!1;}_renderColorZone(e){this._ctx.fillStyle=e.color,this._ctx.fillRect(_[e.position||"full"],Math.round((this._canvas.height-1)*(e.startBufferLine/this._bufferService.buffers.active.lines.length)-l[e.position||"full"]/2),d[e.position||"full"],Math.round((this._canvas.height-1)*((e.endBufferLine-e.startBufferLine)/this._bufferService.buffers.active.lines.length)+l[e.position||"full"]));}_queueRefresh(e,t){this._shouldUpdateDimensions=e||this._shouldUpdateDimensions,this._shouldUpdateAnchor=t||this._shouldUpdateAnchor,void 0===this._animationFrame&&(this._animationFrame=this._coreBrowseService.window.requestAnimationFrame((()=>{this._refreshDecorations(),this._animationFrame=void 0;})));}};u=s([r(2,c.IBufferService),r(3,c.IDecorationService),r(4,a.IRenderService),r(5,c.IOptionsService),r(6,a.ICoreBrowserService)],u),t.OverviewRulerRenderer=u;},2950:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CompositionHelper=void 0;const n=i(4725),o=i(2585),a=i(2584);let h=class{constructor(e,t,i,s,r,n){this._textarea=e,this._compositionView=t,this._bufferService=i,this._optionsService=s,this._coreService=r,this._renderService=n,this._isComposing=!1,this._isSendingComposition=!1,this._compositionPosition={start:0,end:0},this._dataAlreadySent="";}get isComposing(){return this._isComposing}compositionstart(){this._isComposing=!0,this._compositionPosition.start=this._textarea.value.length,this._compositionView.textContent="",this._dataAlreadySent="",this._compositionView.classList.add("active");}compositionupdate(e){this._compositionView.textContent=e.data,this.updateCompositionElements(),setTimeout((()=>{this._compositionPosition.end=this._textarea.value.length;}),0);}compositionend(){this._finalizeComposition(!0);}keydown(e){if(this._isComposing||this._isSendingComposition){if(229===e.keyCode)return !1;if(16===e.keyCode||17===e.keyCode||18===e.keyCode)return !1;this._finalizeComposition(!1);}return 229!==e.keyCode||(this._handleAnyTextareaChanges(),!1)}_finalizeComposition(e){if(this._compositionView.classList.remove("active"),this._isComposing=!1,e){const e={start:this._compositionPosition.start,end:this._compositionPosition.end};this._isSendingComposition=!0,setTimeout((()=>{if(this._isSendingComposition){let t;this._isSendingComposition=!1,e.start+=this._dataAlreadySent.length,t=this._isComposing?this._textarea.value.substring(e.start,e.end):this._textarea.value.substring(e.start),t.length>0&&this._coreService.triggerDataEvent(t,!0);}}),0);}else {this._isSendingComposition=!1;const e=this._textarea.value.substring(this._compositionPosition.start,this._compositionPosition.end);this._coreService.triggerDataEvent(e,!0);}}_handleAnyTextareaChanges(){const e=this._textarea.value;setTimeout((()=>{if(!this._isComposing){const t=this._textarea.value,i=t.replace(e,"");this._dataAlreadySent=i,t.length>e.length?this._coreService.triggerDataEvent(i,!0):t.length<e.length?this._coreService.triggerDataEvent(`${a.C0.DEL}`,!0):t.length===e.length&&t!==e&&this._coreService.triggerDataEvent(t,!0);}}),0);}updateCompositionElements(e){if(this._isComposing){if(this._bufferService.buffer.isCursorInViewport){const e=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),t=this._renderService.dimensions.css.cell.height,i=this._bufferService.buffer.y*this._renderService.dimensions.css.cell.height,s=e*this._renderService.dimensions.css.cell.width;this._compositionView.style.left=s+"px",this._compositionView.style.top=i+"px",this._compositionView.style.height=t+"px",this._compositionView.style.lineHeight=t+"px",this._compositionView.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._compositionView.style.fontSize=this._optionsService.rawOptions.fontSize+"px";const r=this._compositionView.getBoundingClientRect();this._textarea.style.left=s+"px",this._textarea.style.top=i+"px",this._textarea.style.width=Math.max(r.width,1)+"px",this._textarea.style.height=Math.max(r.height,1)+"px",this._textarea.style.lineHeight=r.height+"px";}e||setTimeout((()=>this.updateCompositionElements(!0)),0);}}};h=s([r(2,o.IBufferService),r(3,o.IOptionsService),r(4,o.ICoreService),r(5,n.IRenderService)],h),t.CompositionHelper=h;},9806:(e,t)=>{function i(e,t,i){const s=i.getBoundingClientRect(),r=e.getComputedStyle(i),n=parseInt(r.getPropertyValue("padding-left")),o=parseInt(r.getPropertyValue("padding-top"));return [t.clientX-s.left-n,t.clientY-s.top-o]}Object.defineProperty(t,"__esModule",{value:!0}),t.getCoords=t.getCoordsRelativeToElement=void 0,t.getCoordsRelativeToElement=i,t.getCoords=function(e,t,s,r,n,o,a,h,c){if(!o)return;const l=i(e,t,s);return l?(l[0]=Math.ceil((l[0]+(c?a/2:0))/a),l[1]=Math.ceil(l[1]/h),l[0]=Math.min(Math.max(l[0],1),r+(c?1:0)),l[1]=Math.min(Math.max(l[1],1),n),l):void 0};},9504:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.moveToCellSequence=void 0;const s=i(2584);function r(e,t,i,s){const r=e-n(e,i),a=t-n(t,i),l=Math.abs(r-a)-function(e,t,i){let s=0;const r=e-n(e,i),a=t-n(t,i);for(let n=0;n<Math.abs(r-a);n++){const a="A"===o(e,t)?-1:1,h=i.buffer.lines.get(r+a*n);(null==h?void 0:h.isWrapped)&&s++;}return s}(e,t,i);return c(l,h(o(e,t),s))}function n(e,t){let i=0,s=t.buffer.lines.get(e),r=null==s?void 0:s.isWrapped;for(;r&&e>=0&&e<t.rows;)i++,s=t.buffer.lines.get(--e),r=null==s?void 0:s.isWrapped;return i}function o(e,t){return e>t?"A":"B"}function a(e,t,i,s,r,n){let o=e,a=t,h="";for(;o!==i||a!==s;)o+=r?1:-1,r&&o>n.cols-1?(h+=n.buffer.translateBufferLineToString(a,!1,e,o),o=0,e=0,a++):!r&&o<0&&(h+=n.buffer.translateBufferLineToString(a,!1,0,e+1),o=n.cols-1,e=o,a--);return h+n.buffer.translateBufferLineToString(a,!1,e,o)}function h(e,t){const i=t?"O":"[";return s.C0.ESC+i+e}function c(e,t){e=Math.floor(e);let i="";for(let s=0;s<e;s++)i+=t;return i}t.moveToCellSequence=function(e,t,i,s){const o=i.buffer.x,l=i.buffer.y;if(!i.buffer.hasScrollback)return function(e,t,i,s,o,l){return 0===r(t,s,o,l).length?"":c(a(e,t,e,t-n(t,o),!1,o).length,h("D",l))}(o,l,0,t,i,s)+r(l,t,i,s)+function(e,t,i,s,o,l){let d;d=r(t,s,o,l).length>0?s-n(s,o):t;const _=s,u=function(e,t,i,s,o,a){let h;return h=r(i,s,o,a).length>0?s-n(s,o):t,e<i&&h<=s||e>=i&&h<s?"C":"D"}(e,t,i,s,o,l);return c(a(e,d,i,_,"C"===u,o).length,h(u,l))}(o,l,e,t,i,s);let d;if(l===t)return d=o>e?"D":"C",c(Math.abs(o-e),h(d,s));d=l>t?"D":"C";const _=Math.abs(l-t);return c(function(e,t){return t.cols-e}(l>t?e:o,i)+(_-1)*i.cols+1+((l>t?o:e)-1),h(d,s))};},1296:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.DomRenderer=void 0;const n=i(3787),o=i(2223),a=i(6171),h=i(4725),c=i(8055),l=i(8460),d=i(844),_=i(2585),u="xterm-dom-renderer-owner-",f="xterm-focus";let v=1,g=class extends d.Disposable{constructor(e,t,i,s,r,o,h,c,_,f){super(),this._element=e,this._screenElement=t,this._viewportElement=i,this._linkifier2=s,this._charSizeService=o,this._optionsService=h,this._bufferService=c,this._coreBrowserService=_,this._themeService=f,this._terminalClass=v++,this._rowElements=[],this._cellToRowElements=[],this.onRequestRedraw=this.register(new l.EventEmitter).event,this._rowContainer=document.createElement("div"),this._rowContainer.classList.add("xterm-rows"),this._rowContainer.style.lineHeight="normal",this._rowContainer.setAttribute("aria-hidden","true"),this._refreshRowElements(this._bufferService.cols,this._bufferService.rows),this._selectionContainer=document.createElement("div"),this._selectionContainer.classList.add("xterm-selection"),this._selectionContainer.setAttribute("aria-hidden","true"),this.dimensions=(0, a.createRenderDimensions)(),this._updateDimensions(),this.register(this._optionsService.onOptionChange((()=>this._handleOptionsChanged()))),this.register(this._themeService.onChangeColors((e=>this._injectCss(e)))),this._injectCss(this._themeService.colors),this._rowFactory=r.createInstance(n.DomRendererRowFactory,document),this._element.classList.add(u+this._terminalClass),this._screenElement.appendChild(this._rowContainer),this._screenElement.appendChild(this._selectionContainer),this.register(this._linkifier2.onShowLinkUnderline((e=>this._handleLinkHover(e)))),this.register(this._linkifier2.onHideLinkUnderline((e=>this._handleLinkLeave(e)))),this.register((0, d.toDisposable)((()=>{this._element.classList.remove(u+this._terminalClass),this._rowContainer.remove(),this._selectionContainer.remove(),this._themeStyleElement.remove(),this._dimensionsStyleElement.remove();})));}_updateDimensions(){const e=this._coreBrowserService.dpr;this.dimensions.device.char.width=this._charSizeService.width*e,this.dimensions.device.char.height=Math.ceil(this._charSizeService.height*e),this.dimensions.device.cell.width=this.dimensions.device.char.width+Math.round(this._optionsService.rawOptions.letterSpacing),this.dimensions.device.cell.height=Math.floor(this.dimensions.device.char.height*this._optionsService.rawOptions.lineHeight),this.dimensions.device.char.left=0,this.dimensions.device.char.top=0,this.dimensions.device.canvas.width=this.dimensions.device.cell.width*this._bufferService.cols,this.dimensions.device.canvas.height=this.dimensions.device.cell.height*this._bufferService.rows,this.dimensions.css.canvas.width=Math.round(this.dimensions.device.canvas.width/e),this.dimensions.css.canvas.height=Math.round(this.dimensions.device.canvas.height/e),this.dimensions.css.cell.width=this.dimensions.css.canvas.width/this._bufferService.cols,this.dimensions.css.cell.height=this.dimensions.css.canvas.height/this._bufferService.rows;for(const e of this._rowElements)e.style.width=`${this.dimensions.css.canvas.width}px`,e.style.height=`${this.dimensions.css.cell.height}px`,e.style.lineHeight=`${this.dimensions.css.cell.height}px`,e.style.overflow="hidden";this._dimensionsStyleElement||(this._dimensionsStyleElement=document.createElement("style"),this._screenElement.appendChild(this._dimensionsStyleElement));const t=`${this._terminalSelector} .xterm-rows span { display: inline-block; height: 100%; vertical-align: top; width: ${this.dimensions.css.cell.width}px}`;this._dimensionsStyleElement.textContent=t,this._selectionContainer.style.height=this._viewportElement.style.height,this._screenElement.style.width=`${this.dimensions.css.canvas.width}px`,this._screenElement.style.height=`${this.dimensions.css.canvas.height}px`;}_injectCss(e){this._themeStyleElement||(this._themeStyleElement=document.createElement("style"),this._screenElement.appendChild(this._themeStyleElement));let t=`${this._terminalSelector} .xterm-rows { color: ${e.foreground.css}; font-family: ${this._optionsService.rawOptions.fontFamily}; font-size: ${this._optionsService.rawOptions.fontSize}px;}`;t+=`${this._terminalSelector} .xterm-rows .xterm-dim { color: ${c.color.multiplyOpacity(e.foreground,.5).css};}`,t+=`${this._terminalSelector} span:not(.${n.BOLD_CLASS}) { font-weight: ${this._optionsService.rawOptions.fontWeight};}${this._terminalSelector} span.${n.BOLD_CLASS} { font-weight: ${this._optionsService.rawOptions.fontWeightBold};}${this._terminalSelector} span.${n.ITALIC_CLASS} { font-style: italic;}`,t+="@keyframes blink_box_shadow_"+this._terminalClass+" { 50% {  box-shadow: none; }}",t+="@keyframes blink_block_"+this._terminalClass+" { 0% {"+`  background-color: ${e.cursor.css};`+`  color: ${e.cursorAccent.css}; } 50% {`+`  background-color: ${e.cursorAccent.css};`+`  color: ${e.cursor.css}; }}`,t+=`${this._terminalSelector} .xterm-rows:not(.xterm-focus) .${n.CURSOR_CLASS}.${n.CURSOR_STYLE_BLOCK_CLASS} ,${this._terminalSelector} .xterm-rows:not(.xterm-focus) .${n.CURSOR_CLASS}.${n.CURSOR_STYLE_BAR_CLASS} ,${this._terminalSelector} .xterm-rows:not(.xterm-focus) .${n.CURSOR_CLASS}.${n.CURSOR_STYLE_UNDERLINE_CLASS} { outline: 1px solid ${e.cursor.css}; outline-offset: -1px;}${this._terminalSelector} .xterm-rows.xterm-focus .${n.CURSOR_CLASS}.${n.CURSOR_BLINK_CLASS}:not(.${n.CURSOR_STYLE_BLOCK_CLASS}) { animation: blink_box_shadow_`+this._terminalClass+" 1s step-end infinite;}"+`${this._terminalSelector} .xterm-rows.xterm-focus .${n.CURSOR_CLASS}.${n.CURSOR_BLINK_CLASS}.${n.CURSOR_STYLE_BLOCK_CLASS} { animation: blink_block_`+this._terminalClass+" 1s step-end infinite;}"+`${this._terminalSelector} .xterm-rows.xterm-focus .${n.CURSOR_CLASS}.${n.CURSOR_STYLE_BLOCK_CLASS} {`+` background-color: ${e.cursor.css};`+` color: ${e.cursorAccent.css};}`+`${this._terminalSelector} .xterm-rows .${n.CURSOR_CLASS}.${n.CURSOR_STYLE_BAR_CLASS} {`+` box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${e.cursor.css} inset;}`+`${this._terminalSelector} .xterm-rows .${n.CURSOR_CLASS}.${n.CURSOR_STYLE_UNDERLINE_CLASS} {`+` box-shadow: 0 -1px 0 ${e.cursor.css} inset;}`,t+=`${this._terminalSelector} .xterm-selection { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}${this._terminalSelector}.focus .xterm-selection div { position: absolute; background-color: ${e.selectionBackgroundOpaque.css};}${this._terminalSelector} .xterm-selection div { position: absolute; background-color: ${e.selectionInactiveBackgroundOpaque.css};}`;for(const[i,s]of e.ansi.entries())t+=`${this._terminalSelector} .xterm-fg-${i} { color: ${s.css}; }${this._terminalSelector} .xterm-fg-${i}.${n.DIM_CLASS} { color: ${c.color.multiplyOpacity(s,.5).css}; }${this._terminalSelector} .xterm-bg-${i} { background-color: ${s.css}; }`;t+=`${this._terminalSelector} .xterm-fg-${o.INVERTED_DEFAULT_COLOR} { color: ${c.color.opaque(e.background).css}; }${this._terminalSelector} .xterm-fg-${o.INVERTED_DEFAULT_COLOR}.${n.DIM_CLASS} { color: ${c.color.multiplyOpacity(c.color.opaque(e.background),.5).css}; }${this._terminalSelector} .xterm-bg-${o.INVERTED_DEFAULT_COLOR} { background-color: ${e.foreground.css}; }`,this._themeStyleElement.textContent=t;}handleDevicePixelRatioChange(){this._updateDimensions();}_refreshRowElements(e,t){for(let e=this._rowElements.length;e<=t;e++){const e=document.createElement("div");this._rowContainer.appendChild(e),this._rowElements.push(e);}for(;this._rowElements.length>t;)this._rowContainer.removeChild(this._rowElements.pop());}handleResize(e,t){this._refreshRowElements(e,t),this._updateDimensions();}handleCharSizeChanged(){this._updateDimensions();}handleBlur(){this._rowContainer.classList.remove(f);}handleFocus(){this._rowContainer.classList.add(f);}handleSelectionChanged(e,t,i){for(;this._selectionContainer.children.length;)this._selectionContainer.removeChild(this._selectionContainer.children[0]);if(this._rowFactory.handleSelectionChanged(e,t,i),this.renderRows(0,this._bufferService.rows-1),!e||!t)return;const s=e[1]-this._bufferService.buffer.ydisp,r=t[1]-this._bufferService.buffer.ydisp,n=Math.max(s,0),o=Math.min(r,this._bufferService.rows-1);if(n>=this._bufferService.rows||o<0)return;const a=document.createDocumentFragment();if(i){const i=e[0]>t[0];a.appendChild(this._createSelectionElement(n,i?t[0]:e[0],i?e[0]:t[0],o-n+1));}else {const i=s===n?e[0]:0,h=n===r?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(n,i,h));const c=o-n-1;if(a.appendChild(this._createSelectionElement(n+1,0,this._bufferService.cols,c)),n!==o){const e=r===o?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(o,0,e));}}this._selectionContainer.appendChild(a);}_createSelectionElement(e,t,i,s=1){const r=document.createElement("div");return r.style.height=s*this.dimensions.css.cell.height+"px",r.style.top=e*this.dimensions.css.cell.height+"px",r.style.left=t*this.dimensions.css.cell.width+"px",r.style.width=this.dimensions.css.cell.width*(i-t)+"px",r}handleCursorMove(){}_handleOptionsChanged(){this._updateDimensions(),this._injectCss(this._themeService.colors);}clear(){for(const e of this._rowElements)e.replaceChildren();}renderRows(e,t){const i=this._bufferService.buffer.ybase+this._bufferService.buffer.y,s=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),r=this._optionsService.rawOptions.cursorBlink;for(let n=e;n<=t;n++){const e=this._rowElements[n],t=n+this._bufferService.buffer.ydisp,o=this._bufferService.buffer.lines.get(t),a=this._optionsService.rawOptions.cursorStyle;this._cellToRowElements[n]&&this._cellToRowElements[n].length===this._bufferService.cols||(this._cellToRowElements[n]=new Int16Array(this._bufferService.cols)),e.replaceChildren(this._rowFactory.createRow(o,t,t===i,a,s,r,this.dimensions.css.cell.width,this._bufferService.cols,this._cellToRowElements[n]));}}get _terminalSelector(){return `.${u}${this._terminalClass}`}_handleLinkHover(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!0);}_handleLinkLeave(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!1);}_setCellUnderline(e,t,i,s,r,n){i<0&&(e=0),s<0&&(t=0);const o=this._cellToRowElements.length-1;i=Math.max(Math.min(i,o),0),s=Math.max(Math.min(s,o),0);const a=this._cellToRowElements[i],h=this._cellToRowElements[s];if(!(e>=a.length||t>=h.length)&&(e=a[e],t=h[t],-1!==e&&-1!==t))for(;e!==t||i!==s;){const t=this._rowElements[i];if(!t)return;const s=t.children[e];s&&(s.style.textDecoration=n?"underline":"none"),++e>=r&&(e=0,i++);}}};g=s([r(4,_.IInstantiationService),r(5,h.ICharSizeService),r(6,_.IOptionsService),r(7,_.IBufferService),r(8,h.ICoreBrowserService),r(9,h.IThemeService)],g),t.DomRenderer=g;},3787:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.DomRendererRowFactory=t.CURSOR_STYLE_UNDERLINE_CLASS=t.CURSOR_STYLE_BAR_CLASS=t.CURSOR_STYLE_BLOCK_CLASS=t.CURSOR_BLINK_CLASS=t.CURSOR_CLASS=t.STRIKETHROUGH_CLASS=t.OVERLINE_CLASS=t.UNDERLINE_CLASS=t.ITALIC_CLASS=t.DIM_CLASS=t.BOLD_CLASS=void 0;const n=i(2223),o=i(643),a=i(511),h=i(2585),c=i(8055),l=i(4725),d=i(4269),_=i(6171),u=i(3734);t.BOLD_CLASS="xterm-bold",t.DIM_CLASS="xterm-dim",t.ITALIC_CLASS="xterm-italic",t.UNDERLINE_CLASS="xterm-underline",t.OVERLINE_CLASS="xterm-overline",t.STRIKETHROUGH_CLASS="xterm-strikethrough",t.CURSOR_CLASS="xterm-cursor",t.CURSOR_BLINK_CLASS="xterm-cursor-blink",t.CURSOR_STYLE_BLOCK_CLASS="xterm-cursor-block",t.CURSOR_STYLE_BAR_CLASS="xterm-cursor-bar",t.CURSOR_STYLE_UNDERLINE_CLASS="xterm-cursor-underline";let f=class{constructor(e,t,i,s,r,n,o){this._document=e,this._characterJoinerService=t,this._optionsService=i,this._coreBrowserService=s,this._coreService=r,this._decorationService=n,this._themeService=o,this._workCell=new a.CellData,this._columnSelectMode=!1;}handleSelectionChanged(e,t,i){this._selectionStart=e,this._selectionEnd=t,this._columnSelectMode=i;}createRow(e,i,s,r,a,h,l,_,f){const g=this._document.createDocumentFragment(),p=this._characterJoinerService.getJoinedCharacters(i);let S=0;for(let t=Math.min(e.length,_)-1;t>=0;t--)if(e.loadCell(t,this._workCell).getCode()!==o.NULL_CELL_CODE||s&&t===a){S=t+1;break}const m=this._themeService.colors;let C=-1,b=0;for(;b<S;b++){e.loadCell(b,this._workCell);let _=this._workCell.getWidth();if(0===_){f[b]=C;continue}let S=!1,y=b,w=this._workCell;if(p.length>0&&b===p[0][0]){S=!0;const t=p.shift();w=new d.JoinedCellData(this._workCell,e.translateToString(!0,t[0],t[1]),t[1]-t[0]),y=t[1]-1,_=w.getWidth();}const E=this._document.createElement("span");if(_>1&&(E.style.width=l*_+"px"),S&&(E.style.display="inline",a>=b&&a<=y&&(a=b)),!this._coreService.isCursorHidden&&s&&b===a)switch(E.classList.add(t.CURSOR_CLASS),h&&E.classList.add(t.CURSOR_BLINK_CLASS),r){case"bar":E.classList.add(t.CURSOR_STYLE_BAR_CLASS);break;case"underline":E.classList.add(t.CURSOR_STYLE_UNDERLINE_CLASS);break;default:E.classList.add(t.CURSOR_STYLE_BLOCK_CLASS);}if(w.isBold()&&E.classList.add(t.BOLD_CLASS),w.isItalic()&&E.classList.add(t.ITALIC_CLASS),w.isDim()&&E.classList.add(t.DIM_CLASS),w.isInvisible()?E.textContent=o.WHITESPACE_CELL_CHAR:E.textContent=w.getChars()||o.WHITESPACE_CELL_CHAR,w.isUnderline()&&(E.classList.add(`${t.UNDERLINE_CLASS}-${w.extended.underlineStyle}`)," "===E.textContent&&(E.textContent=" "),!w.isUnderlineColorDefault()))if(w.isUnderlineColorRGB())E.style.textDecorationColor=`rgb(${u.AttributeData.toColorRGB(w.getUnderlineColor()).join(",")})`;else {let e=w.getUnderlineColor();this._optionsService.rawOptions.drawBoldTextInBrightColors&&w.isBold()&&e<8&&(e+=8),E.style.textDecorationColor=m.ansi[e].css;}w.isOverline()&&(E.classList.add(t.OVERLINE_CLASS)," "===E.textContent&&(E.textContent=" ")),w.isStrikethrough()&&E.classList.add(t.STRIKETHROUGH_CLASS);let L=w.getFgColor(),k=w.getFgColorMode(),R=w.getBgColor(),D=w.getBgColorMode();const A=!!w.isInverse();if(A){const e=L;L=R,R=e;const t=k;k=D,D=t;}let x,B,T=!1;this._decorationService.forEachDecorationAtCell(b,i,void 0,(e=>{"top"!==e.options.layer&&T||(e.backgroundColorRGB&&(D=50331648,R=e.backgroundColorRGB.rgba>>8&16777215,x=e.backgroundColorRGB),e.foregroundColorRGB&&(k=50331648,L=e.foregroundColorRGB.rgba>>8&16777215,B=e.foregroundColorRGB),T="top"===e.options.layer);}));const M=this._isCellInSelection(b,i);let O;switch(T||m.selectionForeground&&M&&(k=50331648,L=m.selectionForeground.rgba>>8&16777215,B=m.selectionForeground),M&&(x=this._coreBrowserService.isFocused?m.selectionBackgroundOpaque:m.selectionInactiveBackgroundOpaque,T=!0),T&&E.classList.add("xterm-decoration-top"),D){case 16777216:case 33554432:O=m.ansi[R],E.classList.add(`xterm-bg-${R}`);break;case 50331648:O=c.rgba.toColor(R>>16,R>>8&255,255&R),this._addStyle(E,`background-color:#${v((R>>>0).toString(16),"0",6)}`);break;default:A?(O=m.foreground,E.classList.add(`xterm-bg-${n.INVERTED_DEFAULT_COLOR}`)):O=m.background;}switch(x||w.isDim()&&(x=c.color.multiplyOpacity(O,.5)),k){case 16777216:case 33554432:w.isBold()&&L<8&&this._optionsService.rawOptions.drawBoldTextInBrightColors&&(L+=8),this._applyMinimumContrast(E,O,m.ansi[L],w,x,void 0)||E.classList.add(`xterm-fg-${L}`);break;case 50331648:const e=c.rgba.toColor(L>>16&255,L>>8&255,255&L);this._applyMinimumContrast(E,O,e,w,x,B)||this._addStyle(E,`color:#${v(L.toString(16),"0",6)}`);break;default:this._applyMinimumContrast(E,O,m.foreground,w,x,void 0)||A&&E.classList.add(`xterm-fg-${n.INVERTED_DEFAULT_COLOR}`);}g.appendChild(E),f[b]=++C,b=y;}return b<_-1&&f.subarray(b).fill(++C),g}_applyMinimumContrast(e,t,i,s,r,n){if(1===this._optionsService.rawOptions.minimumContrastRatio||(0, _.excludeFromContrastRatioDemands)(s.getCode()))return !1;let o;return r||n||(o=this._themeService.colors.contrastCache.getColor(t.rgba,i.rgba)),void 0===o&&(o=c.color.ensureContrastRatio(r||t,n||i,this._optionsService.rawOptions.minimumContrastRatio),this._themeService.colors.contrastCache.setColor((r||t).rgba,(n||i).rgba,null!=o?o:null)),!!o&&(this._addStyle(e,`color:${o.css}`),!0)}_addStyle(e,t){e.setAttribute("style",`${e.getAttribute("style")||""}${t};`);}_isCellInSelection(e,t){const i=this._selectionStart,s=this._selectionEnd;return !(!i||!s)&&(this._columnSelectMode?i[0]<=s[0]?e>=i[0]&&t>=i[1]&&e<s[0]&&t<=s[1]:e<i[0]&&t>=i[1]&&e>=s[0]&&t<=s[1]:t>i[1]&&t<s[1]||i[1]===s[1]&&t===i[1]&&e>=i[0]&&e<s[0]||i[1]<s[1]&&t===s[1]&&e<s[0]||i[1]<s[1]&&t===i[1]&&e>=i[0])}};function v(e,t,i){for(;e.length<i;)e=t+e;return e}f=s([r(1,l.ICharacterJoinerService),r(2,h.IOptionsService),r(3,l.ICoreBrowserService),r(4,h.ICoreService),r(5,h.IDecorationService),r(6,l.IThemeService)],f),t.DomRendererRowFactory=f;},2223:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TEXT_BASELINE=t.DIM_OPACITY=t.INVERTED_DEFAULT_COLOR=void 0;const s=i(6114);t.INVERTED_DEFAULT_COLOR=257,t.DIM_OPACITY=.5,t.TEXT_BASELINE=s.isFirefox||s.isLegacyEdge?"bottom":"ideographic";},6171:(e,t)=>{function i(e){return 57508<=e&&e<=57558}Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderDimensions=t.excludeFromContrastRatioDemands=t.isRestrictedPowerlineGlyph=t.isPowerlineGlyph=t.throwIfFalsy=void 0,t.throwIfFalsy=function(e){if(!e)throw new Error("value must not be falsy");return e},t.isPowerlineGlyph=i,t.isRestrictedPowerlineGlyph=function(e){return 57520<=e&&e<=57527},t.excludeFromContrastRatioDemands=function(e){return i(e)||function(e){return 9472<=e&&e<=9631}(e)},t.createRenderDimensions=function(){return {css:{canvas:{width:0,height:0},cell:{width:0,height:0}},device:{canvas:{width:0,height:0},cell:{width:0,height:0},char:{width:0,height:0,left:0,top:0}}}};},456:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionModel=void 0,t.SelectionModel=class{constructor(e){this._bufferService=e,this.isSelectAllActive=!1,this.selectionStartLength=0;}clearSelection(){this.selectionStart=void 0,this.selectionEnd=void 0,this.isSelectAllActive=!1,this.selectionStartLength=0;}get finalSelectionStart(){return this.isSelectAllActive?[0,0]:this.selectionEnd&&this.selectionStart&&this.areSelectionValuesReversed()?this.selectionEnd:this.selectionStart}get finalSelectionEnd(){if(this.isSelectAllActive)return [this._bufferService.cols,this._bufferService.buffer.ybase+this._bufferService.rows-1];if(this.selectionStart){if(!this.selectionEnd||this.areSelectionValuesReversed()){const e=this.selectionStart[0]+this.selectionStartLength;return e>this._bufferService.cols?e%this._bufferService.cols==0?[this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)-1]:[e%this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)]:[e,this.selectionStart[1]]}if(this.selectionStartLength&&this.selectionEnd[1]===this.selectionStart[1]){const e=this.selectionStart[0]+this.selectionStartLength;return e>this._bufferService.cols?[e%this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)]:[Math.max(e,this.selectionEnd[0]),this.selectionEnd[1]]}return this.selectionEnd}}areSelectionValuesReversed(){const e=this.selectionStart,t=this.selectionEnd;return !(!e||!t)&&(e[1]>t[1]||e[1]===t[1]&&e[0]>t[0])}handleTrim(e){return this.selectionStart&&(this.selectionStart[1]-=e),this.selectionEnd&&(this.selectionEnd[1]-=e),this.selectionEnd&&this.selectionEnd[1]<0?(this.clearSelection(),!0):(this.selectionStart&&this.selectionStart[1]<0&&(this.selectionStart[1]=0),!1)}};},428:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CharSizeService=void 0;const n=i(2585),o=i(8460),a=i(844);let h=class extends a.Disposable{constructor(e,t,i){super(),this._optionsService=i,this.width=0,this.height=0,this._onCharSizeChange=this.register(new o.EventEmitter),this.onCharSizeChange=this._onCharSizeChange.event,this._measureStrategy=new c(e,t,this._optionsService),this.register(this._optionsService.onMultipleOptionChange(["fontFamily","fontSize"],(()=>this.measure())));}get hasValidSize(){return this.width>0&&this.height>0}measure(){const e=this._measureStrategy.measure();e.width===this.width&&e.height===this.height||(this.width=e.width,this.height=e.height,this._onCharSizeChange.fire());}};h=s([r(2,n.IOptionsService)],h),t.CharSizeService=h;class c{constructor(e,t,i){this._document=e,this._parentElement=t,this._optionsService=i,this._result={width:0,height:0},this._measureElement=this._document.createElement("span"),this._measureElement.classList.add("xterm-char-measure-element"),this._measureElement.textContent="W",this._measureElement.setAttribute("aria-hidden","true"),this._parentElement.appendChild(this._measureElement);}measure(){this._measureElement.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._measureElement.style.fontSize=`${this._optionsService.rawOptions.fontSize}px`;const e=this._measureElement.getBoundingClientRect();return 0!==e.width&&0!==e.height&&(this._result.width=e.width,this._result.height=Math.ceil(e.height)),this._result}}},4269:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CharacterJoinerService=t.JoinedCellData=void 0;const n=i(3734),o=i(643),a=i(511),h=i(2585);class c extends n.AttributeData{constructor(e,t,i){super(),this.content=0,this.combinedData="",this.fg=e.fg,this.bg=e.bg,this.combinedData=t,this._width=i;}isCombined(){return 2097152}getWidth(){return this._width}getChars(){return this.combinedData}getCode(){return 2097151}setFromCharData(e){throw new Error("not implemented")}getAsCharData(){return [this.fg,this.getChars(),this.getWidth(),this.getCode()]}}t.JoinedCellData=c;let l=class e{constructor(e){this._bufferService=e,this._characterJoiners=[],this._nextCharacterJoinerId=0,this._workCell=new a.CellData;}register(e){const t={id:this._nextCharacterJoinerId++,handler:e};return this._characterJoiners.push(t),t.id}deregister(e){for(let t=0;t<this._characterJoiners.length;t++)if(this._characterJoiners[t].id===e)return this._characterJoiners.splice(t,1),!0;return !1}getJoinedCharacters(e){if(0===this._characterJoiners.length)return [];const t=this._bufferService.buffer.lines.get(e);if(!t||0===t.length)return [];const i=[],s=t.translateToString(!0);let r=0,n=0,a=0,h=t.getFg(0),c=t.getBg(0);for(let e=0;e<t.getTrimmedLength();e++)if(t.loadCell(e,this._workCell),0!==this._workCell.getWidth()){if(this._workCell.fg!==h||this._workCell.bg!==c){if(e-r>1){const e=this._getJoinedRanges(s,a,n,t,r);for(let t=0;t<e.length;t++)i.push(e[t]);}r=e,a=n,h=this._workCell.fg,c=this._workCell.bg;}n+=this._workCell.getChars().length||o.WHITESPACE_CELL_CHAR.length;}if(this._bufferService.cols-r>1){const e=this._getJoinedRanges(s,a,n,t,r);for(let t=0;t<e.length;t++)i.push(e[t]);}return i}_getJoinedRanges(t,i,s,r,n){const o=t.substring(i,s);let a=[];try{a=this._characterJoiners[0].handler(o);}catch(e){console.error(e);}for(let t=1;t<this._characterJoiners.length;t++)try{const i=this._characterJoiners[t].handler(o);for(let t=0;t<i.length;t++)e._mergeRanges(a,i[t]);}catch(e){console.error(e);}return this._stringRangesToCellRanges(a,r,n),a}_stringRangesToCellRanges(e,t,i){let s=0,r=!1,n=0,a=e[s];if(a){for(let h=i;h<this._bufferService.cols;h++){const i=t.getWidth(h),c=t.getString(h).length||o.WHITESPACE_CELL_CHAR.length;if(0!==i){if(!r&&a[0]<=n&&(a[0]=h,r=!0),a[1]<=n){if(a[1]=h,a=e[++s],!a)break;a[0]<=n?(a[0]=h,r=!0):r=!1;}n+=c;}}a&&(a[1]=this._bufferService.cols);}}static _mergeRanges(e,t){let i=!1;for(let s=0;s<e.length;s++){const r=e[s];if(i){if(t[1]<=r[0])return e[s-1][1]=t[1],e;if(t[1]<=r[1])return e[s-1][1]=Math.max(t[1],r[1]),e.splice(s,1),e;e.splice(s,1),s--;}else {if(t[1]<=r[0])return e.splice(s,0,t),e;if(t[1]<=r[1])return r[0]=Math.min(t[0],r[0]),e;t[0]<r[1]&&(r[0]=Math.min(t[0],r[0]),i=!0);}}return i?e[e.length-1][1]=t[1]:e.push(t),e}};l=s([r(0,h.IBufferService)],l),t.CharacterJoinerService=l;},5114:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CoreBrowserService=void 0,t.CoreBrowserService=class{constructor(e,t){this._textarea=e,this.window=t,this._isFocused=!1,this._cachedIsFocused=void 0,this._textarea.addEventListener("focus",(()=>this._isFocused=!0)),this._textarea.addEventListener("blur",(()=>this._isFocused=!1));}get dpr(){return this.window.devicePixelRatio}get isFocused(){return void 0===this._cachedIsFocused&&(this._cachedIsFocused=this._isFocused&&this._textarea.ownerDocument.hasFocus(),queueMicrotask((()=>this._cachedIsFocused=void 0))),this._cachedIsFocused}};},8934:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseService=void 0;const n=i(4725),o=i(9806);let a=class{constructor(e,t){this._renderService=e,this._charSizeService=t;}getCoords(e,t,i,s,r){return (0, o.getCoords)(window,e,t,i,s,this._charSizeService.hasValidSize,this._renderService.dimensions.css.cell.width,this._renderService.dimensions.css.cell.height,r)}getMouseReportCoords(e,t){const i=(0, o.getCoordsRelativeToElement)(window,e,t);if(!(!this._charSizeService.hasValidSize||i[0]<0||i[1]<0||i[0]>=this._renderService.dimensions.css.canvas.width||i[1]>=this._renderService.dimensions.css.canvas.height))return {col:Math.floor(i[0]/this._renderService.dimensions.css.cell.width),row:Math.floor(i[1]/this._renderService.dimensions.css.cell.height),x:Math.floor(i[0]),y:Math.floor(i[1])}}};a=s([r(0,n.IRenderService),r(1,n.ICharSizeService)],a),t.MouseService=a;},3230:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.RenderService=void 0;const n=i(6193),o=i(8460),a=i(844),h=i(5596),c=i(3656),l=i(2585),d=i(4725),_=i(7226);let u=class extends a.Disposable{constructor(e,t,i,s,r,a,l,d){if(super(),this._rowCount=e,this._charSizeService=s,this._pausedResizeTask=new _.DebouncedIdleTask,this._isPaused=!1,this._needsFullRefresh=!1,this._isNextRenderRedrawOnly=!0,this._needsSelectionRefresh=!1,this._canvasWidth=0,this._canvasHeight=0,this._selectionState={start:void 0,end:void 0,columnSelectMode:!1},this._onDimensionsChange=this.register(new o.EventEmitter),this.onDimensionsChange=this._onDimensionsChange.event,this._onRenderedViewportChange=this.register(new o.EventEmitter),this.onRenderedViewportChange=this._onRenderedViewportChange.event,this._onRender=this.register(new o.EventEmitter),this.onRender=this._onRender.event,this._onRefreshRequest=this.register(new o.EventEmitter),this.onRefreshRequest=this._onRefreshRequest.event,this.register({dispose:()=>{var e;return null===(e=this._renderer)||void 0===e?void 0:e.dispose()}}),this._renderDebouncer=new n.RenderDebouncer(l.window,((e,t)=>this._renderRows(e,t))),this.register(this._renderDebouncer),this._screenDprMonitor=new h.ScreenDprMonitor(l.window),this._screenDprMonitor.setListener((()=>this.handleDevicePixelRatioChange())),this.register(this._screenDprMonitor),this.register(a.onResize((()=>this._fullRefresh()))),this.register(a.buffers.onBufferActivate((()=>{var e;return null===(e=this._renderer)||void 0===e?void 0:e.clear()}))),this.register(i.onOptionChange((()=>this._handleOptionsChanged()))),this.register(this._charSizeService.onCharSizeChange((()=>this.handleCharSizeChanged()))),this.register(r.onDecorationRegistered((()=>this._fullRefresh()))),this.register(r.onDecorationRemoved((()=>this._fullRefresh()))),this.register(i.onMultipleOptionChange(["customGlyphs","drawBoldTextInBrightColors","letterSpacing","lineHeight","fontFamily","fontSize","fontWeight","fontWeightBold","minimumContrastRatio"],(()=>{this.clear(),this.handleResize(a.cols,a.rows),this._fullRefresh();}))),this.register(i.onMultipleOptionChange(["cursorBlink","cursorStyle"],(()=>this.refreshRows(a.buffer.y,a.buffer.y,!0)))),this.register((0, c.addDisposableDomListener)(l.window,"resize",(()=>this.handleDevicePixelRatioChange()))),this.register(d.onChangeColors((()=>this._fullRefresh()))),"IntersectionObserver"in l.window){const e=new l.window.IntersectionObserver((e=>this._handleIntersectionChange(e[e.length-1])),{threshold:0});e.observe(t),this.register({dispose:()=>e.disconnect()});}}get dimensions(){return this._renderer.dimensions}_handleIntersectionChange(e){this._isPaused=void 0===e.isIntersecting?0===e.intersectionRatio:!e.isIntersecting,this._isPaused||this._charSizeService.hasValidSize||this._charSizeService.measure(),!this._isPaused&&this._needsFullRefresh&&(this._pausedResizeTask.flush(),this.refreshRows(0,this._rowCount-1),this._needsFullRefresh=!1);}refreshRows(e,t,i=!1){this._isPaused?this._needsFullRefresh=!0:(i||(this._isNextRenderRedrawOnly=!1),this._renderDebouncer.refresh(e,t,this._rowCount));}_renderRows(e,t){this._renderer&&(e=Math.min(e,this._rowCount-1),t=Math.min(t,this._rowCount-1),this._renderer.renderRows(e,t),this._needsSelectionRefresh&&(this._renderer.handleSelectionChanged(this._selectionState.start,this._selectionState.end,this._selectionState.columnSelectMode),this._needsSelectionRefresh=!1),this._isNextRenderRedrawOnly||this._onRenderedViewportChange.fire({start:e,end:t}),this._onRender.fire({start:e,end:t}),this._isNextRenderRedrawOnly=!0);}resize(e,t){this._rowCount=t,this._fireOnCanvasResize();}_handleOptionsChanged(){this._renderer&&(this.refreshRows(0,this._rowCount-1),this._fireOnCanvasResize());}_fireOnCanvasResize(){this._renderer&&(this._renderer.dimensions.css.canvas.width===this._canvasWidth&&this._renderer.dimensions.css.canvas.height===this._canvasHeight||this._onDimensionsChange.fire(this._renderer.dimensions));}hasRenderer(){return !!this._renderer}setRenderer(e){var t;null===(t=this._renderer)||void 0===t||t.dispose(),this._renderer=e,this._renderer.onRequestRedraw((e=>this.refreshRows(e.start,e.end,!0))),this._needsSelectionRefresh=!0,this._fullRefresh();}addRefreshCallback(e){return this._renderDebouncer.addRefreshCallback(e)}_fullRefresh(){this._isPaused?this._needsFullRefresh=!0:this.refreshRows(0,this._rowCount-1);}clearTextureAtlas(){var e,t;this._renderer&&(null===(t=(e=this._renderer).clearTextureAtlas)||void 0===t||t.call(e),this._fullRefresh());}handleDevicePixelRatioChange(){this._charSizeService.measure(),this._renderer&&(this._renderer.handleDevicePixelRatioChange(),this.refreshRows(0,this._rowCount-1));}handleResize(e,t){this._renderer&&(this._isPaused?this._pausedResizeTask.set((()=>this._renderer.handleResize(e,t))):this._renderer.handleResize(e,t),this._fullRefresh());}handleCharSizeChanged(){var e;null===(e=this._renderer)||void 0===e||e.handleCharSizeChanged();}handleBlur(){var e;null===(e=this._renderer)||void 0===e||e.handleBlur();}handleFocus(){var e;null===(e=this._renderer)||void 0===e||e.handleFocus();}handleSelectionChanged(e,t,i){var s;this._selectionState.start=e,this._selectionState.end=t,this._selectionState.columnSelectMode=i,null===(s=this._renderer)||void 0===s||s.handleSelectionChanged(e,t,i);}handleCursorMove(){var e;null===(e=this._renderer)||void 0===e||e.handleCursorMove();}clear(){var e;null===(e=this._renderer)||void 0===e||e.clear();}};u=s([r(2,l.IOptionsService),r(3,d.ICharSizeService),r(4,l.IDecorationService),r(5,l.IBufferService),r(6,d.ICoreBrowserService),r(7,d.IThemeService)],u),t.RenderService=u;},9312:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionService=void 0;const n=i(6114),o=i(456),a=i(511),h=i(8460),c=i(4725),l=i(2585),d=i(9806),_=i(9504),u=i(844),f=i(4841),v=String.fromCharCode(160),g=new RegExp(v,"g");let p=class extends u.Disposable{constructor(e,t,i,s,r,n,c,l,d){super(),this._element=e,this._screenElement=t,this._linkifier=i,this._bufferService=s,this._coreService=r,this._mouseService=n,this._optionsService=c,this._renderService=l,this._coreBrowserService=d,this._dragScrollAmount=0,this._enabled=!0,this._workCell=new a.CellData,this._mouseDownTimeStamp=0,this._oldHasSelection=!1,this._oldSelectionStart=void 0,this._oldSelectionEnd=void 0,this._onLinuxMouseSelection=this.register(new h.EventEmitter),this.onLinuxMouseSelection=this._onLinuxMouseSelection.event,this._onRedrawRequest=this.register(new h.EventEmitter),this.onRequestRedraw=this._onRedrawRequest.event,this._onSelectionChange=this.register(new h.EventEmitter),this.onSelectionChange=this._onSelectionChange.event,this._onRequestScrollLines=this.register(new h.EventEmitter),this.onRequestScrollLines=this._onRequestScrollLines.event,this._mouseMoveListener=e=>this._handleMouseMove(e),this._mouseUpListener=e=>this._handleMouseUp(e),this._coreService.onUserInput((()=>{this.hasSelection&&this.clearSelection();})),this._trimListener=this._bufferService.buffer.lines.onTrim((e=>this._handleTrim(e))),this.register(this._bufferService.buffers.onBufferActivate((e=>this._handleBufferActivate(e)))),this.enable(),this._model=new o.SelectionModel(this._bufferService),this._activeSelectionMode=0,this.register((0, u.toDisposable)((()=>{this._removeMouseDownListeners();})));}reset(){this.clearSelection();}disable(){this.clearSelection(),this._enabled=!1;}enable(){this._enabled=!0;}get selectionStart(){return this._model.finalSelectionStart}get selectionEnd(){return this._model.finalSelectionEnd}get hasSelection(){const e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;return !(!e||!t||e[0]===t[0]&&e[1]===t[1])}get selectionText(){const e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;if(!e||!t)return "";const i=this._bufferService.buffer,s=[];if(3===this._activeSelectionMode){if(e[0]===t[0])return "";const r=e[0]<t[0]?e[0]:t[0],n=e[0]<t[0]?t[0]:e[0];for(let o=e[1];o<=t[1];o++){const e=i.translateBufferLineToString(o,!0,r,n);s.push(e);}}else {const r=e[1]===t[1]?t[0]:void 0;s.push(i.translateBufferLineToString(e[1],!0,e[0],r));for(let r=e[1]+1;r<=t[1]-1;r++){const e=i.lines.get(r),t=i.translateBufferLineToString(r,!0);(null==e?void 0:e.isWrapped)?s[s.length-1]+=t:s.push(t);}if(e[1]!==t[1]){const e=i.lines.get(t[1]),r=i.translateBufferLineToString(t[1],!0,0,t[0]);e&&e.isWrapped?s[s.length-1]+=r:s.push(r);}}return s.map((e=>e.replace(g," "))).join(n.isWindows?"\r\n":"\n")}clearSelection(){this._model.clearSelection(),this._removeMouseDownListeners(),this.refresh(),this._onSelectionChange.fire();}refresh(e){this._refreshAnimationFrame||(this._refreshAnimationFrame=this._coreBrowserService.window.requestAnimationFrame((()=>this._refresh()))),n.isLinux&&e&&this.selectionText.length&&this._onLinuxMouseSelection.fire(this.selectionText);}_refresh(){this._refreshAnimationFrame=void 0,this._onRedrawRequest.fire({start:this._model.finalSelectionStart,end:this._model.finalSelectionEnd,columnSelectMode:3===this._activeSelectionMode});}_isClickInSelection(e){const t=this._getMouseBufferCoords(e),i=this._model.finalSelectionStart,s=this._model.finalSelectionEnd;return !!(i&&s&&t)&&this._areCoordsInSelection(t,i,s)}isCellInSelection(e,t){const i=this._model.finalSelectionStart,s=this._model.finalSelectionEnd;return !(!i||!s)&&this._areCoordsInSelection([e,t],i,s)}_areCoordsInSelection(e,t,i){return e[1]>t[1]&&e[1]<i[1]||t[1]===i[1]&&e[1]===t[1]&&e[0]>=t[0]&&e[0]<i[0]||t[1]<i[1]&&e[1]===i[1]&&e[0]<i[0]||t[1]<i[1]&&e[1]===t[1]&&e[0]>=t[0]}_selectWordAtCursor(e,t){var i,s;const r=null===(s=null===(i=this._linkifier.currentLink)||void 0===i?void 0:i.link)||void 0===s?void 0:s.range;if(r)return this._model.selectionStart=[r.start.x-1,r.start.y-1],this._model.selectionStartLength=(0, f.getRangeLength)(r,this._bufferService.cols),this._model.selectionEnd=void 0,!0;const n=this._getMouseBufferCoords(e);return !!n&&(this._selectWordAt(n,t),this._model.selectionEnd=void 0,!0)}selectAll(){this._model.isSelectAllActive=!0,this.refresh(),this._onSelectionChange.fire();}selectLines(e,t){this._model.clearSelection(),e=Math.max(e,0),t=Math.min(t,this._bufferService.buffer.lines.length-1),this._model.selectionStart=[0,e],this._model.selectionEnd=[this._bufferService.cols,t],this.refresh(),this._onSelectionChange.fire();}_handleTrim(e){this._model.handleTrim(e)&&this.refresh();}_getMouseBufferCoords(e){const t=this._mouseService.getCoords(e,this._screenElement,this._bufferService.cols,this._bufferService.rows,!0);if(t)return t[0]--,t[1]--,t[1]+=this._bufferService.buffer.ydisp,t}_getMouseEventScrollAmount(e){let t=(0, d.getCoordsRelativeToElement)(this._coreBrowserService.window,e,this._screenElement)[1];const i=this._renderService.dimensions.css.canvas.height;return t>=0&&t<=i?0:(t>i&&(t-=i),t=Math.min(Math.max(t,-50),50),t/=50,t/Math.abs(t)+Math.round(14*t))}shouldForceSelection(e){return n.isMac?e.altKey&&this._optionsService.rawOptions.macOptionClickForcesSelection:e.shiftKey}handleMouseDown(e){if(this._mouseDownTimeStamp=e.timeStamp,(2!==e.button||!this.hasSelection)&&0===e.button){if(!this._enabled){if(!this.shouldForceSelection(e))return;e.stopPropagation();}e.preventDefault(),this._dragScrollAmount=0,this._enabled&&e.shiftKey?this._handleIncrementalClick(e):1===e.detail?this._handleSingleClick(e):2===e.detail?this._handleDoubleClick(e):3===e.detail&&this._handleTripleClick(e),this._addMouseDownListeners(),this.refresh(!0);}}_addMouseDownListeners(){this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.addEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.addEventListener("mouseup",this._mouseUpListener)),this._dragScrollIntervalTimer=this._coreBrowserService.window.setInterval((()=>this._dragScroll()),50);}_removeMouseDownListeners(){this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.removeEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.removeEventListener("mouseup",this._mouseUpListener)),this._coreBrowserService.window.clearInterval(this._dragScrollIntervalTimer),this._dragScrollIntervalTimer=void 0;}_handleIncrementalClick(e){this._model.selectionStart&&(this._model.selectionEnd=this._getMouseBufferCoords(e));}_handleSingleClick(e){if(this._model.selectionStartLength=0,this._model.isSelectAllActive=!1,this._activeSelectionMode=this.shouldColumnSelect(e)?3:0,this._model.selectionStart=this._getMouseBufferCoords(e),!this._model.selectionStart)return;this._model.selectionEnd=void 0;const t=this._bufferService.buffer.lines.get(this._model.selectionStart[1]);t&&t.length!==this._model.selectionStart[0]&&0===t.hasWidth(this._model.selectionStart[0])&&this._model.selectionStart[0]++;}_handleDoubleClick(e){this._selectWordAtCursor(e,!0)&&(this._activeSelectionMode=1);}_handleTripleClick(e){const t=this._getMouseBufferCoords(e);t&&(this._activeSelectionMode=2,this._selectLineAt(t[1]));}shouldColumnSelect(e){return e.altKey&&!(n.isMac&&this._optionsService.rawOptions.macOptionClickForcesSelection)}_handleMouseMove(e){if(e.stopImmediatePropagation(),!this._model.selectionStart)return;const t=this._model.selectionEnd?[this._model.selectionEnd[0],this._model.selectionEnd[1]]:null;if(this._model.selectionEnd=this._getMouseBufferCoords(e),!this._model.selectionEnd)return void this.refresh(!0);2===this._activeSelectionMode?this._model.selectionEnd[1]<this._model.selectionStart[1]?this._model.selectionEnd[0]=0:this._model.selectionEnd[0]=this._bufferService.cols:1===this._activeSelectionMode&&this._selectToWordAt(this._model.selectionEnd),this._dragScrollAmount=this._getMouseEventScrollAmount(e),3!==this._activeSelectionMode&&(this._dragScrollAmount>0?this._model.selectionEnd[0]=this._bufferService.cols:this._dragScrollAmount<0&&(this._model.selectionEnd[0]=0));const i=this._bufferService.buffer;if(this._model.selectionEnd[1]<i.lines.length){const e=i.lines.get(this._model.selectionEnd[1]);e&&0===e.hasWidth(this._model.selectionEnd[0])&&this._model.selectionEnd[0]++;}t&&t[0]===this._model.selectionEnd[0]&&t[1]===this._model.selectionEnd[1]||this.refresh(!0);}_dragScroll(){if(this._model.selectionEnd&&this._model.selectionStart&&this._dragScrollAmount){this._onRequestScrollLines.fire({amount:this._dragScrollAmount,suppressScrollEvent:!1});const e=this._bufferService.buffer;this._dragScrollAmount>0?(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=this._bufferService.cols),this._model.selectionEnd[1]=Math.min(e.ydisp+this._bufferService.rows,e.lines.length-1)):(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=0),this._model.selectionEnd[1]=e.ydisp),this.refresh();}}_handleMouseUp(e){const t=e.timeStamp-this._mouseDownTimeStamp;if(this._removeMouseDownListeners(),this.selectionText.length<=1&&t<500&&e.altKey&&this._optionsService.rawOptions.altClickMovesCursor){if(this._bufferService.buffer.ybase===this._bufferService.buffer.ydisp){const t=this._mouseService.getCoords(e,this._element,this._bufferService.cols,this._bufferService.rows,!1);if(t&&void 0!==t[0]&&void 0!==t[1]){const e=(0, _.moveToCellSequence)(t[0]-1,t[1]-1,this._bufferService,this._coreService.decPrivateModes.applicationCursorKeys);this._coreService.triggerDataEvent(e,!0);}}}else this._fireEventIfSelectionChanged();}_fireEventIfSelectionChanged(){const e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd,i=!(!e||!t||e[0]===t[0]&&e[1]===t[1]);i?e&&t&&(this._oldSelectionStart&&this._oldSelectionEnd&&e[0]===this._oldSelectionStart[0]&&e[1]===this._oldSelectionStart[1]&&t[0]===this._oldSelectionEnd[0]&&t[1]===this._oldSelectionEnd[1]||this._fireOnSelectionChange(e,t,i)):this._oldHasSelection&&this._fireOnSelectionChange(e,t,i);}_fireOnSelectionChange(e,t,i){this._oldSelectionStart=e,this._oldSelectionEnd=t,this._oldHasSelection=i,this._onSelectionChange.fire();}_handleBufferActivate(e){this.clearSelection(),this._trimListener.dispose(),this._trimListener=e.activeBuffer.lines.onTrim((e=>this._handleTrim(e)));}_convertViewportColToCharacterIndex(e,t){let i=t;for(let s=0;t>=s;s++){const r=e.loadCell(s,this._workCell).getChars().length;0===this._workCell.getWidth()?i--:r>1&&t!==s&&(i+=r-1);}return i}setSelection(e,t,i){this._model.clearSelection(),this._removeMouseDownListeners(),this._model.selectionStart=[e,t],this._model.selectionStartLength=i,this.refresh(),this._fireEventIfSelectionChanged();}rightClickSelect(e){this._isClickInSelection(e)||(this._selectWordAtCursor(e,!1)&&this.refresh(!0),this._fireEventIfSelectionChanged());}_getWordAt(e,t,i=!0,s=!0){if(e[0]>=this._bufferService.cols)return;const r=this._bufferService.buffer,n=r.lines.get(e[1]);if(!n)return;const o=r.translateBufferLineToString(e[1],!1);let a=this._convertViewportColToCharacterIndex(n,e[0]),h=a;const c=e[0]-a;let l=0,d=0,_=0,u=0;if(" "===o.charAt(a)){for(;a>0&&" "===o.charAt(a-1);)a--;for(;h<o.length&&" "===o.charAt(h+1);)h++;}else {let t=e[0],i=e[0];0===n.getWidth(t)&&(l++,t--),2===n.getWidth(i)&&(d++,i++);const s=n.getString(i).length;for(s>1&&(u+=s-1,h+=s-1);t>0&&a>0&&!this._isCharWordSeparator(n.loadCell(t-1,this._workCell));){n.loadCell(t-1,this._workCell);const e=this._workCell.getChars().length;0===this._workCell.getWidth()?(l++,t--):e>1&&(_+=e-1,a-=e-1),a--,t--;}for(;i<n.length&&h+1<o.length&&!this._isCharWordSeparator(n.loadCell(i+1,this._workCell));){n.loadCell(i+1,this._workCell);const e=this._workCell.getChars().length;2===this._workCell.getWidth()?(d++,i++):e>1&&(u+=e-1,h+=e-1),h++,i++;}}h++;let f=a+c-l+_,v=Math.min(this._bufferService.cols,h-a+l+d-_-u);if(t||""!==o.slice(a,h).trim()){if(i&&0===f&&32!==n.getCodePoint(0)){const t=r.lines.get(e[1]-1);if(t&&n.isWrapped&&32!==t.getCodePoint(this._bufferService.cols-1)){const t=this._getWordAt([this._bufferService.cols-1,e[1]-1],!1,!0,!1);if(t){const e=this._bufferService.cols-t.start;f-=e,v+=e;}}}if(s&&f+v===this._bufferService.cols&&32!==n.getCodePoint(this._bufferService.cols-1)){const t=r.lines.get(e[1]+1);if((null==t?void 0:t.isWrapped)&&32!==t.getCodePoint(0)){const t=this._getWordAt([0,e[1]+1],!1,!1,!0);t&&(v+=t.length);}}return {start:f,length:v}}}_selectWordAt(e,t){const i=this._getWordAt(e,t);if(i){for(;i.start<0;)i.start+=this._bufferService.cols,e[1]--;this._model.selectionStart=[i.start,e[1]],this._model.selectionStartLength=i.length;}}_selectToWordAt(e){const t=this._getWordAt(e,!0);if(t){let i=e[1];for(;t.start<0;)t.start+=this._bufferService.cols,i--;if(!this._model.areSelectionValuesReversed())for(;t.start+t.length>this._bufferService.cols;)t.length-=this._bufferService.cols,i++;this._model.selectionEnd=[this._model.areSelectionValuesReversed()?t.start:t.start+t.length,i];}}_isCharWordSeparator(e){return 0!==e.getWidth()&&this._optionsService.rawOptions.wordSeparator.indexOf(e.getChars())>=0}_selectLineAt(e){const t=this._bufferService.buffer.getWrappedRangeForLine(e),i={start:{x:0,y:t.first},end:{x:this._bufferService.cols-1,y:t.last}};this._model.selectionStart=[0,t.first],this._model.selectionEnd=void 0,this._model.selectionStartLength=(0, f.getRangeLength)(i,this._bufferService.cols);}};p=s([r(3,l.IBufferService),r(4,l.ICoreService),r(5,c.IMouseService),r(6,l.IOptionsService),r(7,c.IRenderService),r(8,c.ICoreBrowserService)],p),t.SelectionService=p;},4725:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IThemeService=t.ICharacterJoinerService=t.ISelectionService=t.IRenderService=t.IMouseService=t.ICoreBrowserService=t.ICharSizeService=void 0;const s=i(8343);t.ICharSizeService=(0, s.createDecorator)("CharSizeService"),t.ICoreBrowserService=(0, s.createDecorator)("CoreBrowserService"),t.IMouseService=(0, s.createDecorator)("MouseService"),t.IRenderService=(0, s.createDecorator)("RenderService"),t.ISelectionService=(0, s.createDecorator)("SelectionService"),t.ICharacterJoinerService=(0, s.createDecorator)("CharacterJoinerService"),t.IThemeService=(0, s.createDecorator)("ThemeService");},6731:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.ThemeService=t.DEFAULT_ANSI_COLORS=void 0;const n=i(7239),o=i(8055),a=i(8460),h=i(844),c=i(2585),l=o.css.toColor("#ffffff"),d=o.css.toColor("#000000"),_=o.css.toColor("#ffffff"),u=o.css.toColor("#000000"),f={css:"rgba(255, 255, 255, 0.3)",rgba:4294967117};t.DEFAULT_ANSI_COLORS=Object.freeze((()=>{const e=[o.css.toColor("#2e3436"),o.css.toColor("#cc0000"),o.css.toColor("#4e9a06"),o.css.toColor("#c4a000"),o.css.toColor("#3465a4"),o.css.toColor("#75507b"),o.css.toColor("#06989a"),o.css.toColor("#d3d7cf"),o.css.toColor("#555753"),o.css.toColor("#ef2929"),o.css.toColor("#8ae234"),o.css.toColor("#fce94f"),o.css.toColor("#729fcf"),o.css.toColor("#ad7fa8"),o.css.toColor("#34e2e2"),o.css.toColor("#eeeeec")],t=[0,95,135,175,215,255];for(let i=0;i<216;i++){const s=t[i/36%6|0],r=t[i/6%6|0],n=t[i%6];e.push({css:o.channels.toCss(s,r,n),rgba:o.channels.toRgba(s,r,n)});}for(let t=0;t<24;t++){const i=8+10*t;e.push({css:o.channels.toCss(i,i,i),rgba:o.channels.toRgba(i,i,i)});}return e})());let v=class extends h.Disposable{constructor(e){super(),this._optionsService=e,this._onChangeColors=this.register(new a.EventEmitter),this.onChangeColors=this._onChangeColors.event,this._contrastCache=new n.ColorContrastCache,this._colors={foreground:l,background:d,cursor:_,cursorAccent:u,selectionForeground:void 0,selectionBackgroundTransparent:f,selectionBackgroundOpaque:o.color.blend(d,f),selectionInactiveBackgroundTransparent:f,selectionInactiveBackgroundOpaque:o.color.blend(d,f),ansi:t.DEFAULT_ANSI_COLORS.slice(),contrastCache:this._contrastCache},this._updateRestoreColors(),this._setTheme(this._optionsService.rawOptions.theme),this.register(this._optionsService.onSpecificOptionChange("minimumContrastRatio",(()=>this._contrastCache.clear()))),this.register(this._optionsService.onSpecificOptionChange("theme",(()=>this._setTheme(this._optionsService.rawOptions.theme))));}get colors(){return this._colors}_setTheme(e={}){const i=this._colors;if(i.foreground=g(e.foreground,l),i.background=g(e.background,d),i.cursor=g(e.cursor,_),i.cursorAccent=g(e.cursorAccent,u),i.selectionBackgroundTransparent=g(e.selectionBackground,f),i.selectionBackgroundOpaque=o.color.blend(i.background,i.selectionBackgroundTransparent),i.selectionInactiveBackgroundTransparent=g(e.selectionInactiveBackground,i.selectionBackgroundTransparent),i.selectionInactiveBackgroundOpaque=o.color.blend(i.background,i.selectionInactiveBackgroundTransparent),i.selectionForeground=e.selectionForeground?g(e.selectionForeground,o.NULL_COLOR):void 0,i.selectionForeground===o.NULL_COLOR&&(i.selectionForeground=void 0),o.color.isOpaque(i.selectionBackgroundTransparent)){const e=.3;i.selectionBackgroundTransparent=o.color.opacity(i.selectionBackgroundTransparent,e);}if(o.color.isOpaque(i.selectionInactiveBackgroundTransparent)){const e=.3;i.selectionInactiveBackgroundTransparent=o.color.opacity(i.selectionInactiveBackgroundTransparent,e);}if(i.ansi=t.DEFAULT_ANSI_COLORS.slice(),i.ansi[0]=g(e.black,t.DEFAULT_ANSI_COLORS[0]),i.ansi[1]=g(e.red,t.DEFAULT_ANSI_COLORS[1]),i.ansi[2]=g(e.green,t.DEFAULT_ANSI_COLORS[2]),i.ansi[3]=g(e.yellow,t.DEFAULT_ANSI_COLORS[3]),i.ansi[4]=g(e.blue,t.DEFAULT_ANSI_COLORS[4]),i.ansi[5]=g(e.magenta,t.DEFAULT_ANSI_COLORS[5]),i.ansi[6]=g(e.cyan,t.DEFAULT_ANSI_COLORS[6]),i.ansi[7]=g(e.white,t.DEFAULT_ANSI_COLORS[7]),i.ansi[8]=g(e.brightBlack,t.DEFAULT_ANSI_COLORS[8]),i.ansi[9]=g(e.brightRed,t.DEFAULT_ANSI_COLORS[9]),i.ansi[10]=g(e.brightGreen,t.DEFAULT_ANSI_COLORS[10]),i.ansi[11]=g(e.brightYellow,t.DEFAULT_ANSI_COLORS[11]),i.ansi[12]=g(e.brightBlue,t.DEFAULT_ANSI_COLORS[12]),i.ansi[13]=g(e.brightMagenta,t.DEFAULT_ANSI_COLORS[13]),i.ansi[14]=g(e.brightCyan,t.DEFAULT_ANSI_COLORS[14]),i.ansi[15]=g(e.brightWhite,t.DEFAULT_ANSI_COLORS[15]),e.extendedAnsi){const s=Math.min(i.ansi.length-16,e.extendedAnsi.length);for(let r=0;r<s;r++)i.ansi[r+16]=g(e.extendedAnsi[r],t.DEFAULT_ANSI_COLORS[r+16]);}this._contrastCache.clear(),this._updateRestoreColors(),this._onChangeColors.fire(this.colors);}restoreColor(e){this._restoreColor(e),this._onChangeColors.fire(this.colors);}_restoreColor(e){if(void 0!==e)switch(e){case 256:this._colors.foreground=this._restoreColors.foreground;break;case 257:this._colors.background=this._restoreColors.background;break;case 258:this._colors.cursor=this._restoreColors.cursor;break;default:this._colors.ansi[e]=this._restoreColors.ansi[e];}else for(let e=0;e<this._restoreColors.ansi.length;++e)this._colors.ansi[e]=this._restoreColors.ansi[e];}modifyColors(e){e(this._colors),this._onChangeColors.fire(this.colors);}_updateRestoreColors(){this._restoreColors={foreground:this._colors.foreground,background:this._colors.background,cursor:this._colors.cursor,ansi:this._colors.ansi.slice()};}};function g(e,t){if(void 0!==e)try{return o.css.toColor(e)}catch(e){}return t}v=s([r(0,c.IOptionsService)],v),t.ThemeService=v;},6349:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CircularList=void 0;const s=i(8460),r=i(844);class n extends r.Disposable{constructor(e){super(),this._maxLength=e,this.onDeleteEmitter=this.register(new s.EventEmitter),this.onDelete=this.onDeleteEmitter.event,this.onInsertEmitter=this.register(new s.EventEmitter),this.onInsert=this.onInsertEmitter.event,this.onTrimEmitter=this.register(new s.EventEmitter),this.onTrim=this.onTrimEmitter.event,this._array=new Array(this._maxLength),this._startIndex=0,this._length=0;}get maxLength(){return this._maxLength}set maxLength(e){if(this._maxLength===e)return;const t=new Array(e);for(let i=0;i<Math.min(e,this.length);i++)t[i]=this._array[this._getCyclicIndex(i)];this._array=t,this._maxLength=e,this._startIndex=0;}get length(){return this._length}set length(e){if(e>this._length)for(let t=this._length;t<e;t++)this._array[t]=void 0;this._length=e;}get(e){return this._array[this._getCyclicIndex(e)]}set(e,t){this._array[this._getCyclicIndex(e)]=t;}push(e){this._array[this._getCyclicIndex(this._length)]=e,this._length===this._maxLength?(this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1)):this._length++;}recycle(){if(this._length!==this._maxLength)throw new Error("Can only recycle when the buffer is full");return this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1),this._array[this._getCyclicIndex(this._length-1)]}get isFull(){return this._length===this._maxLength}pop(){return this._array[this._getCyclicIndex(this._length---1)]}splice(e,t,...i){if(t){for(let i=e;i<this._length-t;i++)this._array[this._getCyclicIndex(i)]=this._array[this._getCyclicIndex(i+t)];this._length-=t,this.onDeleteEmitter.fire({index:e,amount:t});}for(let t=this._length-1;t>=e;t--)this._array[this._getCyclicIndex(t+i.length)]=this._array[this._getCyclicIndex(t)];for(let t=0;t<i.length;t++)this._array[this._getCyclicIndex(e+t)]=i[t];if(i.length&&this.onInsertEmitter.fire({index:e,amount:i.length}),this._length+i.length>this._maxLength){const e=this._length+i.length-this._maxLength;this._startIndex+=e,this._length=this._maxLength,this.onTrimEmitter.fire(e);}else this._length+=i.length;}trimStart(e){e>this._length&&(e=this._length),this._startIndex+=e,this._length-=e,this.onTrimEmitter.fire(e);}shiftElements(e,t,i){if(!(t<=0)){if(e<0||e>=this._length)throw new Error("start argument out of range");if(e+i<0)throw new Error("Cannot shift elements in list beyond index 0");if(i>0){for(let s=t-1;s>=0;s--)this.set(e+s+i,this.get(e+s));const s=e+t+i-this._length;if(s>0)for(this._length+=s;this._length>this._maxLength;)this._length--,this._startIndex++,this.onTrimEmitter.fire(1);}else for(let s=0;s<t;s++)this.set(e+s+i,this.get(e+s));}}_getCyclicIndex(e){return (this._startIndex+e)%this._maxLength}}t.CircularList=n;},1439:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clone=void 0,t.clone=function e(t,i=5){if("object"!=typeof t)return t;const s=Array.isArray(t)?[]:{};for(const r in t)s[r]=i<=1?t[r]:t[r]&&e(t[r],i-1);return s};},8055:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.contrastRatio=t.toPaddedHex=t.rgba=t.rgb=t.css=t.color=t.channels=t.NULL_COLOR=void 0;const s=i(6114);let r=0,n=0,o=0,a=0;var h,c,l;function d(e){const t=e.toString(16);return t.length<2?"0"+t:t}function _(e,t){return e<t?(t+.05)/(e+.05):(e+.05)/(t+.05)}t.NULL_COLOR={css:"#00000000",rgba:0},function(e){e.toCss=function(e,t,i,s){return void 0!==s?`#${d(e)}${d(t)}${d(i)}${d(s)}`:`#${d(e)}${d(t)}${d(i)}`},e.toRgba=function(e,t,i,s=255){return (e<<24|t<<16|i<<8|s)>>>0};}(h=t.channels||(t.channels={})),function(e){function t(e,t){return a=Math.round(255*t),[r,n,o]=l.toChannels(e.rgba),{css:h.toCss(r,n,o,a),rgba:h.toRgba(r,n,o,a)}}e.blend=function(e,t){if(a=(255&t.rgba)/255,1===a)return {css:t.css,rgba:t.rgba};const i=t.rgba>>24&255,s=t.rgba>>16&255,c=t.rgba>>8&255,l=e.rgba>>24&255,d=e.rgba>>16&255,_=e.rgba>>8&255;return r=l+Math.round((i-l)*a),n=d+Math.round((s-d)*a),o=_+Math.round((c-_)*a),{css:h.toCss(r,n,o),rgba:h.toRgba(r,n,o)}},e.isOpaque=function(e){return 255==(255&e.rgba)},e.ensureContrastRatio=function(e,t,i){const s=l.ensureContrastRatio(e.rgba,t.rgba,i);if(s)return l.toColor(s>>24&255,s>>16&255,s>>8&255)},e.opaque=function(e){const t=(255|e.rgba)>>>0;return [r,n,o]=l.toChannels(t),{css:h.toCss(r,n,o),rgba:t}},e.opacity=t,e.multiplyOpacity=function(e,i){return a=255&e.rgba,t(e,a*i/255)},e.toColorRGB=function(e){return [e.rgba>>24&255,e.rgba>>16&255,e.rgba>>8&255]};}(t.color||(t.color={})),function(e){let t,i;if(!s.isNode){const e=document.createElement("canvas");e.width=1,e.height=1;const s=e.getContext("2d",{willReadFrequently:!0});s&&(t=s,t.globalCompositeOperation="copy",i=t.createLinearGradient(0,0,1,1));}e.toColor=function(e){if(e.match(/#[\da-f]{3,8}/i))switch(e.length){case 4:return r=parseInt(e.slice(1,2).repeat(2),16),n=parseInt(e.slice(2,3).repeat(2),16),o=parseInt(e.slice(3,4).repeat(2),16),l.toColor(r,n,o);case 5:return r=parseInt(e.slice(1,2).repeat(2),16),n=parseInt(e.slice(2,3).repeat(2),16),o=parseInt(e.slice(3,4).repeat(2),16),a=parseInt(e.slice(4,5).repeat(2),16),l.toColor(r,n,o,a);case 7:return {css:e,rgba:(parseInt(e.slice(1),16)<<8|255)>>>0};case 9:return {css:e,rgba:parseInt(e.slice(1),16)>>>0}}const s=e.match(/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(,\s*(0|1|\d?\.(\d+))\s*)?\)/);if(s)return r=parseInt(s[1]),n=parseInt(s[2]),o=parseInt(s[3]),a=Math.round(255*(void 0===s[5]?1:parseFloat(s[5]))),l.toColor(r,n,o,a);if(!t||!i)throw new Error("css.toColor: Unsupported css format");if(t.fillStyle=i,t.fillStyle=e,"string"!=typeof t.fillStyle)throw new Error("css.toColor: Unsupported css format");if(t.fillRect(0,0,1,1),[r,n,o,a]=t.getImageData(0,0,1,1).data,255!==a)throw new Error("css.toColor: Unsupported css format");return {rgba:h.toRgba(r,n,o,a),css:e}};}(t.css||(t.css={})),function(e){function t(e,t,i){const s=e/255,r=t/255,n=i/255;return .2126*(s<=.03928?s/12.92:Math.pow((s+.055)/1.055,2.4))+.7152*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))+.0722*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))}e.relativeLuminance=function(e){return t(e>>16&255,e>>8&255,255&e)},e.relativeLuminance2=t;}(c=t.rgb||(t.rgb={})),function(e){function t(e,t,i){const s=e>>24&255,r=e>>16&255,n=e>>8&255;let o=t>>24&255,a=t>>16&255,h=t>>8&255,l=_(c.relativeLuminance2(o,a,h),c.relativeLuminance2(s,r,n));for(;l<i&&(o>0||a>0||h>0);)o-=Math.max(0,Math.ceil(.1*o)),a-=Math.max(0,Math.ceil(.1*a)),h-=Math.max(0,Math.ceil(.1*h)),l=_(c.relativeLuminance2(o,a,h),c.relativeLuminance2(s,r,n));return (o<<24|a<<16|h<<8|255)>>>0}function i(e,t,i){const s=e>>24&255,r=e>>16&255,n=e>>8&255;let o=t>>24&255,a=t>>16&255,h=t>>8&255,l=_(c.relativeLuminance2(o,a,h),c.relativeLuminance2(s,r,n));for(;l<i&&(o<255||a<255||h<255);)o=Math.min(255,o+Math.ceil(.1*(255-o))),a=Math.min(255,a+Math.ceil(.1*(255-a))),h=Math.min(255,h+Math.ceil(.1*(255-h))),l=_(c.relativeLuminance2(o,a,h),c.relativeLuminance2(s,r,n));return (o<<24|a<<16|h<<8|255)>>>0}e.ensureContrastRatio=function(e,s,r){const n=c.relativeLuminance(e>>8),o=c.relativeLuminance(s>>8);if(_(n,o)<r){if(o<n){const o=t(e,s,r),a=_(n,c.relativeLuminance(o>>8));if(a<r){const t=i(e,s,r);return a>_(n,c.relativeLuminance(t>>8))?o:t}return o}const a=i(e,s,r),h=_(n,c.relativeLuminance(a>>8));if(h<r){const i=t(e,s,r);return h>_(n,c.relativeLuminance(i>>8))?a:i}return a}},e.reduceLuminance=t,e.increaseLuminance=i,e.toChannels=function(e){return [e>>24&255,e>>16&255,e>>8&255,255&e]},e.toColor=function(e,t,i,s){return {css:h.toCss(e,t,i,s),rgba:h.toRgba(e,t,i,s)}};}(l=t.rgba||(t.rgba={})),t.toPaddedHex=d,t.contrastRatio=_;},8969:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CoreTerminal=void 0;const s=i(844),r=i(2585),n=i(4348),o=i(7866),a=i(744),h=i(7302),c=i(6975),l=i(8460),d=i(1753),_=i(1480),u=i(7994),f=i(9282),v=i(5435),g=i(5981),p=i(2660);let S=!1;class m extends s.Disposable{constructor(e){super(),this._onBinary=this.register(new l.EventEmitter),this.onBinary=this._onBinary.event,this._onData=this.register(new l.EventEmitter),this.onData=this._onData.event,this._onLineFeed=this.register(new l.EventEmitter),this.onLineFeed=this._onLineFeed.event,this._onResize=this.register(new l.EventEmitter),this.onResize=this._onResize.event,this._onWriteParsed=this.register(new l.EventEmitter),this.onWriteParsed=this._onWriteParsed.event,this._onScroll=this.register(new l.EventEmitter),this._instantiationService=new n.InstantiationService,this.optionsService=this.register(new h.OptionsService(e)),this._instantiationService.setService(r.IOptionsService,this.optionsService),this._bufferService=this.register(this._instantiationService.createInstance(a.BufferService)),this._instantiationService.setService(r.IBufferService,this._bufferService),this._logService=this.register(this._instantiationService.createInstance(o.LogService)),this._instantiationService.setService(r.ILogService,this._logService),this.coreService=this.register(this._instantiationService.createInstance(c.CoreService)),this._instantiationService.setService(r.ICoreService,this.coreService),this.coreMouseService=this.register(this._instantiationService.createInstance(d.CoreMouseService)),this._instantiationService.setService(r.ICoreMouseService,this.coreMouseService),this.unicodeService=this.register(this._instantiationService.createInstance(_.UnicodeService)),this._instantiationService.setService(r.IUnicodeService,this.unicodeService),this._charsetService=this._instantiationService.createInstance(u.CharsetService),this._instantiationService.setService(r.ICharsetService,this._charsetService),this._oscLinkService=this._instantiationService.createInstance(p.OscLinkService),this._instantiationService.setService(r.IOscLinkService,this._oscLinkService),this._inputHandler=this.register(new v.InputHandler(this._bufferService,this._charsetService,this.coreService,this._logService,this.optionsService,this._oscLinkService,this.coreMouseService,this.unicodeService)),this.register((0, l.forwardEvent)(this._inputHandler.onLineFeed,this._onLineFeed)),this.register(this._inputHandler),this.register((0, l.forwardEvent)(this._bufferService.onResize,this._onResize)),this.register((0, l.forwardEvent)(this.coreService.onData,this._onData)),this.register((0, l.forwardEvent)(this.coreService.onBinary,this._onBinary)),this.register(this.coreService.onRequestScrollToBottom((()=>this.scrollToBottom()))),this.register(this.coreService.onUserInput((()=>this._writeBuffer.handleUserInput()))),this.register(this.optionsService.onMultipleOptionChange(["windowsMode","windowsPty"],(()=>this._handleWindowsPtyOptionChange()))),this.register(this._bufferService.onScroll((e=>{this._onScroll.fire({position:this._bufferService.buffer.ydisp,source:0}),this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop,this._bufferService.buffer.scrollBottom);}))),this.register(this._inputHandler.onScroll((e=>{this._onScroll.fire({position:this._bufferService.buffer.ydisp,source:0}),this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop,this._bufferService.buffer.scrollBottom);}))),this._writeBuffer=this.register(new g.WriteBuffer(((e,t)=>this._inputHandler.parse(e,t)))),this.register((0, l.forwardEvent)(this._writeBuffer.onWriteParsed,this._onWriteParsed)),this.register((0, s.toDisposable)((()=>{var e;null===(e=this._windowsWrappingHeuristics)||void 0===e||e.dispose(),this._windowsWrappingHeuristics=void 0;})));}get onScroll(){return this._onScrollApi||(this._onScrollApi=this.register(new l.EventEmitter),this._onScroll.event((e=>{var t;null===(t=this._onScrollApi)||void 0===t||t.fire(e.position);}))),this._onScrollApi.event}get cols(){return this._bufferService.cols}get rows(){return this._bufferService.rows}get buffers(){return this._bufferService.buffers}get options(){return this.optionsService.options}set options(e){for(const t in e)this.optionsService.options[t]=e[t];}write(e,t){this._writeBuffer.write(e,t);}writeSync(e,t){this._logService.logLevel<=r.LogLevelEnum.WARN&&!S&&(this._logService.warn("writeSync is unreliable and will be removed soon."),S=!0),this._writeBuffer.writeSync(e,t);}resize(e,t){isNaN(e)||isNaN(t)||(e=Math.max(e,a.MINIMUM_COLS),t=Math.max(t,a.MINIMUM_ROWS),this._bufferService.resize(e,t));}scroll(e,t=!1){this._bufferService.scroll(e,t);}scrollLines(e,t,i){this._bufferService.scrollLines(e,t,i);}scrollPages(e){this._bufferService.scrollPages(e);}scrollToTop(){this._bufferService.scrollToTop();}scrollToBottom(){this._bufferService.scrollToBottom();}scrollToLine(e){this._bufferService.scrollToLine(e);}registerEscHandler(e,t){return this._inputHandler.registerEscHandler(e,t)}registerDcsHandler(e,t){return this._inputHandler.registerDcsHandler(e,t)}registerCsiHandler(e,t){return this._inputHandler.registerCsiHandler(e,t)}registerOscHandler(e,t){return this._inputHandler.registerOscHandler(e,t)}_setup(){this._handleWindowsPtyOptionChange();}reset(){this._inputHandler.reset(),this._bufferService.reset(),this._charsetService.reset(),this.coreService.reset(),this.coreMouseService.reset();}_handleWindowsPtyOptionChange(){var e;let t=!1;const i=this.optionsService.rawOptions.windowsPty;i&&void 0!==i.buildNumber&&void 0!==i.buildNumber?t=!!("conpty"===i.backend&&i.buildNumber<21376):this.optionsService.rawOptions.windowsMode&&(t=!0),t?this._enableWindowsWrappingHeuristics():(null===(e=this._windowsWrappingHeuristics)||void 0===e||e.dispose(),this._windowsWrappingHeuristics=void 0);}_enableWindowsWrappingHeuristics(){if(!this._windowsWrappingHeuristics){const e=[];e.push(this.onLineFeed(f.updateWindowsModeWrappedState.bind(null,this._bufferService))),e.push(this.registerCsiHandler({final:"H"},(()=>((0, f.updateWindowsModeWrappedState)(this._bufferService),!1)))),this._windowsWrappingHeuristics=(0, s.toDisposable)((()=>{for(const t of e)t.dispose();}));}}}t.CoreTerminal=m;},8460:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.forwardEvent=t.EventEmitter=void 0,t.EventEmitter=class{constructor(){this._listeners=[],this._disposed=!1;}get event(){return this._event||(this._event=e=>(this._listeners.push(e),{dispose:()=>{if(!this._disposed)for(let t=0;t<this._listeners.length;t++)if(this._listeners[t]===e)return void this._listeners.splice(t,1)}})),this._event}fire(e,t){const i=[];for(let e=0;e<this._listeners.length;e++)i.push(this._listeners[e]);for(let s=0;s<i.length;s++)i[s].call(void 0,e,t);}dispose(){this._listeners&&(this._listeners.length=0),this._disposed=!0;}},t.forwardEvent=function(e,t){return e((e=>t.fire(e)))};},5435:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.InputHandler=t.WindowsOptionsReportType=void 0;const n=i(2584),o=i(7116),a=i(2015),h=i(844),c=i(482),l=i(8437),d=i(8460),_=i(643),u=i(511),f=i(3734),v=i(2585),g=i(6242),p=i(6351),S=i(5941),m={"(":0,")":1,"*":2,"+":3,"-":1,".":2},C=131072;function b(e,t){if(e>24)return t.setWinLines||!1;switch(e){case 1:return !!t.restoreWin;case 2:return !!t.minimizeWin;case 3:return !!t.setWinPosition;case 4:return !!t.setWinSizePixels;case 5:return !!t.raiseWin;case 6:return !!t.lowerWin;case 7:return !!t.refreshWin;case 8:return !!t.setWinSizeChars;case 9:return !!t.maximizeWin;case 10:return !!t.fullscreenWin;case 11:return !!t.getWinState;case 13:return !!t.getWinPosition;case 14:return !!t.getWinSizePixels;case 15:return !!t.getScreenSizePixels;case 16:return !!t.getCellSizePixels;case 18:return !!t.getWinSizeChars;case 19:return !!t.getScreenSizeChars;case 20:return !!t.getIconTitle;case 21:return !!t.getWinTitle;case 22:return !!t.pushTitle;case 23:return !!t.popTitle;case 24:return !!t.setWinLines}return !1}var y;!function(e){e[e.GET_WIN_SIZE_PIXELS=0]="GET_WIN_SIZE_PIXELS",e[e.GET_CELL_SIZE_PIXELS=1]="GET_CELL_SIZE_PIXELS";}(y=t.WindowsOptionsReportType||(t.WindowsOptionsReportType={}));let w=0;class E extends h.Disposable{constructor(e,t,i,s,r,h,_,f,v=new a.EscapeSequenceParser){super(),this._bufferService=e,this._charsetService=t,this._coreService=i,this._logService=s,this._optionsService=r,this._oscLinkService=h,this._coreMouseService=_,this._unicodeService=f,this._parser=v,this._parseBuffer=new Uint32Array(4096),this._stringDecoder=new c.StringToUtf32,this._utf8Decoder=new c.Utf8ToUtf32,this._workCell=new u.CellData,this._windowTitle="",this._iconName="",this._windowTitleStack=[],this._iconNameStack=[],this._curAttrData=l.DEFAULT_ATTR_DATA.clone(),this._eraseAttrDataInternal=l.DEFAULT_ATTR_DATA.clone(),this._onRequestBell=this.register(new d.EventEmitter),this.onRequestBell=this._onRequestBell.event,this._onRequestRefreshRows=this.register(new d.EventEmitter),this.onRequestRefreshRows=this._onRequestRefreshRows.event,this._onRequestReset=this.register(new d.EventEmitter),this.onRequestReset=this._onRequestReset.event,this._onRequestSendFocus=this.register(new d.EventEmitter),this.onRequestSendFocus=this._onRequestSendFocus.event,this._onRequestSyncScrollBar=this.register(new d.EventEmitter),this.onRequestSyncScrollBar=this._onRequestSyncScrollBar.event,this._onRequestWindowsOptionsReport=this.register(new d.EventEmitter),this.onRequestWindowsOptionsReport=this._onRequestWindowsOptionsReport.event,this._onA11yChar=this.register(new d.EventEmitter),this.onA11yChar=this._onA11yChar.event,this._onA11yTab=this.register(new d.EventEmitter),this.onA11yTab=this._onA11yTab.event,this._onCursorMove=this.register(new d.EventEmitter),this.onCursorMove=this._onCursorMove.event,this._onLineFeed=this.register(new d.EventEmitter),this.onLineFeed=this._onLineFeed.event,this._onScroll=this.register(new d.EventEmitter),this.onScroll=this._onScroll.event,this._onTitleChange=this.register(new d.EventEmitter),this.onTitleChange=this._onTitleChange.event,this._onColor=this.register(new d.EventEmitter),this.onColor=this._onColor.event,this._parseStack={paused:!1,cursorStartX:0,cursorStartY:0,decodedLength:0,position:0},this._specialColors=[256,257,258],this.register(this._parser),this._dirtyRowTracker=new L(this._bufferService),this._activeBuffer=this._bufferService.buffer,this.register(this._bufferService.buffers.onBufferActivate((e=>this._activeBuffer=e.activeBuffer))),this._parser.setCsiHandlerFallback(((e,t)=>{this._logService.debug("Unknown CSI code: ",{identifier:this._parser.identToString(e),params:t.toArray()});})),this._parser.setEscHandlerFallback((e=>{this._logService.debug("Unknown ESC code: ",{identifier:this._parser.identToString(e)});})),this._parser.setExecuteHandlerFallback((e=>{this._logService.debug("Unknown EXECUTE code: ",{code:e});})),this._parser.setOscHandlerFallback(((e,t,i)=>{this._logService.debug("Unknown OSC code: ",{identifier:e,action:t,data:i});})),this._parser.setDcsHandlerFallback(((e,t,i)=>{"HOOK"===t&&(i=i.toArray()),this._logService.debug("Unknown DCS code: ",{identifier:this._parser.identToString(e),action:t,payload:i});})),this._parser.setPrintHandler(((e,t,i)=>this.print(e,t,i))),this._parser.registerCsiHandler({final:"@"},(e=>this.insertChars(e))),this._parser.registerCsiHandler({intermediates:" ",final:"@"},(e=>this.scrollLeft(e))),this._parser.registerCsiHandler({final:"A"},(e=>this.cursorUp(e))),this._parser.registerCsiHandler({intermediates:" ",final:"A"},(e=>this.scrollRight(e))),this._parser.registerCsiHandler({final:"B"},(e=>this.cursorDown(e))),this._parser.registerCsiHandler({final:"C"},(e=>this.cursorForward(e))),this._parser.registerCsiHandler({final:"D"},(e=>this.cursorBackward(e))),this._parser.registerCsiHandler({final:"E"},(e=>this.cursorNextLine(e))),this._parser.registerCsiHandler({final:"F"},(e=>this.cursorPrecedingLine(e))),this._parser.registerCsiHandler({final:"G"},(e=>this.cursorCharAbsolute(e))),this._parser.registerCsiHandler({final:"H"},(e=>this.cursorPosition(e))),this._parser.registerCsiHandler({final:"I"},(e=>this.cursorForwardTab(e))),this._parser.registerCsiHandler({final:"J"},(e=>this.eraseInDisplay(e,!1))),this._parser.registerCsiHandler({prefix:"?",final:"J"},(e=>this.eraseInDisplay(e,!0))),this._parser.registerCsiHandler({final:"K"},(e=>this.eraseInLine(e,!1))),this._parser.registerCsiHandler({prefix:"?",final:"K"},(e=>this.eraseInLine(e,!0))),this._parser.registerCsiHandler({final:"L"},(e=>this.insertLines(e))),this._parser.registerCsiHandler({final:"M"},(e=>this.deleteLines(e))),this._parser.registerCsiHandler({final:"P"},(e=>this.deleteChars(e))),this._parser.registerCsiHandler({final:"S"},(e=>this.scrollUp(e))),this._parser.registerCsiHandler({final:"T"},(e=>this.scrollDown(e))),this._parser.registerCsiHandler({final:"X"},(e=>this.eraseChars(e))),this._parser.registerCsiHandler({final:"Z"},(e=>this.cursorBackwardTab(e))),this._parser.registerCsiHandler({final:"`"},(e=>this.charPosAbsolute(e))),this._parser.registerCsiHandler({final:"a"},(e=>this.hPositionRelative(e))),this._parser.registerCsiHandler({final:"b"},(e=>this.repeatPrecedingCharacter(e))),this._parser.registerCsiHandler({final:"c"},(e=>this.sendDeviceAttributesPrimary(e))),this._parser.registerCsiHandler({prefix:">",final:"c"},(e=>this.sendDeviceAttributesSecondary(e))),this._parser.registerCsiHandler({final:"d"},(e=>this.linePosAbsolute(e))),this._parser.registerCsiHandler({final:"e"},(e=>this.vPositionRelative(e))),this._parser.registerCsiHandler({final:"f"},(e=>this.hVPosition(e))),this._parser.registerCsiHandler({final:"g"},(e=>this.tabClear(e))),this._parser.registerCsiHandler({final:"h"},(e=>this.setMode(e))),this._parser.registerCsiHandler({prefix:"?",final:"h"},(e=>this.setModePrivate(e))),this._parser.registerCsiHandler({final:"l"},(e=>this.resetMode(e))),this._parser.registerCsiHandler({prefix:"?",final:"l"},(e=>this.resetModePrivate(e))),this._parser.registerCsiHandler({final:"m"},(e=>this.charAttributes(e))),this._parser.registerCsiHandler({final:"n"},(e=>this.deviceStatus(e))),this._parser.registerCsiHandler({prefix:"?",final:"n"},(e=>this.deviceStatusPrivate(e))),this._parser.registerCsiHandler({intermediates:"!",final:"p"},(e=>this.softReset(e))),this._parser.registerCsiHandler({intermediates:" ",final:"q"},(e=>this.setCursorStyle(e))),this._parser.registerCsiHandler({final:"r"},(e=>this.setScrollRegion(e))),this._parser.registerCsiHandler({final:"s"},(e=>this.saveCursor(e))),this._parser.registerCsiHandler({final:"t"},(e=>this.windowOptions(e))),this._parser.registerCsiHandler({final:"u"},(e=>this.restoreCursor(e))),this._parser.registerCsiHandler({intermediates:"'",final:"}"},(e=>this.insertColumns(e))),this._parser.registerCsiHandler({intermediates:"'",final:"~"},(e=>this.deleteColumns(e))),this._parser.registerCsiHandler({intermediates:'"',final:"q"},(e=>this.selectProtected(e))),this._parser.registerCsiHandler({intermediates:"$",final:"p"},(e=>this.requestMode(e,!0))),this._parser.registerCsiHandler({prefix:"?",intermediates:"$",final:"p"},(e=>this.requestMode(e,!1))),this._parser.setExecuteHandler(n.C0.BEL,(()=>this.bell())),this._parser.setExecuteHandler(n.C0.LF,(()=>this.lineFeed())),this._parser.setExecuteHandler(n.C0.VT,(()=>this.lineFeed())),this._parser.setExecuteHandler(n.C0.FF,(()=>this.lineFeed())),this._parser.setExecuteHandler(n.C0.CR,(()=>this.carriageReturn())),this._parser.setExecuteHandler(n.C0.BS,(()=>this.backspace())),this._parser.setExecuteHandler(n.C0.HT,(()=>this.tab())),this._parser.setExecuteHandler(n.C0.SO,(()=>this.shiftOut())),this._parser.setExecuteHandler(n.C0.SI,(()=>this.shiftIn())),this._parser.setExecuteHandler(n.C1.IND,(()=>this.index())),this._parser.setExecuteHandler(n.C1.NEL,(()=>this.nextLine())),this._parser.setExecuteHandler(n.C1.HTS,(()=>this.tabSet())),this._parser.registerOscHandler(0,new g.OscHandler((e=>(this.setTitle(e),this.setIconName(e),!0)))),this._parser.registerOscHandler(1,new g.OscHandler((e=>this.setIconName(e)))),this._parser.registerOscHandler(2,new g.OscHandler((e=>this.setTitle(e)))),this._parser.registerOscHandler(4,new g.OscHandler((e=>this.setOrReportIndexedColor(e)))),this._parser.registerOscHandler(8,new g.OscHandler((e=>this.setHyperlink(e)))),this._parser.registerOscHandler(10,new g.OscHandler((e=>this.setOrReportFgColor(e)))),this._parser.registerOscHandler(11,new g.OscHandler((e=>this.setOrReportBgColor(e)))),this._parser.registerOscHandler(12,new g.OscHandler((e=>this.setOrReportCursorColor(e)))),this._parser.registerOscHandler(104,new g.OscHandler((e=>this.restoreIndexedColor(e)))),this._parser.registerOscHandler(110,new g.OscHandler((e=>this.restoreFgColor(e)))),this._parser.registerOscHandler(111,new g.OscHandler((e=>this.restoreBgColor(e)))),this._parser.registerOscHandler(112,new g.OscHandler((e=>this.restoreCursorColor(e)))),this._parser.registerEscHandler({final:"7"},(()=>this.saveCursor())),this._parser.registerEscHandler({final:"8"},(()=>this.restoreCursor())),this._parser.registerEscHandler({final:"D"},(()=>this.index())),this._parser.registerEscHandler({final:"E"},(()=>this.nextLine())),this._parser.registerEscHandler({final:"H"},(()=>this.tabSet())),this._parser.registerEscHandler({final:"M"},(()=>this.reverseIndex())),this._parser.registerEscHandler({final:"="},(()=>this.keypadApplicationMode())),this._parser.registerEscHandler({final:">"},(()=>this.keypadNumericMode())),this._parser.registerEscHandler({final:"c"},(()=>this.fullReset())),this._parser.registerEscHandler({final:"n"},(()=>this.setgLevel(2))),this._parser.registerEscHandler({final:"o"},(()=>this.setgLevel(3))),this._parser.registerEscHandler({final:"|"},(()=>this.setgLevel(3))),this._parser.registerEscHandler({final:"}"},(()=>this.setgLevel(2))),this._parser.registerEscHandler({final:"~"},(()=>this.setgLevel(1))),this._parser.registerEscHandler({intermediates:"%",final:"@"},(()=>this.selectDefaultCharset())),this._parser.registerEscHandler({intermediates:"%",final:"G"},(()=>this.selectDefaultCharset()));for(const e in o.CHARSETS)this._parser.registerEscHandler({intermediates:"(",final:e},(()=>this.selectCharset("("+e))),this._parser.registerEscHandler({intermediates:")",final:e},(()=>this.selectCharset(")"+e))),this._parser.registerEscHandler({intermediates:"*",final:e},(()=>this.selectCharset("*"+e))),this._parser.registerEscHandler({intermediates:"+",final:e},(()=>this.selectCharset("+"+e))),this._parser.registerEscHandler({intermediates:"-",final:e},(()=>this.selectCharset("-"+e))),this._parser.registerEscHandler({intermediates:".",final:e},(()=>this.selectCharset("."+e))),this._parser.registerEscHandler({intermediates:"/",final:e},(()=>this.selectCharset("/"+e)));this._parser.registerEscHandler({intermediates:"#",final:"8"},(()=>this.screenAlignmentPattern())),this._parser.setErrorHandler((e=>(this._logService.error("Parsing error: ",e),e))),this._parser.registerDcsHandler({intermediates:"$",final:"q"},new p.DcsHandler(((e,t)=>this.requestStatusString(e,t))));}getAttrData(){return this._curAttrData}_preserveStack(e,t,i,s){this._parseStack.paused=!0,this._parseStack.cursorStartX=e,this._parseStack.cursorStartY=t,this._parseStack.decodedLength=i,this._parseStack.position=s;}_logSlowResolvingAsync(e){this._logService.logLevel<=v.LogLevelEnum.WARN&&Promise.race([e,new Promise(((e,t)=>setTimeout((()=>t("#SLOW_TIMEOUT")),5e3)))]).catch((e=>{if("#SLOW_TIMEOUT"!==e)throw e;console.warn("async parser handler taking longer than 5000 ms");}));}_getCurrentLinkId(){return this._curAttrData.extended.urlId}parse(e,t){let i,s=this._activeBuffer.x,r=this._activeBuffer.y,n=0;const o=this._parseStack.paused;if(o){if(i=this._parser.parse(this._parseBuffer,this._parseStack.decodedLength,t))return this._logSlowResolvingAsync(i),i;s=this._parseStack.cursorStartX,r=this._parseStack.cursorStartY,this._parseStack.paused=!1,e.length>C&&(n=this._parseStack.position+C);}if(this._logService.logLevel<=v.LogLevelEnum.DEBUG&&this._logService.debug("parsing data"+("string"==typeof e?` "${e}"`:` "${Array.prototype.map.call(e,(e=>String.fromCharCode(e))).join("")}"`),"string"==typeof e?e.split("").map((e=>e.charCodeAt(0))):e),this._parseBuffer.length<e.length&&this._parseBuffer.length<C&&(this._parseBuffer=new Uint32Array(Math.min(e.length,C))),o||this._dirtyRowTracker.clearRange(),e.length>C)for(let t=n;t<e.length;t+=C){const n=t+C<e.length?t+C:e.length,o="string"==typeof e?this._stringDecoder.decode(e.substring(t,n),this._parseBuffer):this._utf8Decoder.decode(e.subarray(t,n),this._parseBuffer);if(i=this._parser.parse(this._parseBuffer,o))return this._preserveStack(s,r,o,t),this._logSlowResolvingAsync(i),i}else if(!o){const t="string"==typeof e?this._stringDecoder.decode(e,this._parseBuffer):this._utf8Decoder.decode(e,this._parseBuffer);if(i=this._parser.parse(this._parseBuffer,t))return this._preserveStack(s,r,t,0),this._logSlowResolvingAsync(i),i}this._activeBuffer.x===s&&this._activeBuffer.y===r||this._onCursorMove.fire(),this._onRequestRefreshRows.fire(this._dirtyRowTracker.start,this._dirtyRowTracker.end);}print(e,t,i){let s,r;const n=this._charsetService.charset,o=this._optionsService.rawOptions.screenReaderMode,a=this._bufferService.cols,h=this._coreService.decPrivateModes.wraparound,l=this._coreService.modes.insertMode,d=this._curAttrData;let u=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);this._dirtyRowTracker.markDirty(this._activeBuffer.y),this._activeBuffer.x&&i-t>0&&2===u.getWidth(this._activeBuffer.x-1)&&u.setCellFromCodePoint(this._activeBuffer.x-1,0,1,d.fg,d.bg,d.extended);for(let f=t;f<i;++f){if(s=e[f],r=this._unicodeService.wcwidth(s),s<127&&n){const e=n[String.fromCharCode(s)];e&&(s=e.charCodeAt(0));}if(o&&this._onA11yChar.fire((0, c.stringFromCodePoint)(s)),this._getCurrentLinkId()&&this._oscLinkService.addLineToLink(this._getCurrentLinkId(),this._activeBuffer.ybase+this._activeBuffer.y),r||!this._activeBuffer.x){if(this._activeBuffer.x+r-1>=a)if(h){for(;this._activeBuffer.x<a;)u.setCellFromCodePoint(this._activeBuffer.x++,0,1,d.fg,d.bg,d.extended);this._activeBuffer.x=0,this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData(),!0)):(this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!0),u=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);}else if(this._activeBuffer.x=a-1,2===r)continue;if(l&&(u.insertCells(this._activeBuffer.x,r,this._activeBuffer.getNullCell(d),d),2===u.getWidth(a-1)&&u.setCellFromCodePoint(a-1,_.NULL_CELL_CODE,_.NULL_CELL_WIDTH,d.fg,d.bg,d.extended)),u.setCellFromCodePoint(this._activeBuffer.x++,s,r,d.fg,d.bg,d.extended),r>0)for(;--r;)u.setCellFromCodePoint(this._activeBuffer.x++,0,0,d.fg,d.bg,d.extended);}else u.getWidth(this._activeBuffer.x-1)?u.addCodepointToCell(this._activeBuffer.x-1,s):u.addCodepointToCell(this._activeBuffer.x-2,s);}i-t>0&&(u.loadCell(this._activeBuffer.x-1,this._workCell),2===this._workCell.getWidth()||this._workCell.getCode()>65535?this._parser.precedingCodepoint=0:this._workCell.isCombined()?this._parser.precedingCodepoint=this._workCell.getChars().charCodeAt(0):this._parser.precedingCodepoint=this._workCell.content),this._activeBuffer.x<a&&i-t>0&&0===u.getWidth(this._activeBuffer.x)&&!u.hasContent(this._activeBuffer.x)&&u.setCellFromCodePoint(this._activeBuffer.x,0,1,d.fg,d.bg,d.extended),this._dirtyRowTracker.markDirty(this._activeBuffer.y);}registerCsiHandler(e,t){return "t"!==e.final||e.prefix||e.intermediates?this._parser.registerCsiHandler(e,t):this._parser.registerCsiHandler(e,(e=>!b(e.params[0],this._optionsService.rawOptions.windowOptions)||t(e)))}registerDcsHandler(e,t){return this._parser.registerDcsHandler(e,new p.DcsHandler(t))}registerEscHandler(e,t){return this._parser.registerEscHandler(e,t)}registerOscHandler(e,t){return this._parser.registerOscHandler(e,new g.OscHandler(t))}bell(){return this._onRequestBell.fire(),!0}lineFeed(){return this._dirtyRowTracker.markDirty(this._activeBuffer.y),this._optionsService.rawOptions.convertEol&&(this._activeBuffer.x=0),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows?this._activeBuffer.y=this._bufferService.rows-1:this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!1,this._activeBuffer.x>=this._bufferService.cols&&this._activeBuffer.x--,this._dirtyRowTracker.markDirty(this._activeBuffer.y),this._onLineFeed.fire(),!0}carriageReturn(){return this._activeBuffer.x=0,!0}backspace(){var e;if(!this._coreService.decPrivateModes.reverseWraparound)return this._restrictCursor(),this._activeBuffer.x>0&&this._activeBuffer.x--,!0;if(this._restrictCursor(this._bufferService.cols),this._activeBuffer.x>0)this._activeBuffer.x--;else if(0===this._activeBuffer.x&&this._activeBuffer.y>this._activeBuffer.scrollTop&&this._activeBuffer.y<=this._activeBuffer.scrollBottom&&(null===(e=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y))||void 0===e?void 0:e.isWrapped)){this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!1,this._activeBuffer.y--,this._activeBuffer.x=this._bufferService.cols-1;const e=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);e.hasWidth(this._activeBuffer.x)&&!e.hasContent(this._activeBuffer.x)&&this._activeBuffer.x--;}return this._restrictCursor(),!0}tab(){if(this._activeBuffer.x>=this._bufferService.cols)return !0;const e=this._activeBuffer.x;return this._activeBuffer.x=this._activeBuffer.nextStop(),this._optionsService.rawOptions.screenReaderMode&&this._onA11yTab.fire(this._activeBuffer.x-e),!0}shiftOut(){return this._charsetService.setgLevel(1),!0}shiftIn(){return this._charsetService.setgLevel(0),!0}_restrictCursor(e=this._bufferService.cols-1){this._activeBuffer.x=Math.min(e,Math.max(0,this._activeBuffer.x)),this._activeBuffer.y=this._coreService.decPrivateModes.origin?Math.min(this._activeBuffer.scrollBottom,Math.max(this._activeBuffer.scrollTop,this._activeBuffer.y)):Math.min(this._bufferService.rows-1,Math.max(0,this._activeBuffer.y)),this._dirtyRowTracker.markDirty(this._activeBuffer.y);}_setCursor(e,t){this._dirtyRowTracker.markDirty(this._activeBuffer.y),this._coreService.decPrivateModes.origin?(this._activeBuffer.x=e,this._activeBuffer.y=this._activeBuffer.scrollTop+t):(this._activeBuffer.x=e,this._activeBuffer.y=t),this._restrictCursor(),this._dirtyRowTracker.markDirty(this._activeBuffer.y);}_moveCursor(e,t){this._restrictCursor(),this._setCursor(this._activeBuffer.x+e,this._activeBuffer.y+t);}cursorUp(e){const t=this._activeBuffer.y-this._activeBuffer.scrollTop;return t>=0?this._moveCursor(0,-Math.min(t,e.params[0]||1)):this._moveCursor(0,-(e.params[0]||1)),!0}cursorDown(e){const t=this._activeBuffer.scrollBottom-this._activeBuffer.y;return t>=0?this._moveCursor(0,Math.min(t,e.params[0]||1)):this._moveCursor(0,e.params[0]||1),!0}cursorForward(e){return this._moveCursor(e.params[0]||1,0),!0}cursorBackward(e){return this._moveCursor(-(e.params[0]||1),0),!0}cursorNextLine(e){return this.cursorDown(e),this._activeBuffer.x=0,!0}cursorPrecedingLine(e){return this.cursorUp(e),this._activeBuffer.x=0,!0}cursorCharAbsolute(e){return this._setCursor((e.params[0]||1)-1,this._activeBuffer.y),!0}cursorPosition(e){return this._setCursor(e.length>=2?(e.params[1]||1)-1:0,(e.params[0]||1)-1),!0}charPosAbsolute(e){return this._setCursor((e.params[0]||1)-1,this._activeBuffer.y),!0}hPositionRelative(e){return this._moveCursor(e.params[0]||1,0),!0}linePosAbsolute(e){return this._setCursor(this._activeBuffer.x,(e.params[0]||1)-1),!0}vPositionRelative(e){return this._moveCursor(0,e.params[0]||1),!0}hVPosition(e){return this.cursorPosition(e),!0}tabClear(e){const t=e.params[0];return 0===t?delete this._activeBuffer.tabs[this._activeBuffer.x]:3===t&&(this._activeBuffer.tabs={}),!0}cursorForwardTab(e){if(this._activeBuffer.x>=this._bufferService.cols)return !0;let t=e.params[0]||1;for(;t--;)this._activeBuffer.x=this._activeBuffer.nextStop();return !0}cursorBackwardTab(e){if(this._activeBuffer.x>=this._bufferService.cols)return !0;let t=e.params[0]||1;for(;t--;)this._activeBuffer.x=this._activeBuffer.prevStop();return !0}selectProtected(e){const t=e.params[0];return 1===t&&(this._curAttrData.bg|=536870912),2!==t&&0!==t||(this._curAttrData.bg&=-536870913),!0}_eraseInBufferLine(e,t,i,s=!1,r=!1){const n=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);n.replaceCells(t,i,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData(),r),s&&(n.isWrapped=!1);}_resetBufferLine(e,t=!1){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i&&(i.fill(this._activeBuffer.getNullCell(this._eraseAttrData()),t),this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase+e),i.isWrapped=!1);}eraseInDisplay(e,t=!1){let i;switch(this._restrictCursor(this._bufferService.cols),e.params[0]){case 0:for(i=this._activeBuffer.y,this._dirtyRowTracker.markDirty(i),this._eraseInBufferLine(i++,this._activeBuffer.x,this._bufferService.cols,0===this._activeBuffer.x,t);i<this._bufferService.rows;i++)this._resetBufferLine(i,t);this._dirtyRowTracker.markDirty(i);break;case 1:for(i=this._activeBuffer.y,this._dirtyRowTracker.markDirty(i),this._eraseInBufferLine(i,0,this._activeBuffer.x+1,!0,t),this._activeBuffer.x+1>=this._bufferService.cols&&(this._activeBuffer.lines.get(i+1).isWrapped=!1);i--;)this._resetBufferLine(i,t);this._dirtyRowTracker.markDirty(0);break;case 2:for(i=this._bufferService.rows,this._dirtyRowTracker.markDirty(i-1);i--;)this._resetBufferLine(i,t);this._dirtyRowTracker.markDirty(0);break;case 3:const e=this._activeBuffer.lines.length-this._bufferService.rows;e>0&&(this._activeBuffer.lines.trimStart(e),this._activeBuffer.ybase=Math.max(this._activeBuffer.ybase-e,0),this._activeBuffer.ydisp=Math.max(this._activeBuffer.ydisp-e,0),this._onScroll.fire(0));}return !0}eraseInLine(e,t=!1){switch(this._restrictCursor(this._bufferService.cols),e.params[0]){case 0:this._eraseInBufferLine(this._activeBuffer.y,this._activeBuffer.x,this._bufferService.cols,0===this._activeBuffer.x,t);break;case 1:this._eraseInBufferLine(this._activeBuffer.y,0,this._activeBuffer.x+1,!1,t);break;case 2:this._eraseInBufferLine(this._activeBuffer.y,0,this._bufferService.cols,!0,t);}return this._dirtyRowTracker.markDirty(this._activeBuffer.y),!0}insertLines(e){this._restrictCursor();let t=e.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;const i=this._activeBuffer.ybase+this._activeBuffer.y,s=this._bufferService.rows-1-this._activeBuffer.scrollBottom,r=this._bufferService.rows-1+this._activeBuffer.ybase-s+1;for(;t--;)this._activeBuffer.lines.splice(r-1,1),this._activeBuffer.lines.splice(i,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0}deleteLines(e){this._restrictCursor();let t=e.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;const i=this._activeBuffer.ybase+this._activeBuffer.y;let s;for(s=this._bufferService.rows-1-this._activeBuffer.scrollBottom,s=this._bufferService.rows-1+this._activeBuffer.ybase-s;t--;)this._activeBuffer.lines.splice(i,1),this._activeBuffer.lines.splice(s,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0}insertChars(e){this._restrictCursor();const t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.insertCells(this._activeBuffer.x,e.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowTracker.markDirty(this._activeBuffer.y)),!0}deleteChars(e){this._restrictCursor();const t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.deleteCells(this._activeBuffer.x,e.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowTracker.markDirty(this._activeBuffer.y)),!0}scrollUp(e){let t=e.params[0]||1;for(;t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}scrollDown(e){let t=e.params[0]||1;for(;t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,0,this._activeBuffer.getBlankLine(l.DEFAULT_ATTR_DATA));return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}scrollLeft(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;const t=e.params[0]||1;for(let e=this._activeBuffer.scrollTop;e<=this._activeBuffer.scrollBottom;++e){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i.deleteCells(0,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1;}return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}scrollRight(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;const t=e.params[0]||1;for(let e=this._activeBuffer.scrollTop;e<=this._activeBuffer.scrollBottom;++e){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i.insertCells(0,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1;}return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}insertColumns(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;const t=e.params[0]||1;for(let e=this._activeBuffer.scrollTop;e<=this._activeBuffer.scrollBottom;++e){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i.insertCells(this._activeBuffer.x,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1;}return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}deleteColumns(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;const t=e.params[0]||1;for(let e=this._activeBuffer.scrollTop;e<=this._activeBuffer.scrollBottom;++e){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i.deleteCells(this._activeBuffer.x,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1;}return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}eraseChars(e){this._restrictCursor();const t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.replaceCells(this._activeBuffer.x,this._activeBuffer.x+(e.params[0]||1),this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowTracker.markDirty(this._activeBuffer.y)),!0}repeatPrecedingCharacter(e){if(!this._parser.precedingCodepoint)return !0;const t=e.params[0]||1,i=new Uint32Array(t);for(let e=0;e<t;++e)i[e]=this._parser.precedingCodepoint;return this.print(i,0,i.length),!0}sendDeviceAttributesPrimary(e){return e.params[0]>0||(this._is("xterm")||this._is("rxvt-unicode")||this._is("screen")?this._coreService.triggerDataEvent(n.C0.ESC+"[?1;2c"):this._is("linux")&&this._coreService.triggerDataEvent(n.C0.ESC+"[?6c")),!0}sendDeviceAttributesSecondary(e){return e.params[0]>0||(this._is("xterm")?this._coreService.triggerDataEvent(n.C0.ESC+"[>0;276;0c"):this._is("rxvt-unicode")?this._coreService.triggerDataEvent(n.C0.ESC+"[>85;95;0c"):this._is("linux")?this._coreService.triggerDataEvent(e.params[0]+"c"):this._is("screen")&&this._coreService.triggerDataEvent(n.C0.ESC+"[>83;40003;0c")),!0}_is(e){return 0===(this._optionsService.rawOptions.termName+"").indexOf(e)}setMode(e){for(let t=0;t<e.length;t++)switch(e.params[t]){case 4:this._coreService.modes.insertMode=!0;break;case 20:this._optionsService.options.convertEol=!0;}return !0}setModePrivate(e){for(let t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!0;break;case 2:this._charsetService.setgCharset(0,o.DEFAULT_CHARSET),this._charsetService.setgCharset(1,o.DEFAULT_CHARSET),this._charsetService.setgCharset(2,o.DEFAULT_CHARSET),this._charsetService.setgCharset(3,o.DEFAULT_CHARSET);break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(132,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!0,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!0;break;case 12:this._optionsService.options.cursorBlink=!0;break;case 45:this._coreService.decPrivateModes.reverseWraparound=!0;break;case 66:this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire();break;case 9:this._coreMouseService.activeProtocol="X10";break;case 1e3:this._coreMouseService.activeProtocol="VT200";break;case 1002:this._coreMouseService.activeProtocol="DRAG";break;case 1003:this._coreMouseService.activeProtocol="ANY";break;case 1004:this._coreService.decPrivateModes.sendFocus=!0,this._onRequestSendFocus.fire();break;case 1005:this._logService.debug("DECSET 1005 not supported (see #2507)");break;case 1006:this._coreMouseService.activeEncoding="SGR";break;case 1015:this._logService.debug("DECSET 1015 not supported (see #2507)");break;case 1016:this._coreMouseService.activeEncoding="SGR_PIXELS";break;case 25:this._coreService.isCursorHidden=!1;break;case 1048:this.saveCursor();break;case 1049:this.saveCursor();case 47:case 1047:this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!0;}return !0}resetMode(e){for(let t=0;t<e.length;t++)switch(e.params[t]){case 4:this._coreService.modes.insertMode=!1;break;case 20:this._optionsService.options.convertEol=!1;}return !0}resetModePrivate(e){for(let t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!1;break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(80,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!1,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!1;break;case 12:this._optionsService.options.cursorBlink=!1;break;case 45:this._coreService.decPrivateModes.reverseWraparound=!1;break;case 66:this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire();break;case 9:case 1e3:case 1002:case 1003:this._coreMouseService.activeProtocol="NONE";break;case 1004:this._coreService.decPrivateModes.sendFocus=!1;break;case 1005:this._logService.debug("DECRST 1005 not supported (see #2507)");break;case 1006:case 1016:this._coreMouseService.activeEncoding="DEFAULT";break;case 1015:this._logService.debug("DECRST 1015 not supported (see #2507)");break;case 25:this._coreService.isCursorHidden=!0;break;case 1048:this.restoreCursor();break;case 1049:case 47:case 1047:this._bufferService.buffers.activateNormalBuffer(),1049===e.params[t]&&this.restoreCursor(),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!1;}return !0}requestMode(e,t){const i=this._coreService.decPrivateModes,{activeProtocol:s,activeEncoding:r}=this._coreMouseService,o=this._coreService,{buffers:a,cols:h}=this._bufferService,{active:c,alt:l}=a,d=this._optionsService.rawOptions,_=e=>e?1:2,u=e.params[0];return f=u,v=t?2===u?4:4===u?_(o.modes.insertMode):12===u?3:20===u?_(d.convertEol):0:1===u?_(i.applicationCursorKeys):3===u?d.windowOptions.setWinLines?80===h?2:132===h?1:0:0:6===u?_(i.origin):7===u?_(i.wraparound):8===u?3:9===u?_("X10"===s):12===u?_(d.cursorBlink):25===u?_(!o.isCursorHidden):45===u?_(i.reverseWraparound):66===u?_(i.applicationKeypad):67===u?4:1e3===u?_("VT200"===s):1002===u?_("DRAG"===s):1003===u?_("ANY"===s):1004===u?_(i.sendFocus):1005===u?4:1006===u?_("SGR"===r):1015===u?4:1016===u?_("SGR_PIXELS"===r):1048===u?1:47===u||1047===u||1049===u?_(c===l):2004===u?_(i.bracketedPasteMode):0,o.triggerDataEvent(`${n.C0.ESC}[${t?"":"?"}${f};${v}$y`),!0;var f,v;}_updateAttrColor(e,t,i,s,r){return 2===t?(e|=50331648,e&=-16777216,e|=f.AttributeData.fromColorRGB([i,s,r])):5===t&&(e&=-50331904,e|=33554432|255&i),e}_extractColor(e,t,i){const s=[0,0,-1,0,0,0];let r=0,n=0;do{if(s[n+r]=e.params[t+n],e.hasSubParams(t+n)){const i=e.getSubParams(t+n);let o=0;do{5===s[1]&&(r=1),s[n+o+1+r]=i[o];}while(++o<i.length&&o+n+1+r<s.length);break}if(5===s[1]&&n+r>=2||2===s[1]&&n+r>=5)break;s[1]&&(r=1);}while(++n+t<e.length&&n+r<s.length);for(let e=2;e<s.length;++e)-1===s[e]&&(s[e]=0);switch(s[0]){case 38:i.fg=this._updateAttrColor(i.fg,s[1],s[3],s[4],s[5]);break;case 48:i.bg=this._updateAttrColor(i.bg,s[1],s[3],s[4],s[5]);break;case 58:i.extended=i.extended.clone(),i.extended.underlineColor=this._updateAttrColor(i.extended.underlineColor,s[1],s[3],s[4],s[5]);}return n}_processUnderline(e,t){t.extended=t.extended.clone(),(!~e||e>5)&&(e=1),t.extended.underlineStyle=e,t.fg|=268435456,0===e&&(t.fg&=-268435457),t.updateExtended();}_processSGR0(e){e.fg=l.DEFAULT_ATTR_DATA.fg,e.bg=l.DEFAULT_ATTR_DATA.bg,e.extended=e.extended.clone(),e.extended.underlineStyle=0,e.extended.underlineColor&=-67108864,e.updateExtended();}charAttributes(e){if(1===e.length&&0===e.params[0])return this._processSGR0(this._curAttrData),!0;const t=e.length;let i;const s=this._curAttrData;for(let r=0;r<t;r++)i=e.params[r],i>=30&&i<=37?(s.fg&=-50331904,s.fg|=16777216|i-30):i>=40&&i<=47?(s.bg&=-50331904,s.bg|=16777216|i-40):i>=90&&i<=97?(s.fg&=-50331904,s.fg|=16777224|i-90):i>=100&&i<=107?(s.bg&=-50331904,s.bg|=16777224|i-100):0===i?this._processSGR0(s):1===i?s.fg|=134217728:3===i?s.bg|=67108864:4===i?(s.fg|=268435456,this._processUnderline(e.hasSubParams(r)?e.getSubParams(r)[0]:1,s)):5===i?s.fg|=536870912:7===i?s.fg|=67108864:8===i?s.fg|=1073741824:9===i?s.fg|=2147483648:2===i?s.bg|=134217728:21===i?this._processUnderline(2,s):22===i?(s.fg&=-134217729,s.bg&=-134217729):23===i?s.bg&=-67108865:24===i?(s.fg&=-268435457,this._processUnderline(0,s)):25===i?s.fg&=-536870913:27===i?s.fg&=-67108865:28===i?s.fg&=-1073741825:29===i?s.fg&=2147483647:39===i?(s.fg&=-67108864,s.fg|=16777215&l.DEFAULT_ATTR_DATA.fg):49===i?(s.bg&=-67108864,s.bg|=16777215&l.DEFAULT_ATTR_DATA.bg):38===i||48===i||58===i?r+=this._extractColor(e,r,s):53===i?s.bg|=1073741824:55===i?s.bg&=-1073741825:59===i?(s.extended=s.extended.clone(),s.extended.underlineColor=-1,s.updateExtended()):100===i?(s.fg&=-67108864,s.fg|=16777215&l.DEFAULT_ATTR_DATA.fg,s.bg&=-67108864,s.bg|=16777215&l.DEFAULT_ATTR_DATA.bg):this._logService.debug("Unknown SGR attribute: %d.",i);return !0}deviceStatus(e){switch(e.params[0]){case 5:this._coreService.triggerDataEvent(`${n.C0.ESC}[0n`);break;case 6:const e=this._activeBuffer.y+1,t=this._activeBuffer.x+1;this._coreService.triggerDataEvent(`${n.C0.ESC}[${e};${t}R`);}return !0}deviceStatusPrivate(e){if(6===e.params[0]){const e=this._activeBuffer.y+1,t=this._activeBuffer.x+1;this._coreService.triggerDataEvent(`${n.C0.ESC}[?${e};${t}R`);}return !0}softReset(e){return this._coreService.isCursorHidden=!1,this._onRequestSyncScrollBar.fire(),this._activeBuffer.scrollTop=0,this._activeBuffer.scrollBottom=this._bufferService.rows-1,this._curAttrData=l.DEFAULT_ATTR_DATA.clone(),this._coreService.reset(),this._charsetService.reset(),this._activeBuffer.savedX=0,this._activeBuffer.savedY=this._activeBuffer.ybase,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,this._coreService.decPrivateModes.origin=!1,!0}setCursorStyle(e){const t=e.params[0]||1;switch(t){case 1:case 2:this._optionsService.options.cursorStyle="block";break;case 3:case 4:this._optionsService.options.cursorStyle="underline";break;case 5:case 6:this._optionsService.options.cursorStyle="bar";}const i=t%2==1;return this._optionsService.options.cursorBlink=i,!0}setScrollRegion(e){const t=e.params[0]||1;let i;return (e.length<2||(i=e.params[1])>this._bufferService.rows||0===i)&&(i=this._bufferService.rows),i>t&&(this._activeBuffer.scrollTop=t-1,this._activeBuffer.scrollBottom=i-1,this._setCursor(0,0)),!0}windowOptions(e){if(!b(e.params[0],this._optionsService.rawOptions.windowOptions))return !0;const t=e.length>1?e.params[1]:0;switch(e.params[0]){case 14:2!==t&&this._onRequestWindowsOptionsReport.fire(y.GET_WIN_SIZE_PIXELS);break;case 16:this._onRequestWindowsOptionsReport.fire(y.GET_CELL_SIZE_PIXELS);break;case 18:this._bufferService&&this._coreService.triggerDataEvent(`${n.C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);break;case 22:0!==t&&2!==t||(this._windowTitleStack.push(this._windowTitle),this._windowTitleStack.length>10&&this._windowTitleStack.shift()),0!==t&&1!==t||(this._iconNameStack.push(this._iconName),this._iconNameStack.length>10&&this._iconNameStack.shift());break;case 23:0!==t&&2!==t||this._windowTitleStack.length&&this.setTitle(this._windowTitleStack.pop()),0!==t&&1!==t||this._iconNameStack.length&&this.setIconName(this._iconNameStack.pop());}return !0}saveCursor(e){return this._activeBuffer.savedX=this._activeBuffer.x,this._activeBuffer.savedY=this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,!0}restoreCursor(e){return this._activeBuffer.x=this._activeBuffer.savedX||0,this._activeBuffer.y=Math.max(this._activeBuffer.savedY-this._activeBuffer.ybase,0),this._curAttrData.fg=this._activeBuffer.savedCurAttrData.fg,this._curAttrData.bg=this._activeBuffer.savedCurAttrData.bg,this._charsetService.charset=this._savedCharset,this._activeBuffer.savedCharset&&(this._charsetService.charset=this._activeBuffer.savedCharset),this._restrictCursor(),!0}setTitle(e){return this._windowTitle=e,this._onTitleChange.fire(e),!0}setIconName(e){return this._iconName=e,!0}setOrReportIndexedColor(e){const t=[],i=e.split(";");for(;i.length>1;){const e=i.shift(),s=i.shift();if(/^\d+$/.exec(e)){const i=parseInt(e);if(0<=i&&i<256)if("?"===s)t.push({type:0,index:i});else {const e=(0, S.parseColor)(s);e&&t.push({type:1,index:i,color:e});}}}return t.length&&this._onColor.fire(t),!0}setHyperlink(e){const t=e.split(";");return !(t.length<2)&&(t[1]?this._createHyperlink(t[0],t[1]):!t[0]&&this._finishHyperlink())}_createHyperlink(e,t){this._getCurrentLinkId()&&this._finishHyperlink();const i=e.split(":");let s;const r=i.findIndex((e=>e.startsWith("id=")));return -1!==r&&(s=i[r].slice(3)||void 0),this._curAttrData.extended=this._curAttrData.extended.clone(),this._curAttrData.extended.urlId=this._oscLinkService.registerLink({id:s,uri:t}),this._curAttrData.updateExtended(),!0}_finishHyperlink(){return this._curAttrData.extended=this._curAttrData.extended.clone(),this._curAttrData.extended.urlId=0,this._curAttrData.updateExtended(),!0}_setOrReportSpecialColor(e,t){const i=e.split(";");for(let e=0;e<i.length&&!(t>=this._specialColors.length);++e,++t)if("?"===i[e])this._onColor.fire([{type:0,index:this._specialColors[t]}]);else {const s=(0, S.parseColor)(i[e]);s&&this._onColor.fire([{type:1,index:this._specialColors[t],color:s}]);}return !0}setOrReportFgColor(e){return this._setOrReportSpecialColor(e,0)}setOrReportBgColor(e){return this._setOrReportSpecialColor(e,1)}setOrReportCursorColor(e){return this._setOrReportSpecialColor(e,2)}restoreIndexedColor(e){if(!e)return this._onColor.fire([{type:2}]),!0;const t=[],i=e.split(";");for(let e=0;e<i.length;++e)if(/^\d+$/.exec(i[e])){const s=parseInt(i[e]);0<=s&&s<256&&t.push({type:2,index:s});}return t.length&&this._onColor.fire(t),!0}restoreFgColor(e){return this._onColor.fire([{type:2,index:256}]),!0}restoreBgColor(e){return this._onColor.fire([{type:2,index:257}]),!0}restoreCursorColor(e){return this._onColor.fire([{type:2,index:258}]),!0}nextLine(){return this._activeBuffer.x=0,this.index(),!0}keypadApplicationMode(){return this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire(),!0}keypadNumericMode(){return this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire(),!0}selectDefaultCharset(){return this._charsetService.setgLevel(0),this._charsetService.setgCharset(0,o.DEFAULT_CHARSET),!0}selectCharset(e){return 2!==e.length?(this.selectDefaultCharset(),!0):("/"===e[0]||this._charsetService.setgCharset(m[e[0]],o.CHARSETS[e[1]]||o.DEFAULT_CHARSET),!0)}index(){return this._restrictCursor(),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._restrictCursor(),!0}tabSet(){return this._activeBuffer.tabs[this._activeBuffer.x]=!0,!0}reverseIndex(){if(this._restrictCursor(),this._activeBuffer.y===this._activeBuffer.scrollTop){const e=this._activeBuffer.scrollBottom-this._activeBuffer.scrollTop;this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase+this._activeBuffer.y,e,1),this._activeBuffer.lines.set(this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.getBlankLine(this._eraseAttrData())),this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom);}else this._activeBuffer.y--,this._restrictCursor();return !0}fullReset(){return this._parser.reset(),this._onRequestReset.fire(),!0}reset(){this._curAttrData=l.DEFAULT_ATTR_DATA.clone(),this._eraseAttrDataInternal=l.DEFAULT_ATTR_DATA.clone();}_eraseAttrData(){return this._eraseAttrDataInternal.bg&=-67108864,this._eraseAttrDataInternal.bg|=67108863&this._curAttrData.bg,this._eraseAttrDataInternal}setgLevel(e){return this._charsetService.setgLevel(e),!0}screenAlignmentPattern(){const e=new u.CellData;e.content=1<<22|"E".charCodeAt(0),e.fg=this._curAttrData.fg,e.bg=this._curAttrData.bg,this._setCursor(0,0);for(let t=0;t<this._bufferService.rows;++t){const i=this._activeBuffer.ybase+this._activeBuffer.y+t,s=this._activeBuffer.lines.get(i);s&&(s.fill(e),s.isWrapped=!1);}return this._dirtyRowTracker.markAllDirty(),this._setCursor(0,0),!0}requestStatusString(e,t){const i=this._bufferService.buffer,s=this._optionsService.rawOptions;return (e=>(this._coreService.triggerDataEvent(`${n.C0.ESC}${e}${n.C0.ESC}\\`),!0))('"q'===e?`P1$r${this._curAttrData.isProtected()?1:0}"q`:'"p'===e?'P1$r61;1"p':"r"===e?`P1$r${i.scrollTop+1};${i.scrollBottom+1}r`:"m"===e?"P1$r0m":" q"===e?`P1$r${{block:2,underline:4,bar:6}[s.cursorStyle]-(s.cursorBlink?1:0)} q`:"P0$r")}markRangeDirty(e,t){this._dirtyRowTracker.markRangeDirty(e,t);}}t.InputHandler=E;let L=class{constructor(e){this._bufferService=e,this.clearRange();}clearRange(){this.start=this._bufferService.buffer.y,this.end=this._bufferService.buffer.y;}markDirty(e){e<this.start?this.start=e:e>this.end&&(this.end=e);}markRangeDirty(e,t){e>t&&(w=e,e=t,t=w),e<this.start&&(this.start=e),t>this.end&&(this.end=t);}markAllDirty(){this.markRangeDirty(0,this._bufferService.rows-1);}};L=s([r(0,v.IBufferService)],L);},844:(e,t)=>{function i(e){for(const t of e)t.dispose();e.length=0;}Object.defineProperty(t,"__esModule",{value:!0}),t.getDisposeArrayDisposable=t.disposeArray=t.toDisposable=t.Disposable=void 0,t.Disposable=class{constructor(){this._disposables=[],this._isDisposed=!1;}dispose(){this._isDisposed=!0;for(const e of this._disposables)e.dispose();this._disposables.length=0;}register(e){return this._disposables.push(e),e}unregister(e){const t=this._disposables.indexOf(e);-1!==t&&this._disposables.splice(t,1);}},t.toDisposable=function(e){return {dispose:e}},t.disposeArray=i,t.getDisposeArrayDisposable=function(e){return {dispose:()=>i(e)}};},1505:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FourKeyMap=t.TwoKeyMap=void 0;class i{constructor(){this._data={};}set(e,t,i){this._data[e]||(this._data[e]={}),this._data[e][t]=i;}get(e,t){return this._data[e]?this._data[e][t]:void 0}clear(){this._data={};}}t.TwoKeyMap=i,t.FourKeyMap=class{constructor(){this._data=new i;}set(e,t,s,r,n){this._data.get(e,t)||this._data.set(e,t,new i),this._data.get(e,t).set(s,r,n);}get(e,t,i,s){var r;return null===(r=this._data.get(e,t))||void 0===r?void 0:r.get(i,s)}clear(){this._data.clear();}};},6114:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isChromeOS=t.isLinux=t.isWindows=t.isIphone=t.isIpad=t.isMac=t.getSafariVersion=t.isSafari=t.isLegacyEdge=t.isFirefox=t.isNode=void 0,t.isNode="undefined"==typeof navigator;const i=t.isNode?"node":navigator.userAgent,s=t.isNode?"node":navigator.platform;t.isFirefox=i.includes("Firefox"),t.isLegacyEdge=i.includes("Edge"),t.isSafari=/^((?!chrome|android).)*safari/i.test(i),t.getSafariVersion=function(){if(!t.isSafari)return 0;const e=i.match(/Version\/(\d+)/);return null===e||e.length<2?0:parseInt(e[1])},t.isMac=["Macintosh","MacIntel","MacPPC","Mac68K"].includes(s),t.isIpad="iPad"===s,t.isIphone="iPhone"===s,t.isWindows=["Windows","Win16","Win32","WinCE"].includes(s),t.isLinux=s.indexOf("Linux")>=0,t.isChromeOS=/\bCrOS\b/.test(i);},6106:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SortedList=void 0;let i=0;t.SortedList=class{constructor(e){this._getKey=e,this._array=[];}clear(){this._array.length=0;}insert(e){0!==this._array.length?(i=this._search(this._getKey(e),0,this._array.length-1),this._array.splice(i,0,e)):this._array.push(e);}delete(e){if(0===this._array.length)return !1;const t=this._getKey(e);if(void 0===t)return !1;if(i=this._search(t,0,this._array.length-1),-1===i)return !1;if(this._getKey(this._array[i])!==t)return !1;do{if(this._array[i]===e)return this._array.splice(i,1),!0}while(++i<this._array.length&&this._getKey(this._array[i])===t);return !1}*getKeyIterator(e){if(0!==this._array.length&&(i=this._search(e,0,this._array.length-1),!(i<0||i>=this._array.length)&&this._getKey(this._array[i])===e))do{yield this._array[i];}while(++i<this._array.length&&this._getKey(this._array[i])===e)}forEachByKey(e,t){if(0!==this._array.length&&(i=this._search(e,0,this._array.length-1),!(i<0||i>=this._array.length)&&this._getKey(this._array[i])===e))do{t(this._array[i]);}while(++i<this._array.length&&this._getKey(this._array[i])===e)}values(){return this._array.values()}_search(e,t,i){if(i<t)return t;let s=Math.floor((t+i)/2);const r=this._getKey(this._array[s]);if(r>e)return this._search(e,t,s-1);if(r<e)return this._search(e,s+1,i);for(;s>0&&this._getKey(this._array[s-1])===e;)s--;return s}};},7226:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DebouncedIdleTask=t.IdleTaskQueue=t.PriorityTaskQueue=void 0;const s=i(6114);class r{constructor(){this._tasks=[],this._i=0;}enqueue(e){this._tasks.push(e),this._start();}flush(){for(;this._i<this._tasks.length;)this._tasks[this._i]()||this._i++;this.clear();}clear(){this._idleCallback&&(this._cancelCallback(this._idleCallback),this._idleCallback=void 0),this._i=0,this._tasks.length=0;}_start(){this._idleCallback||(this._idleCallback=this._requestCallback(this._process.bind(this)));}_process(e){this._idleCallback=void 0;let t=0,i=0,s=e.timeRemaining(),r=0;for(;this._i<this._tasks.length;){if(t=Date.now(),this._tasks[this._i]()||this._i++,t=Math.max(1,Date.now()-t),i=Math.max(t,i),r=e.timeRemaining(),1.5*i>r)return s-t<-20&&console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(s-t))}ms`),void this._start();s=r;}this.clear();}}class n extends r{_requestCallback(e){return setTimeout((()=>e(this._createDeadline(16))))}_cancelCallback(e){clearTimeout(e);}_createDeadline(e){const t=Date.now()+e;return {timeRemaining:()=>Math.max(0,t-Date.now())}}}t.PriorityTaskQueue=n,t.IdleTaskQueue=!s.isNode&&"requestIdleCallback"in window?class extends r{_requestCallback(e){return requestIdleCallback(e)}_cancelCallback(e){cancelIdleCallback(e);}}:n,t.DebouncedIdleTask=class{constructor(){this._queue=new t.IdleTaskQueue;}set(e){this._queue.clear(),this._queue.enqueue(e);}flush(){this._queue.flush();}};},9282:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.updateWindowsModeWrappedState=void 0;const s=i(643);t.updateWindowsModeWrappedState=function(e){const t=e.buffer.lines.get(e.buffer.ybase+e.buffer.y-1),i=null==t?void 0:t.get(e.cols-1),r=e.buffer.lines.get(e.buffer.ybase+e.buffer.y);r&&i&&(r.isWrapped=i[s.CHAR_DATA_CODE_INDEX]!==s.NULL_CELL_CODE&&i[s.CHAR_DATA_CODE_INDEX]!==s.WHITESPACE_CELL_CODE);};},3734:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExtendedAttrs=t.AttributeData=void 0;class i{constructor(){this.fg=0,this.bg=0,this.extended=new s;}static toColorRGB(e){return [e>>>16&255,e>>>8&255,255&e]}static fromColorRGB(e){return (255&e[0])<<16|(255&e[1])<<8|255&e[2]}clone(){const e=new i;return e.fg=this.fg,e.bg=this.bg,e.extended=this.extended.clone(),e}isInverse(){return 67108864&this.fg}isBold(){return 134217728&this.fg}isUnderline(){return this.hasExtendedAttrs()&&0!==this.extended.underlineStyle?1:268435456&this.fg}isBlink(){return 536870912&this.fg}isInvisible(){return 1073741824&this.fg}isItalic(){return 67108864&this.bg}isDim(){return 134217728&this.bg}isStrikethrough(){return 2147483648&this.fg}isProtected(){return 536870912&this.bg}isOverline(){return 1073741824&this.bg}getFgColorMode(){return 50331648&this.fg}getBgColorMode(){return 50331648&this.bg}isFgRGB(){return 50331648==(50331648&this.fg)}isBgRGB(){return 50331648==(50331648&this.bg)}isFgPalette(){return 16777216==(50331648&this.fg)||33554432==(50331648&this.fg)}isBgPalette(){return 16777216==(50331648&this.bg)||33554432==(50331648&this.bg)}isFgDefault(){return 0==(50331648&this.fg)}isBgDefault(){return 0==(50331648&this.bg)}isAttributeDefault(){return 0===this.fg&&0===this.bg}getFgColor(){switch(50331648&this.fg){case 16777216:case 33554432:return 255&this.fg;case 50331648:return 16777215&this.fg;default:return -1}}getBgColor(){switch(50331648&this.bg){case 16777216:case 33554432:return 255&this.bg;case 50331648:return 16777215&this.bg;default:return -1}}hasExtendedAttrs(){return 268435456&this.bg}updateExtended(){this.extended.isEmpty()?this.bg&=-268435457:this.bg|=268435456;}getUnderlineColor(){if(268435456&this.bg&&~this.extended.underlineColor)switch(50331648&this.extended.underlineColor){case 16777216:case 33554432:return 255&this.extended.underlineColor;case 50331648:return 16777215&this.extended.underlineColor;default:return this.getFgColor()}return this.getFgColor()}getUnderlineColorMode(){return 268435456&this.bg&&~this.extended.underlineColor?50331648&this.extended.underlineColor:this.getFgColorMode()}isUnderlineColorRGB(){return 268435456&this.bg&&~this.extended.underlineColor?50331648==(50331648&this.extended.underlineColor):this.isFgRGB()}isUnderlineColorPalette(){return 268435456&this.bg&&~this.extended.underlineColor?16777216==(50331648&this.extended.underlineColor)||33554432==(50331648&this.extended.underlineColor):this.isFgPalette()}isUnderlineColorDefault(){return 268435456&this.bg&&~this.extended.underlineColor?0==(50331648&this.extended.underlineColor):this.isFgDefault()}getUnderlineStyle(){return 268435456&this.fg?268435456&this.bg?this.extended.underlineStyle:1:0}}t.AttributeData=i;class s{constructor(e=0,t=0){this._ext=0,this._urlId=0,this._ext=e,this._urlId=t;}get ext(){return this._urlId?-469762049&this._ext|this.underlineStyle<<26:this._ext}set ext(e){this._ext=e;}get underlineStyle(){return this._urlId?5:(469762048&this._ext)>>26}set underlineStyle(e){this._ext&=-469762049,this._ext|=e<<26&469762048;}get underlineColor(){return 67108863&this._ext}set underlineColor(e){this._ext&=-67108864,this._ext|=67108863&e;}get urlId(){return this._urlId}set urlId(e){this._urlId=e;}clone(){return new s(this._ext,this._urlId)}isEmpty(){return 0===this.underlineStyle&&0===this._urlId}}t.ExtendedAttrs=s;},9092:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Buffer=t.MAX_BUFFER_SIZE=void 0;const s=i(6349),r=i(8437),n=i(511),o=i(643),a=i(4634),h=i(4863),c=i(7116),l=i(3734),d=i(7226);t.MAX_BUFFER_SIZE=4294967295,t.Buffer=class{constructor(e,t,i){this._hasScrollback=e,this._optionsService=t,this._bufferService=i,this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.tabs={},this.savedY=0,this.savedX=0,this.savedCurAttrData=r.DEFAULT_ATTR_DATA.clone(),this.savedCharset=c.DEFAULT_CHARSET,this.markers=[],this._nullCell=n.CellData.fromCharData([0,o.NULL_CELL_CHAR,o.NULL_CELL_WIDTH,o.NULL_CELL_CODE]),this._whitespaceCell=n.CellData.fromCharData([0,o.WHITESPACE_CELL_CHAR,o.WHITESPACE_CELL_WIDTH,o.WHITESPACE_CELL_CODE]),this._isClearing=!1,this._memoryCleanupQueue=new d.IdleTaskQueue,this._memoryCleanupPosition=0,this._cols=this._bufferService.cols,this._rows=this._bufferService.rows,this.lines=new s.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops();}getNullCell(e){return e?(this._nullCell.fg=e.fg,this._nullCell.bg=e.bg,this._nullCell.extended=e.extended):(this._nullCell.fg=0,this._nullCell.bg=0,this._nullCell.extended=new l.ExtendedAttrs),this._nullCell}getWhitespaceCell(e){return e?(this._whitespaceCell.fg=e.fg,this._whitespaceCell.bg=e.bg,this._whitespaceCell.extended=e.extended):(this._whitespaceCell.fg=0,this._whitespaceCell.bg=0,this._whitespaceCell.extended=new l.ExtendedAttrs),this._whitespaceCell}getBlankLine(e,t){return new r.BufferLine(this._bufferService.cols,this.getNullCell(e),t)}get hasScrollback(){return this._hasScrollback&&this.lines.maxLength>this._rows}get isCursorInViewport(){const e=this.ybase+this.y-this.ydisp;return e>=0&&e<this._rows}_getCorrectBufferLength(e){if(!this._hasScrollback)return e;const i=e+this._optionsService.rawOptions.scrollback;return i>t.MAX_BUFFER_SIZE?t.MAX_BUFFER_SIZE:i}fillViewportRows(e){if(0===this.lines.length){void 0===e&&(e=r.DEFAULT_ATTR_DATA);let t=this._rows;for(;t--;)this.lines.push(this.getBlankLine(e));}}clear(){this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.lines=new s.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops();}resize(e,t){const i=this.getNullCell(r.DEFAULT_ATTR_DATA);let s=0;const n=this._getCorrectBufferLength(t);if(n>this.lines.maxLength&&(this.lines.maxLength=n),this.lines.length>0){if(this._cols<e)for(let t=0;t<this.lines.length;t++)s+=+this.lines.get(t).resize(e,i);let o=0;if(this._rows<t)for(let s=this._rows;s<t;s++)this.lines.length<t+this.ybase&&(this._optionsService.rawOptions.windowsMode||void 0!==this._optionsService.rawOptions.windowsPty.backend||void 0!==this._optionsService.rawOptions.windowsPty.buildNumber?this.lines.push(new r.BufferLine(e,i)):this.ybase>0&&this.lines.length<=this.ybase+this.y+o+1?(this.ybase--,o++,this.ydisp>0&&this.ydisp--):this.lines.push(new r.BufferLine(e,i)));else for(let e=this._rows;e>t;e--)this.lines.length>t+this.ybase&&(this.lines.length>this.ybase+this.y+1?this.lines.pop():(this.ybase++,this.ydisp++));if(n<this.lines.maxLength){const e=this.lines.length-n;e>0&&(this.lines.trimStart(e),this.ybase=Math.max(this.ybase-e,0),this.ydisp=Math.max(this.ydisp-e,0),this.savedY=Math.max(this.savedY-e,0)),this.lines.maxLength=n;}this.x=Math.min(this.x,e-1),this.y=Math.min(this.y,t-1),o&&(this.y+=o),this.savedX=Math.min(this.savedX,e-1),this.scrollTop=0;}if(this.scrollBottom=t-1,this._isReflowEnabled&&(this._reflow(e,t),this._cols>e))for(let t=0;t<this.lines.length;t++)s+=+this.lines.get(t).resize(e,i);this._cols=e,this._rows=t,this._memoryCleanupQueue.clear(),s>.1*this.lines.length&&(this._memoryCleanupPosition=0,this._memoryCleanupQueue.enqueue((()=>this._batchedMemoryCleanup())));}_batchedMemoryCleanup(){let e=!0;this._memoryCleanupPosition>=this.lines.length&&(this._memoryCleanupPosition=0,e=!1);let t=0;for(;this._memoryCleanupPosition<this.lines.length;)if(t+=this.lines.get(this._memoryCleanupPosition++).cleanupMemory(),t>100)return !0;return e}get _isReflowEnabled(){const e=this._optionsService.rawOptions.windowsPty;return e&&e.buildNumber?this._hasScrollback&&"conpty"===e.backend&&e.buildNumber>=21376:this._hasScrollback&&!this._optionsService.rawOptions.windowsMode}_reflow(e,t){this._cols!==e&&(e>this._cols?this._reflowLarger(e,t):this._reflowSmaller(e,t));}_reflowLarger(e,t){const i=(0, a.reflowLargerGetLinesToRemove)(this.lines,this._cols,e,this.ybase+this.y,this.getNullCell(r.DEFAULT_ATTR_DATA));if(i.length>0){const s=(0, a.reflowLargerCreateNewLayout)(this.lines,i);(0, a.reflowLargerApplyNewLayout)(this.lines,s.layout),this._reflowLargerAdjustViewport(e,t,s.countRemoved);}}_reflowLargerAdjustViewport(e,t,i){const s=this.getNullCell(r.DEFAULT_ATTR_DATA);let n=i;for(;n-- >0;)0===this.ybase?(this.y>0&&this.y--,this.lines.length<t&&this.lines.push(new r.BufferLine(e,s))):(this.ydisp===this.ybase&&this.ydisp--,this.ybase--);this.savedY=Math.max(this.savedY-i,0);}_reflowSmaller(e,t){const i=this.getNullCell(r.DEFAULT_ATTR_DATA),s=[];let n=0;for(let o=this.lines.length-1;o>=0;o--){let h=this.lines.get(o);if(!h||!h.isWrapped&&h.getTrimmedLength()<=e)continue;const c=[h];for(;h.isWrapped&&o>0;)h=this.lines.get(--o),c.unshift(h);const l=this.ybase+this.y;if(l>=o&&l<o+c.length)continue;const d=c[c.length-1].getTrimmedLength(),_=(0, a.reflowSmallerGetNewLineLengths)(c,this._cols,e),u=_.length-c.length;let f;f=0===this.ybase&&this.y!==this.lines.length-1?Math.max(0,this.y-this.lines.maxLength+u):Math.max(0,this.lines.length-this.lines.maxLength+u);const v=[];for(let e=0;e<u;e++){const e=this.getBlankLine(r.DEFAULT_ATTR_DATA,!0);v.push(e);}v.length>0&&(s.push({start:o+c.length+n,newLines:v}),n+=v.length),c.push(...v);let g=_.length-1,p=_[g];0===p&&(g--,p=_[g]);let S=c.length-u-1,m=d;for(;S>=0;){const e=Math.min(m,p);if(void 0===c[g])break;if(c[g].copyCellsFrom(c[S],m-e,p-e,e,!0),p-=e,0===p&&(g--,p=_[g]),m-=e,0===m){S--;const e=Math.max(S,0);m=(0, a.getWrappedLineTrimmedLength)(c,e,this._cols);}}for(let t=0;t<c.length;t++)_[t]<e&&c[t].setCell(_[t],i);let C=u-f;for(;C-- >0;)0===this.ybase?this.y<t-1?(this.y++,this.lines.pop()):(this.ybase++,this.ydisp++):this.ybase<Math.min(this.lines.maxLength,this.lines.length+n)-t&&(this.ybase===this.ydisp&&this.ydisp++,this.ybase++);this.savedY=Math.min(this.savedY+u,this.ybase+t-1);}if(s.length>0){const e=[],t=[];for(let e=0;e<this.lines.length;e++)t.push(this.lines.get(e));const i=this.lines.length;let r=i-1,o=0,a=s[o];this.lines.length=Math.min(this.lines.maxLength,this.lines.length+n);let h=0;for(let c=Math.min(this.lines.maxLength-1,i+n-1);c>=0;c--)if(a&&a.start>r+h){for(let e=a.newLines.length-1;e>=0;e--)this.lines.set(c--,a.newLines[e]);c++,e.push({index:r+1,amount:a.newLines.length}),h+=a.newLines.length,a=s[++o];}else this.lines.set(c,t[r--]);let c=0;for(let t=e.length-1;t>=0;t--)e[t].index+=c,this.lines.onInsertEmitter.fire(e[t]),c+=e[t].amount;const l=Math.max(0,i+n-this.lines.maxLength);l>0&&this.lines.onTrimEmitter.fire(l);}}translateBufferLineToString(e,t,i=0,s){const r=this.lines.get(e);return r?r.translateToString(t,i,s):""}getWrappedRangeForLine(e){let t=e,i=e;for(;t>0&&this.lines.get(t).isWrapped;)t--;for(;i+1<this.lines.length&&this.lines.get(i+1).isWrapped;)i++;return {first:t,last:i}}setupTabStops(e){for(null!=e?this.tabs[e]||(e=this.prevStop(e)):(this.tabs={},e=0);e<this._cols;e+=this._optionsService.rawOptions.tabStopWidth)this.tabs[e]=!0;}prevStop(e){for(null==e&&(e=this.x);!this.tabs[--e]&&e>0;);return e>=this._cols?this._cols-1:e<0?0:e}nextStop(e){for(null==e&&(e=this.x);!this.tabs[++e]&&e<this._cols;);return e>=this._cols?this._cols-1:e<0?0:e}clearMarkers(e){this._isClearing=!0;for(let t=0;t<this.markers.length;t++)this.markers[t].line===e&&(this.markers[t].dispose(),this.markers.splice(t--,1));this._isClearing=!1;}clearAllMarkers(){this._isClearing=!0;for(let e=0;e<this.markers.length;e++)this.markers[e].dispose(),this.markers.splice(e--,1);this._isClearing=!1;}addMarker(e){const t=new h.Marker(e);return this.markers.push(t),t.register(this.lines.onTrim((e=>{t.line-=e,t.line<0&&t.dispose();}))),t.register(this.lines.onInsert((e=>{t.line>=e.index&&(t.line+=e.amount);}))),t.register(this.lines.onDelete((e=>{t.line>=e.index&&t.line<e.index+e.amount&&t.dispose(),t.line>e.index&&(t.line-=e.amount);}))),t.register(t.onDispose((()=>this._removeMarker(t)))),t}_removeMarker(e){this._isClearing||this.markers.splice(this.markers.indexOf(e),1);}};},8437:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferLine=t.DEFAULT_ATTR_DATA=void 0;const s=i(482),r=i(643),n=i(511),o=i(3734);t.DEFAULT_ATTR_DATA=Object.freeze(new o.AttributeData);let a=0;class h{constructor(e,t,i=!1){this.isWrapped=i,this._combined={},this._extendedAttrs={},this._data=new Uint32Array(3*e);const s=t||n.CellData.fromCharData([0,r.NULL_CELL_CHAR,r.NULL_CELL_WIDTH,r.NULL_CELL_CODE]);for(let t=0;t<e;++t)this.setCell(t,s);this.length=e;}get(e){const t=this._data[3*e+0],i=2097151&t;return [this._data[3*e+1],2097152&t?this._combined[e]:i?(0, s.stringFromCodePoint)(i):"",t>>22,2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):i]}set(e,t){this._data[3*e+1]=t[r.CHAR_DATA_ATTR_INDEX],t[r.CHAR_DATA_CHAR_INDEX].length>1?(this._combined[e]=t[1],this._data[3*e+0]=2097152|e|t[r.CHAR_DATA_WIDTH_INDEX]<<22):this._data[3*e+0]=t[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|t[r.CHAR_DATA_WIDTH_INDEX]<<22;}getWidth(e){return this._data[3*e+0]>>22}hasWidth(e){return 12582912&this._data[3*e+0]}getFg(e){return this._data[3*e+1]}getBg(e){return this._data[3*e+2]}hasContent(e){return 4194303&this._data[3*e+0]}getCodePoint(e){const t=this._data[3*e+0];return 2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):2097151&t}isCombined(e){return 2097152&this._data[3*e+0]}getString(e){const t=this._data[3*e+0];return 2097152&t?this._combined[e]:2097151&t?(0, s.stringFromCodePoint)(2097151&t):""}isProtected(e){return 536870912&this._data[3*e+2]}loadCell(e,t){return a=3*e,t.content=this._data[a+0],t.fg=this._data[a+1],t.bg=this._data[a+2],2097152&t.content&&(t.combinedData=this._combined[e]),268435456&t.bg&&(t.extended=this._extendedAttrs[e]),t}setCell(e,t){2097152&t.content&&(this._combined[e]=t.combinedData),268435456&t.bg&&(this._extendedAttrs[e]=t.extended),this._data[3*e+0]=t.content,this._data[3*e+1]=t.fg,this._data[3*e+2]=t.bg;}setCellFromCodePoint(e,t,i,s,r,n){268435456&r&&(this._extendedAttrs[e]=n),this._data[3*e+0]=t|i<<22,this._data[3*e+1]=s,this._data[3*e+2]=r;}addCodepointToCell(e,t){let i=this._data[3*e+0];2097152&i?this._combined[e]+=(0, s.stringFromCodePoint)(t):(2097151&i?(this._combined[e]=(0, s.stringFromCodePoint)(2097151&i)+(0, s.stringFromCodePoint)(t),i&=-2097152,i|=2097152):i=t|1<<22,this._data[3*e+0]=i);}insertCells(e,t,i,s){if((e%=this.length)&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs),t<this.length-e){const s=new n.CellData;for(let i=this.length-e-t-1;i>=0;--i)this.setCell(e+t+i,this.loadCell(e+i,s));for(let s=0;s<t;++s)this.setCell(e+s,i);}else for(let t=e;t<this.length;++t)this.setCell(t,i);2===this.getWidth(this.length-1)&&this.setCellFromCodePoint(this.length-1,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs);}deleteCells(e,t,i,s){if(e%=this.length,t<this.length-e){const s=new n.CellData;for(let i=0;i<this.length-e-t;++i)this.setCell(e+i,this.loadCell(e+t+i,s));for(let e=this.length-t;e<this.length;++e)this.setCell(e,i);}else for(let t=e;t<this.length;++t)this.setCell(t,i);e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs),0!==this.getWidth(e)||this.hasContent(e)||this.setCellFromCodePoint(e,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs);}replaceCells(e,t,i,s,r=!1){if(r)for(e&&2===this.getWidth(e-1)&&!this.isProtected(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs),t<this.length&&2===this.getWidth(t-1)&&!this.isProtected(t)&&this.setCellFromCodePoint(t,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs);e<t&&e<this.length;)this.isProtected(e)||this.setCell(e,i),e++;else for(e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs),t<this.length&&2===this.getWidth(t-1)&&this.setCellFromCodePoint(t,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs);e<t&&e<this.length;)this.setCell(e++,i);}resize(e,t){if(e===this.length)return 4*this._data.length*2<this._data.buffer.byteLength;const i=3*e;if(e>this.length){if(this._data.buffer.byteLength>=4*i)this._data=new Uint32Array(this._data.buffer,0,i);else {const e=new Uint32Array(i);e.set(this._data),this._data=e;}for(let i=this.length;i<e;++i)this.setCell(i,t);}else {this._data=this._data.subarray(0,i);const t=Object.keys(this._combined);for(let i=0;i<t.length;i++){const s=parseInt(t[i],10);s>=e&&delete this._combined[s];}const s=Object.keys(this._extendedAttrs);for(let t=0;t<s.length;t++){const i=parseInt(s[t],10);i>=e&&delete this._extendedAttrs[i];}}return this.length=e,4*i*2<this._data.buffer.byteLength}cleanupMemory(){if(4*this._data.length*2<this._data.buffer.byteLength){const e=new Uint32Array(this._data.length);return e.set(this._data),this._data=e,1}return 0}fill(e,t=!1){if(t)for(let t=0;t<this.length;++t)this.isProtected(t)||this.setCell(t,e);else {this._combined={},this._extendedAttrs={};for(let t=0;t<this.length;++t)this.setCell(t,e);}}copyFrom(e){this.length!==e.length?this._data=new Uint32Array(e._data):this._data.set(e._data),this.length=e.length,this._combined={};for(const t in e._combined)this._combined[t]=e._combined[t];this._extendedAttrs={};for(const t in e._extendedAttrs)this._extendedAttrs[t]=e._extendedAttrs[t];this.isWrapped=e.isWrapped;}clone(){const e=new h(0);e._data=new Uint32Array(this._data),e.length=this.length;for(const t in this._combined)e._combined[t]=this._combined[t];for(const t in this._extendedAttrs)e._extendedAttrs[t]=this._extendedAttrs[t];return e.isWrapped=this.isWrapped,e}getTrimmedLength(){for(let e=this.length-1;e>=0;--e)if(4194303&this._data[3*e+0])return e+(this._data[3*e+0]>>22);return 0}copyCellsFrom(e,t,i,s,r){const n=e._data;if(r)for(let r=s-1;r>=0;r--){for(let e=0;e<3;e++)this._data[3*(i+r)+e]=n[3*(t+r)+e];268435456&n[3*(t+r)+2]&&(this._extendedAttrs[i+r]=e._extendedAttrs[t+r]);}else for(let r=0;r<s;r++){for(let e=0;e<3;e++)this._data[3*(i+r)+e]=n[3*(t+r)+e];268435456&n[3*(t+r)+2]&&(this._extendedAttrs[i+r]=e._extendedAttrs[t+r]);}const o=Object.keys(e._combined);for(let s=0;s<o.length;s++){const r=parseInt(o[s],10);r>=t&&(this._combined[r-t+i]=e._combined[r]);}}translateToString(e=!1,t=0,i=this.length){e&&(i=Math.min(i,this.getTrimmedLength()));let n="";for(;t<i;){const e=this._data[3*t+0],i=2097151&e;n+=2097152&e?this._combined[t]:i?(0, s.stringFromCodePoint)(i):r.WHITESPACE_CELL_CHAR,t+=e>>22||1;}return n}}t.BufferLine=h;},4841:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getRangeLength=void 0,t.getRangeLength=function(e,t){if(e.start.y>e.end.y)throw new Error(`Buffer range end (${e.end.x}, ${e.end.y}) cannot be before start (${e.start.x}, ${e.start.y})`);return t*(e.end.y-e.start.y)+(e.end.x-e.start.x+1)};},4634:(e,t)=>{function i(e,t,i){if(t===e.length-1)return e[t].getTrimmedLength();const s=!e[t].hasContent(i-1)&&1===e[t].getWidth(i-1),r=2===e[t+1].getWidth(0);return s&&r?i-1:i}Object.defineProperty(t,"__esModule",{value:!0}),t.getWrappedLineTrimmedLength=t.reflowSmallerGetNewLineLengths=t.reflowLargerApplyNewLayout=t.reflowLargerCreateNewLayout=t.reflowLargerGetLinesToRemove=void 0,t.reflowLargerGetLinesToRemove=function(e,t,s,r,n){const o=[];for(let a=0;a<e.length-1;a++){let h=a,c=e.get(++h);if(!c.isWrapped)continue;const l=[e.get(a)];for(;h<e.length&&c.isWrapped;)l.push(c),c=e.get(++h);if(r>=a&&r<h){a+=l.length-1;continue}let d=0,_=i(l,d,t),u=1,f=0;for(;u<l.length;){const e=i(l,u,t),r=e-f,o=s-_,a=Math.min(r,o);l[d].copyCellsFrom(l[u],f,_,a,!1),_+=a,_===s&&(d++,_=0),f+=a,f===e&&(u++,f=0),0===_&&0!==d&&2===l[d-1].getWidth(s-1)&&(l[d].copyCellsFrom(l[d-1],s-1,_++,1,!1),l[d-1].setCell(s-1,n));}l[d].replaceCells(_,s,n);let v=0;for(let e=l.length-1;e>0&&(e>d||0===l[e].getTrimmedLength());e--)v++;v>0&&(o.push(a+l.length-v),o.push(v)),a+=l.length-1;}return o},t.reflowLargerCreateNewLayout=function(e,t){const i=[];let s=0,r=t[s],n=0;for(let o=0;o<e.length;o++)if(r===o){const i=t[++s];e.onDeleteEmitter.fire({index:o-n,amount:i}),o+=i-1,n+=i,r=t[++s];}else i.push(o);return {layout:i,countRemoved:n}},t.reflowLargerApplyNewLayout=function(e,t){const i=[];for(let s=0;s<t.length;s++)i.push(e.get(t[s]));for(let t=0;t<i.length;t++)e.set(t,i[t]);e.length=t.length;},t.reflowSmallerGetNewLineLengths=function(e,t,s){const r=[],n=e.map(((s,r)=>i(e,r,t))).reduce(((e,t)=>e+t));let o=0,a=0,h=0;for(;h<n;){if(n-h<s){r.push(n-h);break}o+=s;const c=i(e,a,t);o>c&&(o-=c,a++);const l=2===e[a].getWidth(o-1);l&&o--;const d=l?s-1:s;r.push(d),h+=d;}return r},t.getWrappedLineTrimmedLength=i;},5295:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferSet=void 0;const s=i(9092),r=i(8460),n=i(844);class o extends n.Disposable{constructor(e,t){super(),this._optionsService=e,this._bufferService=t,this._onBufferActivate=this.register(new r.EventEmitter),this.onBufferActivate=this._onBufferActivate.event,this.reset(),this.register(this._optionsService.onSpecificOptionChange("scrollback",(()=>this.resize(this._bufferService.cols,this._bufferService.rows)))),this.register(this._optionsService.onSpecificOptionChange("tabStopWidth",(()=>this.setupTabStops())));}reset(){this._normal=new s.Buffer(!0,this._optionsService,this._bufferService),this._normal.fillViewportRows(),this._alt=new s.Buffer(!1,this._optionsService,this._bufferService),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}),this.setupTabStops();}get alt(){return this._alt}get active(){return this._activeBuffer}get normal(){return this._normal}activateNormalBuffer(){this._activeBuffer!==this._normal&&(this._normal.x=this._alt.x,this._normal.y=this._alt.y,this._alt.clearAllMarkers(),this._alt.clear(),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}));}activateAltBuffer(e){this._activeBuffer!==this._alt&&(this._alt.fillViewportRows(e),this._alt.x=this._normal.x,this._alt.y=this._normal.y,this._activeBuffer=this._alt,this._onBufferActivate.fire({activeBuffer:this._alt,inactiveBuffer:this._normal}));}resize(e,t){this._normal.resize(e,t),this._alt.resize(e,t),this.setupTabStops(e);}setupTabStops(e){this._normal.setupTabStops(e),this._alt.setupTabStops(e);}}t.BufferSet=o;},511:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CellData=void 0;const s=i(482),r=i(643),n=i(3734);class o extends n.AttributeData{constructor(){super(...arguments),this.content=0,this.fg=0,this.bg=0,this.extended=new n.ExtendedAttrs,this.combinedData="";}static fromCharData(e){const t=new o;return t.setFromCharData(e),t}isCombined(){return 2097152&this.content}getWidth(){return this.content>>22}getChars(){return 2097152&this.content?this.combinedData:2097151&this.content?(0, s.stringFromCodePoint)(2097151&this.content):""}getCode(){return this.isCombined()?this.combinedData.charCodeAt(this.combinedData.length-1):2097151&this.content}setFromCharData(e){this.fg=e[r.CHAR_DATA_ATTR_INDEX],this.bg=0;let t=!1;if(e[r.CHAR_DATA_CHAR_INDEX].length>2)t=!0;else if(2===e[r.CHAR_DATA_CHAR_INDEX].length){const i=e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0);if(55296<=i&&i<=56319){const s=e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(1);56320<=s&&s<=57343?this.content=1024*(i-55296)+s-56320+65536|e[r.CHAR_DATA_WIDTH_INDEX]<<22:t=!0;}else t=!0;}else this.content=e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|e[r.CHAR_DATA_WIDTH_INDEX]<<22;t&&(this.combinedData=e[r.CHAR_DATA_CHAR_INDEX],this.content=2097152|e[r.CHAR_DATA_WIDTH_INDEX]<<22);}getAsCharData(){return [this.fg,this.getChars(),this.getWidth(),this.getCode()]}}t.CellData=o;},643:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WHITESPACE_CELL_CODE=t.WHITESPACE_CELL_WIDTH=t.WHITESPACE_CELL_CHAR=t.NULL_CELL_CODE=t.NULL_CELL_WIDTH=t.NULL_CELL_CHAR=t.CHAR_DATA_CODE_INDEX=t.CHAR_DATA_WIDTH_INDEX=t.CHAR_DATA_CHAR_INDEX=t.CHAR_DATA_ATTR_INDEX=t.DEFAULT_EXT=t.DEFAULT_ATTR=t.DEFAULT_COLOR=void 0,t.DEFAULT_COLOR=0,t.DEFAULT_ATTR=256|t.DEFAULT_COLOR<<9,t.DEFAULT_EXT=0,t.CHAR_DATA_ATTR_INDEX=0,t.CHAR_DATA_CHAR_INDEX=1,t.CHAR_DATA_WIDTH_INDEX=2,t.CHAR_DATA_CODE_INDEX=3,t.NULL_CELL_CHAR="",t.NULL_CELL_WIDTH=1,t.NULL_CELL_CODE=0,t.WHITESPACE_CELL_CHAR=" ",t.WHITESPACE_CELL_WIDTH=1,t.WHITESPACE_CELL_CODE=32;},4863:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Marker=void 0;const s=i(8460),r=i(844);class n{constructor(e){this.line=e,this.isDisposed=!1,this._disposables=[],this._id=n._nextId++,this._onDispose=this.register(new s.EventEmitter),this.onDispose=this._onDispose.event;}get id(){return this._id}dispose(){this.isDisposed||(this.isDisposed=!0,this.line=-1,this._onDispose.fire(),(0, r.disposeArray)(this._disposables),this._disposables.length=0);}register(e){return this._disposables.push(e),e}}t.Marker=n,n._nextId=1;},7116:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_CHARSET=t.CHARSETS=void 0,t.CHARSETS={},t.DEFAULT_CHARSET=t.CHARSETS.B,t.CHARSETS[0]={"`":"◆",a:"▒",b:"␉",c:"␌",d:"␍",e:"␊",f:"°",g:"±",h:"␤",i:"␋",j:"┘",k:"┐",l:"┌",m:"└",n:"┼",o:"⎺",p:"⎻",q:"─",r:"⎼",s:"⎽",t:"├",u:"┤",v:"┴",w:"┬",x:"│",y:"≤",z:"≥","{":"π","|":"≠","}":"£","~":"·"},t.CHARSETS.A={"#":"£"},t.CHARSETS.B=void 0,t.CHARSETS[4]={"#":"£","@":"¾","[":"ij","\\":"½","]":"|","{":"¨","|":"f","}":"¼","~":"´"},t.CHARSETS.C=t.CHARSETS[5]={"[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},t.CHARSETS.R={"#":"£","@":"à","[":"°","\\":"ç","]":"§","{":"é","|":"ù","}":"è","~":"¨"},t.CHARSETS.Q={"@":"à","[":"â","\\":"ç","]":"ê","^":"î","`":"ô","{":"é","|":"ù","}":"è","~":"û"},t.CHARSETS.K={"@":"§","[":"Ä","\\":"Ö","]":"Ü","{":"ä","|":"ö","}":"ü","~":"ß"},t.CHARSETS.Y={"#":"£","@":"§","[":"°","\\":"ç","]":"é","`":"ù","{":"à","|":"ò","}":"è","~":"ì"},t.CHARSETS.E=t.CHARSETS[6]={"@":"Ä","[":"Æ","\\":"Ø","]":"Å","^":"Ü","`":"ä","{":"æ","|":"ø","}":"å","~":"ü"},t.CHARSETS.Z={"#":"£","@":"§","[":"¡","\\":"Ñ","]":"¿","{":"°","|":"ñ","}":"ç"},t.CHARSETS.H=t.CHARSETS[7]={"@":"É","[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},t.CHARSETS["="]={"#":"ù","@":"à","[":"é","\\":"ç","]":"ê","^":"î",_:"è","`":"ô","{":"ä","|":"ö","}":"ü","~":"û"};},2584:(e,t)=>{var i,s;Object.defineProperty(t,"__esModule",{value:!0}),t.C1_ESCAPED=t.C1=t.C0=void 0,function(e){e.NUL="\0",e.SOH="",e.STX="",e.ETX="",e.EOT="",e.ENQ="",e.ACK="",e.BEL="",e.BS="\b",e.HT="\t",e.LF="\n",e.VT="\v",e.FF="\f",e.CR="\r",e.SO="",e.SI="",e.DLE="",e.DC1="",e.DC2="",e.DC3="",e.DC4="",e.NAK="",e.SYN="",e.ETB="",e.CAN="",e.EM="",e.SUB="",e.ESC="",e.FS="",e.GS="",e.RS="",e.US="",e.SP=" ",e.DEL="";}(i=t.C0||(t.C0={})),(s=t.C1||(t.C1={})).PAD="",s.HOP="",s.BPH="",s.NBH="",s.IND="",s.NEL="",s.SSA="",s.ESA="",s.HTS="",s.HTJ="",s.VTS="",s.PLD="",s.PLU="",s.RI="",s.SS2="",s.SS3="",s.DCS="",s.PU1="",s.PU2="",s.STS="",s.CCH="",s.MW="",s.SPA="",s.EPA="",s.SOS="",s.SGCI="",s.SCI="",s.CSI="",s.ST="",s.OSC="",s.PM="",s.APC="",(t.C1_ESCAPED||(t.C1_ESCAPED={})).ST=`${i.ESC}\\`;},7399:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.evaluateKeyboardEvent=void 0;const s=i(2584),r={48:["0",")"],49:["1","!"],50:["2","@"],51:["3","#"],52:["4","$"],53:["5","%"],54:["6","^"],55:["7","&"],56:["8","*"],57:["9","("],186:[";",":"],187:["=","+"],188:[",","<"],189:["-","_"],190:[".",">"],191:["/","?"],192:["`","~"],219:["[","{"],220:["\\","|"],221:["]","}"],222:["'",'"']};t.evaluateKeyboardEvent=function(e,t,i,n){const o={type:0,cancel:!1,key:void 0},a=(e.shiftKey?1:0)|(e.altKey?2:0)|(e.ctrlKey?4:0)|(e.metaKey?8:0);switch(e.keyCode){case 0:"UIKeyInputUpArrow"===e.key?o.key=t?s.C0.ESC+"OA":s.C0.ESC+"[A":"UIKeyInputLeftArrow"===e.key?o.key=t?s.C0.ESC+"OD":s.C0.ESC+"[D":"UIKeyInputRightArrow"===e.key?o.key=t?s.C0.ESC+"OC":s.C0.ESC+"[C":"UIKeyInputDownArrow"===e.key&&(o.key=t?s.C0.ESC+"OB":s.C0.ESC+"[B");break;case 8:if(e.altKey){o.key=s.C0.ESC+s.C0.DEL;break}o.key=s.C0.DEL;break;case 9:if(e.shiftKey){o.key=s.C0.ESC+"[Z";break}o.key=s.C0.HT,o.cancel=!0;break;case 13:o.key=e.altKey?s.C0.ESC+s.C0.CR:s.C0.CR,o.cancel=!0;break;case 27:o.key=s.C0.ESC,e.altKey&&(o.key=s.C0.ESC+s.C0.ESC),o.cancel=!0;break;case 37:if(e.metaKey)break;a?(o.key=s.C0.ESC+"[1;"+(a+1)+"D",o.key===s.C0.ESC+"[1;3D"&&(o.key=s.C0.ESC+(i?"b":"[1;5D"))):o.key=t?s.C0.ESC+"OD":s.C0.ESC+"[D";break;case 39:if(e.metaKey)break;a?(o.key=s.C0.ESC+"[1;"+(a+1)+"C",o.key===s.C0.ESC+"[1;3C"&&(o.key=s.C0.ESC+(i?"f":"[1;5C"))):o.key=t?s.C0.ESC+"OC":s.C0.ESC+"[C";break;case 38:if(e.metaKey)break;a?(o.key=s.C0.ESC+"[1;"+(a+1)+"A",i||o.key!==s.C0.ESC+"[1;3A"||(o.key=s.C0.ESC+"[1;5A")):o.key=t?s.C0.ESC+"OA":s.C0.ESC+"[A";break;case 40:if(e.metaKey)break;a?(o.key=s.C0.ESC+"[1;"+(a+1)+"B",i||o.key!==s.C0.ESC+"[1;3B"||(o.key=s.C0.ESC+"[1;5B")):o.key=t?s.C0.ESC+"OB":s.C0.ESC+"[B";break;case 45:e.shiftKey||e.ctrlKey||(o.key=s.C0.ESC+"[2~");break;case 46:o.key=a?s.C0.ESC+"[3;"+(a+1)+"~":s.C0.ESC+"[3~";break;case 36:o.key=a?s.C0.ESC+"[1;"+(a+1)+"H":t?s.C0.ESC+"OH":s.C0.ESC+"[H";break;case 35:o.key=a?s.C0.ESC+"[1;"+(a+1)+"F":t?s.C0.ESC+"OF":s.C0.ESC+"[F";break;case 33:e.shiftKey?o.type=2:e.ctrlKey?o.key=s.C0.ESC+"[5;"+(a+1)+"~":o.key=s.C0.ESC+"[5~";break;case 34:e.shiftKey?o.type=3:e.ctrlKey?o.key=s.C0.ESC+"[6;"+(a+1)+"~":o.key=s.C0.ESC+"[6~";break;case 112:o.key=a?s.C0.ESC+"[1;"+(a+1)+"P":s.C0.ESC+"OP";break;case 113:o.key=a?s.C0.ESC+"[1;"+(a+1)+"Q":s.C0.ESC+"OQ";break;case 114:o.key=a?s.C0.ESC+"[1;"+(a+1)+"R":s.C0.ESC+"OR";break;case 115:o.key=a?s.C0.ESC+"[1;"+(a+1)+"S":s.C0.ESC+"OS";break;case 116:o.key=a?s.C0.ESC+"[15;"+(a+1)+"~":s.C0.ESC+"[15~";break;case 117:o.key=a?s.C0.ESC+"[17;"+(a+1)+"~":s.C0.ESC+"[17~";break;case 118:o.key=a?s.C0.ESC+"[18;"+(a+1)+"~":s.C0.ESC+"[18~";break;case 119:o.key=a?s.C0.ESC+"[19;"+(a+1)+"~":s.C0.ESC+"[19~";break;case 120:o.key=a?s.C0.ESC+"[20;"+(a+1)+"~":s.C0.ESC+"[20~";break;case 121:o.key=a?s.C0.ESC+"[21;"+(a+1)+"~":s.C0.ESC+"[21~";break;case 122:o.key=a?s.C0.ESC+"[23;"+(a+1)+"~":s.C0.ESC+"[23~";break;case 123:o.key=a?s.C0.ESC+"[24;"+(a+1)+"~":s.C0.ESC+"[24~";break;default:if(!e.ctrlKey||e.shiftKey||e.altKey||e.metaKey)if(i&&!n||!e.altKey||e.metaKey)!i||e.altKey||e.ctrlKey||e.shiftKey||!e.metaKey?e.key&&!e.ctrlKey&&!e.altKey&&!e.metaKey&&e.keyCode>=48&&1===e.key.length?o.key=e.key:e.key&&e.ctrlKey&&("_"===e.key&&(o.key=s.C0.US),"@"===e.key&&(o.key=s.C0.NUL)):65===e.keyCode&&(o.type=1);else {const t=r[e.keyCode],i=null==t?void 0:t[e.shiftKey?1:0];if(i)o.key=s.C0.ESC+i;else if(e.keyCode>=65&&e.keyCode<=90){const t=e.ctrlKey?e.keyCode-64:e.keyCode+32;let i=String.fromCharCode(t);e.shiftKey&&(i=i.toUpperCase()),o.key=s.C0.ESC+i;}else if(32===e.keyCode)o.key=s.C0.ESC+(e.ctrlKey?s.C0.NUL:" ");else if("Dead"===e.key&&e.code.startsWith("Key")){let t=e.code.slice(3,4);e.shiftKey||(t=t.toLowerCase()),o.key=s.C0.ESC+t,o.cancel=!0;}}else e.keyCode>=65&&e.keyCode<=90?o.key=String.fromCharCode(e.keyCode-64):32===e.keyCode?o.key=s.C0.NUL:e.keyCode>=51&&e.keyCode<=55?o.key=String.fromCharCode(e.keyCode-51+27):56===e.keyCode?o.key=s.C0.DEL:219===e.keyCode?o.key=s.C0.ESC:220===e.keyCode?o.key=s.C0.FS:221===e.keyCode&&(o.key=s.C0.GS);}return o};},482:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Utf8ToUtf32=t.StringToUtf32=t.utf32ToString=t.stringFromCodePoint=void 0,t.stringFromCodePoint=function(e){return e>65535?(e-=65536,String.fromCharCode(55296+(e>>10))+String.fromCharCode(e%1024+56320)):String.fromCharCode(e)},t.utf32ToString=function(e,t=0,i=e.length){let s="";for(let r=t;r<i;++r){let t=e[r];t>65535?(t-=65536,s+=String.fromCharCode(55296+(t>>10))+String.fromCharCode(t%1024+56320)):s+=String.fromCharCode(t);}return s},t.StringToUtf32=class{constructor(){this._interim=0;}clear(){this._interim=0;}decode(e,t){const i=e.length;if(!i)return 0;let s=0,r=0;if(this._interim){const i=e.charCodeAt(r++);56320<=i&&i<=57343?t[s++]=1024*(this._interim-55296)+i-56320+65536:(t[s++]=this._interim,t[s++]=i),this._interim=0;}for(let n=r;n<i;++n){const r=e.charCodeAt(n);if(55296<=r&&r<=56319){if(++n>=i)return this._interim=r,s;const o=e.charCodeAt(n);56320<=o&&o<=57343?t[s++]=1024*(r-55296)+o-56320+65536:(t[s++]=r,t[s++]=o);}else 65279!==r&&(t[s++]=r);}return s}},t.Utf8ToUtf32=class{constructor(){this.interim=new Uint8Array(3);}clear(){this.interim.fill(0);}decode(e,t){const i=e.length;if(!i)return 0;let s,r,n,o,a=0,h=0,c=0;if(this.interim[0]){let s=!1,r=this.interim[0];r&=192==(224&r)?31:224==(240&r)?15:7;let n,o=0;for(;(n=63&this.interim[++o])&&o<4;)r<<=6,r|=n;const h=192==(224&this.interim[0])?2:224==(240&this.interim[0])?3:4,l=h-o;for(;c<l;){if(c>=i)return 0;if(n=e[c++],128!=(192&n)){c--,s=!0;break}this.interim[o++]=n,r<<=6,r|=63&n;}s||(2===h?r<128?c--:t[a++]=r:3===h?r<2048||r>=55296&&r<=57343||65279===r||(t[a++]=r):r<65536||r>1114111||(t[a++]=r)),this.interim.fill(0);}const l=i-4;let d=c;for(;d<i;){for(;!(!(d<l)||128&(s=e[d])||128&(r=e[d+1])||128&(n=e[d+2])||128&(o=e[d+3]));)t[a++]=s,t[a++]=r,t[a++]=n,t[a++]=o,d+=4;if(s=e[d++],s<128)t[a++]=s;else if(192==(224&s)){if(d>=i)return this.interim[0]=s,a;if(r=e[d++],128!=(192&r)){d--;continue}if(h=(31&s)<<6|63&r,h<128){d--;continue}t[a++]=h;}else if(224==(240&s)){if(d>=i)return this.interim[0]=s,a;if(r=e[d++],128!=(192&r)){d--;continue}if(d>=i)return this.interim[0]=s,this.interim[1]=r,a;if(n=e[d++],128!=(192&n)){d--;continue}if(h=(15&s)<<12|(63&r)<<6|63&n,h<2048||h>=55296&&h<=57343||65279===h)continue;t[a++]=h;}else if(240==(248&s)){if(d>=i)return this.interim[0]=s,a;if(r=e[d++],128!=(192&r)){d--;continue}if(d>=i)return this.interim[0]=s,this.interim[1]=r,a;if(n=e[d++],128!=(192&n)){d--;continue}if(d>=i)return this.interim[0]=s,this.interim[1]=r,this.interim[2]=n,a;if(o=e[d++],128!=(192&o)){d--;continue}if(h=(7&s)<<18|(63&r)<<12|(63&n)<<6|63&o,h<65536||h>1114111)continue;t[a++]=h;}}return a}};},225:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeV6=void 0;const i=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531]],s=[[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]];let r;t.UnicodeV6=class{constructor(){if(this.version="6",!r){r=new Uint8Array(65536),r.fill(1),r[0]=0,r.fill(0,1,32),r.fill(0,127,160),r.fill(2,4352,4448),r[9001]=2,r[9002]=2,r.fill(2,11904,42192),r[12351]=1,r.fill(2,44032,55204),r.fill(2,63744,64256),r.fill(2,65040,65050),r.fill(2,65072,65136),r.fill(2,65280,65377),r.fill(2,65504,65511);for(let e=0;e<i.length;++e)r.fill(0,i[e][0],i[e][1]+1);}}wcwidth(e){return e<32?0:e<127?1:e<65536?r[e]:function(e,t){let i,s=0,r=t.length-1;if(e<t[0][0]||e>t[r][1])return !1;for(;r>=s;)if(i=s+r>>1,e>t[i][1])s=i+1;else {if(!(e<t[i][0]))return !0;r=i-1;}return !1}(e,s)?0:e>=131072&&e<=196605||e>=196608&&e<=262141?2:1}};},5981:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WriteBuffer=void 0;const s=i(8460),r=i(844);class n extends r.Disposable{constructor(e){super(),this._action=e,this._writeBuffer=[],this._callbacks=[],this._pendingData=0,this._bufferOffset=0,this._isSyncWriting=!1,this._syncCalls=0,this._didUserInput=!1,this._onWriteParsed=this.register(new s.EventEmitter),this.onWriteParsed=this._onWriteParsed.event;}handleUserInput(){this._didUserInput=!0;}writeSync(e,t){if(void 0!==t&&this._syncCalls>t)return void(this._syncCalls=0);if(this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(void 0),this._syncCalls++,this._isSyncWriting)return;let i;for(this._isSyncWriting=!0;i=this._writeBuffer.shift();){this._action(i);const e=this._callbacks.shift();e&&e();}this._pendingData=0,this._bufferOffset=2147483647,this._isSyncWriting=!1,this._syncCalls=0;}write(e,t){if(this._pendingData>5e7)throw new Error("write data discarded, use flow control to avoid losing data");if(!this._writeBuffer.length){if(this._bufferOffset=0,this._didUserInput)return this._didUserInput=!1,this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(t),void this._innerWrite();setTimeout((()=>this._innerWrite()));}this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(t);}_innerWrite(e=0,t=!0){const i=e||Date.now();for(;this._writeBuffer.length>this._bufferOffset;){const e=this._writeBuffer[this._bufferOffset],s=this._action(e,t);if(s){const e=e=>Date.now()-i>=12?setTimeout((()=>this._innerWrite(0,e))):this._innerWrite(i,e);return void s.catch((e=>(queueMicrotask((()=>{throw e})),Promise.resolve(!1)))).then(e)}const r=this._callbacks[this._bufferOffset];if(r&&r(),this._bufferOffset++,this._pendingData-=e.length,Date.now()-i>=12)break}this._writeBuffer.length>this._bufferOffset?(this._bufferOffset>50&&(this._writeBuffer=this._writeBuffer.slice(this._bufferOffset),this._callbacks=this._callbacks.slice(this._bufferOffset),this._bufferOffset=0),setTimeout((()=>this._innerWrite()))):(this._writeBuffer.length=0,this._callbacks.length=0,this._pendingData=0,this._bufferOffset=0),this._onWriteParsed.fire();}}t.WriteBuffer=n;},5941:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.toRgbString=t.parseColor=void 0;const i=/^([\da-f])\/([\da-f])\/([\da-f])$|^([\da-f]{2})\/([\da-f]{2})\/([\da-f]{2})$|^([\da-f]{3})\/([\da-f]{3})\/([\da-f]{3})$|^([\da-f]{4})\/([\da-f]{4})\/([\da-f]{4})$/,s=/^[\da-f]+$/;function r(e,t){const i=e.toString(16),s=i.length<2?"0"+i:i;switch(t){case 4:return i[0];case 8:return s;case 12:return (s+s).slice(0,3);default:return s+s}}t.parseColor=function(e){if(!e)return;let t=e.toLowerCase();if(0===t.indexOf("rgb:")){t=t.slice(4);const e=i.exec(t);if(e){const t=e[1]?15:e[4]?255:e[7]?4095:65535;return [Math.round(parseInt(e[1]||e[4]||e[7]||e[10],16)/t*255),Math.round(parseInt(e[2]||e[5]||e[8]||e[11],16)/t*255),Math.round(parseInt(e[3]||e[6]||e[9]||e[12],16)/t*255)]}}else if(0===t.indexOf("#")&&(t=t.slice(1),s.exec(t)&&[3,6,9,12].includes(t.length))){const e=t.length/3,i=[0,0,0];for(let s=0;s<3;++s){const r=parseInt(t.slice(e*s,e*s+e),16);i[s]=1===e?r<<4:2===e?r:3===e?r>>4:r>>8;}return i}},t.toRgbString=function(e,t=16){const[i,s,n]=e;return `rgb:${r(i,t)}/${r(s,t)}/${r(n,t)}`};},5770:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PAYLOAD_LIMIT=void 0,t.PAYLOAD_LIMIT=1e7;},6351:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DcsHandler=t.DcsParser=void 0;const s=i(482),r=i(8742),n=i(5770),o=[];t.DcsParser=class{constructor(){this._handlers=Object.create(null),this._active=o,this._ident=0,this._handlerFb=()=>{},this._stack={paused:!1,loopPosition:0,fallThrough:!1};}dispose(){this._handlers=Object.create(null),this._handlerFb=()=>{},this._active=o;}registerHandler(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);const i=this._handlers[e];return i.push(t),{dispose:()=>{const e=i.indexOf(t);-1!==e&&i.splice(e,1);}}}clearHandler(e){this._handlers[e]&&delete this._handlers[e];}setHandlerFallback(e){this._handlerFb=e;}reset(){if(this._active.length)for(let e=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;e>=0;--e)this._active[e].unhook(!1);this._stack.paused=!1,this._active=o,this._ident=0;}hook(e,t){if(this.reset(),this._ident=e,this._active=this._handlers[e]||o,this._active.length)for(let e=this._active.length-1;e>=0;e--)this._active[e].hook(t);else this._handlerFb(this._ident,"HOOK",t);}put(e,t,i){if(this._active.length)for(let s=this._active.length-1;s>=0;s--)this._active[s].put(e,t,i);else this._handlerFb(this._ident,"PUT",(0, s.utf32ToString)(e,t,i));}unhook(e,t=!0){if(this._active.length){let i=!1,s=this._active.length-1,r=!1;if(this._stack.paused&&(s=this._stack.loopPosition-1,i=t,r=this._stack.fallThrough,this._stack.paused=!1),!r&&!1===i){for(;s>=0&&(i=this._active[s].unhook(e),!0!==i);s--)if(i instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=s,this._stack.fallThrough=!1,i;s--;}for(;s>=0;s--)if(i=this._active[s].unhook(!1),i instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=s,this._stack.fallThrough=!0,i}else this._handlerFb(this._ident,"UNHOOK",e);this._active=o,this._ident=0;}};const a=new r.Params;a.addParam(0),t.DcsHandler=class{constructor(e){this._handler=e,this._data="",this._params=a,this._hitLimit=!1;}hook(e){this._params=e.length>1||e.params[0]?e.clone():a,this._data="",this._hitLimit=!1;}put(e,t,i){this._hitLimit||(this._data+=(0, s.utf32ToString)(e,t,i),this._data.length>n.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0));}unhook(e){let t=!1;if(this._hitLimit)t=!1;else if(e&&(t=this._handler(this._data,this._params),t instanceof Promise))return t.then((e=>(this._params=a,this._data="",this._hitLimit=!1,e)));return this._params=a,this._data="",this._hitLimit=!1,t}};},2015:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EscapeSequenceParser=t.VT500_TRANSITION_TABLE=t.TransitionTable=void 0;const s=i(844),r=i(8742),n=i(6242),o=i(6351);class a{constructor(e){this.table=new Uint8Array(e);}setDefault(e,t){this.table.fill(e<<4|t);}add(e,t,i,s){this.table[t<<8|e]=i<<4|s;}addMany(e,t,i,s){for(let r=0;r<e.length;r++)this.table[t<<8|e[r]]=i<<4|s;}}t.TransitionTable=a;const h=160;t.VT500_TRANSITION_TABLE=function(){const e=new a(4095),t=Array.apply(null,Array(256)).map(((e,t)=>t)),i=(e,i)=>t.slice(e,i),s=i(32,127),r=i(0,24);r.push(25),r.push.apply(r,i(28,32));const n=i(0,14);let o;for(o in e.setDefault(1,0),e.addMany(s,0,2,0),n)e.addMany([24,26,153,154],o,3,0),e.addMany(i(128,144),o,3,0),e.addMany(i(144,152),o,3,0),e.add(156,o,0,0),e.add(27,o,11,1),e.add(157,o,4,8),e.addMany([152,158,159],o,0,7),e.add(155,o,11,3),e.add(144,o,11,9);return e.addMany(r,0,3,0),e.addMany(r,1,3,1),e.add(127,1,0,1),e.addMany(r,8,0,8),e.addMany(r,3,3,3),e.add(127,3,0,3),e.addMany(r,4,3,4),e.add(127,4,0,4),e.addMany(r,6,3,6),e.addMany(r,5,3,5),e.add(127,5,0,5),e.addMany(r,2,3,2),e.add(127,2,0,2),e.add(93,1,4,8),e.addMany(s,8,5,8),e.add(127,8,5,8),e.addMany([156,27,24,26,7],8,6,0),e.addMany(i(28,32),8,0,8),e.addMany([88,94,95],1,0,7),e.addMany(s,7,0,7),e.addMany(r,7,0,7),e.add(156,7,0,0),e.add(127,7,0,7),e.add(91,1,11,3),e.addMany(i(64,127),3,7,0),e.addMany(i(48,60),3,8,4),e.addMany([60,61,62,63],3,9,4),e.addMany(i(48,60),4,8,4),e.addMany(i(64,127),4,7,0),e.addMany([60,61,62,63],4,0,6),e.addMany(i(32,64),6,0,6),e.add(127,6,0,6),e.addMany(i(64,127),6,0,0),e.addMany(i(32,48),3,9,5),e.addMany(i(32,48),5,9,5),e.addMany(i(48,64),5,0,6),e.addMany(i(64,127),5,7,0),e.addMany(i(32,48),4,9,5),e.addMany(i(32,48),1,9,2),e.addMany(i(32,48),2,9,2),e.addMany(i(48,127),2,10,0),e.addMany(i(48,80),1,10,0),e.addMany(i(81,88),1,10,0),e.addMany([89,90,92],1,10,0),e.addMany(i(96,127),1,10,0),e.add(80,1,11,9),e.addMany(r,9,0,9),e.add(127,9,0,9),e.addMany(i(28,32),9,0,9),e.addMany(i(32,48),9,9,12),e.addMany(i(48,60),9,8,10),e.addMany([60,61,62,63],9,9,10),e.addMany(r,11,0,11),e.addMany(i(32,128),11,0,11),e.addMany(i(28,32),11,0,11),e.addMany(r,10,0,10),e.add(127,10,0,10),e.addMany(i(28,32),10,0,10),e.addMany(i(48,60),10,8,10),e.addMany([60,61,62,63],10,0,11),e.addMany(i(32,48),10,9,12),e.addMany(r,12,0,12),e.add(127,12,0,12),e.addMany(i(28,32),12,0,12),e.addMany(i(32,48),12,9,12),e.addMany(i(48,64),12,0,11),e.addMany(i(64,127),12,12,13),e.addMany(i(64,127),10,12,13),e.addMany(i(64,127),9,12,13),e.addMany(r,13,13,13),e.addMany(s,13,13,13),e.add(127,13,0,13),e.addMany([27,156,24,26],13,14,0),e.add(h,0,2,0),e.add(h,8,5,8),e.add(h,6,0,6),e.add(h,11,0,11),e.add(h,13,13,13),e}();class c extends s.Disposable{constructor(e=t.VT500_TRANSITION_TABLE){super(),this._transitions=e,this._parseStack={state:0,handlers:[],handlerPos:0,transition:0,chunkPos:0},this.initialState=0,this.currentState=this.initialState,this._params=new r.Params,this._params.addParam(0),this._collect=0,this.precedingCodepoint=0,this._printHandlerFb=(e,t,i)=>{},this._executeHandlerFb=e=>{},this._csiHandlerFb=(e,t)=>{},this._escHandlerFb=e=>{},this._errorHandlerFb=e=>e,this._printHandler=this._printHandlerFb,this._executeHandlers=Object.create(null),this._csiHandlers=Object.create(null),this._escHandlers=Object.create(null),this.register((0, s.toDisposable)((()=>{this._csiHandlers=Object.create(null),this._executeHandlers=Object.create(null),this._escHandlers=Object.create(null);}))),this._oscParser=this.register(new n.OscParser),this._dcsParser=this.register(new o.DcsParser),this._errorHandler=this._errorHandlerFb,this.registerEscHandler({final:"\\"},(()=>!0));}_identifier(e,t=[64,126]){let i=0;if(e.prefix){if(e.prefix.length>1)throw new Error("only one byte as prefix supported");if(i=e.prefix.charCodeAt(0),i&&60>i||i>63)throw new Error("prefix must be in range 0x3c .. 0x3f")}if(e.intermediates){if(e.intermediates.length>2)throw new Error("only two bytes as intermediates are supported");for(let t=0;t<e.intermediates.length;++t){const s=e.intermediates.charCodeAt(t);if(32>s||s>47)throw new Error("intermediate must be in range 0x20 .. 0x2f");i<<=8,i|=s;}}if(1!==e.final.length)throw new Error("final must be a single byte");const s=e.final.charCodeAt(0);if(t[0]>s||s>t[1])throw new Error(`final must be in range ${t[0]} .. ${t[1]}`);return i<<=8,i|=s,i}identToString(e){const t=[];for(;e;)t.push(String.fromCharCode(255&e)),e>>=8;return t.reverse().join("")}setPrintHandler(e){this._printHandler=e;}clearPrintHandler(){this._printHandler=this._printHandlerFb;}registerEscHandler(e,t){const i=this._identifier(e,[48,126]);void 0===this._escHandlers[i]&&(this._escHandlers[i]=[]);const s=this._escHandlers[i];return s.push(t),{dispose:()=>{const e=s.indexOf(t);-1!==e&&s.splice(e,1);}}}clearEscHandler(e){this._escHandlers[this._identifier(e,[48,126])]&&delete this._escHandlers[this._identifier(e,[48,126])];}setEscHandlerFallback(e){this._escHandlerFb=e;}setExecuteHandler(e,t){this._executeHandlers[e.charCodeAt(0)]=t;}clearExecuteHandler(e){this._executeHandlers[e.charCodeAt(0)]&&delete this._executeHandlers[e.charCodeAt(0)];}setExecuteHandlerFallback(e){this._executeHandlerFb=e;}registerCsiHandler(e,t){const i=this._identifier(e);void 0===this._csiHandlers[i]&&(this._csiHandlers[i]=[]);const s=this._csiHandlers[i];return s.push(t),{dispose:()=>{const e=s.indexOf(t);-1!==e&&s.splice(e,1);}}}clearCsiHandler(e){this._csiHandlers[this._identifier(e)]&&delete this._csiHandlers[this._identifier(e)];}setCsiHandlerFallback(e){this._csiHandlerFb=e;}registerDcsHandler(e,t){return this._dcsParser.registerHandler(this._identifier(e),t)}clearDcsHandler(e){this._dcsParser.clearHandler(this._identifier(e));}setDcsHandlerFallback(e){this._dcsParser.setHandlerFallback(e);}registerOscHandler(e,t){return this._oscParser.registerHandler(e,t)}clearOscHandler(e){this._oscParser.clearHandler(e);}setOscHandlerFallback(e){this._oscParser.setHandlerFallback(e);}setErrorHandler(e){this._errorHandler=e;}clearErrorHandler(){this._errorHandler=this._errorHandlerFb;}reset(){this.currentState=this.initialState,this._oscParser.reset(),this._dcsParser.reset(),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0,0!==this._parseStack.state&&(this._parseStack.state=2,this._parseStack.handlers=[]);}_preserveStack(e,t,i,s,r){this._parseStack.state=e,this._parseStack.handlers=t,this._parseStack.handlerPos=i,this._parseStack.transition=s,this._parseStack.chunkPos=r;}parse(e,t,i){let s,r=0,n=0,o=0;if(this._parseStack.state)if(2===this._parseStack.state)this._parseStack.state=0,o=this._parseStack.chunkPos+1;else {if(void 0===i||1===this._parseStack.state)throw this._parseStack.state=1,new Error("improper continuation due to previous async handler, giving up parsing");const t=this._parseStack.handlers;let n=this._parseStack.handlerPos-1;switch(this._parseStack.state){case 3:if(!1===i&&n>-1)for(;n>=0&&(s=t[n](this._params),!0!==s);n--)if(s instanceof Promise)return this._parseStack.handlerPos=n,s;this._parseStack.handlers=[];break;case 4:if(!1===i&&n>-1)for(;n>=0&&(s=t[n](),!0!==s);n--)if(s instanceof Promise)return this._parseStack.handlerPos=n,s;this._parseStack.handlers=[];break;case 6:if(r=e[this._parseStack.chunkPos],s=this._dcsParser.unhook(24!==r&&26!==r,i),s)return s;27===r&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0;break;case 5:if(r=e[this._parseStack.chunkPos],s=this._oscParser.end(24!==r&&26!==r,i),s)return s;27===r&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0;}this._parseStack.state=0,o=this._parseStack.chunkPos+1,this.precedingCodepoint=0,this.currentState=15&this._parseStack.transition;}for(let i=o;i<t;++i){switch(r=e[i],n=this._transitions.table[this.currentState<<8|(r<160?r:h)],n>>4){case 2:for(let s=i+1;;++s){if(s>=t||(r=e[s])<32||r>126&&r<h){this._printHandler(e,i,s),i=s-1;break}if(++s>=t||(r=e[s])<32||r>126&&r<h){this._printHandler(e,i,s),i=s-1;break}if(++s>=t||(r=e[s])<32||r>126&&r<h){this._printHandler(e,i,s),i=s-1;break}if(++s>=t||(r=e[s])<32||r>126&&r<h){this._printHandler(e,i,s),i=s-1;break}}break;case 3:this._executeHandlers[r]?this._executeHandlers[r]():this._executeHandlerFb(r),this.precedingCodepoint=0;break;case 0:break;case 1:if(this._errorHandler({position:i,code:r,currentState:this.currentState,collect:this._collect,params:this._params,abort:!1}).abort)return;break;case 7:const o=this._csiHandlers[this._collect<<8|r];let a=o?o.length-1:-1;for(;a>=0&&(s=o[a](this._params),!0!==s);a--)if(s instanceof Promise)return this._preserveStack(3,o,a,n,i),s;a<0&&this._csiHandlerFb(this._collect<<8|r,this._params),this.precedingCodepoint=0;break;case 8:do{switch(r){case 59:this._params.addParam(0);break;case 58:this._params.addSubParam(-1);break;default:this._params.addDigit(r-48);}}while(++i<t&&(r=e[i])>47&&r<60);i--;break;case 9:this._collect<<=8,this._collect|=r;break;case 10:const c=this._escHandlers[this._collect<<8|r];let l=c?c.length-1:-1;for(;l>=0&&(s=c[l](),!0!==s);l--)if(s instanceof Promise)return this._preserveStack(4,c,l,n,i),s;l<0&&this._escHandlerFb(this._collect<<8|r),this.precedingCodepoint=0;break;case 11:this._params.reset(),this._params.addParam(0),this._collect=0;break;case 12:this._dcsParser.hook(this._collect<<8|r,this._params);break;case 13:for(let s=i+1;;++s)if(s>=t||24===(r=e[s])||26===r||27===r||r>127&&r<h){this._dcsParser.put(e,i,s),i=s-1;break}break;case 14:if(s=this._dcsParser.unhook(24!==r&&26!==r),s)return this._preserveStack(6,[],0,n,i),s;27===r&&(n|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0;break;case 4:this._oscParser.start();break;case 5:for(let s=i+1;;s++)if(s>=t||(r=e[s])<32||r>127&&r<h){this._oscParser.put(e,i,s),i=s-1;break}break;case 6:if(s=this._oscParser.end(24!==r&&26!==r),s)return this._preserveStack(5,[],0,n,i),s;27===r&&(n|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0;}this.currentState=15&n;}}}t.EscapeSequenceParser=c;},6242:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OscHandler=t.OscParser=void 0;const s=i(5770),r=i(482),n=[];t.OscParser=class{constructor(){this._state=0,this._active=n,this._id=-1,this._handlers=Object.create(null),this._handlerFb=()=>{},this._stack={paused:!1,loopPosition:0,fallThrough:!1};}registerHandler(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);const i=this._handlers[e];return i.push(t),{dispose:()=>{const e=i.indexOf(t);-1!==e&&i.splice(e,1);}}}clearHandler(e){this._handlers[e]&&delete this._handlers[e];}setHandlerFallback(e){this._handlerFb=e;}dispose(){this._handlers=Object.create(null),this._handlerFb=()=>{},this._active=n;}reset(){if(2===this._state)for(let e=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;e>=0;--e)this._active[e].end(!1);this._stack.paused=!1,this._active=n,this._id=-1,this._state=0;}_start(){if(this._active=this._handlers[this._id]||n,this._active.length)for(let e=this._active.length-1;e>=0;e--)this._active[e].start();else this._handlerFb(this._id,"START");}_put(e,t,i){if(this._active.length)for(let s=this._active.length-1;s>=0;s--)this._active[s].put(e,t,i);else this._handlerFb(this._id,"PUT",(0, r.utf32ToString)(e,t,i));}start(){this.reset(),this._state=1;}put(e,t,i){if(3!==this._state){if(1===this._state)for(;t<i;){const i=e[t++];if(59===i){this._state=2,this._start();break}if(i<48||57<i)return void(this._state=3);-1===this._id&&(this._id=0),this._id=10*this._id+i-48;}2===this._state&&i-t>0&&this._put(e,t,i);}}end(e,t=!0){if(0!==this._state){if(3!==this._state)if(1===this._state&&this._start(),this._active.length){let i=!1,s=this._active.length-1,r=!1;if(this._stack.paused&&(s=this._stack.loopPosition-1,i=t,r=this._stack.fallThrough,this._stack.paused=!1),!r&&!1===i){for(;s>=0&&(i=this._active[s].end(e),!0!==i);s--)if(i instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=s,this._stack.fallThrough=!1,i;s--;}for(;s>=0;s--)if(i=this._active[s].end(!1),i instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=s,this._stack.fallThrough=!0,i}else this._handlerFb(this._id,"END",e);this._active=n,this._id=-1,this._state=0;}}},t.OscHandler=class{constructor(e){this._handler=e,this._data="",this._hitLimit=!1;}start(){this._data="",this._hitLimit=!1;}put(e,t,i){this._hitLimit||(this._data+=(0, r.utf32ToString)(e,t,i),this._data.length>s.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0));}end(e){let t=!1;if(this._hitLimit)t=!1;else if(e&&(t=this._handler(this._data),t instanceof Promise))return t.then((e=>(this._data="",this._hitLimit=!1,e)));return this._data="",this._hitLimit=!1,t}};},8742:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Params=void 0;const i=2147483647;class s{constructor(e=32,t=32){if(this.maxLength=e,this.maxSubParamsLength=t,t>256)throw new Error("maxSubParamsLength must not be greater than 256");this.params=new Int32Array(e),this.length=0,this._subParams=new Int32Array(t),this._subParamsLength=0,this._subParamsIdx=new Uint16Array(e),this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1;}static fromArray(e){const t=new s;if(!e.length)return t;for(let i=Array.isArray(e[0])?1:0;i<e.length;++i){const s=e[i];if(Array.isArray(s))for(let e=0;e<s.length;++e)t.addSubParam(s[e]);else t.addParam(s);}return t}clone(){const e=new s(this.maxLength,this.maxSubParamsLength);return e.params.set(this.params),e.length=this.length,e._subParams.set(this._subParams),e._subParamsLength=this._subParamsLength,e._subParamsIdx.set(this._subParamsIdx),e._rejectDigits=this._rejectDigits,e._rejectSubDigits=this._rejectSubDigits,e._digitIsSub=this._digitIsSub,e}toArray(){const e=[];for(let t=0;t<this.length;++t){e.push(this.params[t]);const i=this._subParamsIdx[t]>>8,s=255&this._subParamsIdx[t];s-i>0&&e.push(Array.prototype.slice.call(this._subParams,i,s));}return e}reset(){this.length=0,this._subParamsLength=0,this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1;}addParam(e){if(this._digitIsSub=!1,this.length>=this.maxLength)this._rejectDigits=!0;else {if(e<-1)throw new Error("values lesser than -1 are not allowed");this._subParamsIdx[this.length]=this._subParamsLength<<8|this._subParamsLength,this.params[this.length++]=e>i?i:e;}}addSubParam(e){if(this._digitIsSub=!0,this.length)if(this._rejectDigits||this._subParamsLength>=this.maxSubParamsLength)this._rejectSubDigits=!0;else {if(e<-1)throw new Error("values lesser than -1 are not allowed");this._subParams[this._subParamsLength++]=e>i?i:e,this._subParamsIdx[this.length-1]++;}}hasSubParams(e){return (255&this._subParamsIdx[e])-(this._subParamsIdx[e]>>8)>0}getSubParams(e){const t=this._subParamsIdx[e]>>8,i=255&this._subParamsIdx[e];return i-t>0?this._subParams.subarray(t,i):null}getSubParamsAll(){const e={};for(let t=0;t<this.length;++t){const i=this._subParamsIdx[t]>>8,s=255&this._subParamsIdx[t];s-i>0&&(e[t]=this._subParams.slice(i,s));}return e}addDigit(e){let t;if(this._rejectDigits||!(t=this._digitIsSub?this._subParamsLength:this.length)||this._digitIsSub&&this._rejectSubDigits)return;const s=this._digitIsSub?this._subParams:this.params,r=s[t-1];s[t-1]=~r?Math.min(10*r+e,i):e;}}t.Params=s;},5741:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AddonManager=void 0,t.AddonManager=class{constructor(){this._addons=[];}dispose(){for(let e=this._addons.length-1;e>=0;e--)this._addons[e].instance.dispose();}loadAddon(e,t){const i={instance:t,dispose:t.dispose,isDisposed:!1};this._addons.push(i),t.dispose=()=>this._wrappedAddonDispose(i),t.activate(e);}_wrappedAddonDispose(e){if(e.isDisposed)return;let t=-1;for(let i=0;i<this._addons.length;i++)if(this._addons[i]===e){t=i;break}if(-1===t)throw new Error("Could not dispose an addon that has not been loaded");e.isDisposed=!0,e.dispose.apply(e.instance),this._addons.splice(t,1);}};},8771:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferApiView=void 0;const s=i(3785),r=i(511);t.BufferApiView=class{constructor(e,t){this._buffer=e,this.type=t;}init(e){return this._buffer=e,this}get cursorY(){return this._buffer.y}get cursorX(){return this._buffer.x}get viewportY(){return this._buffer.ydisp}get baseY(){return this._buffer.ybase}get length(){return this._buffer.lines.length}getLine(e){const t=this._buffer.lines.get(e);if(t)return new s.BufferLineApiView(t)}getNullCell(){return new r.CellData}};},3785:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferLineApiView=void 0;const s=i(511);t.BufferLineApiView=class{constructor(e){this._line=e;}get isWrapped(){return this._line.isWrapped}get length(){return this._line.length}getCell(e,t){if(!(e<0||e>=this._line.length))return t?(this._line.loadCell(e,t),t):this._line.loadCell(e,new s.CellData)}translateToString(e,t,i){return this._line.translateToString(e,t,i)}};},8285:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferNamespaceApi=void 0;const s=i(8771),r=i(8460);t.BufferNamespaceApi=class{constructor(e){this._core=e,this._onBufferChange=new r.EventEmitter,this.onBufferChange=this._onBufferChange.event,this._normal=new s.BufferApiView(this._core.buffers.normal,"normal"),this._alternate=new s.BufferApiView(this._core.buffers.alt,"alternate"),this._core.buffers.onBufferActivate((()=>this._onBufferChange.fire(this.active)));}get active(){if(this._core.buffers.active===this._core.buffers.normal)return this.normal;if(this._core.buffers.active===this._core.buffers.alt)return this.alternate;throw new Error("Active buffer is neither normal nor alternate")}get normal(){return this._normal.init(this._core.buffers.normal)}get alternate(){return this._alternate.init(this._core.buffers.alt)}};},7975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ParserApi=void 0,t.ParserApi=class{constructor(e){this._core=e;}registerCsiHandler(e,t){return this._core.registerCsiHandler(e,(e=>t(e.toArray())))}addCsiHandler(e,t){return this.registerCsiHandler(e,t)}registerDcsHandler(e,t){return this._core.registerDcsHandler(e,((e,i)=>t(e,i.toArray())))}addDcsHandler(e,t){return this.registerDcsHandler(e,t)}registerEscHandler(e,t){return this._core.registerEscHandler(e,t)}addEscHandler(e,t){return this.registerEscHandler(e,t)}registerOscHandler(e,t){return this._core.registerOscHandler(e,t)}addOscHandler(e,t){return this.registerOscHandler(e,t)}};},7090:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeApi=void 0,t.UnicodeApi=class{constructor(e){this._core=e;}register(e){this._core.unicodeService.register(e);}get versions(){return this._core.unicodeService.versions}get activeVersion(){return this._core.unicodeService.activeVersion}set activeVersion(e){this._core.unicodeService.activeVersion=e;}};},744:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.BufferService=t.MINIMUM_ROWS=t.MINIMUM_COLS=void 0;const n=i(2585),o=i(5295),a=i(8460),h=i(844);t.MINIMUM_COLS=2,t.MINIMUM_ROWS=1;let c=class extends h.Disposable{constructor(e){super(),this.isUserScrolling=!1,this._onResize=this.register(new a.EventEmitter),this.onResize=this._onResize.event,this._onScroll=this.register(new a.EventEmitter),this.onScroll=this._onScroll.event,this.cols=Math.max(e.rawOptions.cols||0,t.MINIMUM_COLS),this.rows=Math.max(e.rawOptions.rows||0,t.MINIMUM_ROWS),this.buffers=this.register(new o.BufferSet(e,this));}get buffer(){return this.buffers.active}resize(e,t){this.cols=e,this.rows=t,this.buffers.resize(e,t),this._onResize.fire({cols:e,rows:t});}reset(){this.buffers.reset(),this.isUserScrolling=!1;}scroll(e,t=!1){const i=this.buffer;let s;s=this._cachedBlankLine,s&&s.length===this.cols&&s.getFg(0)===e.fg&&s.getBg(0)===e.bg||(s=i.getBlankLine(e,t),this._cachedBlankLine=s),s.isWrapped=t;const r=i.ybase+i.scrollTop,n=i.ybase+i.scrollBottom;if(0===i.scrollTop){const e=i.lines.isFull;n===i.lines.length-1?e?i.lines.recycle().copyFrom(s):i.lines.push(s.clone()):i.lines.splice(n+1,0,s.clone()),e?this.isUserScrolling&&(i.ydisp=Math.max(i.ydisp-1,0)):(i.ybase++,this.isUserScrolling||i.ydisp++);}else {const e=n-r+1;i.lines.shiftElements(r+1,e-1,-1),i.lines.set(n,s.clone());}this.isUserScrolling||(i.ydisp=i.ybase),this._onScroll.fire(i.ydisp);}scrollLines(e,t,i){const s=this.buffer;if(e<0){if(0===s.ydisp)return;this.isUserScrolling=!0;}else e+s.ydisp>=s.ybase&&(this.isUserScrolling=!1);const r=s.ydisp;s.ydisp=Math.max(Math.min(s.ydisp+e,s.ybase),0),r!==s.ydisp&&(t||this._onScroll.fire(s.ydisp));}scrollPages(e){this.scrollLines(e*(this.rows-1));}scrollToTop(){this.scrollLines(-this.buffer.ydisp);}scrollToBottom(){this.scrollLines(this.buffer.ybase-this.buffer.ydisp);}scrollToLine(e){const t=e-this.buffer.ydisp;0!==t&&this.scrollLines(t);}};c=s([r(0,n.IOptionsService)],c),t.BufferService=c;},7994:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CharsetService=void 0,t.CharsetService=class{constructor(){this.glevel=0,this._charsets=[];}reset(){this.charset=void 0,this._charsets=[],this.glevel=0;}setgLevel(e){this.glevel=e,this.charset=this._charsets[e];}setgCharset(e,t){this._charsets[e]=t,this.glevel===e&&(this.charset=t);}};},1753:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreMouseService=void 0;const n=i(2585),o=i(8460),a=i(844),h={NONE:{events:0,restrict:()=>!1},X10:{events:1,restrict:e=>4!==e.button&&1===e.action&&(e.ctrl=!1,e.alt=!1,e.shift=!1,!0)},VT200:{events:19,restrict:e=>32!==e.action},DRAG:{events:23,restrict:e=>32!==e.action||3!==e.button},ANY:{events:31,restrict:e=>!0}};function c(e,t){let i=(e.ctrl?16:0)|(e.shift?4:0)|(e.alt?8:0);return 4===e.button?(i|=64,i|=e.action):(i|=3&e.button,4&e.button&&(i|=64),8&e.button&&(i|=128),32===e.action?i|=32:0!==e.action||t||(i|=3)),i}const l=String.fromCharCode,d={DEFAULT:e=>{const t=[c(e,!1)+32,e.col+32,e.row+32];return t[0]>255||t[1]>255||t[2]>255?"":`[M${l(t[0])}${l(t[1])}${l(t[2])}`},SGR:e=>{const t=0===e.action&&4!==e.button?"m":"M";return `[<${c(e,!0)};${e.col};${e.row}${t}`},SGR_PIXELS:e=>{const t=0===e.action&&4!==e.button?"m":"M";return `[<${c(e,!0)};${e.x};${e.y}${t}`}};let _=class extends a.Disposable{constructor(e,t){super(),this._bufferService=e,this._coreService=t,this._protocols={},this._encodings={},this._activeProtocol="",this._activeEncoding="",this._lastEvent=null,this._onProtocolChange=this.register(new o.EventEmitter),this.onProtocolChange=this._onProtocolChange.event;for(const e of Object.keys(h))this.addProtocol(e,h[e]);for(const e of Object.keys(d))this.addEncoding(e,d[e]);this.reset();}addProtocol(e,t){this._protocols[e]=t;}addEncoding(e,t){this._encodings[e]=t;}get activeProtocol(){return this._activeProtocol}get areMouseEventsActive(){return 0!==this._protocols[this._activeProtocol].events}set activeProtocol(e){if(!this._protocols[e])throw new Error(`unknown protocol "${e}"`);this._activeProtocol=e,this._onProtocolChange.fire(this._protocols[e].events);}get activeEncoding(){return this._activeEncoding}set activeEncoding(e){if(!this._encodings[e])throw new Error(`unknown encoding "${e}"`);this._activeEncoding=e;}reset(){this.activeProtocol="NONE",this.activeEncoding="DEFAULT",this._lastEvent=null;}triggerMouseEvent(e){if(e.col<0||e.col>=this._bufferService.cols||e.row<0||e.row>=this._bufferService.rows)return !1;if(4===e.button&&32===e.action)return !1;if(3===e.button&&32!==e.action)return !1;if(4!==e.button&&(2===e.action||3===e.action))return !1;if(e.col++,e.row++,32===e.action&&this._lastEvent&&this._equalEvents(this._lastEvent,e,"SGR_PIXELS"===this._activeEncoding))return !1;if(!this._protocols[this._activeProtocol].restrict(e))return !1;const t=this._encodings[this._activeEncoding](e);return t&&("DEFAULT"===this._activeEncoding?this._coreService.triggerBinaryEvent(t):this._coreService.triggerDataEvent(t,!0)),this._lastEvent=e,!0}explainEvents(e){return {down:!!(1&e),up:!!(2&e),drag:!!(4&e),move:!!(8&e),wheel:!!(16&e)}}_equalEvents(e,t,i){if(i){if(e.x!==t.x)return !1;if(e.y!==t.y)return !1}else {if(e.col!==t.col)return !1;if(e.row!==t.row)return !1}return e.button===t.button&&e.action===t.action&&e.ctrl===t.ctrl&&e.alt===t.alt&&e.shift===t.shift}};_=s([r(0,n.IBufferService),r(1,n.ICoreService)],_),t.CoreMouseService=_;},6975:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreService=void 0;const n=i(2585),o=i(8460),a=i(1439),h=i(844),c=Object.freeze({insertMode:!1}),l=Object.freeze({applicationCursorKeys:!1,applicationKeypad:!1,bracketedPasteMode:!1,origin:!1,reverseWraparound:!1,sendFocus:!1,wraparound:!0});let d=class extends h.Disposable{constructor(e,t,i){super(),this._bufferService=e,this._logService=t,this._optionsService=i,this.isCursorInitialized=!1,this.isCursorHidden=!1,this._onData=this.register(new o.EventEmitter),this.onData=this._onData.event,this._onUserInput=this.register(new o.EventEmitter),this.onUserInput=this._onUserInput.event,this._onBinary=this.register(new o.EventEmitter),this.onBinary=this._onBinary.event,this._onRequestScrollToBottom=this.register(new o.EventEmitter),this.onRequestScrollToBottom=this._onRequestScrollToBottom.event,this.modes=(0, a.clone)(c),this.decPrivateModes=(0, a.clone)(l);}reset(){this.modes=(0, a.clone)(c),this.decPrivateModes=(0, a.clone)(l);}triggerDataEvent(e,t=!1){if(this._optionsService.rawOptions.disableStdin)return;const i=this._bufferService.buffer;t&&this._optionsService.rawOptions.scrollOnUserInput&&i.ybase!==i.ydisp&&this._onRequestScrollToBottom.fire(),t&&this._onUserInput.fire(),this._logService.debug(`sending data "${e}"`,(()=>e.split("").map((e=>e.charCodeAt(0))))),this._onData.fire(e);}triggerBinaryEvent(e){this._optionsService.rawOptions.disableStdin||(this._logService.debug(`sending binary "${e}"`,(()=>e.split("").map((e=>e.charCodeAt(0))))),this._onBinary.fire(e));}};d=s([r(0,n.IBufferService),r(1,n.ILogService),r(2,n.IOptionsService)],d),t.CoreService=d;},9074:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DecorationService=void 0;const s=i(8055),r=i(8460),n=i(844),o=i(6106);let a=0,h=0;class c extends n.Disposable{constructor(){super(),this._decorations=new o.SortedList((e=>null==e?void 0:e.marker.line)),this._onDecorationRegistered=this.register(new r.EventEmitter),this.onDecorationRegistered=this._onDecorationRegistered.event,this._onDecorationRemoved=this.register(new r.EventEmitter),this.onDecorationRemoved=this._onDecorationRemoved.event,this.register((0, n.toDisposable)((()=>{for(const e of this._decorations.values())this._onDecorationRemoved.fire(e);this.reset();})));}get decorations(){return this._decorations.values()}registerDecoration(e){if(e.marker.isDisposed)return;const t=new l(e);if(t){const e=t.marker.onDispose((()=>t.dispose()));t.onDispose((()=>{t&&(this._decorations.delete(t)&&this._onDecorationRemoved.fire(t),e.dispose());})),this._decorations.insert(t),this._onDecorationRegistered.fire(t);}return t}reset(){for(const e of this._decorations.values())e.dispose();this._decorations.clear();}*getDecorationsAtCell(e,t,i){var s,r,n;let o=0,a=0;for(const h of this._decorations.getKeyIterator(t))o=null!==(s=h.options.x)&&void 0!==s?s:0,a=o+(null!==(r=h.options.width)&&void 0!==r?r:1),e>=o&&e<a&&(!i||(null!==(n=h.options.layer)&&void 0!==n?n:"bottom")===i)&&(yield h);}forEachDecorationAtCell(e,t,i,s){this._decorations.forEachByKey(t,(t=>{var r,n,o;a=null!==(r=t.options.x)&&void 0!==r?r:0,h=a+(null!==(n=t.options.width)&&void 0!==n?n:1),e>=a&&e<h&&(!i||(null!==(o=t.options.layer)&&void 0!==o?o:"bottom")===i)&&s(t);}));}dispose(){for(const e of this._decorations.values())this._onDecorationRemoved.fire(e);this.reset();}}t.DecorationService=c;class l extends n.Disposable{constructor(e){super(),this.options=e,this.onRenderEmitter=this.register(new r.EventEmitter),this.onRender=this.onRenderEmitter.event,this._onDispose=this.register(new r.EventEmitter),this.onDispose=this._onDispose.event,this._cachedBg=null,this._cachedFg=null,this.marker=e.marker,this.options.overviewRulerOptions&&!this.options.overviewRulerOptions.position&&(this.options.overviewRulerOptions.position="full");}get isDisposed(){return this._isDisposed}get backgroundColorRGB(){return null===this._cachedBg&&(this.options.backgroundColor?this._cachedBg=s.css.toColor(this.options.backgroundColor):this._cachedBg=void 0),this._cachedBg}get foregroundColorRGB(){return null===this._cachedFg&&(this.options.foregroundColor?this._cachedFg=s.css.toColor(this.options.foregroundColor):this._cachedFg=void 0),this._cachedFg}dispose(){this._onDispose.fire(),super.dispose();}}},4348:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InstantiationService=t.ServiceCollection=void 0;const s=i(2585),r=i(8343);class n{constructor(...e){this._entries=new Map;for(const[t,i]of e)this.set(t,i);}set(e,t){const i=this._entries.get(e);return this._entries.set(e,t),i}forEach(e){for(const[t,i]of this._entries.entries())e(t,i);}has(e){return this._entries.has(e)}get(e){return this._entries.get(e)}}t.ServiceCollection=n,t.InstantiationService=class{constructor(){this._services=new n,this._services.set(s.IInstantiationService,this);}setService(e,t){this._services.set(e,t);}getService(e){return this._services.get(e)}createInstance(e,...t){const i=(0, r.getServiceDependencies)(e).sort(((e,t)=>e.index-t.index)),s=[];for(const t of i){const i=this._services.get(t.id);if(!i)throw new Error(`[createInstance] ${e.name} depends on UNKNOWN service ${t.id}.`);s.push(i);}const n=i.length>0?i[0].index:t.length;if(t.length!==n)throw new Error(`[createInstance] First service dependency of ${e.name} at position ${n+1} conflicts with ${t.length} static arguments`);return new e(...[...t,...s])}};},7866:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.LogService=void 0;const n=i(844),o=i(2585),a={debug:o.LogLevelEnum.DEBUG,info:o.LogLevelEnum.INFO,warn:o.LogLevelEnum.WARN,error:o.LogLevelEnum.ERROR,off:o.LogLevelEnum.OFF};let h=class extends n.Disposable{constructor(e){super(),this._optionsService=e,this.logLevel=o.LogLevelEnum.OFF,this._updateLogLevel(),this.register(this._optionsService.onSpecificOptionChange("logLevel",(()=>this._updateLogLevel())));}_updateLogLevel(){this.logLevel=a[this._optionsService.rawOptions.logLevel];}_evalLazyOptionalParams(e){for(let t=0;t<e.length;t++)"function"==typeof e[t]&&(e[t]=e[t]());}_log(e,t,i){this._evalLazyOptionalParams(i),e.call(console,"xterm.js: "+t,...i);}debug(e,...t){this.logLevel<=o.LogLevelEnum.DEBUG&&this._log(console.log,e,t);}info(e,...t){this.logLevel<=o.LogLevelEnum.INFO&&this._log(console.info,e,t);}warn(e,...t){this.logLevel<=o.LogLevelEnum.WARN&&this._log(console.warn,e,t);}error(e,...t){this.logLevel<=o.LogLevelEnum.ERROR&&this._log(console.error,e,t);}};h=s([r(0,o.IOptionsService)],h),t.LogService=h;},7302:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OptionsService=t.DEFAULT_OPTIONS=void 0;const s=i(8460),r=i(6114),n=i(844);t.DEFAULT_OPTIONS={cols:80,rows:24,cursorBlink:!1,cursorStyle:"block",cursorWidth:1,customGlyphs:!0,drawBoldTextInBrightColors:!0,fastScrollModifier:"alt",fastScrollSensitivity:5,fontFamily:"courier-new, courier, monospace",fontSize:15,fontWeight:"normal",fontWeightBold:"bold",lineHeight:1,letterSpacing:0,linkHandler:null,logLevel:"info",scrollback:1e3,scrollOnUserInput:!0,scrollSensitivity:1,screenReaderMode:!1,smoothScrollDuration:0,macOptionIsMeta:!1,macOptionClickForcesSelection:!1,minimumContrastRatio:1,disableStdin:!1,allowProposedApi:!1,allowTransparency:!1,tabStopWidth:8,theme:{},rightClickSelectsWord:r.isMac,windowOptions:{},windowsMode:!1,windowsPty:{},wordSeparator:" ()[]{}',\"`",altClickMovesCursor:!0,convertEol:!1,termName:"xterm",cancelEvents:!1,overviewRulerWidth:0};const o=["normal","bold","100","200","300","400","500","600","700","800","900"];class a extends n.Disposable{constructor(e){super(),this._onOptionChange=this.register(new s.EventEmitter),this.onOptionChange=this._onOptionChange.event;const i=Object.assign({},t.DEFAULT_OPTIONS);for(const t in e)if(t in i)try{const s=e[t];i[t]=this._sanitizeAndValidateOption(t,s);}catch(e){console.error(e);}this.rawOptions=i,this.options=Object.assign({},i),this._setupOptions();}onSpecificOptionChange(e,t){return this.onOptionChange((i=>{i===e&&t(this.rawOptions[e]);}))}onMultipleOptionChange(e,t){return this.onOptionChange((i=>{-1!==e.indexOf(i)&&t();}))}_setupOptions(){const e=e=>{if(!(e in t.DEFAULT_OPTIONS))throw new Error(`No option with key "${e}"`);return this.rawOptions[e]},i=(e,i)=>{if(!(e in t.DEFAULT_OPTIONS))throw new Error(`No option with key "${e}"`);i=this._sanitizeAndValidateOption(e,i),this.rawOptions[e]!==i&&(this.rawOptions[e]=i,this._onOptionChange.fire(e));};for(const t in this.rawOptions){const s={get:e.bind(this,t),set:i.bind(this,t)};Object.defineProperty(this.options,t,s);}}_sanitizeAndValidateOption(e,i){switch(e){case"cursorStyle":if(i||(i=t.DEFAULT_OPTIONS[e]),!function(e){return "block"===e||"underline"===e||"bar"===e}(i))throw new Error(`"${i}" is not a valid value for ${e}`);break;case"wordSeparator":i||(i=t.DEFAULT_OPTIONS[e]);break;case"fontWeight":case"fontWeightBold":if("number"==typeof i&&1<=i&&i<=1e3)break;i=o.includes(i)?i:t.DEFAULT_OPTIONS[e];break;case"cursorWidth":i=Math.floor(i);case"lineHeight":case"tabStopWidth":if(i<1)throw new Error(`${e} cannot be less than 1, value: ${i}`);break;case"minimumContrastRatio":i=Math.max(1,Math.min(21,Math.round(10*i)/10));break;case"scrollback":if((i=Math.min(i,4294967295))<0)throw new Error(`${e} cannot be less than 0, value: ${i}`);break;case"fastScrollSensitivity":case"scrollSensitivity":if(i<=0)throw new Error(`${e} cannot be less than or equal to 0, value: ${i}`);break;case"rows":case"cols":if(!i&&0!==i)throw new Error(`${e} must be numeric, value: ${i}`);break;case"windowsPty":i=null!=i?i:{};}return i}}t.OptionsService=a;},2660:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.OscLinkService=void 0;const n=i(2585);let o=class{constructor(e){this._bufferService=e,this._nextId=1,this._entriesWithId=new Map,this._dataByLinkId=new Map;}registerLink(e){const t=this._bufferService.buffer;if(void 0===e.id){const i=t.addMarker(t.ybase+t.y),s={data:e,id:this._nextId++,lines:[i]};return i.onDispose((()=>this._removeMarkerFromLink(s,i))),this._dataByLinkId.set(s.id,s),s.id}const i=e,s=this._getEntryIdKey(i),r=this._entriesWithId.get(s);if(r)return this.addLineToLink(r.id,t.ybase+t.y),r.id;const n=t.addMarker(t.ybase+t.y),o={id:this._nextId++,key:this._getEntryIdKey(i),data:i,lines:[n]};return n.onDispose((()=>this._removeMarkerFromLink(o,n))),this._entriesWithId.set(o.key,o),this._dataByLinkId.set(o.id,o),o.id}addLineToLink(e,t){const i=this._dataByLinkId.get(e);if(i&&i.lines.every((e=>e.line!==t))){const e=this._bufferService.buffer.addMarker(t);i.lines.push(e),e.onDispose((()=>this._removeMarkerFromLink(i,e)));}}getLinkData(e){var t;return null===(t=this._dataByLinkId.get(e))||void 0===t?void 0:t.data}_getEntryIdKey(e){return `${e.id};;${e.uri}`}_removeMarkerFromLink(e,t){const i=e.lines.indexOf(t);-1!==i&&(e.lines.splice(i,1),0===e.lines.length&&(void 0!==e.data.id&&this._entriesWithId.delete(e.key),this._dataByLinkId.delete(e.id)));}};o=s([r(0,n.IBufferService)],o),t.OscLinkService=o;},8343:(e,t)=>{function i(e,t,i){t.di$target===t?t.di$dependencies.push({id:e,index:i}):(t.di$dependencies=[{id:e,index:i}],t.di$target=t);}Object.defineProperty(t,"__esModule",{value:!0}),t.createDecorator=t.getServiceDependencies=t.serviceRegistry=void 0,t.serviceRegistry=new Map,t.getServiceDependencies=function(e){return e.di$dependencies||[]},t.createDecorator=function(e){if(t.serviceRegistry.has(e))return t.serviceRegistry.get(e);const s=function(e,t,r){if(3!==arguments.length)throw new Error("@IServiceName-decorator can only be used to decorate a parameter");i(s,e,r);};return s.toString=()=>e,t.serviceRegistry.set(e,s),s};},2585:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IDecorationService=t.IUnicodeService=t.IOscLinkService=t.IOptionsService=t.ILogService=t.LogLevelEnum=t.IInstantiationService=t.ICharsetService=t.ICoreService=t.ICoreMouseService=t.IBufferService=void 0;const s=i(8343);var r;t.IBufferService=(0, s.createDecorator)("BufferService"),t.ICoreMouseService=(0, s.createDecorator)("CoreMouseService"),t.ICoreService=(0, s.createDecorator)("CoreService"),t.ICharsetService=(0, s.createDecorator)("CharsetService"),t.IInstantiationService=(0, s.createDecorator)("InstantiationService"),(r=t.LogLevelEnum||(t.LogLevelEnum={}))[r.DEBUG=0]="DEBUG",r[r.INFO=1]="INFO",r[r.WARN=2]="WARN",r[r.ERROR=3]="ERROR",r[r.OFF=4]="OFF",t.ILogService=(0, s.createDecorator)("LogService"),t.IOptionsService=(0, s.createDecorator)("OptionsService"),t.IOscLinkService=(0, s.createDecorator)("OscLinkService"),t.IUnicodeService=(0, s.createDecorator)("UnicodeService"),t.IDecorationService=(0, s.createDecorator)("DecorationService");},1480:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeService=void 0;const s=i(8460),r=i(225);t.UnicodeService=class{constructor(){this._providers=Object.create(null),this._active="",this._onChange=new s.EventEmitter,this.onChange=this._onChange.event;const e=new r.UnicodeV6;this.register(e),this._active=e.version,this._activeProvider=e;}dispose(){this._onChange.dispose();}get versions(){return Object.keys(this._providers)}get activeVersion(){return this._active}set activeVersion(e){if(!this._providers[e])throw new Error(`unknown Unicode version "${e}"`);this._active=e,this._activeProvider=this._providers[e],this._onChange.fire(e);}register(e){this._providers[e.version]=e;}wcwidth(e){return this._activeProvider.wcwidth(e)}getStringCellWidth(e){let t=0;const i=e.length;for(let s=0;s<i;++s){let r=e.charCodeAt(s);if(55296<=r&&r<=56319){if(++s>=i)return t+this.wcwidth(r);const n=e.charCodeAt(s);56320<=n&&n<=57343?r=1024*(r-55296)+n-56320+65536:t+=this.wcwidth(n);}t+=this.wcwidth(r);}return t}};}},t={};function i(s){var r=t[s];if(void 0!==r)return r.exports;var n=t[s]={exports:{}};return e[s].call(n.exports,n,n.exports,i),n.exports}var s={};return (()=>{var e=s;Object.defineProperty(e,"__esModule",{value:!0}),e.Terminal=void 0;const t=i(3236),r=i(9042),n=i(7975),o=i(7090),a=i(5741),h=i(8285),c=["cols","rows"];e.Terminal=class{constructor(e){this._core=new t.Terminal(e),this._addonManager=new a.AddonManager,this._publicOptions=Object.assign({},this._core.options);const i=e=>this._core.options[e],s=(e,t)=>{this._checkReadonlyOptions(e),this._core.options[e]=t;};for(const e in this._core.options){const t={get:i.bind(this,e),set:s.bind(this,e)};Object.defineProperty(this._publicOptions,e,t);}}_checkReadonlyOptions(e){if(c.includes(e))throw new Error(`Option "${e}" can only be set in the constructor`)}_checkProposedApi(){if(!this._core.optionsService.rawOptions.allowProposedApi)throw new Error("You must set the allowProposedApi option to true to use proposed API")}get onBell(){return this._core.onBell}get onBinary(){return this._core.onBinary}get onCursorMove(){return this._core.onCursorMove}get onData(){return this._core.onData}get onKey(){return this._core.onKey}get onLineFeed(){return this._core.onLineFeed}get onRender(){return this._core.onRender}get onResize(){return this._core.onResize}get onScroll(){return this._core.onScroll}get onSelectionChange(){return this._core.onSelectionChange}get onTitleChange(){return this._core.onTitleChange}get onWriteParsed(){return this._core.onWriteParsed}get element(){return this._core.element}get parser(){return this._parser||(this._parser=new n.ParserApi(this._core)),this._parser}get unicode(){return this._checkProposedApi(),new o.UnicodeApi(this._core)}get textarea(){return this._core.textarea}get rows(){return this._core.rows}get cols(){return this._core.cols}get buffer(){return this._buffer||(this._buffer=new h.BufferNamespaceApi(this._core)),this._buffer}get markers(){return this._checkProposedApi(),this._core.markers}get modes(){const e=this._core.coreService.decPrivateModes;let t="none";switch(this._core.coreMouseService.activeProtocol){case"X10":t="x10";break;case"VT200":t="vt200";break;case"DRAG":t="drag";break;case"ANY":t="any";}return {applicationCursorKeysMode:e.applicationCursorKeys,applicationKeypadMode:e.applicationKeypad,bracketedPasteMode:e.bracketedPasteMode,insertMode:this._core.coreService.modes.insertMode,mouseTrackingMode:t,originMode:e.origin,reverseWraparoundMode:e.reverseWraparound,sendFocusMode:e.sendFocus,wraparoundMode:e.wraparound}}get options(){return this._publicOptions}set options(e){for(const t in e)this._publicOptions[t]=e[t];}blur(){this._core.blur();}focus(){this._core.focus();}resize(e,t){this._verifyIntegers(e,t),this._core.resize(e,t);}open(e){this._core.open(e);}attachCustomKeyEventHandler(e){this._core.attachCustomKeyEventHandler(e);}registerLinkProvider(e){return this._core.registerLinkProvider(e)}registerCharacterJoiner(e){return this._checkProposedApi(),this._core.registerCharacterJoiner(e)}deregisterCharacterJoiner(e){this._checkProposedApi(),this._core.deregisterCharacterJoiner(e);}registerMarker(e=0){return this._verifyIntegers(e),this._core.addMarker(e)}registerDecoration(e){var t,i,s;return this._checkProposedApi(),this._verifyPositiveIntegers(null!==(t=e.x)&&void 0!==t?t:0,null!==(i=e.width)&&void 0!==i?i:0,null!==(s=e.height)&&void 0!==s?s:0),this._core.registerDecoration(e)}hasSelection(){return this._core.hasSelection()}select(e,t,i){this._verifyIntegers(e,t,i),this._core.select(e,t,i);}getSelection(){return this._core.getSelection()}getSelectionPosition(){return this._core.getSelectionPosition()}clearSelection(){this._core.clearSelection();}selectAll(){this._core.selectAll();}selectLines(e,t){this._verifyIntegers(e,t),this._core.selectLines(e,t);}dispose(){this._addonManager.dispose(),this._core.dispose();}scrollLines(e){this._verifyIntegers(e),this._core.scrollLines(e);}scrollPages(e){this._verifyIntegers(e),this._core.scrollPages(e);}scrollToTop(){this._core.scrollToTop();}scrollToBottom(){this._core.scrollToBottom();}scrollToLine(e){this._verifyIntegers(e),this._core.scrollToLine(e);}clear(){this._core.clear();}write(e,t){this._core.write(e,t);}writeln(e,t){this._core.write(e),this._core.write("\r\n",t);}paste(e){this._core.paste(e);}refresh(e,t){this._verifyIntegers(e,t),this._core.refresh(e,t);}reset(){this._core.reset();}clearTextureAtlas(){this._core.clearTextureAtlas();}loadAddon(e){return this._addonManager.loadAddon(this,e)}static get strings(){return r}_verifyIntegers(...e){for(const t of e)if(t===1/0||isNaN(t)||t%1!=0)throw new Error("This API only accepts integers")}_verifyPositiveIntegers(...e){for(const t of e)if(t&&(t===1/0||isNaN(t)||t%1!=0||t<0))throw new Error("This API only accepts positive integers")}};})(),s})()));
  	
  } (xterm));

  var xtermExports = xterm.exports;

  var xtermAddonFit = {exports: {}};

  (function (module, exports) {
  	!function(e,t){module.exports=t();}(self,(function(){return (()=>{var e={};return (()=>{var t=e;Object.defineProperty(t,"__esModule",{value:!0}),t.FitAddon=void 0,t.FitAddon=class{constructor(){}activate(e){this._terminal=e;}dispose(){}fit(){const e=this.proposeDimensions();if(!e||!this._terminal||isNaN(e.cols)||isNaN(e.rows))return;const t=this._terminal._core;this._terminal.rows===e.rows&&this._terminal.cols===e.cols||(t._renderService.clear(),this._terminal.resize(e.cols,e.rows));}proposeDimensions(){if(!this._terminal)return;if(!this._terminal.element||!this._terminal.element.parentElement)return;const e=this._terminal._core,t=e._renderService.dimensions;if(0===t.css.cell.width||0===t.css.cell.height)return;const r=0===this._terminal.options.scrollback?0:e.viewport.scrollBarWidth,i=window.getComputedStyle(this._terminal.element.parentElement),o=parseInt(i.getPropertyValue("height")),s=Math.max(0,parseInt(i.getPropertyValue("width"))),n=window.getComputedStyle(this._terminal.element),l=o-(parseInt(n.getPropertyValue("padding-top"))+parseInt(n.getPropertyValue("padding-bottom"))),a=s-(parseInt(n.getPropertyValue("padding-right"))+parseInt(n.getPropertyValue("padding-left")))-r;return {cols:Math.max(2,Math.floor(a/t.css.cell.width)),rows:Math.max(1,Math.floor(l/t.css.cell.height))}}};})(),e})()}));
  	
  } (xtermAddonFit));

  var xtermAddonFitExports = xtermAddonFit.exports;

  var events$1 = {exports: {}};

  var R = typeof Reflect === 'object' ? Reflect : null;
  var ReflectApply = R && typeof R.apply === 'function'
    ? R.apply
    : function ReflectApply(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };

  var ReflectOwnKeys;
  if (R && typeof R.ownKeys === 'function') {
    ReflectOwnKeys = R.ownKeys;
  } else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target)
        .concat(Object.getOwnPropertySymbols(target));
    };
  } else {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target);
    };
  }

  function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
  }

  var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
  };

  function EventEmitter$2() {
    EventEmitter$2.init.call(this);
  }
  events$1.exports = EventEmitter$2;
  events$1.exports.once = once;

  // Backwards-compat with node 0.10.x
  EventEmitter$2.EventEmitter = EventEmitter$2;

  EventEmitter$2.prototype._events = undefined;
  EventEmitter$2.prototype._eventsCount = 0;
  EventEmitter$2.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  var defaultMaxListeners = 10;

  function checkListener(listener) {
    if (typeof listener !== 'function') {
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
  }

  Object.defineProperty(EventEmitter$2, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
      }
      defaultMaxListeners = arg;
    }
  });

  EventEmitter$2.init = function() {

    if (this._events === undefined ||
        this._events === Object.getPrototypeOf(this)._events) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter$2.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    }
    this._maxListeners = n;
    return this;
  };

  function _getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter$2.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter$2.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
  };

  EventEmitter$2.prototype.emit = function emit(type) {
    var args = [];
    for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
    var doError = (type === 'error');

    var events = this._events;
    if (events !== undefined)
      doError = (doError && events.error === undefined);
    else if (!doError)
      return false;

    // If there is no 'error' event listener then throw.
    if (doError) {
      var er;
      if (args.length > 0)
        er = args[0];
      if (er instanceof Error) {
        // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
      }
      // At least give some kind of context to the user
      var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
      err.context = er;
      throw err; // Unhandled 'error' event
    }

    var handler = events[type];

    if (handler === undefined)
      return false;

    if (typeof handler === 'function') {
      ReflectApply(handler, this, args);
    } else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        ReflectApply(listeners[i], this, args);
    }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    checkListener(listener);

    events = target._events;
    if (events === undefined) {
      events = target._events = Object.create(null);
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener !== undefined) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (existing === undefined) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
        // If we've already got an array, just append.
      } else if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }

      // Check for listener leak
      m = _getMaxListeners(target);
      if (m > 0 && existing.length > m && !existing.warned) {
        existing.warned = true;
        // No error code for this since it is a Warning
        // eslint-disable-next-line no-restricted-syntax
        var w = new Error('Possible EventEmitter memory leak detected. ' +
                            existing.length + ' ' + String(type) + ' listeners ' +
                            'added. Use emitter.setMaxListeners() to ' +
                            'increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        ProcessEmitWarning(w);
      }
    }

    return target;
  }

  EventEmitter$2.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter$2.prototype.on = EventEmitter$2.prototype.addListener;

  EventEmitter$2.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function onceWrapper() {
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      if (arguments.length === 0)
        return this.listener.call(this.target);
      return this.listener.apply(this.target, arguments);
    }
  }

  function _onceWrap(target, type, listener) {
    var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
  }

  EventEmitter$2.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter$2.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        checkListener(listener);
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // Emits a 'removeListener' event if and only if the listener was removed.
  EventEmitter$2.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        checkListener(listener);

        events = this._events;
        if (events === undefined)
          return this;

        list = events[type];
        if (list === undefined)
          return this;

        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (position === 0)
            list.shift();
          else {
            spliceOne(list, position);
          }

          if (list.length === 1)
            events[type] = list[0];

          if (events.removeListener !== undefined)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };

  EventEmitter$2.prototype.off = EventEmitter$2.prototype.removeListener;

  EventEmitter$2.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events, i;

        events = this._events;
        if (events === undefined)
          return this;

        // not listening for removeListener, no need to emit
        if (events.removeListener === undefined) {
          if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
          } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0)
              this._events = Object.create(null);
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = Object.create(null);
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners !== undefined) {
          // LIFO order
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }

        return this;
      };

  function _listeners(target, type, unwrap) {
    var events = target._events;

    if (events === undefined)
      return [];

    var evlistener = events[type];
    if (evlistener === undefined)
      return [];

    if (typeof evlistener === 'function')
      return unwrap ? [evlistener.listener || evlistener] : [evlistener];

    return unwrap ?
      unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
  }

  EventEmitter$2.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
  };

  EventEmitter$2.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
  };

  EventEmitter$2.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };

  EventEmitter$2.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events = this._events;

    if (events !== undefined) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener !== undefined) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter$2.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
  };

  function arrayClone(arr, n) {
    var copy = new Array(n);
    for (var i = 0; i < n; ++i)
      copy[i] = arr[i];
    return copy;
  }

  function spliceOne(list, index) {
    for (; index + 1 < list.length; index++)
      list[index] = list[index + 1];
    list.pop();
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  function once(emitter, name) {
    return new Promise(function (resolve, reject) {
      function errorListener(err) {
        emitter.removeListener(name, resolver);
        reject(err);
      }

      function resolver() {
        if (typeof emitter.removeListener === 'function') {
          emitter.removeListener('error', errorListener);
        }
        resolve([].slice.call(arguments));
      }
      eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
      if (name !== 'error') {
        addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
      }
    });
  }

  function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') {
      eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
    }
  }

  function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
      if (flags.once) {
        emitter.once(name, listener);
      } else {
        emitter.on(name, listener);
      }
    } else if (typeof emitter.addEventListener === 'function') {
      // EventTarget does not have `error` event semantics like Node
      // EventEmitters, we do not listen for `error` events here.
      emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) {
          emitter.removeEventListener(name, wrapListener);
        }
        listener(arg);
      });
    } else {
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
    }
  }

  var eventsExports = events$1.exports;

  /**
   * Node.js module for Forge.
   *
   * @author Dave Longley
   *
   * Copyright 2011-2016 Digital Bazaar, Inc.
   */

  var forge$m = {
    // default options
    options: {
      usePureJavaScript: false
    }
  };

  var forge$n = /*@__PURE__*/getDefaultExportFromCjs(forge$m);

  var util$c = {exports: {}};

  /**
   * Base-N/Base-X encoding/decoding functions.
   *
   * Original implementation from base-x:
   * https://github.com/cryptocoinjs/base-x
   *
   * Which is MIT licensed:
   *
   * The MIT License (MIT)
   *
   * Copyright base-x contributors (c) 2016
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   * DEALINGS IN THE SOFTWARE.
   */

  var api = {};
  var baseN$1 = api;

  // baseN alphabet indexes
  var _reverseAlphabets = {};

  /**
   * BaseN-encodes a Uint8Array using the given alphabet.
   *
   * @param input the Uint8Array to encode.
   * @param maxline the maximum number of encoded characters per line to use,
   *          defaults to none.
   *
   * @return the baseN-encoded output string.
   */
  api.encode = function(input, alphabet, maxline) {
    if(typeof alphabet !== 'string') {
      throw new TypeError('"alphabet" must be a string.');
    }
    if(maxline !== undefined && typeof maxline !== 'number') {
      throw new TypeError('"maxline" must be a number.');
    }

    var output = '';

    if(!(input instanceof Uint8Array)) {
      // assume forge byte buffer
      output = _encodeWithByteBuffer(input, alphabet);
    } else {
      var i = 0;
      var base = alphabet.length;
      var first = alphabet.charAt(0);
      var digits = [0];
      for(i = 0; i < input.length; ++i) {
        for(var j = 0, carry = input[i]; j < digits.length; ++j) {
          carry += digits[j] << 8;
          digits[j] = carry % base;
          carry = (carry / base) | 0;
        }

        while(carry > 0) {
          digits.push(carry % base);
          carry = (carry / base) | 0;
        }
      }

      // deal with leading zeros
      for(i = 0; input[i] === 0 && i < input.length - 1; ++i) {
        output += first;
      }
      // convert digits to a string
      for(i = digits.length - 1; i >= 0; --i) {
        output += alphabet[digits[i]];
      }
    }

    if(maxline) {
      var regex = new RegExp('.{1,' + maxline + '}', 'g');
      output = output.match(regex).join('\r\n');
    }

    return output;
  };

  /**
   * Decodes a baseN-encoded (using the given alphabet) string to a
   * Uint8Array.
   *
   * @param input the baseN-encoded input string.
   *
   * @return the Uint8Array.
   */
  api.decode = function(input, alphabet) {
    if(typeof input !== 'string') {
      throw new TypeError('"input" must be a string.');
    }
    if(typeof alphabet !== 'string') {
      throw new TypeError('"alphabet" must be a string.');
    }

    var table = _reverseAlphabets[alphabet];
    if(!table) {
      // compute reverse alphabet
      table = _reverseAlphabets[alphabet] = [];
      for(var i = 0; i < alphabet.length; ++i) {
        table[alphabet.charCodeAt(i)] = i;
      }
    }

    // remove whitespace characters
    input = input.replace(/\s/g, '');

    var base = alphabet.length;
    var first = alphabet.charAt(0);
    var bytes = [0];
    for(var i = 0; i < input.length; i++) {
      var value = table[input.charCodeAt(i)];
      if(value === undefined) {
        return;
      }

      for(var j = 0, carry = value; j < bytes.length; ++j) {
        carry += bytes[j] * base;
        bytes[j] = carry & 0xff;
        carry >>= 8;
      }

      while(carry > 0) {
        bytes.push(carry & 0xff);
        carry >>= 8;
      }
    }

    // deal with leading zeros
    for(var k = 0; input[k] === first && k < input.length - 1; ++k) {
      bytes.push(0);
    }

    if(typeof Buffer !== 'undefined') {
      return Buffer.from(bytes.reverse());
    }

    return new Uint8Array(bytes.reverse());
  };

  function _encodeWithByteBuffer(input, alphabet) {
    var i = 0;
    var base = alphabet.length;
    var first = alphabet.charAt(0);
    var digits = [0];
    for(i = 0; i < input.length(); ++i) {
      for(var j = 0, carry = input.at(i); j < digits.length; ++j) {
        carry += digits[j] << 8;
        digits[j] = carry % base;
        carry = (carry / base) | 0;
      }

      while(carry > 0) {
        digits.push(carry % base);
        carry = (carry / base) | 0;
      }
    }

    var output = '';

    // deal with leading zeros
    for(i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {
      output += first;
    }
    // convert digits to a string
    for(i = digits.length - 1; i >= 0; --i) {
      output += alphabet[digits[i]];
    }

    return output;
  }

  /**
   * Utility functions for web applications.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2010-2018 Digital Bazaar, Inc.
   */

  var forge$l = forge$m;
  var baseN = baseN$1;

  /* Utilities API */
  var util$b = util$c.exports = forge$l.util = forge$l.util || {};

  // define setImmediate and nextTick
  (function() {
    // use native nextTick (unless we're in webpack)
    // webpack (or better node-libs-browser polyfill) sets process.browser.
    // this way we can detect webpack properly
    if(typeof process !== 'undefined' && process.nextTick && !process.browser) {
      util$b.nextTick = process.nextTick;
      if(typeof setImmediate === 'function') {
        util$b.setImmediate = setImmediate;
      } else {
        // polyfill setImmediate with nextTick, older versions of node
        // (those w/o setImmediate) won't totally starve IO
        util$b.setImmediate = util$b.nextTick;
      }
      return;
    }

    // polyfill nextTick with native setImmediate
    if(typeof setImmediate === 'function') {
      util$b.setImmediate = function() { return setImmediate.apply(undefined, arguments); };
      util$b.nextTick = function(callback) {
        return setImmediate(callback);
      };
      return;
    }

    /* Note: A polyfill upgrade pattern is used here to allow combining
    polyfills. For example, MutationObserver is fast, but blocks UI updates,
    so it needs to allow UI updates periodically, so it falls back on
    postMessage or setTimeout. */

    // polyfill with setTimeout
    util$b.setImmediate = function(callback) {
      setTimeout(callback, 0);
    };

    // upgrade polyfill to use postMessage
    if(typeof window !== 'undefined' &&
      typeof window.postMessage === 'function') {
      var msg = 'forge.setImmediate';
      var callbacks = [];
      util$b.setImmediate = function(callback) {
        callbacks.push(callback);
        // only send message when one hasn't been sent in
        // the current turn of the event loop
        if(callbacks.length === 1) {
          window.postMessage(msg, '*');
        }
      };
      function handler(event) {
        if(event.source === window && event.data === msg) {
          event.stopPropagation();
          var copy = callbacks.slice();
          callbacks.length = 0;
          copy.forEach(function(callback) {
            callback();
          });
        }
      }
      window.addEventListener('message', handler, true);
    }

    // upgrade polyfill to use MutationObserver
    if(typeof MutationObserver !== 'undefined') {
      // polyfill with MutationObserver
      var now = Date.now();
      var attr = true;
      var div = document.createElement('div');
      var callbacks = [];
      new MutationObserver(function() {
        var copy = callbacks.slice();
        callbacks.length = 0;
        copy.forEach(function(callback) {
          callback();
        });
      }).observe(div, {attributes: true});
      var oldSetImmediate = util$b.setImmediate;
      util$b.setImmediate = function(callback) {
        if(Date.now() - now > 15) {
          now = Date.now();
          oldSetImmediate(callback);
        } else {
          callbacks.push(callback);
          // only trigger observer when it hasn't been triggered in
          // the current turn of the event loop
          if(callbacks.length === 1) {
            div.setAttribute('a', attr = !attr);
          }
        }
      };
    }

    util$b.nextTick = util$b.setImmediate;
  })();

  // check if running under Node.js
  util$b.isNodejs =
    typeof process !== 'undefined' && process.versions && process.versions.node;


  // 'self' will also work in Web Workers (instance of WorkerGlobalScope) while
  // it will point to `window` in the main thread.
  // To remain compatible with older browsers, we fall back to 'window' if 'self'
  // is not available.
  util$b.globalScope = (function() {
    if(util$b.isNodejs) {
      return commonjsGlobal;
    }

    return typeof self === 'undefined' ? window : self;
  })();

  // define isArray
  util$b.isArray = Array.isArray || function(x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };

  // define isArrayBuffer
  util$b.isArrayBuffer = function(x) {
    return typeof ArrayBuffer !== 'undefined' && x instanceof ArrayBuffer;
  };

  // define isArrayBufferView
  util$b.isArrayBufferView = function(x) {
    return x && util$b.isArrayBuffer(x.buffer) && x.byteLength !== undefined;
  };

  /**
   * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for
   * algorithms where bit manipulation, JavaScript limitations, and/or algorithm
   * design only allow for byte operations of a limited size.
   *
   * @param n number of bits.
   *
   * Throw Error if n invalid.
   */
  function _checkBitsParam(n) {
    if(!(n === 8 || n === 16 || n === 24 || n === 32)) {
      throw new Error('Only 8, 16, 24, or 32 bits supported: ' + n);
    }
  }

  // TODO: set ByteBuffer to best available backing
  util$b.ByteBuffer = ByteStringBuffer;

  /** Buffer w/BinaryString backing */

  /**
   * Constructor for a binary string backed byte buffer.
   *
   * @param [b] the bytes to wrap (either encoded as string, one byte per
   *          character, or as an ArrayBuffer or Typed Array).
   */
  function ByteStringBuffer(b) {
    // TODO: update to match DataBuffer API

    // the data in this buffer
    this.data = '';
    // the pointer for reading from this buffer
    this.read = 0;

    if(typeof b === 'string') {
      this.data = b;
    } else if(util$b.isArrayBuffer(b) || util$b.isArrayBufferView(b)) {
      if(typeof Buffer !== 'undefined' && b instanceof Buffer) {
        this.data = b.toString('binary');
      } else {
        // convert native buffer to forge buffer
        // FIXME: support native buffers internally instead
        var arr = new Uint8Array(b);
        try {
          this.data = String.fromCharCode.apply(null, arr);
        } catch(e) {
          for(var i = 0; i < arr.length; ++i) {
            this.putByte(arr[i]);
          }
        }
      }
    } else if(b instanceof ByteStringBuffer ||
      (typeof b === 'object' && typeof b.data === 'string' &&
      typeof b.read === 'number')) {
      // copy existing buffer
      this.data = b.data;
      this.read = b.read;
    }

    // used for v8 optimization
    this._constructedStringLength = 0;
  }
  util$b.ByteStringBuffer = ByteStringBuffer;

  /* Note: This is an optimization for V8-based browsers. When V8 concatenates
    a string, the strings are only joined logically using a "cons string" or
    "constructed/concatenated string". These containers keep references to one
    another and can result in very large memory usage. For example, if a 2MB
    string is constructed by concatenating 4 bytes together at a time, the
    memory usage will be ~44MB; so ~22x increase. The strings are only joined
    together when an operation requiring their joining takes place, such as
    substr(). This function is called when adding data to this buffer to ensure
    these types of strings are periodically joined to reduce the memory
    footprint. */
  var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;
  util$b.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {
    this._constructedStringLength += x;
    if(this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {
      // this substr() should cause the constructed string to join
      this.data.substr(0, 1);
      this._constructedStringLength = 0;
    }
  };

  /**
   * Gets the number of bytes in this buffer.
   *
   * @return the number of bytes in this buffer.
   */
  util$b.ByteStringBuffer.prototype.length = function() {
    return this.data.length - this.read;
  };

  /**
   * Gets whether or not this buffer is empty.
   *
   * @return true if this buffer is empty, false if not.
   */
  util$b.ByteStringBuffer.prototype.isEmpty = function() {
    return this.length() <= 0;
  };

  /**
   * Puts a byte in this buffer.
   *
   * @param b the byte to put.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.putByte = function(b) {
    return this.putBytes(String.fromCharCode(b));
  };

  /**
   * Puts a byte in this buffer N times.
   *
   * @param b the byte to put.
   * @param n the number of bytes of value b to put.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.fillWithByte = function(b, n) {
    b = String.fromCharCode(b);
    var d = this.data;
    while(n > 0) {
      if(n & 1) {
        d += b;
      }
      n >>>= 1;
      if(n > 0) {
        b += b;
      }
    }
    this.data = d;
    this._optimizeConstructedString(n);
    return this;
  };

  /**
   * Puts bytes in this buffer.
   *
   * @param bytes the bytes (as a binary encoded string) to put.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.putBytes = function(bytes) {
    this.data += bytes;
    this._optimizeConstructedString(bytes.length);
    return this;
  };

  /**
   * Puts a UTF-16 encoded string into this buffer.
   *
   * @param str the string to put.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.putString = function(str) {
    return this.putBytes(util$b.encodeUtf8(str));
  };

  /**
   * Puts a 16-bit integer in this buffer in big-endian order.
   *
   * @param i the 16-bit integer.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.putInt16 = function(i) {
    return this.putBytes(
      String.fromCharCode(i >> 8 & 0xFF) +
      String.fromCharCode(i & 0xFF));
  };

  /**
   * Puts a 24-bit integer in this buffer in big-endian order.
   *
   * @param i the 24-bit integer.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.putInt24 = function(i) {
    return this.putBytes(
      String.fromCharCode(i >> 16 & 0xFF) +
      String.fromCharCode(i >> 8 & 0xFF) +
      String.fromCharCode(i & 0xFF));
  };

  /**
   * Puts a 32-bit integer in this buffer in big-endian order.
   *
   * @param i the 32-bit integer.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.putInt32 = function(i) {
    return this.putBytes(
      String.fromCharCode(i >> 24 & 0xFF) +
      String.fromCharCode(i >> 16 & 0xFF) +
      String.fromCharCode(i >> 8 & 0xFF) +
      String.fromCharCode(i & 0xFF));
  };

  /**
   * Puts a 16-bit integer in this buffer in little-endian order.
   *
   * @param i the 16-bit integer.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.putInt16Le = function(i) {
    return this.putBytes(
      String.fromCharCode(i & 0xFF) +
      String.fromCharCode(i >> 8 & 0xFF));
  };

  /**
   * Puts a 24-bit integer in this buffer in little-endian order.
   *
   * @param i the 24-bit integer.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.putInt24Le = function(i) {
    return this.putBytes(
      String.fromCharCode(i & 0xFF) +
      String.fromCharCode(i >> 8 & 0xFF) +
      String.fromCharCode(i >> 16 & 0xFF));
  };

  /**
   * Puts a 32-bit integer in this buffer in little-endian order.
   *
   * @param i the 32-bit integer.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.putInt32Le = function(i) {
    return this.putBytes(
      String.fromCharCode(i & 0xFF) +
      String.fromCharCode(i >> 8 & 0xFF) +
      String.fromCharCode(i >> 16 & 0xFF) +
      String.fromCharCode(i >> 24 & 0xFF));
  };

  /**
   * Puts an n-bit integer in this buffer in big-endian order.
   *
   * @param i the n-bit integer.
   * @param n the number of bits in the integer (8, 16, 24, or 32).
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.putInt = function(i, n) {
    _checkBitsParam(n);
    var bytes = '';
    do {
      n -= 8;
      bytes += String.fromCharCode((i >> n) & 0xFF);
    } while(n > 0);
    return this.putBytes(bytes);
  };

  /**
   * Puts a signed n-bit integer in this buffer in big-endian order. Two's
   * complement representation is used.
   *
   * @param i the n-bit integer.
   * @param n the number of bits in the integer (8, 16, 24, or 32).
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.putSignedInt = function(i, n) {
    // putInt checks n
    if(i < 0) {
      i += 2 << (n - 1);
    }
    return this.putInt(i, n);
  };

  /**
   * Puts the given buffer into this buffer.
   *
   * @param buffer the buffer to put into this one.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.putBuffer = function(buffer) {
    return this.putBytes(buffer.getBytes());
  };

  /**
   * Gets a byte from this buffer and advances the read pointer by 1.
   *
   * @return the byte.
   */
  util$b.ByteStringBuffer.prototype.getByte = function() {
    return this.data.charCodeAt(this.read++);
  };

  /**
   * Gets a uint16 from this buffer in big-endian order and advances the read
   * pointer by 2.
   *
   * @return the uint16.
   */
  util$b.ByteStringBuffer.prototype.getInt16 = function() {
    var rval = (
      this.data.charCodeAt(this.read) << 8 ^
      this.data.charCodeAt(this.read + 1));
    this.read += 2;
    return rval;
  };

  /**
   * Gets a uint24 from this buffer in big-endian order and advances the read
   * pointer by 3.
   *
   * @return the uint24.
   */
  util$b.ByteStringBuffer.prototype.getInt24 = function() {
    var rval = (
      this.data.charCodeAt(this.read) << 16 ^
      this.data.charCodeAt(this.read + 1) << 8 ^
      this.data.charCodeAt(this.read + 2));
    this.read += 3;
    return rval;
  };

  /**
   * Gets a uint32 from this buffer in big-endian order and advances the read
   * pointer by 4.
   *
   * @return the word.
   */
  util$b.ByteStringBuffer.prototype.getInt32 = function() {
    var rval = (
      this.data.charCodeAt(this.read) << 24 ^
      this.data.charCodeAt(this.read + 1) << 16 ^
      this.data.charCodeAt(this.read + 2) << 8 ^
      this.data.charCodeAt(this.read + 3));
    this.read += 4;
    return rval;
  };

  /**
   * Gets a uint16 from this buffer in little-endian order and advances the read
   * pointer by 2.
   *
   * @return the uint16.
   */
  util$b.ByteStringBuffer.prototype.getInt16Le = function() {
    var rval = (
      this.data.charCodeAt(this.read) ^
      this.data.charCodeAt(this.read + 1) << 8);
    this.read += 2;
    return rval;
  };

  /**
   * Gets a uint24 from this buffer in little-endian order and advances the read
   * pointer by 3.
   *
   * @return the uint24.
   */
  util$b.ByteStringBuffer.prototype.getInt24Le = function() {
    var rval = (
      this.data.charCodeAt(this.read) ^
      this.data.charCodeAt(this.read + 1) << 8 ^
      this.data.charCodeAt(this.read + 2) << 16);
    this.read += 3;
    return rval;
  };

  /**
   * Gets a uint32 from this buffer in little-endian order and advances the read
   * pointer by 4.
   *
   * @return the word.
   */
  util$b.ByteStringBuffer.prototype.getInt32Le = function() {
    var rval = (
      this.data.charCodeAt(this.read) ^
      this.data.charCodeAt(this.read + 1) << 8 ^
      this.data.charCodeAt(this.read + 2) << 16 ^
      this.data.charCodeAt(this.read + 3) << 24);
    this.read += 4;
    return rval;
  };

  /**
   * Gets an n-bit integer from this buffer in big-endian order and advances the
   * read pointer by ceil(n/8).
   *
   * @param n the number of bits in the integer (8, 16, 24, or 32).
   *
   * @return the integer.
   */
  util$b.ByteStringBuffer.prototype.getInt = function(n) {
    _checkBitsParam(n);
    var rval = 0;
    do {
      // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
      rval = (rval << 8) + this.data.charCodeAt(this.read++);
      n -= 8;
    } while(n > 0);
    return rval;
  };

  /**
   * Gets a signed n-bit integer from this buffer in big-endian order, using
   * two's complement, and advances the read pointer by n/8.
   *
   * @param n the number of bits in the integer (8, 16, 24, or 32).
   *
   * @return the integer.
   */
  util$b.ByteStringBuffer.prototype.getSignedInt = function(n) {
    // getInt checks n
    var x = this.getInt(n);
    var max = 2 << (n - 2);
    if(x >= max) {
      x -= max << 1;
    }
    return x;
  };

  /**
   * Reads bytes out as a binary encoded string and clears them from the
   * buffer. Note that the resulting string is binary encoded (in node.js this
   * encoding is referred to as `binary`, it is *not* `utf8`).
   *
   * @param count the number of bytes to read, undefined or null for all.
   *
   * @return a binary encoded string of bytes.
   */
  util$b.ByteStringBuffer.prototype.getBytes = function(count) {
    var rval;
    if(count) {
      // read count bytes
      count = Math.min(this.length(), count);
      rval = this.data.slice(this.read, this.read + count);
      this.read += count;
    } else if(count === 0) {
      rval = '';
    } else {
      // read all bytes, optimize to only copy when needed
      rval = (this.read === 0) ? this.data : this.data.slice(this.read);
      this.clear();
    }
    return rval;
  };

  /**
   * Gets a binary encoded string of the bytes from this buffer without
   * modifying the read pointer.
   *
   * @param count the number of bytes to get, omit to get all.
   *
   * @return a string full of binary encoded characters.
   */
  util$b.ByteStringBuffer.prototype.bytes = function(count) {
    return (typeof(count) === 'undefined' ?
      this.data.slice(this.read) :
      this.data.slice(this.read, this.read + count));
  };

  /**
   * Gets a byte at the given index without modifying the read pointer.
   *
   * @param i the byte index.
   *
   * @return the byte.
   */
  util$b.ByteStringBuffer.prototype.at = function(i) {
    return this.data.charCodeAt(this.read + i);
  };

  /**
   * Puts a byte at the given index without modifying the read pointer.
   *
   * @param i the byte index.
   * @param b the byte to put.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.setAt = function(i, b) {
    this.data = this.data.substr(0, this.read + i) +
      String.fromCharCode(b) +
      this.data.substr(this.read + i + 1);
    return this;
  };

  /**
   * Gets the last byte without modifying the read pointer.
   *
   * @return the last byte.
   */
  util$b.ByteStringBuffer.prototype.last = function() {
    return this.data.charCodeAt(this.data.length - 1);
  };

  /**
   * Creates a copy of this buffer.
   *
   * @return the copy.
   */
  util$b.ByteStringBuffer.prototype.copy = function() {
    var c = util$b.createBuffer(this.data);
    c.read = this.read;
    return c;
  };

  /**
   * Compacts this buffer.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.compact = function() {
    if(this.read > 0) {
      this.data = this.data.slice(this.read);
      this.read = 0;
    }
    return this;
  };

  /**
   * Clears this buffer.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.clear = function() {
    this.data = '';
    this.read = 0;
    return this;
  };

  /**
   * Shortens this buffer by triming bytes off of the end of this buffer.
   *
   * @param count the number of bytes to trim off.
   *
   * @return this buffer.
   */
  util$b.ByteStringBuffer.prototype.truncate = function(count) {
    var len = Math.max(0, this.length() - count);
    this.data = this.data.substr(this.read, len);
    this.read = 0;
    return this;
  };

  /**
   * Converts this buffer to a hexadecimal string.
   *
   * @return a hexadecimal string.
   */
  util$b.ByteStringBuffer.prototype.toHex = function() {
    var rval = '';
    for(var i = this.read; i < this.data.length; ++i) {
      var b = this.data.charCodeAt(i);
      if(b < 16) {
        rval += '0';
      }
      rval += b.toString(16);
    }
    return rval;
  };

  /**
   * Converts this buffer to a UTF-16 string (standard JavaScript string).
   *
   * @return a UTF-16 string.
   */
  util$b.ByteStringBuffer.prototype.toString = function() {
    return util$b.decodeUtf8(this.bytes());
  };

  /** End Buffer w/BinaryString backing */

  /** Buffer w/UInt8Array backing */

  /**
   * FIXME: Experimental. Do not use yet.
   *
   * Constructor for an ArrayBuffer-backed byte buffer.
   *
   * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a
   * TypedArray.
   *
   * If a string is given, its encoding should be provided as an option,
   * otherwise it will default to 'binary'. A 'binary' string is encoded such
   * that each character is one byte in length and size.
   *
   * If an ArrayBuffer, DataView, or TypedArray is given, it will be used
   * *directly* without any copying. Note that, if a write to the buffer requires
   * more space, the buffer will allocate a new backing ArrayBuffer to
   * accommodate. The starting read and write offsets for the buffer may be
   * given as options.
   *
   * @param [b] the initial bytes for this buffer.
   * @param options the options to use:
   *          [readOffset] the starting read offset to use (default: 0).
   *          [writeOffset] the starting write offset to use (default: the
   *            length of the first parameter).
   *          [growSize] the minimum amount, in bytes, to grow the buffer by to
   *            accommodate writes (default: 1024).
   *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the
   *            first parameter, if it is a string (default: 'binary').
   */
  function DataBuffer(b, options) {
    // default options
    options = options || {};

    // pointers for read from/write to buffer
    this.read = options.readOffset || 0;
    this.growSize = options.growSize || 1024;

    var isArrayBuffer = util$b.isArrayBuffer(b);
    var isArrayBufferView = util$b.isArrayBufferView(b);
    if(isArrayBuffer || isArrayBufferView) {
      // use ArrayBuffer directly
      if(isArrayBuffer) {
        this.data = new DataView(b);
      } else {
        // TODO: adjust read/write offset based on the type of view
        // or specify that this must be done in the options ... that the
        // offsets are byte-based
        this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);
      }
      this.write = ('writeOffset' in options ?
        options.writeOffset : this.data.byteLength);
      return;
    }

    // initialize to empty array buffer and add any given bytes using putBytes
    this.data = new DataView(new ArrayBuffer(0));
    this.write = 0;

    if(b !== null && b !== undefined) {
      this.putBytes(b);
    }

    if('writeOffset' in options) {
      this.write = options.writeOffset;
    }
  }
  util$b.DataBuffer = DataBuffer;

  /**
   * Gets the number of bytes in this buffer.
   *
   * @return the number of bytes in this buffer.
   */
  util$b.DataBuffer.prototype.length = function() {
    return this.write - this.read;
  };

  /**
   * Gets whether or not this buffer is empty.
   *
   * @return true if this buffer is empty, false if not.
   */
  util$b.DataBuffer.prototype.isEmpty = function() {
    return this.length() <= 0;
  };

  /**
   * Ensures this buffer has enough empty space to accommodate the given number
   * of bytes. An optional parameter may be given that indicates a minimum
   * amount to grow the buffer if necessary. If the parameter is not given,
   * the buffer will be grown by some previously-specified default amount
   * or heuristic.
   *
   * @param amount the number of bytes to accommodate.
   * @param [growSize] the minimum amount, in bytes, to grow the buffer by if
   *          necessary.
   */
  util$b.DataBuffer.prototype.accommodate = function(amount, growSize) {
    if(this.length() >= amount) {
      return this;
    }
    growSize = Math.max(growSize || this.growSize, amount);

    // grow buffer
    var src = new Uint8Array(
      this.data.buffer, this.data.byteOffset, this.data.byteLength);
    var dst = new Uint8Array(this.length() + growSize);
    dst.set(src);
    this.data = new DataView(dst.buffer);

    return this;
  };

  /**
   * Puts a byte in this buffer.
   *
   * @param b the byte to put.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.putByte = function(b) {
    this.accommodate(1);
    this.data.setUint8(this.write++, b);
    return this;
  };

  /**
   * Puts a byte in this buffer N times.
   *
   * @param b the byte to put.
   * @param n the number of bytes of value b to put.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.fillWithByte = function(b, n) {
    this.accommodate(n);
    for(var i = 0; i < n; ++i) {
      this.data.setUint8(b);
    }
    return this;
  };

  /**
   * Puts bytes in this buffer. The bytes may be given as a string, an
   * ArrayBuffer, a DataView, or a TypedArray.
   *
   * @param bytes the bytes to put.
   * @param [encoding] the encoding for the first parameter ('binary', 'utf8',
   *          'utf16', 'hex'), if it is a string (default: 'binary').
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.putBytes = function(bytes, encoding) {
    if(util$b.isArrayBufferView(bytes)) {
      var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
      var len = src.byteLength - src.byteOffset;
      this.accommodate(len);
      var dst = new Uint8Array(this.data.buffer, this.write);
      dst.set(src);
      this.write += len;
      return this;
    }

    if(util$b.isArrayBuffer(bytes)) {
      var src = new Uint8Array(bytes);
      this.accommodate(src.byteLength);
      var dst = new Uint8Array(this.data.buffer);
      dst.set(src, this.write);
      this.write += src.byteLength;
      return this;
    }

    // bytes is a util.DataBuffer or equivalent
    if(bytes instanceof util$b.DataBuffer ||
      (typeof bytes === 'object' &&
      typeof bytes.read === 'number' && typeof bytes.write === 'number' &&
      util$b.isArrayBufferView(bytes.data))) {
      var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());
      this.accommodate(src.byteLength);
      var dst = new Uint8Array(bytes.data.byteLength, this.write);
      dst.set(src);
      this.write += src.byteLength;
      return this;
    }

    if(bytes instanceof util$b.ByteStringBuffer) {
      // copy binary string and process as the same as a string parameter below
      bytes = bytes.data;
      encoding = 'binary';
    }

    // string conversion
    encoding = encoding || 'binary';
    if(typeof bytes === 'string') {
      var view;

      // decode from string
      if(encoding === 'hex') {
        this.accommodate(Math.ceil(bytes.length / 2));
        view = new Uint8Array(this.data.buffer, this.write);
        this.write += util$b.binary.hex.decode(bytes, view, this.write);
        return this;
      }
      if(encoding === 'base64') {
        this.accommodate(Math.ceil(bytes.length / 4) * 3);
        view = new Uint8Array(this.data.buffer, this.write);
        this.write += util$b.binary.base64.decode(bytes, view, this.write);
        return this;
      }

      // encode text as UTF-8 bytes
      if(encoding === 'utf8') {
        // encode as UTF-8 then decode string as raw binary
        bytes = util$b.encodeUtf8(bytes);
        encoding = 'binary';
      }

      // decode string as raw binary
      if(encoding === 'binary' || encoding === 'raw') {
        // one byte per character
        this.accommodate(bytes.length);
        view = new Uint8Array(this.data.buffer, this.write);
        this.write += util$b.binary.raw.decode(view);
        return this;
      }

      // encode text as UTF-16 bytes
      if(encoding === 'utf16') {
        // two bytes per character
        this.accommodate(bytes.length * 2);
        view = new Uint16Array(this.data.buffer, this.write);
        this.write += util$b.text.utf16.encode(view);
        return this;
      }

      throw new Error('Invalid encoding: ' + encoding);
    }

    throw Error('Invalid parameter: ' + bytes);
  };

  /**
   * Puts the given buffer into this buffer.
   *
   * @param buffer the buffer to put into this one.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.putBuffer = function(buffer) {
    this.putBytes(buffer);
    buffer.clear();
    return this;
  };

  /**
   * Puts a string into this buffer.
   *
   * @param str the string to put.
   * @param [encoding] the encoding for the string (default: 'utf16').
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.putString = function(str) {
    return this.putBytes(str, 'utf16');
  };

  /**
   * Puts a 16-bit integer in this buffer in big-endian order.
   *
   * @param i the 16-bit integer.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.putInt16 = function(i) {
    this.accommodate(2);
    this.data.setInt16(this.write, i);
    this.write += 2;
    return this;
  };

  /**
   * Puts a 24-bit integer in this buffer in big-endian order.
   *
   * @param i the 24-bit integer.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.putInt24 = function(i) {
    this.accommodate(3);
    this.data.setInt16(this.write, i >> 8 & 0xFFFF);
    this.data.setInt8(this.write, i >> 16 & 0xFF);
    this.write += 3;
    return this;
  };

  /**
   * Puts a 32-bit integer in this buffer in big-endian order.
   *
   * @param i the 32-bit integer.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.putInt32 = function(i) {
    this.accommodate(4);
    this.data.setInt32(this.write, i);
    this.write += 4;
    return this;
  };

  /**
   * Puts a 16-bit integer in this buffer in little-endian order.
   *
   * @param i the 16-bit integer.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.putInt16Le = function(i) {
    this.accommodate(2);
    this.data.setInt16(this.write, i, true);
    this.write += 2;
    return this;
  };

  /**
   * Puts a 24-bit integer in this buffer in little-endian order.
   *
   * @param i the 24-bit integer.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.putInt24Le = function(i) {
    this.accommodate(3);
    this.data.setInt8(this.write, i >> 16 & 0xFF);
    this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);
    this.write += 3;
    return this;
  };

  /**
   * Puts a 32-bit integer in this buffer in little-endian order.
   *
   * @param i the 32-bit integer.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.putInt32Le = function(i) {
    this.accommodate(4);
    this.data.setInt32(this.write, i, true);
    this.write += 4;
    return this;
  };

  /**
   * Puts an n-bit integer in this buffer in big-endian order.
   *
   * @param i the n-bit integer.
   * @param n the number of bits in the integer (8, 16, 24, or 32).
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.putInt = function(i, n) {
    _checkBitsParam(n);
    this.accommodate(n / 8);
    do {
      n -= 8;
      this.data.setInt8(this.write++, (i >> n) & 0xFF);
    } while(n > 0);
    return this;
  };

  /**
   * Puts a signed n-bit integer in this buffer in big-endian order. Two's
   * complement representation is used.
   *
   * @param i the n-bit integer.
   * @param n the number of bits in the integer.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.putSignedInt = function(i, n) {
    _checkBitsParam(n);
    this.accommodate(n / 8);
    if(i < 0) {
      i += 2 << (n - 1);
    }
    return this.putInt(i, n);
  };

  /**
   * Gets a byte from this buffer and advances the read pointer by 1.
   *
   * @return the byte.
   */
  util$b.DataBuffer.prototype.getByte = function() {
    return this.data.getInt8(this.read++);
  };

  /**
   * Gets a uint16 from this buffer in big-endian order and advances the read
   * pointer by 2.
   *
   * @return the uint16.
   */
  util$b.DataBuffer.prototype.getInt16 = function() {
    var rval = this.data.getInt16(this.read);
    this.read += 2;
    return rval;
  };

  /**
   * Gets a uint24 from this buffer in big-endian order and advances the read
   * pointer by 3.
   *
   * @return the uint24.
   */
  util$b.DataBuffer.prototype.getInt24 = function() {
    var rval = (
      this.data.getInt16(this.read) << 8 ^
      this.data.getInt8(this.read + 2));
    this.read += 3;
    return rval;
  };

  /**
   * Gets a uint32 from this buffer in big-endian order and advances the read
   * pointer by 4.
   *
   * @return the word.
   */
  util$b.DataBuffer.prototype.getInt32 = function() {
    var rval = this.data.getInt32(this.read);
    this.read += 4;
    return rval;
  };

  /**
   * Gets a uint16 from this buffer in little-endian order and advances the read
   * pointer by 2.
   *
   * @return the uint16.
   */
  util$b.DataBuffer.prototype.getInt16Le = function() {
    var rval = this.data.getInt16(this.read, true);
    this.read += 2;
    return rval;
  };

  /**
   * Gets a uint24 from this buffer in little-endian order and advances the read
   * pointer by 3.
   *
   * @return the uint24.
   */
  util$b.DataBuffer.prototype.getInt24Le = function() {
    var rval = (
      this.data.getInt8(this.read) ^
      this.data.getInt16(this.read + 1, true) << 8);
    this.read += 3;
    return rval;
  };

  /**
   * Gets a uint32 from this buffer in little-endian order and advances the read
   * pointer by 4.
   *
   * @return the word.
   */
  util$b.DataBuffer.prototype.getInt32Le = function() {
    var rval = this.data.getInt32(this.read, true);
    this.read += 4;
    return rval;
  };

  /**
   * Gets an n-bit integer from this buffer in big-endian order and advances the
   * read pointer by n/8.
   *
   * @param n the number of bits in the integer (8, 16, 24, or 32).
   *
   * @return the integer.
   */
  util$b.DataBuffer.prototype.getInt = function(n) {
    _checkBitsParam(n);
    var rval = 0;
    do {
      // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
      rval = (rval << 8) + this.data.getInt8(this.read++);
      n -= 8;
    } while(n > 0);
    return rval;
  };

  /**
   * Gets a signed n-bit integer from this buffer in big-endian order, using
   * two's complement, and advances the read pointer by n/8.
   *
   * @param n the number of bits in the integer (8, 16, 24, or 32).
   *
   * @return the integer.
   */
  util$b.DataBuffer.prototype.getSignedInt = function(n) {
    // getInt checks n
    var x = this.getInt(n);
    var max = 2 << (n - 2);
    if(x >= max) {
      x -= max << 1;
    }
    return x;
  };

  /**
   * Reads bytes out as a binary encoded string and clears them from the
   * buffer.
   *
   * @param count the number of bytes to read, undefined or null for all.
   *
   * @return a binary encoded string of bytes.
   */
  util$b.DataBuffer.prototype.getBytes = function(count) {
    // TODO: deprecate this method, it is poorly named and
    // this.toString('binary') replaces it
    // add a toTypedArray()/toArrayBuffer() function
    var rval;
    if(count) {
      // read count bytes
      count = Math.min(this.length(), count);
      rval = this.data.slice(this.read, this.read + count);
      this.read += count;
    } else if(count === 0) {
      rval = '';
    } else {
      // read all bytes, optimize to only copy when needed
      rval = (this.read === 0) ? this.data : this.data.slice(this.read);
      this.clear();
    }
    return rval;
  };

  /**
   * Gets a binary encoded string of the bytes from this buffer without
   * modifying the read pointer.
   *
   * @param count the number of bytes to get, omit to get all.
   *
   * @return a string full of binary encoded characters.
   */
  util$b.DataBuffer.prototype.bytes = function(count) {
    // TODO: deprecate this method, it is poorly named, add "getString()"
    return (typeof(count) === 'undefined' ?
      this.data.slice(this.read) :
      this.data.slice(this.read, this.read + count));
  };

  /**
   * Gets a byte at the given index without modifying the read pointer.
   *
   * @param i the byte index.
   *
   * @return the byte.
   */
  util$b.DataBuffer.prototype.at = function(i) {
    return this.data.getUint8(this.read + i);
  };

  /**
   * Puts a byte at the given index without modifying the read pointer.
   *
   * @param i the byte index.
   * @param b the byte to put.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.setAt = function(i, b) {
    this.data.setUint8(i, b);
    return this;
  };

  /**
   * Gets the last byte without modifying the read pointer.
   *
   * @return the last byte.
   */
  util$b.DataBuffer.prototype.last = function() {
    return this.data.getUint8(this.write - 1);
  };

  /**
   * Creates a copy of this buffer.
   *
   * @return the copy.
   */
  util$b.DataBuffer.prototype.copy = function() {
    return new util$b.DataBuffer(this);
  };

  /**
   * Compacts this buffer.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.compact = function() {
    if(this.read > 0) {
      var src = new Uint8Array(this.data.buffer, this.read);
      var dst = new Uint8Array(src.byteLength);
      dst.set(src);
      this.data = new DataView(dst);
      this.write -= this.read;
      this.read = 0;
    }
    return this;
  };

  /**
   * Clears this buffer.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.clear = function() {
    this.data = new DataView(new ArrayBuffer(0));
    this.read = this.write = 0;
    return this;
  };

  /**
   * Shortens this buffer by triming bytes off of the end of this buffer.
   *
   * @param count the number of bytes to trim off.
   *
   * @return this buffer.
   */
  util$b.DataBuffer.prototype.truncate = function(count) {
    this.write = Math.max(0, this.length() - count);
    this.read = Math.min(this.read, this.write);
    return this;
  };

  /**
   * Converts this buffer to a hexadecimal string.
   *
   * @return a hexadecimal string.
   */
  util$b.DataBuffer.prototype.toHex = function() {
    var rval = '';
    for(var i = this.read; i < this.data.byteLength; ++i) {
      var b = this.data.getUint8(i);
      if(b < 16) {
        rval += '0';
      }
      rval += b.toString(16);
    }
    return rval;
  };

  /**
   * Converts this buffer to a string, using the given encoding. If no
   * encoding is given, 'utf8' (UTF-8) is used.
   *
   * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',
   *          'base64' (default: 'utf8').
   *
   * @return a string representation of the bytes in this buffer.
   */
  util$b.DataBuffer.prototype.toString = function(encoding) {
    var view = new Uint8Array(this.data, this.read, this.length());
    encoding = encoding || 'utf8';

    // encode to string
    if(encoding === 'binary' || encoding === 'raw') {
      return util$b.binary.raw.encode(view);
    }
    if(encoding === 'hex') {
      return util$b.binary.hex.encode(view);
    }
    if(encoding === 'base64') {
      return util$b.binary.base64.encode(view);
    }

    // decode to text
    if(encoding === 'utf8') {
      return util$b.text.utf8.decode(view);
    }
    if(encoding === 'utf16') {
      return util$b.text.utf16.decode(view);
    }

    throw new Error('Invalid encoding: ' + encoding);
  };

  /** End Buffer w/UInt8Array backing */

  /**
   * Creates a buffer that stores bytes. A value may be given to populate the
   * buffer with data. This value can either be string of encoded bytes or a
   * regular string of characters. When passing a string of binary encoded
   * bytes, the encoding `raw` should be given. This is also the default. When
   * passing a string of characters, the encoding `utf8` should be given.
   *
   * @param [input] a string with encoded bytes to store in the buffer.
   * @param [encoding] (default: 'raw', other: 'utf8').
   */
  util$b.createBuffer = function(input, encoding) {
    // TODO: deprecate, use new ByteBuffer() instead
    encoding = encoding || 'raw';
    if(input !== undefined && encoding === 'utf8') {
      input = util$b.encodeUtf8(input);
    }
    return new util$b.ByteBuffer(input);
  };

  /**
   * Fills a string with a particular value. If you want the string to be a byte
   * string, pass in String.fromCharCode(theByte).
   *
   * @param c the character to fill the string with, use String.fromCharCode
   *          to fill the string with a byte value.
   * @param n the number of characters of value c to fill with.
   *
   * @return the filled string.
   */
  util$b.fillString = function(c, n) {
    var s = '';
    while(n > 0) {
      if(n & 1) {
        s += c;
      }
      n >>>= 1;
      if(n > 0) {
        c += c;
      }
    }
    return s;
  };

  /**
   * Performs a per byte XOR between two byte strings and returns the result as a
   * string of bytes.
   *
   * @param s1 first string of bytes.
   * @param s2 second string of bytes.
   * @param n the number of bytes to XOR.
   *
   * @return the XOR'd result.
   */
  util$b.xorBytes = function(s1, s2, n) {
    var s3 = '';
    var b = '';
    var t = '';
    var i = 0;
    var c = 0;
    for(; n > 0; --n, ++i) {
      b = s1.charCodeAt(i) ^ s2.charCodeAt(i);
      if(c >= 10) {
        s3 += t;
        t = '';
        c = 0;
      }
      t += String.fromCharCode(b);
      ++c;
    }
    s3 += t;
    return s3;
  };

  /**
   * Converts a hex string into a 'binary' encoded string of bytes.
   *
   * @param hex the hexadecimal string to convert.
   *
   * @return the binary-encoded string of bytes.
   */
  util$b.hexToBytes = function(hex) {
    // TODO: deprecate: "Deprecated. Use util.binary.hex.decode instead."
    var rval = '';
    var i = 0;
    if(hex.length & 1 == 1) {
      // odd number of characters, convert first character alone
      i = 1;
      rval += String.fromCharCode(parseInt(hex[0], 16));
    }
    // convert 2 characters (1 byte) at a time
    for(; i < hex.length; i += 2) {
      rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
    }
    return rval;
  };

  /**
   * Converts a 'binary' encoded string of bytes to hex.
   *
   * @param bytes the byte string to convert.
   *
   * @return the string of hexadecimal characters.
   */
  util$b.bytesToHex = function(bytes) {
    // TODO: deprecate: "Deprecated. Use util.binary.hex.encode instead."
    return util$b.createBuffer(bytes).toHex();
  };

  /**
   * Converts an 32-bit integer to 4-big-endian byte string.
   *
   * @param i the integer.
   *
   * @return the byte string.
   */
  util$b.int32ToBytes = function(i) {
    return (
      String.fromCharCode(i >> 24 & 0xFF) +
      String.fromCharCode(i >> 16 & 0xFF) +
      String.fromCharCode(i >> 8 & 0xFF) +
      String.fromCharCode(i & 0xFF));
  };

  // base64 characters, reverse mapping
  var _base64 =
    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
  var _base64Idx = [
  /*43 -43 = 0*/
  /*'+',  1,  2,  3,'/' */
     62, -1, -1, -1, 63,

  /*'0','1','2','3','4','5','6','7','8','9' */
     52, 53, 54, 55, 56, 57, 58, 59, 60, 61,

  /*15, 16, 17,'=', 19, 20, 21 */
    -1, -1, -1, 64, -1, -1, -1,

  /*65 - 43 = 22*/
  /*'A','B','C','D','E','F','G','H','I','J','K','L','M', */
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,

  /*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */
     13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,

  /*91 - 43 = 48 */
  /*48, 49, 50, 51, 52, 53 */
    -1, -1, -1, -1, -1, -1,

  /*97 - 43 = 54*/
  /*'a','b','c','d','e','f','g','h','i','j','k','l','m' */
     26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,

  /*'n','o','p','q','r','s','t','u','v','w','x','y','z' */
     39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
  ];

  // base58 characters (Bitcoin alphabet)
  var _base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

  /**
   * Base64 encodes a 'binary' encoded string of bytes.
   *
   * @param input the binary encoded string of bytes to base64-encode.
   * @param maxline the maximum number of encoded characters per line to use,
   *          defaults to none.
   *
   * @return the base64-encoded output.
   */
  util$b.encode64 = function(input, maxline) {
    // TODO: deprecate: "Deprecated. Use util.binary.base64.encode instead."
    var line = '';
    var output = '';
    var chr1, chr2, chr3;
    var i = 0;
    while(i < input.length) {
      chr1 = input.charCodeAt(i++);
      chr2 = input.charCodeAt(i++);
      chr3 = input.charCodeAt(i++);

      // encode 4 character group
      line += _base64.charAt(chr1 >> 2);
      line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
      if(isNaN(chr2)) {
        line += '==';
      } else {
        line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
        line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
      }

      if(maxline && line.length > maxline) {
        output += line.substr(0, maxline) + '\r\n';
        line = line.substr(maxline);
      }
    }
    output += line;
    return output;
  };

  /**
   * Base64 decodes a string into a 'binary' encoded string of bytes.
   *
   * @param input the base64-encoded input.
   *
   * @return the binary encoded string.
   */
  util$b.decode64 = function(input) {
    // TODO: deprecate: "Deprecated. Use util.binary.base64.decode instead."

    // remove all non-base64 characters
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

    var output = '';
    var enc1, enc2, enc3, enc4;
    var i = 0;

    while(i < input.length) {
      enc1 = _base64Idx[input.charCodeAt(i++) - 43];
      enc2 = _base64Idx[input.charCodeAt(i++) - 43];
      enc3 = _base64Idx[input.charCodeAt(i++) - 43];
      enc4 = _base64Idx[input.charCodeAt(i++) - 43];

      output += String.fromCharCode((enc1 << 2) | (enc2 >> 4));
      if(enc3 !== 64) {
        // decoded at least 2 bytes
        output += String.fromCharCode(((enc2 & 15) << 4) | (enc3 >> 2));
        if(enc4 !== 64) {
          // decoded 3 bytes
          output += String.fromCharCode(((enc3 & 3) << 6) | enc4);
        }
      }
    }

    return output;
  };

  /**
   * Encodes the given string of characters (a standard JavaScript
   * string) as a binary encoded string where the bytes represent
   * a UTF-8 encoded string of characters. Non-ASCII characters will be
   * encoded as multiple bytes according to UTF-8.
   *
   * @param str a standard string of characters to encode.
   *
   * @return the binary encoded string.
   */
  util$b.encodeUtf8 = function(str) {
    return unescape(encodeURIComponent(str));
  };

  /**
   * Decodes a binary encoded string that contains bytes that
   * represent a UTF-8 encoded string of characters -- into a
   * string of characters (a standard JavaScript string).
   *
   * @param str the binary encoded string to decode.
   *
   * @return the resulting standard string of characters.
   */
  util$b.decodeUtf8 = function(str) {
    return decodeURIComponent(escape(str));
  };

  // binary encoding/decoding tools
  // FIXME: Experimental. Do not use yet.
  util$b.binary = {
    raw: {},
    hex: {},
    base64: {},
    base58: {},
    baseN : {
      encode: baseN.encode,
      decode: baseN.decode
    }
  };

  /**
   * Encodes a Uint8Array as a binary-encoded string. This encoding uses
   * a value between 0 and 255 for each character.
   *
   * @param bytes the Uint8Array to encode.
   *
   * @return the binary-encoded string.
   */
  util$b.binary.raw.encode = function(bytes) {
    return String.fromCharCode.apply(null, bytes);
  };

  /**
   * Decodes a binary-encoded string to a Uint8Array. This encoding uses
   * a value between 0 and 255 for each character.
   *
   * @param str the binary-encoded string to decode.
   * @param [output] an optional Uint8Array to write the output to; if it
   *          is too small, an exception will be thrown.
   * @param [offset] the start offset for writing to the output (default: 0).
   *
   * @return the Uint8Array or the number of bytes written if output was given.
   */
  util$b.binary.raw.decode = function(str, output, offset) {
    var out = output;
    if(!out) {
      out = new Uint8Array(str.length);
    }
    offset = offset || 0;
    var j = offset;
    for(var i = 0; i < str.length; ++i) {
      out[j++] = str.charCodeAt(i);
    }
    return output ? (j - offset) : out;
  };

  /**
   * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or
   * ByteBuffer as a string of hexadecimal characters.
   *
   * @param bytes the bytes to convert.
   *
   * @return the string of hexadecimal characters.
   */
  util$b.binary.hex.encode = util$b.bytesToHex;

  /**
   * Decodes a hex-encoded string to a Uint8Array.
   *
   * @param hex the hexadecimal string to convert.
   * @param [output] an optional Uint8Array to write the output to; if it
   *          is too small, an exception will be thrown.
   * @param [offset] the start offset for writing to the output (default: 0).
   *
   * @return the Uint8Array or the number of bytes written if output was given.
   */
  util$b.binary.hex.decode = function(hex, output, offset) {
    var out = output;
    if(!out) {
      out = new Uint8Array(Math.ceil(hex.length / 2));
    }
    offset = offset || 0;
    var i = 0, j = offset;
    if(hex.length & 1) {
      // odd number of characters, convert first character alone
      i = 1;
      out[j++] = parseInt(hex[0], 16);
    }
    // convert 2 characters (1 byte) at a time
    for(; i < hex.length; i += 2) {
      out[j++] = parseInt(hex.substr(i, 2), 16);
    }
    return output ? (j - offset) : out;
  };

  /**
   * Base64-encodes a Uint8Array.
   *
   * @param input the Uint8Array to encode.
   * @param maxline the maximum number of encoded characters per line to use,
   *          defaults to none.
   *
   * @return the base64-encoded output string.
   */
  util$b.binary.base64.encode = function(input, maxline) {
    var line = '';
    var output = '';
    var chr1, chr2, chr3;
    var i = 0;
    while(i < input.byteLength) {
      chr1 = input[i++];
      chr2 = input[i++];
      chr3 = input[i++];

      // encode 4 character group
      line += _base64.charAt(chr1 >> 2);
      line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
      if(isNaN(chr2)) {
        line += '==';
      } else {
        line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
        line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
      }

      if(maxline && line.length > maxline) {
        output += line.substr(0, maxline) + '\r\n';
        line = line.substr(maxline);
      }
    }
    output += line;
    return output;
  };

  /**
   * Decodes a base64-encoded string to a Uint8Array.
   *
   * @param input the base64-encoded input string.
   * @param [output] an optional Uint8Array to write the output to; if it
   *          is too small, an exception will be thrown.
   * @param [offset] the start offset for writing to the output (default: 0).
   *
   * @return the Uint8Array or the number of bytes written if output was given.
   */
  util$b.binary.base64.decode = function(input, output, offset) {
    var out = output;
    if(!out) {
      out = new Uint8Array(Math.ceil(input.length / 4) * 3);
    }

    // remove all non-base64 characters
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

    offset = offset || 0;
    var enc1, enc2, enc3, enc4;
    var i = 0, j = offset;

    while(i < input.length) {
      enc1 = _base64Idx[input.charCodeAt(i++) - 43];
      enc2 = _base64Idx[input.charCodeAt(i++) - 43];
      enc3 = _base64Idx[input.charCodeAt(i++) - 43];
      enc4 = _base64Idx[input.charCodeAt(i++) - 43];

      out[j++] = (enc1 << 2) | (enc2 >> 4);
      if(enc3 !== 64) {
        // decoded at least 2 bytes
        out[j++] = ((enc2 & 15) << 4) | (enc3 >> 2);
        if(enc4 !== 64) {
          // decoded 3 bytes
          out[j++] = ((enc3 & 3) << 6) | enc4;
        }
      }
    }

    // make sure result is the exact decoded length
    return output ? (j - offset) : out.subarray(0, j);
  };

  // add support for base58 encoding/decoding with Bitcoin alphabet
  util$b.binary.base58.encode = function(input, maxline) {
    return util$b.binary.baseN.encode(input, _base58, maxline);
  };
  util$b.binary.base58.decode = function(input, maxline) {
    return util$b.binary.baseN.decode(input, _base58, maxline);
  };

  // text encoding/decoding tools
  // FIXME: Experimental. Do not use yet.
  util$b.text = {
    utf8: {},
    utf16: {}
  };

  /**
   * Encodes the given string as UTF-8 in a Uint8Array.
   *
   * @param str the string to encode.
   * @param [output] an optional Uint8Array to write the output to; if it
   *          is too small, an exception will be thrown.
   * @param [offset] the start offset for writing to the output (default: 0).
   *
   * @return the Uint8Array or the number of bytes written if output was given.
   */
  util$b.text.utf8.encode = function(str, output, offset) {
    str = util$b.encodeUtf8(str);
    var out = output;
    if(!out) {
      out = new Uint8Array(str.length);
    }
    offset = offset || 0;
    var j = offset;
    for(var i = 0; i < str.length; ++i) {
      out[j++] = str.charCodeAt(i);
    }
    return output ? (j - offset) : out;
  };

  /**
   * Decodes the UTF-8 contents from a Uint8Array.
   *
   * @param bytes the Uint8Array to decode.
   *
   * @return the resulting string.
   */
  util$b.text.utf8.decode = function(bytes) {
    return util$b.decodeUtf8(String.fromCharCode.apply(null, bytes));
  };

  /**
   * Encodes the given string as UTF-16 in a Uint8Array.
   *
   * @param str the string to encode.
   * @param [output] an optional Uint8Array to write the output to; if it
   *          is too small, an exception will be thrown.
   * @param [offset] the start offset for writing to the output (default: 0).
   *
   * @return the Uint8Array or the number of bytes written if output was given.
   */
  util$b.text.utf16.encode = function(str, output, offset) {
    var out = output;
    if(!out) {
      out = new Uint8Array(str.length * 2);
    }
    var view = new Uint16Array(out.buffer);
    offset = offset || 0;
    var j = offset;
    var k = offset;
    for(var i = 0; i < str.length; ++i) {
      view[k++] = str.charCodeAt(i);
      j += 2;
    }
    return output ? (j - offset) : out;
  };

  /**
   * Decodes the UTF-16 contents from a Uint8Array.
   *
   * @param bytes the Uint8Array to decode.
   *
   * @return the resulting string.
   */
  util$b.text.utf16.decode = function(bytes) {
    return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
  };

  /**
   * Deflates the given data using a flash interface.
   *
   * @param api the flash interface.
   * @param bytes the data.
   * @param raw true to return only raw deflate data, false to include zlib
   *          header and trailer.
   *
   * @return the deflated data as a string.
   */
  util$b.deflate = function(api, bytes, raw) {
    bytes = util$b.decode64(api.deflate(util$b.encode64(bytes)).rval);

    // strip zlib header and trailer if necessary
    if(raw) {
      // zlib header is 2 bytes (CMF,FLG) where FLG indicates that
      // there is a 4-byte DICT (alder-32) block before the data if
      // its 5th bit is set
      var start = 2;
      var flg = bytes.charCodeAt(1);
      if(flg & 0x20) {
        start = 6;
      }
      // zlib trailer is 4 bytes of adler-32
      bytes = bytes.substring(start, bytes.length - 4);
    }

    return bytes;
  };

  /**
   * Inflates the given data using a flash interface.
   *
   * @param api the flash interface.
   * @param bytes the data.
   * @param raw true if the incoming data has no zlib header or trailer and is
   *          raw DEFLATE data.
   *
   * @return the inflated data as a string, null on error.
   */
  util$b.inflate = function(api, bytes, raw) {
    // TODO: add zlib header and trailer if necessary/possible
    var rval = api.inflate(util$b.encode64(bytes)).rval;
    return (rval === null) ? null : util$b.decode64(rval);
  };

  /**
   * Sets a storage object.
   *
   * @param api the storage interface.
   * @param id the storage ID to use.
   * @param obj the storage object, null to remove.
   */
  var _setStorageObject = function(api, id, obj) {
    if(!api) {
      throw new Error('WebStorage not available.');
    }

    var rval;
    if(obj === null) {
      rval = api.removeItem(id);
    } else {
      // json-encode and base64-encode object
      obj = util$b.encode64(JSON.stringify(obj));
      rval = api.setItem(id, obj);
    }

    // handle potential flash error
    if(typeof(rval) !== 'undefined' && rval.rval !== true) {
      var error = new Error(rval.error.message);
      error.id = rval.error.id;
      error.name = rval.error.name;
      throw error;
    }
  };

  /**
   * Gets a storage object.
   *
   * @param api the storage interface.
   * @param id the storage ID to use.
   *
   * @return the storage object entry or null if none exists.
   */
  var _getStorageObject = function(api, id) {
    if(!api) {
      throw new Error('WebStorage not available.');
    }

    // get the existing entry
    var rval = api.getItem(id);

    /* Note: We check api.init because we can't do (api == localStorage)
      on IE because of "Class doesn't support Automation" exception. Only
      the flash api has an init method so this works too, but we need a
      better solution in the future. */

    // flash returns item wrapped in an object, handle special case
    if(api.init) {
      if(rval.rval === null) {
        if(rval.error) {
          var error = new Error(rval.error.message);
          error.id = rval.error.id;
          error.name = rval.error.name;
          throw error;
        }
        // no error, but also no item
        rval = null;
      } else {
        rval = rval.rval;
      }
    }

    // handle decoding
    if(rval !== null) {
      // base64-decode and json-decode data
      rval = JSON.parse(util$b.decode64(rval));
    }

    return rval;
  };

  /**
   * Stores an item in local storage.
   *
   * @param api the storage interface.
   * @param id the storage ID to use.
   * @param key the key for the item.
   * @param data the data for the item (any javascript object/primitive).
   */
  var _setItem = function(api, id, key, data) {
    // get storage object
    var obj = _getStorageObject(api, id);
    if(obj === null) {
      // create a new storage object
      obj = {};
    }
    // update key
    obj[key] = data;

    // set storage object
    _setStorageObject(api, id, obj);
  };

  /**
   * Gets an item from local storage.
   *
   * @param api the storage interface.
   * @param id the storage ID to use.
   * @param key the key for the item.
   *
   * @return the item.
   */
  var _getItem = function(api, id, key) {
    // get storage object
    var rval = _getStorageObject(api, id);
    if(rval !== null) {
      // return data at key
      rval = (key in rval) ? rval[key] : null;
    }

    return rval;
  };

  /**
   * Removes an item from local storage.
   *
   * @param api the storage interface.
   * @param id the storage ID to use.
   * @param key the key for the item.
   */
  var _removeItem = function(api, id, key) {
    // get storage object
    var obj = _getStorageObject(api, id);
    if(obj !== null && key in obj) {
      // remove key
      delete obj[key];

      // see if entry has no keys remaining
      var empty = true;
      for(var prop in obj) {
        empty = false;
        break;
      }
      if(empty) {
        // remove entry entirely if no keys are left
        obj = null;
      }

      // set storage object
      _setStorageObject(api, id, obj);
    }
  };

  /**
   * Clears the local disk storage identified by the given ID.
   *
   * @param api the storage interface.
   * @param id the storage ID to use.
   */
  var _clearItems = function(api, id) {
    _setStorageObject(api, id, null);
  };

  /**
   * Calls a storage function.
   *
   * @param func the function to call.
   * @param args the arguments for the function.
   * @param location the location argument.
   *
   * @return the return value from the function.
   */
  var _callStorageFunction = function(func, args, location) {
    var rval = null;

    // default storage types
    if(typeof(location) === 'undefined') {
      location = ['web', 'flash'];
    }

    // apply storage types in order of preference
    var type;
    var done = false;
    var exception = null;
    for(var idx in location) {
      type = location[idx];
      try {
        if(type === 'flash' || type === 'both') {
          if(args[0] === null) {
            throw new Error('Flash local storage not available.');
          }
          rval = func.apply(this, args);
          done = (type === 'flash');
        }
        if(type === 'web' || type === 'both') {
          args[0] = localStorage;
          rval = func.apply(this, args);
          done = true;
        }
      } catch(ex) {
        exception = ex;
      }
      if(done) {
        break;
      }
    }

    if(!done) {
      throw exception;
    }

    return rval;
  };

  /**
   * Stores an item on local disk.
   *
   * The available types of local storage include 'flash', 'web', and 'both'.
   *
   * The type 'flash' refers to flash local storage (SharedObject). In order
   * to use flash local storage, the 'api' parameter must be valid. The type
   * 'web' refers to WebStorage, if supported by the browser. The type 'both'
   * refers to storing using both 'flash' and 'web', not just one or the
   * other.
   *
   * The location array should list the storage types to use in order of
   * preference:
   *
   * ['flash']: flash only storage
   * ['web']: web only storage
   * ['both']: try to store in both
   * ['flash','web']: store in flash first, but if not available, 'web'
   * ['web','flash']: store in web first, but if not available, 'flash'
   *
   * The location array defaults to: ['web', 'flash']
   *
   * @param api the flash interface, null to use only WebStorage.
   * @param id the storage ID to use.
   * @param key the key for the item.
   * @param data the data for the item (any javascript object/primitive).
   * @param location an array with the preferred types of storage to use.
   */
  util$b.setItem = function(api, id, key, data, location) {
    _callStorageFunction(_setItem, arguments, location);
  };

  /**
   * Gets an item on local disk.
   *
   * Set setItem() for details on storage types.
   *
   * @param api the flash interface, null to use only WebStorage.
   * @param id the storage ID to use.
   * @param key the key for the item.
   * @param location an array with the preferred types of storage to use.
   *
   * @return the item.
   */
  util$b.getItem = function(api, id, key, location) {
    return _callStorageFunction(_getItem, arguments, location);
  };

  /**
   * Removes an item on local disk.
   *
   * Set setItem() for details on storage types.
   *
   * @param api the flash interface.
   * @param id the storage ID to use.
   * @param key the key for the item.
   * @param location an array with the preferred types of storage to use.
   */
  util$b.removeItem = function(api, id, key, location) {
    _callStorageFunction(_removeItem, arguments, location);
  };

  /**
   * Clears the local disk storage identified by the given ID.
   *
   * Set setItem() for details on storage types.
   *
   * @param api the flash interface if flash is available.
   * @param id the storage ID to use.
   * @param location an array with the preferred types of storage to use.
   */
  util$b.clearItems = function(api, id, location) {
    _callStorageFunction(_clearItems, arguments, location);
  };

  /**
   * Check if an object is empty.
   *
   * Taken from:
   * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937
   *
   * @param object the object to check.
   */
  util$b.isEmpty = function(obj) {
    for(var prop in obj) {
      if(obj.hasOwnProperty(prop)) {
        return false;
      }
    }
    return true;
  };

  /**
   * Format with simple printf-style interpolation.
   *
   * %%: literal '%'
   * %s,%o: convert next argument into a string.
   *
   * @param format the string to format.
   * @param ... arguments to interpolate into the format string.
   */
  util$b.format = function(format) {
    var re = /%./g;
    // current match
    var match;
    // current part
    var part;
    // current arg index
    var argi = 0;
    // collected parts to recombine later
    var parts = [];
    // last index found
    var last = 0;
    // loop while matches remain
    while((match = re.exec(format))) {
      part = format.substring(last, re.lastIndex - 2);
      // don't add empty strings (ie, parts between %s%s)
      if(part.length > 0) {
        parts.push(part);
      }
      last = re.lastIndex;
      // switch on % code
      var code = match[0][1];
      switch(code) {
      case 's':
      case 'o':
        // check if enough arguments were given
        if(argi < arguments.length) {
          parts.push(arguments[argi++ + 1]);
        } else {
          parts.push('<?>');
        }
        break;
      // FIXME: do proper formating for numbers, etc
      //case 'f':
      //case 'd':
      case '%':
        parts.push('%');
        break;
      default:
        parts.push('<%' + code + '?>');
      }
    }
    // add trailing part of format string
    parts.push(format.substring(last));
    return parts.join('');
  };

  /**
   * Formats a number.
   *
   * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/
   */
  util$b.formatNumber = function(number, decimals, dec_point, thousands_sep) {
    // http://kevin.vanzonneveld.net
    // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +     bugfix by: Michael White (http://crestidg.com)
    // +     bugfix by: Benjamin Lupton
    // +     bugfix by: Allan Jensen (http://www.winternet.no)
    // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
    // *     example 1: number_format(1234.5678, 2, '.', '');
    // *     returns 1: 1234.57

    var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
    var d = dec_point === undefined ? ',' : dec_point;
    var t = thousands_sep === undefined ?
     '.' : thousands_sep, s = n < 0 ? '-' : '';
    var i = parseInt((n = Math.abs(+n || 0).toFixed(c)), 10) + '';
    var j = (i.length > 3) ? i.length % 3 : 0;
    return s + (j ? i.substr(0, j) + t : '') +
      i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + t) +
      (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');
  };

  /**
   * Formats a byte size.
   *
   * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/
   */
  util$b.formatSize = function(size) {
    if(size >= 1073741824) {
      size = util$b.formatNumber(size / 1073741824, 2, '.', '') + ' GiB';
    } else if(size >= 1048576) {
      size = util$b.formatNumber(size / 1048576, 2, '.', '') + ' MiB';
    } else if(size >= 1024) {
      size = util$b.formatNumber(size / 1024, 0) + ' KiB';
    } else {
      size = util$b.formatNumber(size, 0) + ' bytes';
    }
    return size;
  };

  /**
   * Converts an IPv4 or IPv6 string representation into bytes (in network order).
   *
   * @param ip the IPv4 or IPv6 address to convert.
   *
   * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't
   *         be parsed.
   */
  util$b.bytesFromIP = function(ip) {
    if(ip.indexOf('.') !== -1) {
      return util$b.bytesFromIPv4(ip);
    }
    if(ip.indexOf(':') !== -1) {
      return util$b.bytesFromIPv6(ip);
    }
    return null;
  };

  /**
   * Converts an IPv4 string representation into bytes (in network order).
   *
   * @param ip the IPv4 address to convert.
   *
   * @return the 4-byte address or null if the address can't be parsed.
   */
  util$b.bytesFromIPv4 = function(ip) {
    ip = ip.split('.');
    if(ip.length !== 4) {
      return null;
    }
    var b = util$b.createBuffer();
    for(var i = 0; i < ip.length; ++i) {
      var num = parseInt(ip[i], 10);
      if(isNaN(num)) {
        return null;
      }
      b.putByte(num);
    }
    return b.getBytes();
  };

  /**
   * Converts an IPv6 string representation into bytes (in network order).
   *
   * @param ip the IPv6 address to convert.
   *
   * @return the 16-byte address or null if the address can't be parsed.
   */
  util$b.bytesFromIPv6 = function(ip) {
    var blanks = 0;
    ip = ip.split(':').filter(function(e) {
      if(e.length === 0) ++blanks;
      return true;
    });
    var zeros = (8 - ip.length + blanks) * 2;
    var b = util$b.createBuffer();
    for(var i = 0; i < 8; ++i) {
      if(!ip[i] || ip[i].length === 0) {
        b.fillWithByte(0, zeros);
        zeros = 0;
        continue;
      }
      var bytes = util$b.hexToBytes(ip[i]);
      if(bytes.length < 2) {
        b.putByte(0);
      }
      b.putBytes(bytes);
    }
    return b.getBytes();
  };

  /**
   * Converts 4-bytes into an IPv4 string representation or 16-bytes into
   * an IPv6 string representation. The bytes must be in network order.
   *
   * @param bytes the bytes to convert.
   *
   * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,
   *         respectively, are given, otherwise null.
   */
  util$b.bytesToIP = function(bytes) {
    if(bytes.length === 4) {
      return util$b.bytesToIPv4(bytes);
    }
    if(bytes.length === 16) {
      return util$b.bytesToIPv6(bytes);
    }
    return null;
  };

  /**
   * Converts 4-bytes into an IPv4 string representation. The bytes must be
   * in network order.
   *
   * @param bytes the bytes to convert.
   *
   * @return the IPv4 string representation or null for an invalid # of bytes.
   */
  util$b.bytesToIPv4 = function(bytes) {
    if(bytes.length !== 4) {
      return null;
    }
    var ip = [];
    for(var i = 0; i < bytes.length; ++i) {
      ip.push(bytes.charCodeAt(i));
    }
    return ip.join('.');
  };

  /**
   * Converts 16-bytes into an IPv16 string representation. The bytes must be
   * in network order.
   *
   * @param bytes the bytes to convert.
   *
   * @return the IPv16 string representation or null for an invalid # of bytes.
   */
  util$b.bytesToIPv6 = function(bytes) {
    if(bytes.length !== 16) {
      return null;
    }
    var ip = [];
    var zeroGroups = [];
    var zeroMaxGroup = 0;
    for(var i = 0; i < bytes.length; i += 2) {
      var hex = util$b.bytesToHex(bytes[i] + bytes[i + 1]);
      // canonicalize zero representation
      while(hex[0] === '0' && hex !== '0') {
        hex = hex.substr(1);
      }
      if(hex === '0') {
        var last = zeroGroups[zeroGroups.length - 1];
        var idx = ip.length;
        if(!last || idx !== last.end + 1) {
          zeroGroups.push({start: idx, end: idx});
        } else {
          last.end = idx;
          if((last.end - last.start) >
            (zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start)) {
            zeroMaxGroup = zeroGroups.length - 1;
          }
        }
      }
      ip.push(hex);
    }
    if(zeroGroups.length > 0) {
      var group = zeroGroups[zeroMaxGroup];
      // only shorten group of length > 0
      if(group.end - group.start > 0) {
        ip.splice(group.start, group.end - group.start + 1, '');
        if(group.start === 0) {
          ip.unshift('');
        }
        if(group.end === 7) {
          ip.push('');
        }
      }
    }
    return ip.join(':');
  };

  /**
   * Estimates the number of processes that can be run concurrently. If
   * creating Web Workers, keep in mind that the main JavaScript process needs
   * its own core.
   *
   * @param options the options to use:
   *          update true to force an update (not use the cached value).
   * @param callback(err, max) called once the operation completes.
   */
  util$b.estimateCores = function(options, callback) {
    if(typeof options === 'function') {
      callback = options;
      options = {};
    }
    options = options || {};
    if('cores' in util$b && !options.update) {
      return callback(null, util$b.cores);
    }
    if(typeof navigator !== 'undefined' &&
      'hardwareConcurrency' in navigator &&
      navigator.hardwareConcurrency > 0) {
      util$b.cores = navigator.hardwareConcurrency;
      return callback(null, util$b.cores);
    }
    if(typeof Worker === 'undefined') {
      // workers not available
      util$b.cores = 1;
      return callback(null, util$b.cores);
    }
    if(typeof Blob === 'undefined') {
      // can't estimate, default to 2
      util$b.cores = 2;
      return callback(null, util$b.cores);
    }

    // create worker concurrency estimation code as blob
    var blobUrl = URL.createObjectURL(new Blob(['(',
      function() {
        self.addEventListener('message', function(e) {
          // run worker for 4 ms
          var st = Date.now();
          var et = st + 4;
          self.postMessage({st: st, et: et});
        });
      }.toString(),
    ')()'], {type: 'application/javascript'}));

    // take 5 samples using 16 workers
    sample([], 5, 16);

    function sample(max, samples, numWorkers) {
      if(samples === 0) {
        // get overlap average
        var avg = Math.floor(max.reduce(function(avg, x) {
          return avg + x;
        }, 0) / max.length);
        util$b.cores = Math.max(1, avg);
        URL.revokeObjectURL(blobUrl);
        return callback(null, util$b.cores);
      }
      map(numWorkers, function(err, results) {
        max.push(reduce(numWorkers, results));
        sample(max, samples - 1, numWorkers);
      });
    }

    function map(numWorkers, callback) {
      var workers = [];
      var results = [];
      for(var i = 0; i < numWorkers; ++i) {
        var worker = new Worker(blobUrl);
        worker.addEventListener('message', function(e) {
          results.push(e.data);
          if(results.length === numWorkers) {
            for(var i = 0; i < numWorkers; ++i) {
              workers[i].terminate();
            }
            callback(null, results);
          }
        });
        workers.push(worker);
      }
      for(var i = 0; i < numWorkers; ++i) {
        workers[i].postMessage(i);
      }
    }

    function reduce(numWorkers, results) {
      // find overlapping time windows
      var overlaps = [];
      for(var n = 0; n < numWorkers; ++n) {
        var r1 = results[n];
        var overlap = overlaps[n] = [];
        for(var i = 0; i < numWorkers; ++i) {
          if(n === i) {
            continue;
          }
          var r2 = results[i];
          if((r1.st > r2.st && r1.st < r2.et) ||
            (r2.st > r1.st && r2.st < r1.et)) {
            overlap.push(i);
          }
        }
      }
      // get maximum overlaps ... don't include overlapping worker itself
      // as the main JS process was also being scheduled during the work and
      // would have to be subtracted from the estimate anyway
      return overlaps.reduce(function(max, overlap) {
        return Math.max(max, overlap.length);
      }, 0);
    }
  };

  var utilExports = util$c.exports;
  var forgeUtil = /*@__PURE__*/getDefaultExportFromCjs(utilExports);

  /**
   * Object IDs for ASN.1.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2010-2013 Digital Bazaar, Inc.
   */

  var forge$k = forge$m;

  forge$k.pki = forge$k.pki || {};
  var oids$1 = forge$k.pki.oids = forge$k.oids = forge$k.oids || {};

  // set id to name mapping and name to id mapping
  function _IN(id, name) {
    oids$1[id] = name;
    oids$1[name] = id;
  }
  // set id to name mapping only
  function _I_(id, name) {
    oids$1[id] = name;
  }

  // algorithm OIDs
  _IN('1.2.840.113549.1.1.1', 'rsaEncryption');
  // Note: md2 & md4 not implemented
  //_IN('1.2.840.113549.1.1.2', 'md2WithRSAEncryption');
  //_IN('1.2.840.113549.1.1.3', 'md4WithRSAEncryption');
  _IN('1.2.840.113549.1.1.4', 'md5WithRSAEncryption');
  _IN('1.2.840.113549.1.1.5', 'sha1WithRSAEncryption');
  _IN('1.2.840.113549.1.1.7', 'RSAES-OAEP');
  _IN('1.2.840.113549.1.1.8', 'mgf1');
  _IN('1.2.840.113549.1.1.9', 'pSpecified');
  _IN('1.2.840.113549.1.1.10', 'RSASSA-PSS');
  _IN('1.2.840.113549.1.1.11', 'sha256WithRSAEncryption');
  _IN('1.2.840.113549.1.1.12', 'sha384WithRSAEncryption');
  _IN('1.2.840.113549.1.1.13', 'sha512WithRSAEncryption');
  // Edwards-curve Digital Signature Algorithm (EdDSA) Ed25519
  _IN('1.3.101.112', 'EdDSA25519');

  _IN('1.2.840.10040.4.3', 'dsa-with-sha1');

  _IN('1.3.14.3.2.7', 'desCBC');

  _IN('1.3.14.3.2.26', 'sha1');
  // Deprecated equivalent of sha1WithRSAEncryption
  _IN('1.3.14.3.2.29', 'sha1WithRSASignature');
  _IN('2.16.840.1.101.3.4.2.1', 'sha256');
  _IN('2.16.840.1.101.3.4.2.2', 'sha384');
  _IN('2.16.840.1.101.3.4.2.3', 'sha512');
  _IN('2.16.840.1.101.3.4.2.4', 'sha224');
  _IN('2.16.840.1.101.3.4.2.5', 'sha512-224');
  _IN('2.16.840.1.101.3.4.2.6', 'sha512-256');
  _IN('1.2.840.113549.2.2', 'md2');
  _IN('1.2.840.113549.2.5', 'md5');

  // pkcs#7 content types
  _IN('1.2.840.113549.1.7.1', 'data');
  _IN('1.2.840.113549.1.7.2', 'signedData');
  _IN('1.2.840.113549.1.7.3', 'envelopedData');
  _IN('1.2.840.113549.1.7.4', 'signedAndEnvelopedData');
  _IN('1.2.840.113549.1.7.5', 'digestedData');
  _IN('1.2.840.113549.1.7.6', 'encryptedData');

  // pkcs#9 oids
  _IN('1.2.840.113549.1.9.1', 'emailAddress');
  _IN('1.2.840.113549.1.9.2', 'unstructuredName');
  _IN('1.2.840.113549.1.9.3', 'contentType');
  _IN('1.2.840.113549.1.9.4', 'messageDigest');
  _IN('1.2.840.113549.1.9.5', 'signingTime');
  _IN('1.2.840.113549.1.9.6', 'counterSignature');
  _IN('1.2.840.113549.1.9.7', 'challengePassword');
  _IN('1.2.840.113549.1.9.8', 'unstructuredAddress');
  _IN('1.2.840.113549.1.9.14', 'extensionRequest');

  _IN('1.2.840.113549.1.9.20', 'friendlyName');
  _IN('1.2.840.113549.1.9.21', 'localKeyId');
  _IN('1.2.840.113549.1.9.22.1', 'x509Certificate');

  // pkcs#12 safe bags
  _IN('1.2.840.113549.1.12.10.1.1', 'keyBag');
  _IN('1.2.840.113549.1.12.10.1.2', 'pkcs8ShroudedKeyBag');
  _IN('1.2.840.113549.1.12.10.1.3', 'certBag');
  _IN('1.2.840.113549.1.12.10.1.4', 'crlBag');
  _IN('1.2.840.113549.1.12.10.1.5', 'secretBag');
  _IN('1.2.840.113549.1.12.10.1.6', 'safeContentsBag');

  // password-based-encryption for pkcs#12
  _IN('1.2.840.113549.1.5.13', 'pkcs5PBES2');
  _IN('1.2.840.113549.1.5.12', 'pkcs5PBKDF2');

  _IN('1.2.840.113549.1.12.1.1', 'pbeWithSHAAnd128BitRC4');
  _IN('1.2.840.113549.1.12.1.2', 'pbeWithSHAAnd40BitRC4');
  _IN('1.2.840.113549.1.12.1.3', 'pbeWithSHAAnd3-KeyTripleDES-CBC');
  _IN('1.2.840.113549.1.12.1.4', 'pbeWithSHAAnd2-KeyTripleDES-CBC');
  _IN('1.2.840.113549.1.12.1.5', 'pbeWithSHAAnd128BitRC2-CBC');
  _IN('1.2.840.113549.1.12.1.6', 'pbewithSHAAnd40BitRC2-CBC');

  // hmac OIDs
  _IN('1.2.840.113549.2.7', 'hmacWithSHA1');
  _IN('1.2.840.113549.2.8', 'hmacWithSHA224');
  _IN('1.2.840.113549.2.9', 'hmacWithSHA256');
  _IN('1.2.840.113549.2.10', 'hmacWithSHA384');
  _IN('1.2.840.113549.2.11', 'hmacWithSHA512');

  // symmetric key algorithm oids
  _IN('1.2.840.113549.3.7', 'des-EDE3-CBC');
  _IN('2.16.840.1.101.3.4.1.2', 'aes128-CBC');
  _IN('2.16.840.1.101.3.4.1.22', 'aes192-CBC');
  _IN('2.16.840.1.101.3.4.1.42', 'aes256-CBC');

  // certificate issuer/subject OIDs
  _IN('2.5.4.3', 'commonName');
  _IN('2.5.4.4', 'surname');
  _IN('2.5.4.5', 'serialNumber');
  _IN('2.5.4.6', 'countryName');
  _IN('2.5.4.7', 'localityName');
  _IN('2.5.4.8', 'stateOrProvinceName');
  _IN('2.5.4.9', 'streetAddress');
  _IN('2.5.4.10', 'organizationName');
  _IN('2.5.4.11', 'organizationalUnitName');
  _IN('2.5.4.12', 'title');
  _IN('2.5.4.13', 'description');
  _IN('2.5.4.15', 'businessCategory');
  _IN('2.5.4.17', 'postalCode');
  _IN('2.5.4.42', 'givenName');
  _IN('1.3.6.1.4.1.311.60.2.1.2', 'jurisdictionOfIncorporationStateOrProvinceName');
  _IN('1.3.6.1.4.1.311.60.2.1.3', 'jurisdictionOfIncorporationCountryName');

  // X.509 extension OIDs
  _IN('2.16.840.1.113730.1.1', 'nsCertType');
  _IN('2.16.840.1.113730.1.13', 'nsComment'); // deprecated in theory; still widely used
  _I_('2.5.29.1', 'authorityKeyIdentifier'); // deprecated, use .35
  _I_('2.5.29.2', 'keyAttributes'); // obsolete use .37 or .15
  _I_('2.5.29.3', 'certificatePolicies'); // deprecated, use .32
  _I_('2.5.29.4', 'keyUsageRestriction'); // obsolete use .37 or .15
  _I_('2.5.29.5', 'policyMapping'); // deprecated use .33
  _I_('2.5.29.6', 'subtreesConstraint'); // obsolete use .30
  _I_('2.5.29.7', 'subjectAltName'); // deprecated use .17
  _I_('2.5.29.8', 'issuerAltName'); // deprecated use .18
  _I_('2.5.29.9', 'subjectDirectoryAttributes');
  _I_('2.5.29.10', 'basicConstraints'); // deprecated use .19
  _I_('2.5.29.11', 'nameConstraints'); // deprecated use .30
  _I_('2.5.29.12', 'policyConstraints'); // deprecated use .36
  _I_('2.5.29.13', 'basicConstraints'); // deprecated use .19
  _IN('2.5.29.14', 'subjectKeyIdentifier');
  _IN('2.5.29.15', 'keyUsage');
  _I_('2.5.29.16', 'privateKeyUsagePeriod');
  _IN('2.5.29.17', 'subjectAltName');
  _IN('2.5.29.18', 'issuerAltName');
  _IN('2.5.29.19', 'basicConstraints');
  _I_('2.5.29.20', 'cRLNumber');
  _I_('2.5.29.21', 'cRLReason');
  _I_('2.5.29.22', 'expirationDate');
  _I_('2.5.29.23', 'instructionCode');
  _I_('2.5.29.24', 'invalidityDate');
  _I_('2.5.29.25', 'cRLDistributionPoints'); // deprecated use .31
  _I_('2.5.29.26', 'issuingDistributionPoint'); // deprecated use .28
  _I_('2.5.29.27', 'deltaCRLIndicator');
  _I_('2.5.29.28', 'issuingDistributionPoint');
  _I_('2.5.29.29', 'certificateIssuer');
  _I_('2.5.29.30', 'nameConstraints');
  _IN('2.5.29.31', 'cRLDistributionPoints');
  _IN('2.5.29.32', 'certificatePolicies');
  _I_('2.5.29.33', 'policyMappings');
  _I_('2.5.29.34', 'policyConstraints'); // deprecated use .36
  _IN('2.5.29.35', 'authorityKeyIdentifier');
  _I_('2.5.29.36', 'policyConstraints');
  _IN('2.5.29.37', 'extKeyUsage');
  _I_('2.5.29.46', 'freshestCRL');
  _I_('2.5.29.54', 'inhibitAnyPolicy');

  // extKeyUsage purposes
  _IN('1.3.6.1.4.1.11129.2.4.2', 'timestampList');
  _IN('1.3.6.1.5.5.7.1.1', 'authorityInfoAccess');
  _IN('1.3.6.1.5.5.7.3.1', 'serverAuth');
  _IN('1.3.6.1.5.5.7.3.2', 'clientAuth');
  _IN('1.3.6.1.5.5.7.3.3', 'codeSigning');
  _IN('1.3.6.1.5.5.7.3.4', 'emailProtection');
  _IN('1.3.6.1.5.5.7.3.8', 'timeStamping');

  /**
   * Javascript implementation of Abstract Syntax Notation Number One.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2010-2015 Digital Bazaar, Inc.
   *
   * An API for storing data using the Abstract Syntax Notation Number One
   * format using DER (Distinguished Encoding Rules) encoding. This encoding is
   * commonly used to store data for PKI, i.e. X.509 Certificates, and this
   * implementation exists for that purpose.
   *
   * Abstract Syntax Notation Number One (ASN.1) is used to define the abstract
   * syntax of information without restricting the way the information is encoded
   * for transmission. It provides a standard that allows for open systems
   * communication. ASN.1 defines the syntax of information data and a number of
   * simple data types as well as a notation for describing them and specifying
   * values for them.
   *
   * The RSA algorithm creates public and private keys that are often stored in
   * X.509 or PKCS#X formats -- which use ASN.1 (encoded in DER format). This
   * class provides the most basic functionality required to store and load DSA
   * keys that are encoded according to ASN.1.
   *
   * The most common binary encodings for ASN.1 are BER (Basic Encoding Rules)
   * and DER (Distinguished Encoding Rules). DER is just a subset of BER that
   * has stricter requirements for how data must be encoded.
   *
   * Each ASN.1 structure has a tag (a byte identifying the ASN.1 structure type)
   * and a byte array for the value of this ASN1 structure which may be data or a
   * list of ASN.1 structures.
   *
   * Each ASN.1 structure using BER is (Tag-Length-Value):
   *
   * | byte 0 | bytes X | bytes Y |
   * |--------|---------|----------
   * |  tag   | length  |  value  |
   *
   * ASN.1 allows for tags to be of "High-tag-number form" which allows a tag to
   * be two or more octets, but that is not supported by this class. A tag is
   * only 1 byte. Bits 1-5 give the tag number (ie the data type within a
   * particular 'class'), 6 indicates whether or not the ASN.1 value is
   * constructed from other ASN.1 values, and bits 7 and 8 give the 'class'. If
   * bits 7 and 8 are both zero, the class is UNIVERSAL. If only bit 7 is set,
   * then the class is APPLICATION. If only bit 8 is set, then the class is
   * CONTEXT_SPECIFIC. If both bits 7 and 8 are set, then the class is PRIVATE.
   * The tag numbers for the data types for the class UNIVERSAL are listed below:
   *
   * UNIVERSAL 0 Reserved for use by the encoding rules
   * UNIVERSAL 1 Boolean type
   * UNIVERSAL 2 Integer type
   * UNIVERSAL 3 Bitstring type
   * UNIVERSAL 4 Octetstring type
   * UNIVERSAL 5 Null type
   * UNIVERSAL 6 Object identifier type
   * UNIVERSAL 7 Object descriptor type
   * UNIVERSAL 8 External type and Instance-of type
   * UNIVERSAL 9 Real type
   * UNIVERSAL 10 Enumerated type
   * UNIVERSAL 11 Embedded-pdv type
   * UNIVERSAL 12 UTF8String type
   * UNIVERSAL 13 Relative object identifier type
   * UNIVERSAL 14-15 Reserved for future editions
   * UNIVERSAL 16 Sequence and Sequence-of types
   * UNIVERSAL 17 Set and Set-of types
   * UNIVERSAL 18-22, 25-30 Character string types
   * UNIVERSAL 23-24 Time types
   *
   * The length of an ASN.1 structure is specified after the tag identifier.
   * There is a definite form and an indefinite form. The indefinite form may
   * be used if the encoding is constructed and not all immediately available.
   * The indefinite form is encoded using a length byte with only the 8th bit
   * set. The end of the constructed object is marked using end-of-contents
   * octets (two zero bytes).
   *
   * The definite form looks like this:
   *
   * The length may take up 1 or more bytes, it depends on the length of the
   * value of the ASN.1 structure. DER encoding requires that if the ASN.1
   * structure has a value that has a length greater than 127, more than 1 byte
   * will be used to store its length, otherwise just one byte will be used.
   * This is strict.
   *
   * In the case that the length of the ASN.1 value is less than 127, 1 octet
   * (byte) is used to store the "short form" length. The 8th bit has a value of
   * 0 indicating the length is "short form" and not "long form" and bits 7-1
   * give the length of the data. (The 8th bit is the left-most, most significant
   * bit: also known as big endian or network format).
   *
   * In the case that the length of the ASN.1 value is greater than 127, 2 to
   * 127 octets (bytes) are used to store the "long form" length. The first
   * byte's 8th bit is set to 1 to indicate the length is "long form." Bits 7-1
   * give the number of additional octets. All following octets are in base 256
   * with the most significant digit first (typical big-endian binary unsigned
   * integer storage). So, for instance, if the length of a value was 257, the
   * first byte would be set to:
   *
   * 10000010 = 130 = 0x82.
   *
   * This indicates there are 2 octets (base 256) for the length. The second and
   * third bytes (the octets just mentioned) would store the length in base 256:
   *
   * octet 2: 00000001 = 1 * 256^1 = 256
   * octet 3: 00000001 = 1 * 256^0 = 1
   * total = 257
   *
   * The algorithm for converting a js integer value of 257 to base-256 is:
   *
   * var value = 257;
   * var bytes = [];
   * bytes[0] = (value >>> 8) & 0xFF; // most significant byte first
   * bytes[1] = value & 0xFF;        // least significant byte last
   *
   * On the ASN.1 UNIVERSAL Object Identifier (OID) type:
   *
   * An OID can be written like: "value1.value2.value3...valueN"
   *
   * The DER encoding rules:
   *
   * The first byte has the value 40 * value1 + value2.
   * The following bytes, if any, encode the remaining values. Each value is
   * encoded in base 128, most significant digit first (big endian), with as
   * few digits as possible, and the most significant bit of each byte set
   * to 1 except the last in each value's encoding. For example: Given the
   * OID "1.2.840.113549", its DER encoding is (remember each byte except the
   * last one in each encoding is OR'd with 0x80):
   *
   * byte 1: 40 * 1 + 2 = 42 = 0x2A.
   * bytes 2-3: 128 * 6 + 72 = 840 = 6 72 = 6 72 = 0x0648 = 0x8648
   * bytes 4-6: 16384 * 6 + 128 * 119 + 13 = 6 119 13 = 0x06770D = 0x86F70D
   *
   * The final value is: 0x2A864886F70D.
   * The full OID (including ASN.1 tag and length of 6 bytes) is:
   * 0x06062A864886F70D
   */

  var forge$j = forge$m;



  /* ASN.1 API */
  var asn1$2 = forge$j.asn1 = forge$j.asn1 || {};

  /**
   * ASN.1 classes.
   */
  asn1$2.Class = {
    UNIVERSAL:        0x00,
    APPLICATION:      0x40,
    CONTEXT_SPECIFIC: 0x80,
    PRIVATE:          0xC0
  };

  /**
   * ASN.1 types. Not all types are supported by this implementation, only
   * those necessary to implement a simple PKI are implemented.
   */
  asn1$2.Type = {
    NONE:             0,
    BOOLEAN:          1,
    INTEGER:          2,
    BITSTRING:        3,
    OCTETSTRING:      4,
    NULL:             5,
    OID:              6,
    ODESC:            7,
    EXTERNAL:         8,
    REAL:             9,
    ENUMERATED:      10,
    EMBEDDED:        11,
    UTF8:            12,
    ROID:            13,
    SEQUENCE:        16,
    SET:             17,
    PRINTABLESTRING: 19,
    IA5STRING:       22,
    UTCTIME:         23,
    GENERALIZEDTIME: 24,
    BMPSTRING:       30
  };

  /**
   * Creates a new asn1 object.
   *
   * @param tagClass the tag class for the object.
   * @param type the data type (tag number) for the object.
   * @param constructed true if the asn1 object is in constructed form.
   * @param value the value for the object, if it is not constructed.
   * @param [options] the options to use:
   *          [bitStringContents] the plain BIT STRING content including padding
   *            byte.
   *
   * @return the asn1 object.
   */
  asn1$2.create = function(tagClass, type, constructed, value, options) {
    /* An asn1 object has a tagClass, a type, a constructed flag, and a
      value. The value's type depends on the constructed flag. If
      constructed, it will contain a list of other asn1 objects. If not,
      it will contain the ASN.1 value as an array of bytes formatted
      according to the ASN.1 data type. */

    // remove undefined values
    if(forge$j.util.isArray(value)) {
      var tmp = [];
      for(var i = 0; i < value.length; ++i) {
        if(value[i] !== undefined) {
          tmp.push(value[i]);
        }
      }
      value = tmp;
    }

    var obj = {
      tagClass: tagClass,
      type: type,
      constructed: constructed,
      composed: constructed || forge$j.util.isArray(value),
      value: value
    };
    if(options && 'bitStringContents' in options) {
      // TODO: copy byte buffer if it's a buffer not a string
      obj.bitStringContents = options.bitStringContents;
      // TODO: add readonly flag to avoid this overhead
      // save copy to detect changes
      obj.original = asn1$2.copy(obj);
    }
    return obj;
  };

  /**
   * Copies an asn1 object.
   *
   * @param obj the asn1 object.
   * @param [options] copy options:
   *          [excludeBitStringContents] true to not copy bitStringContents
   *
   * @return the a copy of the asn1 object.
   */
  asn1$2.copy = function(obj, options) {
    var copy;

    if(forge$j.util.isArray(obj)) {
      copy = [];
      for(var i = 0; i < obj.length; ++i) {
        copy.push(asn1$2.copy(obj[i], options));
      }
      return copy;
    }

    if(typeof obj === 'string') {
      // TODO: copy byte buffer if it's a buffer not a string
      return obj;
    }

    copy = {
      tagClass: obj.tagClass,
      type: obj.type,
      constructed: obj.constructed,
      composed: obj.composed,
      value: asn1$2.copy(obj.value, options)
    };
    if(options && !options.excludeBitStringContents) {
      // TODO: copy byte buffer if it's a buffer not a string
      copy.bitStringContents = obj.bitStringContents;
    }
    return copy;
  };

  /**
   * Compares asn1 objects for equality.
   *
   * Note this function does not run in constant time.
   *
   * @param obj1 the first asn1 object.
   * @param obj2 the second asn1 object.
   * @param [options] compare options:
   *          [includeBitStringContents] true to compare bitStringContents
   *
   * @return true if the asn1 objects are equal.
   */
  asn1$2.equals = function(obj1, obj2, options) {
    if(forge$j.util.isArray(obj1)) {
      if(!forge$j.util.isArray(obj2)) {
        return false;
      }
      if(obj1.length !== obj2.length) {
        return false;
      }
      for(var i = 0; i < obj1.length; ++i) {
        if(!asn1$2.equals(obj1[i], obj2[i])) {
          return false;
        }
      }
      return true;
    }

    if(typeof obj1 !== typeof obj2) {
      return false;
    }

    if(typeof obj1 === 'string') {
      return obj1 === obj2;
    }

    var equal = obj1.tagClass === obj2.tagClass &&
      obj1.type === obj2.type &&
      obj1.constructed === obj2.constructed &&
      obj1.composed === obj2.composed &&
      asn1$2.equals(obj1.value, obj2.value);
    if(options && options.includeBitStringContents) {
      equal = equal && (obj1.bitStringContents === obj2.bitStringContents);
    }

    return equal;
  };

  /**
   * Gets the length of a BER-encoded ASN.1 value.
   *
   * In case the length is not specified, undefined is returned.
   *
   * @param b the BER-encoded ASN.1 byte buffer, starting with the first
   *          length byte.
   *
   * @return the length of the BER-encoded ASN.1 value or undefined.
   */
  asn1$2.getBerValueLength = function(b) {
    // TODO: move this function and related DER/BER functions to a der.js
    // file; better abstract ASN.1 away from der/ber.
    var b2 = b.getByte();
    if(b2 === 0x80) {
      return undefined;
    }

    // see if the length is "short form" or "long form" (bit 8 set)
    var length;
    var longForm = b2 & 0x80;
    if(!longForm) {
      // length is just the first byte
      length = b2;
    } else {
      // the number of bytes the length is specified in bits 7 through 1
      // and each length byte is in big-endian base-256
      length = b.getInt((b2 & 0x7F) << 3);
    }
    return length;
  };

  /**
   * Check if the byte buffer has enough bytes. Throws an Error if not.
   *
   * @param bytes the byte buffer to parse from.
   * @param remaining the bytes remaining in the current parsing state.
   * @param n the number of bytes the buffer must have.
   */
  function _checkBufferLength(bytes, remaining, n) {
    if(n > remaining) {
      var error = new Error('Too few bytes to parse DER.');
      error.available = bytes.length();
      error.remaining = remaining;
      error.requested = n;
      throw error;
    }
  }

  /**
   * Gets the length of a BER-encoded ASN.1 value.
   *
   * In case the length is not specified, undefined is returned.
   *
   * @param bytes the byte buffer to parse from.
   * @param remaining the bytes remaining in the current parsing state.
   *
   * @return the length of the BER-encoded ASN.1 value or undefined.
   */
  var _getValueLength = function(bytes, remaining) {
    // TODO: move this function and related DER/BER functions to a der.js
    // file; better abstract ASN.1 away from der/ber.
    // fromDer already checked that this byte exists
    var b2 = bytes.getByte();
    remaining--;
    if(b2 === 0x80) {
      return undefined;
    }

    // see if the length is "short form" or "long form" (bit 8 set)
    var length;
    var longForm = b2 & 0x80;
    if(!longForm) {
      // length is just the first byte
      length = b2;
    } else {
      // the number of bytes the length is specified in bits 7 through 1
      // and each length byte is in big-endian base-256
      var longFormBytes = b2 & 0x7F;
      _checkBufferLength(bytes, remaining, longFormBytes);
      length = bytes.getInt(longFormBytes << 3);
    }
    // FIXME: this will only happen for 32 bit getInt with high bit set
    if(length < 0) {
      throw new Error('Negative length: ' + length);
    }
    return length;
  };

  /**
   * Parses an asn1 object from a byte buffer in DER format.
   *
   * @param bytes the byte buffer to parse from.
   * @param [strict] true to be strict when checking value lengths, false to
   *          allow truncated values (default: true).
   * @param [options] object with options or boolean strict flag
   *          [strict] true to be strict when checking value lengths, false to
   *            allow truncated values (default: true).
   *          [parseAllBytes] true to ensure all bytes are parsed
   *            (default: true)
   *          [decodeBitStrings] true to attempt to decode the content of
   *            BIT STRINGs (not OCTET STRINGs) using strict mode. Note that
   *            without schema support to understand the data context this can
   *            erroneously decode values that happen to be valid ASN.1. This
   *            flag will be deprecated or removed as soon as schema support is
   *            available. (default: true)
   *
   * @throws Will throw an error for various malformed input conditions.
   *
   * @return the parsed asn1 object.
   */
  asn1$2.fromDer = function(bytes, options) {
    if(options === undefined) {
      options = {
        strict: true,
        parseAllBytes: true,
        decodeBitStrings: true
      };
    }
    if(typeof options === 'boolean') {
      options = {
        strict: options,
        parseAllBytes: true,
        decodeBitStrings: true
      };
    }
    if(!('strict' in options)) {
      options.strict = true;
    }
    if(!('parseAllBytes' in options)) {
      options.parseAllBytes = true;
    }
    if(!('decodeBitStrings' in options)) {
      options.decodeBitStrings = true;
    }

    // wrap in buffer if needed
    if(typeof bytes === 'string') {
      bytes = forge$j.util.createBuffer(bytes);
    }

    var byteCount = bytes.length();
    var value = _fromDer(bytes, bytes.length(), 0, options);
    if(options.parseAllBytes && bytes.length() !== 0) {
      var error = new Error('Unparsed DER bytes remain after ASN.1 parsing.');
      error.byteCount = byteCount;
      error.remaining = bytes.length();
      throw error;
    }
    return value;
  };

  /**
   * Internal function to parse an asn1 object from a byte buffer in DER format.
   *
   * @param bytes the byte buffer to parse from.
   * @param remaining the number of bytes remaining for this chunk.
   * @param depth the current parsing depth.
   * @param options object with same options as fromDer().
   *
   * @return the parsed asn1 object.
   */
  function _fromDer(bytes, remaining, depth, options) {
    // temporary storage for consumption calculations
    var start;

    // minimum length for ASN.1 DER structure is 2
    _checkBufferLength(bytes, remaining, 2);

    // get the first byte
    var b1 = bytes.getByte();
    // consumed one byte
    remaining--;

    // get the tag class
    var tagClass = (b1 & 0xC0);

    // get the type (bits 1-5)
    var type = b1 & 0x1F;

    // get the variable value length and adjust remaining bytes
    start = bytes.length();
    var length = _getValueLength(bytes, remaining);
    remaining -= start - bytes.length();

    // ensure there are enough bytes to get the value
    if(length !== undefined && length > remaining) {
      if(options.strict) {
        var error = new Error('Too few bytes to read ASN.1 value.');
        error.available = bytes.length();
        error.remaining = remaining;
        error.requested = length;
        throw error;
      }
      // Note: be lenient with truncated values and use remaining state bytes
      length = remaining;
    }

    // value storage
    var value;
    // possible BIT STRING contents storage
    var bitStringContents;

    // constructed flag is bit 6 (32 = 0x20) of the first byte
    var constructed = ((b1 & 0x20) === 0x20);
    if(constructed) {
      // parse child asn1 objects from the value
      value = [];
      if(length === undefined) {
        // asn1 object of indefinite length, read until end tag
        for(;;) {
          _checkBufferLength(bytes, remaining, 2);
          if(bytes.bytes(2) === String.fromCharCode(0, 0)) {
            bytes.getBytes(2);
            remaining -= 2;
            break;
          }
          start = bytes.length();
          value.push(_fromDer(bytes, remaining, depth + 1, options));
          remaining -= start - bytes.length();
        }
      } else {
        // parsing asn1 object of definite length
        while(length > 0) {
          start = bytes.length();
          value.push(_fromDer(bytes, length, depth + 1, options));
          remaining -= start - bytes.length();
          length -= start - bytes.length();
        }
      }
    }

    // if a BIT STRING, save the contents including padding
    if(value === undefined && tagClass === asn1$2.Class.UNIVERSAL &&
      type === asn1$2.Type.BITSTRING) {
      bitStringContents = bytes.bytes(length);
    }

    // determine if a non-constructed value should be decoded as a composed
    // value that contains other ASN.1 objects. BIT STRINGs (and OCTET STRINGs)
    // can be used this way.
    if(value === undefined && options.decodeBitStrings &&
      tagClass === asn1$2.Class.UNIVERSAL &&
      // FIXME: OCTET STRINGs not yet supported here
      // .. other parts of forge expect to decode OCTET STRINGs manually
      (type === asn1$2.Type.BITSTRING /*|| type === asn1.Type.OCTETSTRING*/) &&
      length > 1) {
      // save read position
      var savedRead = bytes.read;
      var savedRemaining = remaining;
      var unused = 0;
      if(type === asn1$2.Type.BITSTRING) {
        /* The first octet gives the number of bits by which the length of the
          bit string is less than the next multiple of eight (this is called
          the "number of unused bits").

          The second and following octets give the value of the bit string
          converted to an octet string. */
        _checkBufferLength(bytes, remaining, 1);
        unused = bytes.getByte();
        remaining--;
      }
      // if all bits are used, maybe the BIT/OCTET STRING holds ASN.1 objs
      if(unused === 0) {
        try {
          // attempt to parse child asn1 object from the value
          // (stored in array to signal composed value)
          start = bytes.length();
          var subOptions = {
            // enforce strict mode to avoid parsing ASN.1 from plain data
            strict: true,
            decodeBitStrings: true
          };
          var composed = _fromDer(bytes, remaining, depth + 1, subOptions);
          var used = start - bytes.length();
          remaining -= used;
          if(type == asn1$2.Type.BITSTRING) {
            used++;
          }

          // if the data all decoded and the class indicates UNIVERSAL or
          // CONTEXT_SPECIFIC then assume we've got an encapsulated ASN.1 object
          var tc = composed.tagClass;
          if(used === length &&
            (tc === asn1$2.Class.UNIVERSAL || tc === asn1$2.Class.CONTEXT_SPECIFIC)) {
            value = [composed];
          }
        } catch(ex) {
        }
      }
      if(value === undefined) {
        // restore read position
        bytes.read = savedRead;
        remaining = savedRemaining;
      }
    }

    if(value === undefined) {
      // asn1 not constructed or composed, get raw value
      // TODO: do DER to OID conversion and vice-versa in .toDer?

      if(length === undefined) {
        if(options.strict) {
          throw new Error('Non-constructed ASN.1 object of indefinite length.');
        }
        // be lenient and use remaining state bytes
        length = remaining;
      }

      if(type === asn1$2.Type.BMPSTRING) {
        value = '';
        for(; length > 0; length -= 2) {
          _checkBufferLength(bytes, remaining, 2);
          value += String.fromCharCode(bytes.getInt16());
          remaining -= 2;
        }
      } else {
        value = bytes.getBytes(length);
        remaining -= length;
      }
    }

    // add BIT STRING contents if available
    var asn1Options = bitStringContents === undefined ? null : {
      bitStringContents: bitStringContents
    };

    // create and return asn1 object
    return asn1$2.create(tagClass, type, constructed, value, asn1Options);
  }

  /**
   * Converts the given asn1 object to a buffer of bytes in DER format.
   *
   * @param asn1 the asn1 object to convert to bytes.
   *
   * @return the buffer of bytes.
   */
  asn1$2.toDer = function(obj) {
    var bytes = forge$j.util.createBuffer();

    // build the first byte
    var b1 = obj.tagClass | obj.type;

    // for storing the ASN.1 value
    var value = forge$j.util.createBuffer();

    // use BIT STRING contents if available and data not changed
    var useBitStringContents = false;
    if('bitStringContents' in obj) {
      useBitStringContents = true;
      if(obj.original) {
        useBitStringContents = asn1$2.equals(obj, obj.original);
      }
    }

    if(useBitStringContents) {
      value.putBytes(obj.bitStringContents);
    } else if(obj.composed) {
      // if composed, use each child asn1 object's DER bytes as value
      // turn on 6th bit (0x20 = 32) to indicate asn1 is constructed
      // from other asn1 objects
      if(obj.constructed) {
        b1 |= 0x20;
      } else {
        // type is a bit string, add unused bits of 0x00
        value.putByte(0x00);
      }

      // add all of the child DER bytes together
      for(var i = 0; i < obj.value.length; ++i) {
        if(obj.value[i] !== undefined) {
          value.putBuffer(asn1$2.toDer(obj.value[i]));
        }
      }
    } else {
      // use asn1.value directly
      if(obj.type === asn1$2.Type.BMPSTRING) {
        for(var i = 0; i < obj.value.length; ++i) {
          value.putInt16(obj.value.charCodeAt(i));
        }
      } else {
        // ensure integer is minimally-encoded
        // TODO: should all leading bytes be stripped vs just one?
        // .. ex '00 00 01' => '01'?
        if(obj.type === asn1$2.Type.INTEGER &&
          obj.value.length > 1 &&
          // leading 0x00 for positive integer
          ((obj.value.charCodeAt(0) === 0 &&
          (obj.value.charCodeAt(1) & 0x80) === 0) ||
          // leading 0xFF for negative integer
          (obj.value.charCodeAt(0) === 0xFF &&
          (obj.value.charCodeAt(1) & 0x80) === 0x80))) {
          value.putBytes(obj.value.substr(1));
        } else {
          value.putBytes(obj.value);
        }
      }
    }

    // add tag byte
    bytes.putByte(b1);

    // use "short form" encoding
    if(value.length() <= 127) {
      // one byte describes the length
      // bit 8 = 0 and bits 7-1 = length
      bytes.putByte(value.length() & 0x7F);
    } else {
      // use "long form" encoding
      // 2 to 127 bytes describe the length
      // first byte: bit 8 = 1 and bits 7-1 = # of additional bytes
      // other bytes: length in base 256, big-endian
      var len = value.length();
      var lenBytes = '';
      do {
        lenBytes += String.fromCharCode(len & 0xFF);
        len = len >>> 8;
      } while(len > 0);

      // set first byte to # bytes used to store the length and turn on
      // bit 8 to indicate long-form length is used
      bytes.putByte(lenBytes.length | 0x80);

      // concatenate length bytes in reverse since they were generated
      // little endian and we need big endian
      for(var i = lenBytes.length - 1; i >= 0; --i) {
        bytes.putByte(lenBytes.charCodeAt(i));
      }
    }

    // concatenate value bytes
    bytes.putBuffer(value);
    return bytes;
  };

  /**
   * Converts an OID dot-separated string to a byte buffer. The byte buffer
   * contains only the DER-encoded value, not any tag or length bytes.
   *
   * @param oid the OID dot-separated string.
   *
   * @return the byte buffer.
   */
  asn1$2.oidToDer = function(oid) {
    // split OID into individual values
    var values = oid.split('.');
    var bytes = forge$j.util.createBuffer();

    // first byte is 40 * value1 + value2
    bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10));
    // other bytes are each value in base 128 with 8th bit set except for
    // the last byte for each value
    var last, valueBytes, value, b;
    for(var i = 2; i < values.length; ++i) {
      // produce value bytes in reverse because we don't know how many
      // bytes it will take to store the value
      last = true;
      valueBytes = [];
      value = parseInt(values[i], 10);
      do {
        b = value & 0x7F;
        value = value >>> 7;
        // if value is not last, then turn on 8th bit
        if(!last) {
          b |= 0x80;
        }
        valueBytes.push(b);
        last = false;
      } while(value > 0);

      // add value bytes in reverse (needs to be in big endian)
      for(var n = valueBytes.length - 1; n >= 0; --n) {
        bytes.putByte(valueBytes[n]);
      }
    }

    return bytes;
  };

  /**
   * Converts a DER-encoded byte buffer to an OID dot-separated string. The
   * byte buffer should contain only the DER-encoded value, not any tag or
   * length bytes.
   *
   * @param bytes the byte buffer.
   *
   * @return the OID dot-separated string.
   */
  asn1$2.derToOid = function(bytes) {
    var oid;

    // wrap in buffer if needed
    if(typeof bytes === 'string') {
      bytes = forge$j.util.createBuffer(bytes);
    }

    // first byte is 40 * value1 + value2
    var b = bytes.getByte();
    oid = Math.floor(b / 40) + '.' + (b % 40);

    // other bytes are each value in base 128 with 8th bit set except for
    // the last byte for each value
    var value = 0;
    while(bytes.length() > 0) {
      b = bytes.getByte();
      value = value << 7;
      // not the last byte for the value
      if(b & 0x80) {
        value += b & 0x7F;
      } else {
        // last byte
        oid += '.' + (value + b);
        value = 0;
      }
    }

    return oid;
  };

  /**
   * Converts a UTCTime value to a date.
   *
   * Note: GeneralizedTime has 4 digits for the year and is used for X.509
   * dates past 2049. Parsing that structure hasn't been implemented yet.
   *
   * @param utc the UTCTime value to convert.
   *
   * @return the date.
   */
  asn1$2.utcTimeToDate = function(utc) {
    /* The following formats can be used:

      YYMMDDhhmmZ
      YYMMDDhhmm+hh'mm'
      YYMMDDhhmm-hh'mm'
      YYMMDDhhmmssZ
      YYMMDDhhmmss+hh'mm'
      YYMMDDhhmmss-hh'mm'

      Where:

      YY is the least significant two digits of the year
      MM is the month (01 to 12)
      DD is the day (01 to 31)
      hh is the hour (00 to 23)
      mm are the minutes (00 to 59)
      ss are the seconds (00 to 59)
      Z indicates that local time is GMT, + indicates that local time is
      later than GMT, and - indicates that local time is earlier than GMT
      hh' is the absolute value of the offset from GMT in hours
      mm' is the absolute value of the offset from GMT in minutes */
    var date = new Date();

    // if YY >= 50 use 19xx, if YY < 50 use 20xx
    var year = parseInt(utc.substr(0, 2), 10);
    year = (year >= 50) ? 1900 + year : 2000 + year;
    var MM = parseInt(utc.substr(2, 2), 10) - 1; // use 0-11 for month
    var DD = parseInt(utc.substr(4, 2), 10);
    var hh = parseInt(utc.substr(6, 2), 10);
    var mm = parseInt(utc.substr(8, 2), 10);
    var ss = 0;

    // not just YYMMDDhhmmZ
    if(utc.length > 11) {
      // get character after minutes
      var c = utc.charAt(10);
      var end = 10;

      // see if seconds are present
      if(c !== '+' && c !== '-') {
        // get seconds
        ss = parseInt(utc.substr(10, 2), 10);
        end += 2;
      }
    }

    // update date
    date.setUTCFullYear(year, MM, DD);
    date.setUTCHours(hh, mm, ss, 0);

    if(end) {
      // get +/- after end of time
      c = utc.charAt(end);
      if(c === '+' || c === '-') {
        // get hours+minutes offset
        var hhoffset = parseInt(utc.substr(end + 1, 2), 10);
        var mmoffset = parseInt(utc.substr(end + 4, 2), 10);

        // calculate offset in milliseconds
        var offset = hhoffset * 60 + mmoffset;
        offset *= 60000;

        // apply offset
        if(c === '+') {
          date.setTime(+date - offset);
        } else {
          date.setTime(+date + offset);
        }
      }
    }

    return date;
  };

  /**
   * Converts a GeneralizedTime value to a date.
   *
   * @param gentime the GeneralizedTime value to convert.
   *
   * @return the date.
   */
  asn1$2.generalizedTimeToDate = function(gentime) {
    /* The following formats can be used:

      YYYYMMDDHHMMSS
      YYYYMMDDHHMMSS.fff
      YYYYMMDDHHMMSSZ
      YYYYMMDDHHMMSS.fffZ
      YYYYMMDDHHMMSS+hh'mm'
      YYYYMMDDHHMMSS.fff+hh'mm'
      YYYYMMDDHHMMSS-hh'mm'
      YYYYMMDDHHMMSS.fff-hh'mm'

      Where:

      YYYY is the year
      MM is the month (01 to 12)
      DD is the day (01 to 31)
      hh is the hour (00 to 23)
      mm are the minutes (00 to 59)
      ss are the seconds (00 to 59)
      .fff is the second fraction, accurate to three decimal places
      Z indicates that local time is GMT, + indicates that local time is
      later than GMT, and - indicates that local time is earlier than GMT
      hh' is the absolute value of the offset from GMT in hours
      mm' is the absolute value of the offset from GMT in minutes */
    var date = new Date();

    var YYYY = parseInt(gentime.substr(0, 4), 10);
    var MM = parseInt(gentime.substr(4, 2), 10) - 1; // use 0-11 for month
    var DD = parseInt(gentime.substr(6, 2), 10);
    var hh = parseInt(gentime.substr(8, 2), 10);
    var mm = parseInt(gentime.substr(10, 2), 10);
    var ss = parseInt(gentime.substr(12, 2), 10);
    var fff = 0;
    var offset = 0;
    var isUTC = false;

    if(gentime.charAt(gentime.length - 1) === 'Z') {
      isUTC = true;
    }

    var end = gentime.length - 5, c = gentime.charAt(end);
    if(c === '+' || c === '-') {
      // get hours+minutes offset
      var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);
      var mmoffset = parseInt(gentime.substr(end + 4, 2), 10);

      // calculate offset in milliseconds
      offset = hhoffset * 60 + mmoffset;
      offset *= 60000;

      // apply offset
      if(c === '+') {
        offset *= -1;
      }

      isUTC = true;
    }

    // check for second fraction
    if(gentime.charAt(14) === '.') {
      fff = parseFloat(gentime.substr(14), 10) * 1000;
    }

    if(isUTC) {
      date.setUTCFullYear(YYYY, MM, DD);
      date.setUTCHours(hh, mm, ss, fff);

      // apply offset
      date.setTime(+date + offset);
    } else {
      date.setFullYear(YYYY, MM, DD);
      date.setHours(hh, mm, ss, fff);
    }

    return date;
  };

  /**
   * Converts a date to a UTCTime value.
   *
   * Note: GeneralizedTime has 4 digits for the year and is used for X.509
   * dates past 2049. Converting to a GeneralizedTime hasn't been
   * implemented yet.
   *
   * @param date the date to convert.
   *
   * @return the UTCTime value.
   */
  asn1$2.dateToUtcTime = function(date) {
    // TODO: validate; currently assumes proper format
    if(typeof date === 'string') {
      return date;
    }

    var rval = '';

    // create format YYMMDDhhmmssZ
    var format = [];
    format.push(('' + date.getUTCFullYear()).substr(2));
    format.push('' + (date.getUTCMonth() + 1));
    format.push('' + date.getUTCDate());
    format.push('' + date.getUTCHours());
    format.push('' + date.getUTCMinutes());
    format.push('' + date.getUTCSeconds());

    // ensure 2 digits are used for each format entry
    for(var i = 0; i < format.length; ++i) {
      if(format[i].length < 2) {
        rval += '0';
      }
      rval += format[i];
    }
    rval += 'Z';

    return rval;
  };

  /**
   * Converts a date to a GeneralizedTime value.
   *
   * @param date the date to convert.
   *
   * @return the GeneralizedTime value as a string.
   */
  asn1$2.dateToGeneralizedTime = function(date) {
    // TODO: validate; currently assumes proper format
    if(typeof date === 'string') {
      return date;
    }

    var rval = '';

    // create format YYYYMMDDHHMMSSZ
    var format = [];
    format.push('' + date.getUTCFullYear());
    format.push('' + (date.getUTCMonth() + 1));
    format.push('' + date.getUTCDate());
    format.push('' + date.getUTCHours());
    format.push('' + date.getUTCMinutes());
    format.push('' + date.getUTCSeconds());

    // ensure 2 digits are used for each format entry
    for(var i = 0; i < format.length; ++i) {
      if(format[i].length < 2) {
        rval += '0';
      }
      rval += format[i];
    }
    rval += 'Z';

    return rval;
  };

  /**
   * Converts a javascript integer to a DER-encoded byte buffer to be used
   * as the value for an INTEGER type.
   *
   * @param x the integer.
   *
   * @return the byte buffer.
   */
  asn1$2.integerToDer = function(x) {
    var rval = forge$j.util.createBuffer();
    if(x >= -0x80 && x < 0x80) {
      return rval.putSignedInt(x, 8);
    }
    if(x >= -0x8000 && x < 0x8000) {
      return rval.putSignedInt(x, 16);
    }
    if(x >= -0x800000 && x < 0x800000) {
      return rval.putSignedInt(x, 24);
    }
    if(x >= -0x80000000 && x < 0x80000000) {
      return rval.putSignedInt(x, 32);
    }
    var error = new Error('Integer too large; max is 32-bits.');
    error.integer = x;
    throw error;
  };

  /**
   * Converts a DER-encoded byte buffer to a javascript integer. This is
   * typically used to decode the value of an INTEGER type.
   *
   * @param bytes the byte buffer.
   *
   * @return the integer.
   */
  asn1$2.derToInteger = function(bytes) {
    // wrap in buffer if needed
    if(typeof bytes === 'string') {
      bytes = forge$j.util.createBuffer(bytes);
    }

    var n = bytes.length() * 8;
    if(n > 32) {
      throw new Error('Integer too large; max is 32-bits.');
    }
    return bytes.getSignedInt(n);
  };

  /**
   * Validates that the given ASN.1 object is at least a super set of the
   * given ASN.1 structure. Only tag classes and types are checked. An
   * optional map may also be provided to capture ASN.1 values while the
   * structure is checked.
   *
   * To capture an ASN.1 value, set an object in the validator's 'capture'
   * parameter to the key to use in the capture map. To capture the full
   * ASN.1 object, specify 'captureAsn1'. To capture BIT STRING bytes, including
   * the leading unused bits counter byte, specify 'captureBitStringContents'.
   * To capture BIT STRING bytes, without the leading unused bits counter byte,
   * specify 'captureBitStringValue'.
   *
   * Objects in the validator may set a field 'optional' to true to indicate
   * that it isn't necessary to pass validation.
   *
   * @param obj the ASN.1 object to validate.
   * @param v the ASN.1 structure validator.
   * @param capture an optional map to capture values in.
   * @param errors an optional array for storing validation errors.
   *
   * @return true on success, false on failure.
   */
  asn1$2.validate = function(obj, v, capture, errors) {
    var rval = false;

    // ensure tag class and type are the same if specified
    if((obj.tagClass === v.tagClass || typeof(v.tagClass) === 'undefined') &&
      (obj.type === v.type || typeof(v.type) === 'undefined')) {
      // ensure constructed flag is the same if specified
      if(obj.constructed === v.constructed ||
        typeof(v.constructed) === 'undefined') {
        rval = true;

        // handle sub values
        if(v.value && forge$j.util.isArray(v.value)) {
          var j = 0;
          for(var i = 0; rval && i < v.value.length; ++i) {
            rval = v.value[i].optional || false;
            if(obj.value[j]) {
              rval = asn1$2.validate(obj.value[j], v.value[i], capture, errors);
              if(rval) {
                ++j;
              } else if(v.value[i].optional) {
                rval = true;
              }
            }
            if(!rval && errors) {
              errors.push(
                '[' + v.name + '] ' +
                'Tag class "' + v.tagClass + '", type "' +
                v.type + '" expected value length "' +
                v.value.length + '", got "' +
                obj.value.length + '"');
            }
          }
        }

        if(rval && capture) {
          if(v.capture) {
            capture[v.capture] = obj.value;
          }
          if(v.captureAsn1) {
            capture[v.captureAsn1] = obj;
          }
          if(v.captureBitStringContents && 'bitStringContents' in obj) {
            capture[v.captureBitStringContents] = obj.bitStringContents;
          }
          if(v.captureBitStringValue && 'bitStringContents' in obj) {
            if(obj.bitStringContents.length < 2) {
              capture[v.captureBitStringValue] = '';
            } else {
              // FIXME: support unused bits with data shifting
              var unused = obj.bitStringContents.charCodeAt(0);
              if(unused !== 0) {
                throw new Error(
                  'captureBitStringValue only supported for zero unused bits');
              }
              capture[v.captureBitStringValue] = obj.bitStringContents.slice(1);
            }
          }
        }
      } else if(errors) {
        errors.push(
          '[' + v.name + '] ' +
          'Expected constructed "' + v.constructed + '", got "' +
          obj.constructed + '"');
      }
    } else if(errors) {
      if(obj.tagClass !== v.tagClass) {
        errors.push(
          '[' + v.name + '] ' +
          'Expected tag class "' + v.tagClass + '", got "' +
          obj.tagClass + '"');
      }
      if(obj.type !== v.type) {
        errors.push(
          '[' + v.name + '] ' +
          'Expected type "' + v.type + '", got "' + obj.type + '"');
      }
    }
    return rval;
  };

  // regex for testing for non-latin characters
  var _nonLatinRegex = /[^\\u0000-\\u00ff]/;

  /**
   * Pretty prints an ASN.1 object to a string.
   *
   * @param obj the object to write out.
   * @param level the level in the tree.
   * @param indentation the indentation to use.
   *
   * @return the string.
   */
  asn1$2.prettyPrint = function(obj, level, indentation) {
    var rval = '';

    // set default level and indentation
    level = level || 0;
    indentation = indentation || 2;

    // start new line for deep levels
    if(level > 0) {
      rval += '\n';
    }

    // create indent
    var indent = '';
    for(var i = 0; i < level * indentation; ++i) {
      indent += ' ';
    }

    // print class:type
    rval += indent + 'Tag: ';
    switch(obj.tagClass) {
    case asn1$2.Class.UNIVERSAL:
      rval += 'Universal:';
      break;
    case asn1$2.Class.APPLICATION:
      rval += 'Application:';
      break;
    case asn1$2.Class.CONTEXT_SPECIFIC:
      rval += 'Context-Specific:';
      break;
    case asn1$2.Class.PRIVATE:
      rval += 'Private:';
      break;
    }

    if(obj.tagClass === asn1$2.Class.UNIVERSAL) {
      rval += obj.type;

      // known types
      switch(obj.type) {
      case asn1$2.Type.NONE:
        rval += ' (None)';
        break;
      case asn1$2.Type.BOOLEAN:
        rval += ' (Boolean)';
        break;
      case asn1$2.Type.INTEGER:
        rval += ' (Integer)';
        break;
      case asn1$2.Type.BITSTRING:
        rval += ' (Bit string)';
        break;
      case asn1$2.Type.OCTETSTRING:
        rval += ' (Octet string)';
        break;
      case asn1$2.Type.NULL:
        rval += ' (Null)';
        break;
      case asn1$2.Type.OID:
        rval += ' (Object Identifier)';
        break;
      case asn1$2.Type.ODESC:
        rval += ' (Object Descriptor)';
        break;
      case asn1$2.Type.EXTERNAL:
        rval += ' (External or Instance of)';
        break;
      case asn1$2.Type.REAL:
        rval += ' (Real)';
        break;
      case asn1$2.Type.ENUMERATED:
        rval += ' (Enumerated)';
        break;
      case asn1$2.Type.EMBEDDED:
        rval += ' (Embedded PDV)';
        break;
      case asn1$2.Type.UTF8:
        rval += ' (UTF8)';
        break;
      case asn1$2.Type.ROID:
        rval += ' (Relative Object Identifier)';
        break;
      case asn1$2.Type.SEQUENCE:
        rval += ' (Sequence)';
        break;
      case asn1$2.Type.SET:
        rval += ' (Set)';
        break;
      case asn1$2.Type.PRINTABLESTRING:
        rval += ' (Printable String)';
        break;
      case asn1$2.Type.IA5String:
        rval += ' (IA5String (ASCII))';
        break;
      case asn1$2.Type.UTCTIME:
        rval += ' (UTC time)';
        break;
      case asn1$2.Type.GENERALIZEDTIME:
        rval += ' (Generalized time)';
        break;
      case asn1$2.Type.BMPSTRING:
        rval += ' (BMP String)';
        break;
      }
    } else {
      rval += obj.type;
    }

    rval += '\n';
    rval += indent + 'Constructed: ' + obj.constructed + '\n';

    if(obj.composed) {
      var subvalues = 0;
      var sub = '';
      for(var i = 0; i < obj.value.length; ++i) {
        if(obj.value[i] !== undefined) {
          subvalues += 1;
          sub += asn1$2.prettyPrint(obj.value[i], level + 1, indentation);
          if((i + 1) < obj.value.length) {
            sub += ',';
          }
        }
      }
      rval += indent + 'Sub values: ' + subvalues + sub;
    } else {
      rval += indent + 'Value: ';
      if(obj.type === asn1$2.Type.OID) {
        var oid = asn1$2.derToOid(obj.value);
        rval += oid;
        if(forge$j.pki && forge$j.pki.oids) {
          if(oid in forge$j.pki.oids) {
            rval += ' (' + forge$j.pki.oids[oid] + ') ';
          }
        }
      }
      if(obj.type === asn1$2.Type.INTEGER) {
        try {
          rval += asn1$2.derToInteger(obj.value);
        } catch(ex) {
          rval += '0x' + forge$j.util.bytesToHex(obj.value);
        }
      } else if(obj.type === asn1$2.Type.BITSTRING) {
        // TODO: shift bits as needed to display without padding
        if(obj.value.length > 1) {
          // remove unused bits field
          rval += '0x' + forge$j.util.bytesToHex(obj.value.slice(1));
        } else {
          rval += '(none)';
        }
        // show unused bit count
        if(obj.value.length > 0) {
          var unused = obj.value.charCodeAt(0);
          if(unused == 1) {
            rval += ' (1 unused bit shown)';
          } else if(unused > 1) {
            rval += ' (' + unused + ' unused bits shown)';
          }
        }
      } else if(obj.type === asn1$2.Type.OCTETSTRING) {
        if(!_nonLatinRegex.test(obj.value)) {
          rval += '(' + obj.value + ') ';
        }
        rval += '0x' + forge$j.util.bytesToHex(obj.value);
      } else if(obj.type === asn1$2.Type.UTF8) {
        try {
          rval += forge$j.util.decodeUtf8(obj.value);
        } catch(e) {
          if(e.message === 'URI malformed') {
            rval +=
              '0x' + forge$j.util.bytesToHex(obj.value) + ' (malformed UTF8)';
          } else {
            throw e;
          }
        }
      } else if(obj.type === asn1$2.Type.PRINTABLESTRING ||
        obj.type === asn1$2.Type.IA5String) {
        rval += obj.value;
      } else if(_nonLatinRegex.test(obj.value)) {
        rval += '0x' + forge$j.util.bytesToHex(obj.value);
      } else if(obj.value.length === 0) {
        rval += '[null]';
      } else {
        rval += obj.value;
      }
    }

    return rval;
  };

  /**
   * Cipher base API.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2010-2014 Digital Bazaar, Inc.
   */

  var forge$i = forge$m;


  forge$i.cipher = forge$i.cipher || {};

  // registered algorithms
  forge$i.cipher.algorithms = forge$i.cipher.algorithms || {};

  /**
   * Creates a cipher object that can be used to encrypt data using the given
   * algorithm and key. The algorithm may be provided as a string value for a
   * previously registered algorithm or it may be given as a cipher algorithm
   * API object.
   *
   * @param algorithm the algorithm to use, either a string or an algorithm API
   *          object.
   * @param key the key to use, as a binary-encoded string of bytes or a
   *          byte buffer.
   *
   * @return the cipher.
   */
  forge$i.cipher.createCipher = function(algorithm, key) {
    var api = algorithm;
    if(typeof api === 'string') {
      api = forge$i.cipher.getAlgorithm(api);
      if(api) {
        api = api();
      }
    }
    if(!api) {
      throw new Error('Unsupported algorithm: ' + algorithm);
    }

    // assume block cipher
    return new forge$i.cipher.BlockCipher({
      algorithm: api,
      key: key,
      decrypt: false
    });
  };

  /**
   * Creates a decipher object that can be used to decrypt data using the given
   * algorithm and key. The algorithm may be provided as a string value for a
   * previously registered algorithm or it may be given as a cipher algorithm
   * API object.
   *
   * @param algorithm the algorithm to use, either a string or an algorithm API
   *          object.
   * @param key the key to use, as a binary-encoded string of bytes or a
   *          byte buffer.
   *
   * @return the cipher.
   */
  forge$i.cipher.createDecipher = function(algorithm, key) {
    var api = algorithm;
    if(typeof api === 'string') {
      api = forge$i.cipher.getAlgorithm(api);
      if(api) {
        api = api();
      }
    }
    if(!api) {
      throw new Error('Unsupported algorithm: ' + algorithm);
    }

    // assume block cipher
    return new forge$i.cipher.BlockCipher({
      algorithm: api,
      key: key,
      decrypt: true
    });
  };

  /**
   * Registers an algorithm by name. If the name was already registered, the
   * algorithm API object will be overwritten.
   *
   * @param name the name of the algorithm.
   * @param algorithm the algorithm API object.
   */
  forge$i.cipher.registerAlgorithm = function(name, algorithm) {
    name = name.toUpperCase();
    forge$i.cipher.algorithms[name] = algorithm;
  };

  /**
   * Gets a registered algorithm by name.
   *
   * @param name the name of the algorithm.
   *
   * @return the algorithm, if found, null if not.
   */
  forge$i.cipher.getAlgorithm = function(name) {
    name = name.toUpperCase();
    if(name in forge$i.cipher.algorithms) {
      return forge$i.cipher.algorithms[name];
    }
    return null;
  };

  var BlockCipher = forge$i.cipher.BlockCipher = function(options) {
    this.algorithm = options.algorithm;
    this.mode = this.algorithm.mode;
    this.blockSize = this.mode.blockSize;
    this._finish = false;
    this._input = null;
    this.output = null;
    this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;
    this._decrypt = options.decrypt;
    this.algorithm.initialize(options);
  };

  /**
   * Starts or restarts the encryption or decryption process, whichever
   * was previously configured.
   *
   * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array
   * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in
   * bytes, then it must be Nb (16) bytes in length. If the IV is given in as
   * 32-bit integers, then it must be 4 integers long.
   *
   * Note: an IV is not required or used in ECB mode.
   *
   * For GCM-mode, the IV must be given as a binary-encoded string of bytes or
   * a byte buffer. The number of bytes should be 12 (96 bits) as recommended
   * by NIST SP-800-38D but another length may be given.
   *
   * @param options the options to use:
   *          iv the initialization vector to use as a binary-encoded string of
   *            bytes, null to reuse the last ciphered block from a previous
   *            update() (this "residue" method is for legacy support only).
   *          additionalData additional authentication data as a binary-encoded
   *            string of bytes, for 'GCM' mode, (default: none).
   *          tagLength desired length of authentication tag, in bits, for
   *            'GCM' mode (0-128, default: 128).
   *          tag the authentication tag to check if decrypting, as a
   *             binary-encoded string of bytes.
   *          output the output the buffer to write to, null to create one.
   */
  BlockCipher.prototype.start = function(options) {
    options = options || {};
    var opts = {};
    for(var key in options) {
      opts[key] = options[key];
    }
    opts.decrypt = this._decrypt;
    this._finish = false;
    this._input = forge$i.util.createBuffer();
    this.output = options.output || forge$i.util.createBuffer();
    this.mode.start(opts);
  };

  /**
   * Updates the next block according to the cipher mode.
   *
   * @param input the buffer to read from.
   */
  BlockCipher.prototype.update = function(input) {
    if(input) {
      // input given, so empty it into the input buffer
      this._input.putBuffer(input);
    }

    // do cipher operation until it needs more input and not finished
    while(!this._op.call(this.mode, this._input, this.output, this._finish) &&
      !this._finish) {}

    // free consumed memory from input buffer
    this._input.compact();
  };

  /**
   * Finishes encrypting or decrypting.
   *
   * @param pad a padding function to use in CBC mode, null for default,
   *          signature(blockSize, buffer, decrypt).
   *
   * @return true if successful, false on error.
   */
  BlockCipher.prototype.finish = function(pad) {
    // backwards-compatibility w/deprecated padding API
    // Note: will overwrite padding functions even after another start() call
    if(pad && (this.mode.name === 'ECB' || this.mode.name === 'CBC')) {
      this.mode.pad = function(input) {
        return pad(this.blockSize, input, false);
      };
      this.mode.unpad = function(output) {
        return pad(this.blockSize, output, true);
      };
    }

    // build options for padding and afterFinish functions
    var options = {};
    options.decrypt = this._decrypt;

    // get # of bytes that won't fill a block
    options.overflow = this._input.length() % this.blockSize;

    if(!this._decrypt && this.mode.pad) {
      if(!this.mode.pad(this._input, options)) {
        return false;
      }
    }

    // do final update
    this._finish = true;
    this.update();

    if(this._decrypt && this.mode.unpad) {
      if(!this.mode.unpad(this.output, options)) {
        return false;
      }
    }

    if(this.mode.afterFinish) {
      if(!this.mode.afterFinish(this.output, options)) {
        return false;
      }
    }

    return true;
  };

  /**
   * Supported cipher modes.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2010-2014 Digital Bazaar, Inc.
   */

  var forge$h = forge$m;


  forge$h.cipher = forge$h.cipher || {};

  // supported cipher modes
  var modes = forge$h.cipher.modes = forge$h.cipher.modes || {};

  /** Electronic codebook (ECB) (Don't use this; it's not secure) **/

  modes.ecb = function(options) {
    options = options || {};
    this.name = 'ECB';
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = new Array(this._ints);
    this._outBlock = new Array(this._ints);
  };

  modes.ecb.prototype.start = function(options) {};

  modes.ecb.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
      return true;
    }

    // get next block
    for(var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = input.getInt32();
    }

    // encrypt block
    this.cipher.encrypt(this._inBlock, this._outBlock);

    // write output
    for(var i = 0; i < this._ints; ++i) {
      output.putInt32(this._outBlock[i]);
    }
  };

  modes.ecb.prototype.decrypt = function(input, output, finish) {
    // not enough input to decrypt
    if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
      return true;
    }

    // get next block
    for(var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = input.getInt32();
    }

    // decrypt block
    this.cipher.decrypt(this._inBlock, this._outBlock);

    // write output
    for(var i = 0; i < this._ints; ++i) {
      output.putInt32(this._outBlock[i]);
    }
  };

  modes.ecb.prototype.pad = function(input, options) {
    // add PKCS#7 padding to block (each pad byte is the
    // value of the number of pad bytes)
    var padding = (input.length() === this.blockSize ?
      this.blockSize : (this.blockSize - input.length()));
    input.fillWithByte(padding, padding);
    return true;
  };

  modes.ecb.prototype.unpad = function(output, options) {
    // check for error: input data not a multiple of blockSize
    if(options.overflow > 0) {
      return false;
    }

    // ensure padding byte count is valid
    var len = output.length();
    var count = output.at(len - 1);
    if(count > (this.blockSize << 2)) {
      return false;
    }

    // trim off padding bytes
    output.truncate(count);
    return true;
  };

  /** Cipher-block Chaining (CBC) **/

  modes.cbc = function(options) {
    options = options || {};
    this.name = 'CBC';
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = new Array(this._ints);
    this._outBlock = new Array(this._ints);
  };

  modes.cbc.prototype.start = function(options) {
    // Note: legacy support for using IV residue (has security flaws)
    // if IV is null, reuse block from previous processing
    if(options.iv === null) {
      // must have a previous block
      if(!this._prev) {
        throw new Error('Invalid IV parameter.');
      }
      this._iv = this._prev.slice(0);
    } else if(!('iv' in options)) {
      throw new Error('Invalid IV parameter.');
    } else {
      // save IV as "previous" block
      this._iv = transformIV(options.iv, this.blockSize);
      this._prev = this._iv.slice(0);
    }
  };

  modes.cbc.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
      return true;
    }

    // get next block
    // CBC XOR's IV (or previous block) with plaintext
    for(var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = this._prev[i] ^ input.getInt32();
    }

    // encrypt block
    this.cipher.encrypt(this._inBlock, this._outBlock);

    // write output, save previous block
    for(var i = 0; i < this._ints; ++i) {
      output.putInt32(this._outBlock[i]);
    }
    this._prev = this._outBlock;
  };

  modes.cbc.prototype.decrypt = function(input, output, finish) {
    // not enough input to decrypt
    if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
      return true;
    }

    // get next block
    for(var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = input.getInt32();
    }

    // decrypt block
    this.cipher.decrypt(this._inBlock, this._outBlock);

    // write output, save previous ciphered block
    // CBC XOR's IV (or previous block) with ciphertext
    for(var i = 0; i < this._ints; ++i) {
      output.putInt32(this._prev[i] ^ this._outBlock[i]);
    }
    this._prev = this._inBlock.slice(0);
  };

  modes.cbc.prototype.pad = function(input, options) {
    // add PKCS#7 padding to block (each pad byte is the
    // value of the number of pad bytes)
    var padding = (input.length() === this.blockSize ?
      this.blockSize : (this.blockSize - input.length()));
    input.fillWithByte(padding, padding);
    return true;
  };

  modes.cbc.prototype.unpad = function(output, options) {
    // check for error: input data not a multiple of blockSize
    if(options.overflow > 0) {
      return false;
    }

    // ensure padding byte count is valid
    var len = output.length();
    var count = output.at(len - 1);
    if(count > (this.blockSize << 2)) {
      return false;
    }

    // trim off padding bytes
    output.truncate(count);
    return true;
  };

  /** Cipher feedback (CFB) **/

  modes.cfb = function(options) {
    options = options || {};
    this.name = 'CFB';
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = null;
    this._outBlock = new Array(this._ints);
    this._partialBlock = new Array(this._ints);
    this._partialOutput = forge$h.util.createBuffer();
    this._partialBytes = 0;
  };

  modes.cfb.prototype.start = function(options) {
    if(!('iv' in options)) {
      throw new Error('Invalid IV parameter.');
    }
    // use IV as first input
    this._iv = transformIV(options.iv, this.blockSize);
    this._inBlock = this._iv.slice(0);
    this._partialBytes = 0;
  };

  modes.cfb.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    var inputLength = input.length();
    if(inputLength === 0) {
      return true;
    }

    // encrypt block
    this.cipher.encrypt(this._inBlock, this._outBlock);

    // handle full block
    if(this._partialBytes === 0 && inputLength >= this.blockSize) {
      // XOR input with output, write input as output
      for(var i = 0; i < this._ints; ++i) {
        this._inBlock[i] = input.getInt32() ^ this._outBlock[i];
        output.putInt32(this._inBlock[i]);
      }
      return;
    }

    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
    if(partialBytes > 0) {
      partialBytes = this.blockSize - partialBytes;
    }

    // XOR input with output, write input as partial output
    this._partialOutput.clear();
    for(var i = 0; i < this._ints; ++i) {
      this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];
      this._partialOutput.putInt32(this._partialBlock[i]);
    }

    if(partialBytes > 0) {
      // block still incomplete, restore input buffer
      input.read -= this.blockSize;
    } else {
      // block complete, update input block
      for(var i = 0; i < this._ints; ++i) {
        this._inBlock[i] = this._partialBlock[i];
      }
    }

    // skip any previous partial bytes
    if(this._partialBytes > 0) {
      this._partialOutput.getBytes(this._partialBytes);
    }

    if(partialBytes > 0 && !finish) {
      output.putBytes(this._partialOutput.getBytes(
        partialBytes - this._partialBytes));
      this._partialBytes = partialBytes;
      return true;
    }

    output.putBytes(this._partialOutput.getBytes(
      inputLength - this._partialBytes));
    this._partialBytes = 0;
  };

  modes.cfb.prototype.decrypt = function(input, output, finish) {
    // not enough input to decrypt
    var inputLength = input.length();
    if(inputLength === 0) {
      return true;
    }

    // encrypt block (CFB always uses encryption mode)
    this.cipher.encrypt(this._inBlock, this._outBlock);

    // handle full block
    if(this._partialBytes === 0 && inputLength >= this.blockSize) {
      // XOR input with output, write input as output
      for(var i = 0; i < this._ints; ++i) {
        this._inBlock[i] = input.getInt32();
        output.putInt32(this._inBlock[i] ^ this._outBlock[i]);
      }
      return;
    }

    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
    if(partialBytes > 0) {
      partialBytes = this.blockSize - partialBytes;
    }

    // XOR input with output, write input as partial output
    this._partialOutput.clear();
    for(var i = 0; i < this._ints; ++i) {
      this._partialBlock[i] = input.getInt32();
      this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);
    }

    if(partialBytes > 0) {
      // block still incomplete, restore input buffer
      input.read -= this.blockSize;
    } else {
      // block complete, update input block
      for(var i = 0; i < this._ints; ++i) {
        this._inBlock[i] = this._partialBlock[i];
      }
    }

    // skip any previous partial bytes
    if(this._partialBytes > 0) {
      this._partialOutput.getBytes(this._partialBytes);
    }

    if(partialBytes > 0 && !finish) {
      output.putBytes(this._partialOutput.getBytes(
        partialBytes - this._partialBytes));
      this._partialBytes = partialBytes;
      return true;
    }

    output.putBytes(this._partialOutput.getBytes(
      inputLength - this._partialBytes));
    this._partialBytes = 0;
  };

  /** Output feedback (OFB) **/

  modes.ofb = function(options) {
    options = options || {};
    this.name = 'OFB';
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = null;
    this._outBlock = new Array(this._ints);
    this._partialOutput = forge$h.util.createBuffer();
    this._partialBytes = 0;
  };

  modes.ofb.prototype.start = function(options) {
    if(!('iv' in options)) {
      throw new Error('Invalid IV parameter.');
    }
    // use IV as first input
    this._iv = transformIV(options.iv, this.blockSize);
    this._inBlock = this._iv.slice(0);
    this._partialBytes = 0;
  };

  modes.ofb.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    var inputLength = input.length();
    if(input.length() === 0) {
      return true;
    }

    // encrypt block (OFB always uses encryption mode)
    this.cipher.encrypt(this._inBlock, this._outBlock);

    // handle full block
    if(this._partialBytes === 0 && inputLength >= this.blockSize) {
      // XOR input with output and update next input
      for(var i = 0; i < this._ints; ++i) {
        output.putInt32(input.getInt32() ^ this._outBlock[i]);
        this._inBlock[i] = this._outBlock[i];
      }
      return;
    }

    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
    if(partialBytes > 0) {
      partialBytes = this.blockSize - partialBytes;
    }

    // XOR input with output
    this._partialOutput.clear();
    for(var i = 0; i < this._ints; ++i) {
      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
    }

    if(partialBytes > 0) {
      // block still incomplete, restore input buffer
      input.read -= this.blockSize;
    } else {
      // block complete, update input block
      for(var i = 0; i < this._ints; ++i) {
        this._inBlock[i] = this._outBlock[i];
      }
    }

    // skip any previous partial bytes
    if(this._partialBytes > 0) {
      this._partialOutput.getBytes(this._partialBytes);
    }

    if(partialBytes > 0 && !finish) {
      output.putBytes(this._partialOutput.getBytes(
        partialBytes - this._partialBytes));
      this._partialBytes = partialBytes;
      return true;
    }

    output.putBytes(this._partialOutput.getBytes(
      inputLength - this._partialBytes));
    this._partialBytes = 0;
  };

  modes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;

  /** Counter (CTR) **/

  modes.ctr = function(options) {
    options = options || {};
    this.name = 'CTR';
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = null;
    this._outBlock = new Array(this._ints);
    this._partialOutput = forge$h.util.createBuffer();
    this._partialBytes = 0;
  };

  modes.ctr.prototype.start = function(options) {
    if(!('iv' in options)) {
      throw new Error('Invalid IV parameter.');
    }
    // use IV as first input
    this._iv = transformIV(options.iv, this.blockSize);
    this._inBlock = this._iv.slice(0);
    this._partialBytes = 0;
  };

  modes.ctr.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    var inputLength = input.length();
    if(inputLength === 0) {
      return true;
    }

    // encrypt block (CTR always uses encryption mode)
    this.cipher.encrypt(this._inBlock, this._outBlock);

    // handle full block
    if(this._partialBytes === 0 && inputLength >= this.blockSize) {
      // XOR input with output
      for(var i = 0; i < this._ints; ++i) {
        output.putInt32(input.getInt32() ^ this._outBlock[i]);
      }
    } else {
      // handle partial block
      var partialBytes = (this.blockSize - inputLength) % this.blockSize;
      if(partialBytes > 0) {
        partialBytes = this.blockSize - partialBytes;
      }

      // XOR input with output
      this._partialOutput.clear();
      for(var i = 0; i < this._ints; ++i) {
        this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
      }

      if(partialBytes > 0) {
        // block still incomplete, restore input buffer
        input.read -= this.blockSize;
      }

      // skip any previous partial bytes
      if(this._partialBytes > 0) {
        this._partialOutput.getBytes(this._partialBytes);
      }

      if(partialBytes > 0 && !finish) {
        output.putBytes(this._partialOutput.getBytes(
          partialBytes - this._partialBytes));
        this._partialBytes = partialBytes;
        return true;
      }

      output.putBytes(this._partialOutput.getBytes(
        inputLength - this._partialBytes));
      this._partialBytes = 0;
    }

    // block complete, increment counter (input block)
    inc32(this._inBlock);
  };

  modes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;

  /** Galois/Counter Mode (GCM) **/

  modes.gcm = function(options) {
    options = options || {};
    this.name = 'GCM';
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = new Array(this._ints);
    this._outBlock = new Array(this._ints);
    this._partialOutput = forge$h.util.createBuffer();
    this._partialBytes = 0;

    // R is actually this value concatenated with 120 more zero bits, but
    // we only XOR against R so the other zeros have no effect -- we just
    // apply this value to the first integer in a block
    this._R = 0xE1000000;
  };

  modes.gcm.prototype.start = function(options) {
    if(!('iv' in options)) {
      throw new Error('Invalid IV parameter.');
    }
    // ensure IV is a byte buffer
    var iv = forge$h.util.createBuffer(options.iv);

    // no ciphered data processed yet
    this._cipherLength = 0;

    // default additional data is none
    var additionalData;
    if('additionalData' in options) {
      additionalData = forge$h.util.createBuffer(options.additionalData);
    } else {
      additionalData = forge$h.util.createBuffer();
    }

    // default tag length is 128 bits
    if('tagLength' in options) {
      this._tagLength = options.tagLength;
    } else {
      this._tagLength = 128;
    }

    // if tag is given, ensure tag matches tag length
    this._tag = null;
    if(options.decrypt) {
      // save tag to check later
      this._tag = forge$h.util.createBuffer(options.tag).getBytes();
      if(this._tag.length !== (this._tagLength / 8)) {
        throw new Error('Authentication tag does not match tag length.');
      }
    }

    // create tmp storage for hash calculation
    this._hashBlock = new Array(this._ints);

    // no tag generated yet
    this.tag = null;

    // generate hash subkey
    // (apply block cipher to "zero" block)
    this._hashSubkey = new Array(this._ints);
    this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey);

    // generate table M
    // use 4-bit tables (32 component decomposition of a 16 byte value)
    // 8-bit tables take more space and are known to have security
    // vulnerabilities (in native implementations)
    this.componentBits = 4;
    this._m = this.generateHashTable(this._hashSubkey, this.componentBits);

    // Note: support IV length different from 96 bits? (only supporting
    // 96 bits is recommended by NIST SP-800-38D)
    // generate J_0
    var ivLength = iv.length();
    if(ivLength === 12) {
      // 96-bit IV
      this._j0 = [iv.getInt32(), iv.getInt32(), iv.getInt32(), 1];
    } else {
      // IV is NOT 96-bits
      this._j0 = [0, 0, 0, 0];
      while(iv.length() > 0) {
        this._j0 = this.ghash(
          this._hashSubkey, this._j0,
          [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()]);
      }
      this._j0 = this.ghash(
        this._hashSubkey, this._j0, [0, 0].concat(from64To32(ivLength * 8)));
    }

    // generate ICB (initial counter block)
    this._inBlock = this._j0.slice(0);
    inc32(this._inBlock);
    this._partialBytes = 0;

    // consume authentication data
    additionalData = forge$h.util.createBuffer(additionalData);
    // save additional data length as a BE 64-bit number
    this._aDataLength = from64To32(additionalData.length() * 8);
    // pad additional data to 128 bit (16 byte) block size
    var overflow = additionalData.length() % this.blockSize;
    if(overflow) {
      additionalData.fillWithByte(0, this.blockSize - overflow);
    }
    this._s = [0, 0, 0, 0];
    while(additionalData.length() > 0) {
      this._s = this.ghash(this._hashSubkey, this._s, [
        additionalData.getInt32(),
        additionalData.getInt32(),
        additionalData.getInt32(),
        additionalData.getInt32()
      ]);
    }
  };

  modes.gcm.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    var inputLength = input.length();
    if(inputLength === 0) {
      return true;
    }

    // encrypt block
    this.cipher.encrypt(this._inBlock, this._outBlock);

    // handle full block
    if(this._partialBytes === 0 && inputLength >= this.blockSize) {
      // XOR input with output
      for(var i = 0; i < this._ints; ++i) {
        output.putInt32(this._outBlock[i] ^= input.getInt32());
      }
      this._cipherLength += this.blockSize;
    } else {
      // handle partial block
      var partialBytes = (this.blockSize - inputLength) % this.blockSize;
      if(partialBytes > 0) {
        partialBytes = this.blockSize - partialBytes;
      }

      // XOR input with output
      this._partialOutput.clear();
      for(var i = 0; i < this._ints; ++i) {
        this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
      }

      if(partialBytes <= 0 || finish) {
        // handle overflow prior to hashing
        if(finish) {
          // get block overflow
          var overflow = inputLength % this.blockSize;
          this._cipherLength += overflow;
          // truncate for hash function
          this._partialOutput.truncate(this.blockSize - overflow);
        } else {
          this._cipherLength += this.blockSize;
        }

        // get output block for hashing
        for(var i = 0; i < this._ints; ++i) {
          this._outBlock[i] = this._partialOutput.getInt32();
        }
        this._partialOutput.read -= this.blockSize;
      }

      // skip any previous partial bytes
      if(this._partialBytes > 0) {
        this._partialOutput.getBytes(this._partialBytes);
      }

      if(partialBytes > 0 && !finish) {
        // block still incomplete, restore input buffer, get partial output,
        // and return early
        input.read -= this.blockSize;
        output.putBytes(this._partialOutput.getBytes(
          partialBytes - this._partialBytes));
        this._partialBytes = partialBytes;
        return true;
      }

      output.putBytes(this._partialOutput.getBytes(
        inputLength - this._partialBytes));
      this._partialBytes = 0;
    }

    // update hash block S
    this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);

    // increment counter (input block)
    inc32(this._inBlock);
  };

  modes.gcm.prototype.decrypt = function(input, output, finish) {
    // not enough input to decrypt
    var inputLength = input.length();
    if(inputLength < this.blockSize && !(finish && inputLength > 0)) {
      return true;
    }

    // encrypt block (GCM always uses encryption mode)
    this.cipher.encrypt(this._inBlock, this._outBlock);

    // increment counter (input block)
    inc32(this._inBlock);

    // update hash block S
    this._hashBlock[0] = input.getInt32();
    this._hashBlock[1] = input.getInt32();
    this._hashBlock[2] = input.getInt32();
    this._hashBlock[3] = input.getInt32();
    this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);

    // XOR hash input with output
    for(var i = 0; i < this._ints; ++i) {
      output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);
    }

    // increment cipher data length
    if(inputLength < this.blockSize) {
      this._cipherLength += inputLength % this.blockSize;
    } else {
      this._cipherLength += this.blockSize;
    }
  };

  modes.gcm.prototype.afterFinish = function(output, options) {
    var rval = true;

    // handle overflow
    if(options.decrypt && options.overflow) {
      output.truncate(this.blockSize - options.overflow);
    }

    // handle authentication tag
    this.tag = forge$h.util.createBuffer();

    // concatenate additional data length with cipher length
    var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8));

    // include lengths in hash
    this._s = this.ghash(this._hashSubkey, this._s, lengths);

    // do GCTR(J_0, S)
    var tag = [];
    this.cipher.encrypt(this._j0, tag);
    for(var i = 0; i < this._ints; ++i) {
      this.tag.putInt32(this._s[i] ^ tag[i]);
    }

    // trim tag to length
    this.tag.truncate(this.tag.length() % (this._tagLength / 8));

    // check authentication tag
    if(options.decrypt && this.tag.bytes() !== this._tag) {
      rval = false;
    }

    return rval;
  };

  /**
   * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois
   * field multiplication. The field, GF(2^128), is defined by the polynomial:
   *
   * x^128 + x^7 + x^2 + x + 1
   *
   * Which is represented in little-endian binary form as: 11100001 (0xe1). When
   * the value of a coefficient is 1, a bit is set. The value R, is the
   * concatenation of this value and 120 zero bits, yielding a 128-bit value
   * which matches the block size.
   *
   * This function will multiply two elements (vectors of bytes), X and Y, in
   * the field GF(2^128). The result is initialized to zero. For each bit of
   * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)
   * by the current value of Y. For each bit, the value of Y will be raised by
   * a power of x (multiplied by the polynomial x). This can be achieved by
   * shifting Y once to the right. If the current value of Y, prior to being
   * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.
   * Otherwise, we must divide by R after shifting to find the remainder.
   *
   * @param x the first block to multiply by the second.
   * @param y the second block to multiply by the first.
   *
   * @return the block result of the multiplication.
   */
  modes.gcm.prototype.multiply = function(x, y) {
    var z_i = [0, 0, 0, 0];
    var v_i = y.slice(0);

    // calculate Z_128 (block has 128 bits)
    for(var i = 0; i < 128; ++i) {
      // if x_i is 0, Z_{i+1} = Z_i (unchanged)
      // else Z_{i+1} = Z_i ^ V_i
      // get x_i by finding 32-bit int position, then left shift 1 by remainder
      var x_i = x[(i / 32) | 0] & (1 << (31 - i % 32));
      if(x_i) {
        z_i[0] ^= v_i[0];
        z_i[1] ^= v_i[1];
        z_i[2] ^= v_i[2];
        z_i[3] ^= v_i[3];
      }

      // if LSB(V_i) is 1, V_i = V_i >> 1
      // else V_i = (V_i >> 1) ^ R
      this.pow(v_i, v_i);
    }

    return z_i;
  };

  modes.gcm.prototype.pow = function(x, out) {
    // if LSB(x) is 1, x = x >>> 1
    // else x = (x >>> 1) ^ R
    var lsb = x[3] & 1;

    // always do x >>> 1:
    // starting with the rightmost integer, shift each integer to the right
    // one bit, pulling in the bit from the integer to the left as its top
    // most bit (do this for the last 3 integers)
    for(var i = 3; i > 0; --i) {
      out[i] = (x[i] >>> 1) | ((x[i - 1] & 1) << 31);
    }
    // shift the first integer normally
    out[0] = x[0] >>> 1;

    // if lsb was not set, then polynomial had a degree of 127 and doesn't
    // need to divided; otherwise, XOR with R to find the remainder; we only
    // need to XOR the first integer since R technically ends w/120 zero bits
    if(lsb) {
      out[0] ^= this._R;
    }
  };

  modes.gcm.prototype.tableMultiply = function(x) {
    // assumes 4-bit tables are used
    var z = [0, 0, 0, 0];
    for(var i = 0; i < 32; ++i) {
      var idx = (i / 8) | 0;
      var x_i = (x[idx] >>> ((7 - (i % 8)) * 4)) & 0xF;
      var ah = this._m[i][x_i];
      z[0] ^= ah[0];
      z[1] ^= ah[1];
      z[2] ^= ah[2];
      z[3] ^= ah[3];
    }
    return z;
  };

  /**
   * A continuing version of the GHASH algorithm that operates on a single
   * block. The hash block, last hash value (Ym) and the new block to hash
   * are given.
   *
   * @param h the hash block.
   * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.
   * @param x the block to hash.
   *
   * @return the hashed value (Ym).
   */
  modes.gcm.prototype.ghash = function(h, y, x) {
    y[0] ^= x[0];
    y[1] ^= x[1];
    y[2] ^= x[2];
    y[3] ^= x[3];
    return this.tableMultiply(y);
    //return this.multiply(y, h);
  };

  /**
   * Precomputes a table for multiplying against the hash subkey. This
   * mechanism provides a substantial speed increase over multiplication
   * performed without a table. The table-based multiplication this table is
   * for solves X * H by multiplying each component of X by H and then
   * composing the results together using XOR.
   *
   * This function can be used to generate tables with different bit sizes
   * for the components, however, this implementation assumes there are
   * 32 components of X (which is a 16 byte vector), therefore each component
   * takes 4-bits (so the table is constructed with bits=4).
   *
   * @param h the hash subkey.
   * @param bits the bit size for a component.
   */
  modes.gcm.prototype.generateHashTable = function(h, bits) {
    // TODO: There are further optimizations that would use only the
    // first table M_0 (or some variant) along with a remainder table;
    // this can be explored in the future
    var multiplier = 8 / bits;
    var perInt = 4 * multiplier;
    var size = 16 * multiplier;
    var m = new Array(size);
    for(var i = 0; i < size; ++i) {
      var tmp = [0, 0, 0, 0];
      var idx = (i / perInt) | 0;
      var shft = ((perInt - 1 - (i % perInt)) * bits);
      tmp[idx] = (1 << (bits - 1)) << shft;
      m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);
    }
    return m;
  };

  /**
   * Generates a table for multiplying against the hash subkey for one
   * particular component (out of all possible component values).
   *
   * @param mid the pre-multiplied value for the middle key of the table.
   * @param bits the bit size for a component.
   */
  modes.gcm.prototype.generateSubHashTable = function(mid, bits) {
    // compute the table quickly by minimizing the number of
    // POW operations -- they only need to be performed for powers of 2,
    // all other entries can be composed from those powers using XOR
    var size = 1 << bits;
    var half = size >>> 1;
    var m = new Array(size);
    m[half] = mid.slice(0);
    var i = half >>> 1;
    while(i > 0) {
      // raise m0[2 * i] and store in m0[i]
      this.pow(m[2 * i], m[i] = []);
      i >>= 1;
    }
    i = 2;
    while(i < half) {
      for(var j = 1; j < i; ++j) {
        var m_i = m[i];
        var m_j = m[j];
        m[i + j] = [
          m_i[0] ^ m_j[0],
          m_i[1] ^ m_j[1],
          m_i[2] ^ m_j[2],
          m_i[3] ^ m_j[3]
        ];
      }
      i *= 2;
    }
    m[0] = [0, 0, 0, 0];
    /* Note: We could avoid storing these by doing composition during multiply
    calculate top half using composition by speed is preferred. */
    for(i = half + 1; i < size; ++i) {
      var c = m[i ^ half];
      m[i] = [mid[0] ^ c[0], mid[1] ^ c[1], mid[2] ^ c[2], mid[3] ^ c[3]];
    }
    return m;
  };

  /** Utility functions */

  function transformIV(iv, blockSize) {
    if(typeof iv === 'string') {
      // convert iv string into byte buffer
      iv = forge$h.util.createBuffer(iv);
    }

    if(forge$h.util.isArray(iv) && iv.length > 4) {
      // convert iv byte array into byte buffer
      var tmp = iv;
      iv = forge$h.util.createBuffer();
      for(var i = 0; i < tmp.length; ++i) {
        iv.putByte(tmp[i]);
      }
    }

    if(iv.length() < blockSize) {
      throw new Error(
        'Invalid IV length; got ' + iv.length() +
        ' bytes and expected ' + blockSize + ' bytes.');
    }

    if(!forge$h.util.isArray(iv)) {
      // convert iv byte buffer into 32-bit integer array
      var ints = [];
      var blocks = blockSize / 4;
      for(var i = 0; i < blocks; ++i) {
        ints.push(iv.getInt32());
      }
      iv = ints;
    }

    return iv;
  }

  function inc32(block) {
    // increment last 32 bits of block only
    block[block.length - 1] = (block[block.length - 1] + 1) & 0xFFFFFFFF;
  }

  function from64To32(num) {
    // convert 64-bit number to two BE Int32s
    return [(num / 0x100000000) | 0, num & 0xFFFFFFFF];
  }

  /**
   * Advanced Encryption Standard (AES) implementation.
   *
   * This implementation is based on the public domain library 'jscrypto' which
   * was written by:
   *
   * Emily Stark (estark@stanford.edu)
   * Mike Hamburg (mhamburg@stanford.edu)
   * Dan Boneh (dabo@cs.stanford.edu)
   *
   * Parts of this code are based on the OpenSSL implementation of AES:
   * http://www.openssl.org
   *
   * @author Dave Longley
   *
   * Copyright (c) 2010-2014 Digital Bazaar, Inc.
   */

  var forge$g = forge$m;




  /* AES API */
  forge$g.aes = forge$g.aes || {};

  /**
   * Deprecated. Instead, use:
   *
   * var cipher = forge.cipher.createCipher('AES-<mode>', key);
   * cipher.start({iv: iv});
   *
   * Creates an AES cipher object to encrypt data using the given symmetric key.
   * The output will be stored in the 'output' member of the returned cipher.
   *
   * The key and iv may be given as a string of bytes, an array of bytes,
   * a byte buffer, or an array of 32-bit words.
   *
   * @param key the symmetric key to use.
   * @param iv the initialization vector to use.
   * @param output the buffer to write to, null to create one.
   * @param mode the cipher mode to use (default: 'CBC').
   *
   * @return the cipher.
   */
  forge$g.aes.startEncrypting = function(key, iv, output, mode) {
    var cipher = _createCipher$1({
      key: key,
      output: output,
      decrypt: false,
      mode: mode
    });
    cipher.start(iv);
    return cipher;
  };

  /**
   * Deprecated. Instead, use:
   *
   * var cipher = forge.cipher.createCipher('AES-<mode>', key);
   *
   * Creates an AES cipher object to encrypt data using the given symmetric key.
   *
   * The key may be given as a string of bytes, an array of bytes, a
   * byte buffer, or an array of 32-bit words.
   *
   * @param key the symmetric key to use.
   * @param mode the cipher mode to use (default: 'CBC').
   *
   * @return the cipher.
   */
  forge$g.aes.createEncryptionCipher = function(key, mode) {
    return _createCipher$1({
      key: key,
      output: null,
      decrypt: false,
      mode: mode
    });
  };

  /**
   * Deprecated. Instead, use:
   *
   * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
   * decipher.start({iv: iv});
   *
   * Creates an AES cipher object to decrypt data using the given symmetric key.
   * The output will be stored in the 'output' member of the returned cipher.
   *
   * The key and iv may be given as a string of bytes, an array of bytes,
   * a byte buffer, or an array of 32-bit words.
   *
   * @param key the symmetric key to use.
   * @param iv the initialization vector to use.
   * @param output the buffer to write to, null to create one.
   * @param mode the cipher mode to use (default: 'CBC').
   *
   * @return the cipher.
   */
  forge$g.aes.startDecrypting = function(key, iv, output, mode) {
    var cipher = _createCipher$1({
      key: key,
      output: output,
      decrypt: true,
      mode: mode
    });
    cipher.start(iv);
    return cipher;
  };

  /**
   * Deprecated. Instead, use:
   *
   * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
   *
   * Creates an AES cipher object to decrypt data using the given symmetric key.
   *
   * The key may be given as a string of bytes, an array of bytes, a
   * byte buffer, or an array of 32-bit words.
   *
   * @param key the symmetric key to use.
   * @param mode the cipher mode to use (default: 'CBC').
   *
   * @return the cipher.
   */
  forge$g.aes.createDecryptionCipher = function(key, mode) {
    return _createCipher$1({
      key: key,
      output: null,
      decrypt: true,
      mode: mode
    });
  };

  /**
   * Creates a new AES cipher algorithm object.
   *
   * @param name the name of the algorithm.
   * @param mode the mode factory function.
   *
   * @return the AES algorithm object.
   */
  forge$g.aes.Algorithm = function(name, mode) {
    if(!init) {
      initialize();
    }
    var self = this;
    self.name = name;
    self.mode = new mode({
      blockSize: 16,
      cipher: {
        encrypt: function(inBlock, outBlock) {
          return _updateBlock$1(self._w, inBlock, outBlock, false);
        },
        decrypt: function(inBlock, outBlock) {
          return _updateBlock$1(self._w, inBlock, outBlock, true);
        }
      }
    });
    self._init = false;
  };

  /**
   * Initializes this AES algorithm by expanding its key.
   *
   * @param options the options to use.
   *          key the key to use with this algorithm.
   *          decrypt true if the algorithm should be initialized for decryption,
   *            false for encryption.
   */
  forge$g.aes.Algorithm.prototype.initialize = function(options) {
    if(this._init) {
      return;
    }

    var key = options.key;
    var tmp;

    /* Note: The key may be a string of bytes, an array of bytes, a byte
      buffer, or an array of 32-bit integers. If the key is in bytes, then
      it must be 16, 24, or 32 bytes in length. If it is in 32-bit
      integers, it must be 4, 6, or 8 integers long. */

    if(typeof key === 'string' &&
      (key.length === 16 || key.length === 24 || key.length === 32)) {
      // convert key string into byte buffer
      key = forge$g.util.createBuffer(key);
    } else if(forge$g.util.isArray(key) &&
      (key.length === 16 || key.length === 24 || key.length === 32)) {
      // convert key integer array into byte buffer
      tmp = key;
      key = forge$g.util.createBuffer();
      for(var i = 0; i < tmp.length; ++i) {
        key.putByte(tmp[i]);
      }
    }

    // convert key byte buffer into 32-bit integer array
    if(!forge$g.util.isArray(key)) {
      tmp = key;
      key = [];

      // key lengths of 16, 24, 32 bytes allowed
      var len = tmp.length();
      if(len === 16 || len === 24 || len === 32) {
        len = len >>> 2;
        for(var i = 0; i < len; ++i) {
          key.push(tmp.getInt32());
        }
      }
    }

    // key must be an array of 32-bit integers by now
    if(!forge$g.util.isArray(key) ||
      !(key.length === 4 || key.length === 6 || key.length === 8)) {
      throw new Error('Invalid key parameter.');
    }

    // encryption operation is always used for these modes
    var mode = this.mode.name;
    var encryptOp = (['CFB', 'OFB', 'CTR', 'GCM'].indexOf(mode) !== -1);

    // do key expansion
    this._w = _expandKey(key, options.decrypt && !encryptOp);
    this._init = true;
  };

  /**
   * Expands a key. Typically only used for testing.
   *
   * @param key the symmetric key to expand, as an array of 32-bit words.
   * @param decrypt true to expand for decryption, false for encryption.
   *
   * @return the expanded key.
   */
  forge$g.aes._expandKey = function(key, decrypt) {
    if(!init) {
      initialize();
    }
    return _expandKey(key, decrypt);
  };

  /**
   * Updates a single block. Typically only used for testing.
   *
   * @param w the expanded key to use.
   * @param input an array of block-size 32-bit words.
   * @param output an array of block-size 32-bit words.
   * @param decrypt true to decrypt, false to encrypt.
   */
  forge$g.aes._updateBlock = _updateBlock$1;

  /** Register AES algorithms **/

  registerAlgorithm$1('AES-ECB', forge$g.cipher.modes.ecb);
  registerAlgorithm$1('AES-CBC', forge$g.cipher.modes.cbc);
  registerAlgorithm$1('AES-CFB', forge$g.cipher.modes.cfb);
  registerAlgorithm$1('AES-OFB', forge$g.cipher.modes.ofb);
  registerAlgorithm$1('AES-CTR', forge$g.cipher.modes.ctr);
  registerAlgorithm$1('AES-GCM', forge$g.cipher.modes.gcm);

  function registerAlgorithm$1(name, mode) {
    var factory = function() {
      return new forge$g.aes.Algorithm(name, mode);
    };
    forge$g.cipher.registerAlgorithm(name, factory);
  }

  /** AES implementation **/

  var init = false; // not yet initialized
  var Nb = 4;       // number of words comprising the state (AES = 4)
  var sbox;         // non-linear substitution table used in key expansion
  var isbox;        // inversion of sbox
  var rcon;         // round constant word array
  var mix;          // mix-columns table
  var imix;         // inverse mix-columns table

  /**
   * Performs initialization, ie: precomputes tables to optimize for speed.
   *
   * One way to understand how AES works is to imagine that 'addition' and
   * 'multiplication' are interfaces that require certain mathematical
   * properties to hold true (ie: they are associative) but they might have
   * different implementations and produce different kinds of results ...
   * provided that their mathematical properties remain true. AES defines
   * its own methods of addition and multiplication but keeps some important
   * properties the same, ie: associativity and distributivity. The
   * explanation below tries to shed some light on how AES defines addition
   * and multiplication of bytes and 32-bit words in order to perform its
   * encryption and decryption algorithms.
   *
   * The basics:
   *
   * The AES algorithm views bytes as binary representations of polynomials
   * that have either 1 or 0 as the coefficients. It defines the addition
   * or subtraction of two bytes as the XOR operation. It also defines the
   * multiplication of two bytes as a finite field referred to as GF(2^8)
   * (Note: 'GF' means "Galois Field" which is a field that contains a finite
   * number of elements so GF(2^8) has 256 elements).
   *
   * This means that any two bytes can be represented as binary polynomials;
   * when they multiplied together and modularly reduced by an irreducible
   * polynomial of the 8th degree, the results are the field GF(2^8). The
   * specific irreducible polynomial that AES uses in hexadecimal is 0x11b.
   * This multiplication is associative with 0x01 as the identity:
   *
   * (b * 0x01 = GF(b, 0x01) = b).
   *
   * The operation GF(b, 0x02) can be performed at the byte level by left
   * shifting b once and then XOR'ing it (to perform the modular reduction)
   * with 0x11b if b is >= 128. Repeated application of the multiplication
   * of 0x02 can be used to implement the multiplication of any two bytes.
   *
   * For instance, multiplying 0x57 and 0x13, denoted as GF(0x57, 0x13), can
   * be performed by factoring 0x13 into 0x01, 0x02, and 0x10. Then these
   * factors can each be multiplied by 0x57 and then added together. To do
   * the multiplication, values for 0x57 multiplied by each of these 3 factors
   * can be precomputed and stored in a table. To add them, the values from
   * the table are XOR'd together.
   *
   * AES also defines addition and multiplication of words, that is 4-byte
   * numbers represented as polynomials of 3 degrees where the coefficients
   * are the values of the bytes.
   *
   * The word [a0, a1, a2, a3] is a polynomial a3x^3 + a2x^2 + a1x + a0.
   *
   * Addition is performed by XOR'ing like powers of x. Multiplication
   * is performed in two steps, the first is an algebriac expansion as
   * you would do normally (where addition is XOR). But the result is
   * a polynomial larger than 3 degrees and thus it cannot fit in a word. So
   * next the result is modularly reduced by an AES-specific polynomial of
   * degree 4 which will always produce a polynomial of less than 4 degrees
   * such that it will fit in a word. In AES, this polynomial is x^4 + 1.
   *
   * The modular product of two polynomials 'a' and 'b' is thus:
   *
   * d(x) = d3x^3 + d2x^2 + d1x + d0
   * with
   * d0 = GF(a0, b0) ^ GF(a3, b1) ^ GF(a2, b2) ^ GF(a1, b3)
   * d1 = GF(a1, b0) ^ GF(a0, b1) ^ GF(a3, b2) ^ GF(a2, b3)
   * d2 = GF(a2, b0) ^ GF(a1, b1) ^ GF(a0, b2) ^ GF(a3, b3)
   * d3 = GF(a3, b0) ^ GF(a2, b1) ^ GF(a1, b2) ^ GF(a0, b3)
   *
   * As a matrix:
   *
   * [d0] = [a0 a3 a2 a1][b0]
   * [d1]   [a1 a0 a3 a2][b1]
   * [d2]   [a2 a1 a0 a3][b2]
   * [d3]   [a3 a2 a1 a0][b3]
   *
   * Special polynomials defined by AES (0x02 == {02}):
   * a(x)    = {03}x^3 + {01}x^2 + {01}x + {02}
   * a^-1(x) = {0b}x^3 + {0d}x^2 + {09}x + {0e}.
   *
   * These polynomials are used in the MixColumns() and InverseMixColumns()
   * operations, respectively, to cause each element in the state to affect
   * the output (referred to as diffusing).
   *
   * RotWord() uses: a0 = a1 = a2 = {00} and a3 = {01}, which is the
   * polynomial x3.
   *
   * The ShiftRows() method modifies the last 3 rows in the state (where
   * the state is 4 words with 4 bytes per word) by shifting bytes cyclically.
   * The 1st byte in the second row is moved to the end of the row. The 1st
   * and 2nd bytes in the third row are moved to the end of the row. The 1st,
   * 2nd, and 3rd bytes are moved in the fourth row.
   *
   * More details on how AES arithmetic works:
   *
   * In the polynomial representation of binary numbers, XOR performs addition
   * and subtraction and multiplication in GF(2^8) denoted as GF(a, b)
   * corresponds with the multiplication of polynomials modulo an irreducible
   * polynomial of degree 8. In other words, for AES, GF(a, b) will multiply
   * polynomial 'a' with polynomial 'b' and then do a modular reduction by
   * an AES-specific irreducible polynomial of degree 8.
   *
   * A polynomial is irreducible if its only divisors are one and itself. For
   * the AES algorithm, this irreducible polynomial is:
   *
   * m(x) = x^8 + x^4 + x^3 + x + 1,
   *
   * or {01}{1b} in hexadecimal notation, where each coefficient is a bit:
   * 100011011 = 283 = 0x11b.
   *
   * For example, GF(0x57, 0x83) = 0xc1 because
   *
   * 0x57 = 87  = 01010111 = x^6 + x^4 + x^2 + x + 1
   * 0x85 = 131 = 10000101 = x^7 + x + 1
   *
   * (x^6 + x^4 + x^2 + x + 1) * (x^7 + x + 1)
   * =  x^13 + x^11 + x^9 + x^8 + x^7 +
   *    x^7 + x^5 + x^3 + x^2 + x +
   *    x^6 + x^4 + x^2 + x + 1
   * =  x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1 = y
   *    y modulo (x^8 + x^4 + x^3 + x + 1)
   * =  x^7 + x^6 + 1.
   *
   * The modular reduction by m(x) guarantees the result will be a binary
   * polynomial of less than degree 8, so that it can fit in a byte.
   *
   * The operation to multiply a binary polynomial b with x (the polynomial
   * x in binary representation is 00000010) is:
   *
   * b_7x^8 + b_6x^7 + b_5x^6 + b_4x^5 + b_3x^4 + b_2x^3 + b_1x^2 + b_0x^1
   *
   * To get GF(b, x) we must reduce that by m(x). If b_7 is 0 (that is the
   * most significant bit is 0 in b) then the result is already reduced. If
   * it is 1, then we can reduce it by subtracting m(x) via an XOR.
   *
   * It follows that multiplication by x (00000010 or 0x02) can be implemented
   * by performing a left shift followed by a conditional bitwise XOR with
   * 0x1b. This operation on bytes is denoted by xtime(). Multiplication by
   * higher powers of x can be implemented by repeated application of xtime().
   *
   * By adding intermediate results, multiplication by any constant can be
   * implemented. For instance:
   *
   * GF(0x57, 0x13) = 0xfe because:
   *
   * xtime(b) = (b & 128) ? (b << 1 ^ 0x11b) : (b << 1)
   *
   * Note: We XOR with 0x11b instead of 0x1b because in javascript our
   * datatype for b can be larger than 1 byte, so a left shift will not
   * automatically eliminate bits that overflow a byte ... by XOR'ing the
   * overflow bit with 1 (the extra one from 0x11b) we zero it out.
   *
   * GF(0x57, 0x02) = xtime(0x57) = 0xae
   * GF(0x57, 0x04) = xtime(0xae) = 0x47
   * GF(0x57, 0x08) = xtime(0x47) = 0x8e
   * GF(0x57, 0x10) = xtime(0x8e) = 0x07
   *
   * GF(0x57, 0x13) = GF(0x57, (0x01 ^ 0x02 ^ 0x10))
   *
   * And by the distributive property (since XOR is addition and GF() is
   * multiplication):
   *
   * = GF(0x57, 0x01) ^ GF(0x57, 0x02) ^ GF(0x57, 0x10)
   * = 0x57 ^ 0xae ^ 0x07
   * = 0xfe.
   */
  function initialize() {
    init = true;

    /* Populate the Rcon table. These are the values given by
      [x^(i-1),{00},{00},{00}] where x^(i-1) are powers of x (and x = 0x02)
      in the field of GF(2^8), where i starts at 1.

      rcon[0] = [0x00, 0x00, 0x00, 0x00]
      rcon[1] = [0x01, 0x00, 0x00, 0x00] 2^(1-1) = 2^0 = 1
      rcon[2] = [0x02, 0x00, 0x00, 0x00] 2^(2-1) = 2^1 = 2
      ...
      rcon[9]  = [0x1B, 0x00, 0x00, 0x00] 2^(9-1)  = 2^8 = 0x1B
      rcon[10] = [0x36, 0x00, 0x00, 0x00] 2^(10-1) = 2^9 = 0x36

      We only store the first byte because it is the only one used.
    */
    rcon = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36];

    // compute xtime table which maps i onto GF(i, 0x02)
    var xtime = new Array(256);
    for(var i = 0; i < 128; ++i) {
      xtime[i] = i << 1;
      xtime[i + 128] = (i + 128) << 1 ^ 0x11B;
    }

    // compute all other tables
    sbox = new Array(256);
    isbox = new Array(256);
    mix = new Array(4);
    imix = new Array(4);
    for(var i = 0; i < 4; ++i) {
      mix[i] = new Array(256);
      imix[i] = new Array(256);
    }
    var e = 0, ei = 0, e2, e4, e8, sx, sx2, me, ime;
    for(var i = 0; i < 256; ++i) {
      /* We need to generate the SubBytes() sbox and isbox tables so that
        we can perform byte substitutions. This requires us to traverse
        all of the elements in GF, find their multiplicative inverses,
        and apply to each the following affine transformation:

        bi' = bi ^ b(i + 4) mod 8 ^ b(i + 5) mod 8 ^ b(i + 6) mod 8 ^
              b(i + 7) mod 8 ^ ci
        for 0 <= i < 8, where bi is the ith bit of the byte, and ci is the
        ith bit of a byte c with the value {63} or {01100011}.

        It is possible to traverse every possible value in a Galois field
        using what is referred to as a 'generator'. There are many
        generators (128 out of 256): 3,5,6,9,11,82 to name a few. To fully
        traverse GF we iterate 255 times, multiplying by our generator
        each time.

        On each iteration we can determine the multiplicative inverse for
        the current element.

        Suppose there is an element in GF 'e'. For a given generator 'g',
        e = g^x. The multiplicative inverse of e is g^(255 - x). It turns
        out that if use the inverse of a generator as another generator
        it will produce all of the corresponding multiplicative inverses
        at the same time. For this reason, we choose 5 as our inverse
        generator because it only requires 2 multiplies and 1 add and its
        inverse, 82, requires relatively few operations as well.

        In order to apply the affine transformation, the multiplicative
        inverse 'ei' of 'e' can be repeatedly XOR'd (4 times) with a
        bit-cycling of 'ei'. To do this 'ei' is first stored in 's' and
        'x'. Then 's' is left shifted and the high bit of 's' is made the
        low bit. The resulting value is stored in 's'. Then 'x' is XOR'd
        with 's' and stored in 'x'. On each subsequent iteration the same
        operation is performed. When 4 iterations are complete, 'x' is
        XOR'd with 'c' (0x63) and the transformed value is stored in 'x'.
        For example:

        s = 01000001
        x = 01000001

        iteration 1: s = 10000010, x ^= s
        iteration 2: s = 00000101, x ^= s
        iteration 3: s = 00001010, x ^= s
        iteration 4: s = 00010100, x ^= s
        x ^= 0x63

        This can be done with a loop where s = (s << 1) | (s >> 7). However,
        it can also be done by using a single 16-bit (in this case 32-bit)
        number 'sx'. Since XOR is an associative operation, we can set 'sx'
        to 'ei' and then XOR it with 'sx' left-shifted 1,2,3, and 4 times.
        The most significant bits will flow into the high 8 bit positions
        and be correctly XOR'd with one another. All that remains will be
        to cycle the high 8 bits by XOR'ing them all with the lower 8 bits
        afterwards.

        At the same time we're populating sbox and isbox we can precompute
        the multiplication we'll need to do to do MixColumns() later.
      */

      // apply affine transformation
      sx = ei ^ (ei << 1) ^ (ei << 2) ^ (ei << 3) ^ (ei << 4);
      sx = (sx >> 8) ^ (sx & 255) ^ 0x63;

      // update tables
      sbox[e] = sx;
      isbox[sx] = e;

      /* Mixing columns is done using matrix multiplication. The columns
        that are to be mixed are each a single word in the current state.
        The state has Nb columns (4 columns). Therefore each column is a
        4 byte word. So to mix the columns in a single column 'c' where
        its rows are r0, r1, r2, and r3, we use the following matrix
        multiplication:

        [2 3 1 1]*[r0,c]=[r'0,c]
        [1 2 3 1] [r1,c] [r'1,c]
        [1 1 2 3] [r2,c] [r'2,c]
        [3 1 1 2] [r3,c] [r'3,c]

        r0, r1, r2, and r3 are each 1 byte of one of the words in the
        state (a column). To do matrix multiplication for each mixed
        column c' we multiply the corresponding row from the left matrix
        with the corresponding column from the right matrix. In total, we
        get 4 equations:

        r0,c' = 2*r0,c + 3*r1,c + 1*r2,c + 1*r3,c
        r1,c' = 1*r0,c + 2*r1,c + 3*r2,c + 1*r3,c
        r2,c' = 1*r0,c + 1*r1,c + 2*r2,c + 3*r3,c
        r3,c' = 3*r0,c + 1*r1,c + 1*r2,c + 2*r3,c

        As usual, the multiplication is as previously defined and the
        addition is XOR. In order to optimize mixing columns we can store
        the multiplication results in tables. If you think of the whole
        column as a word (it might help to visualize by mentally rotating
        the equations above by counterclockwise 90 degrees) then you can
        see that it would be useful to map the multiplications performed on
        each byte (r0, r1, r2, r3) onto a word as well. For instance, we
        could map 2*r0,1*r0,1*r0,3*r0 onto a word by storing 2*r0 in the
        highest 8 bits and 3*r0 in the lowest 8 bits (with the other two
        respectively in the middle). This means that a table can be
        constructed that uses r0 as an index to the word. We can do the
        same with r1, r2, and r3, creating a total of 4 tables.

        To construct a full c', we can just look up each byte of c in
        their respective tables and XOR the results together.

        Also, to build each table we only have to calculate the word
        for 2,1,1,3 for every byte ... which we can do on each iteration
        of this loop since we will iterate over every byte. After we have
        calculated 2,1,1,3 we can get the results for the other tables
        by cycling the byte at the end to the beginning. For instance
        we can take the result of table 2,1,1,3 and produce table 3,2,1,1
        by moving the right most byte to the left most position just like
        how you can imagine the 3 moved out of 2,1,1,3 and to the front
        to produce 3,2,1,1.

        There is another optimization in that the same multiples of
        the current element we need in order to advance our generator
        to the next iteration can be reused in performing the 2,1,1,3
        calculation. We also calculate the inverse mix column tables,
        with e,9,d,b being the inverse of 2,1,1,3.

        When we're done, and we need to actually mix columns, the first
        byte of each state word should be put through mix[0] (2,1,1,3),
        the second through mix[1] (3,2,1,1) and so forth. Then they should
        be XOR'd together to produce the fully mixed column.
      */

      // calculate mix and imix table values
      sx2 = xtime[sx];
      e2 = xtime[e];
      e4 = xtime[e2];
      e8 = xtime[e4];
      me =
        (sx2 << 24) ^  // 2
        (sx << 16) ^   // 1
        (sx << 8) ^    // 1
        (sx ^ sx2);    // 3
      ime =
        (e2 ^ e4 ^ e8) << 24 ^  // E (14)
        (e ^ e8) << 16 ^        // 9
        (e ^ e4 ^ e8) << 8 ^    // D (13)
        (e ^ e2 ^ e8);          // B (11)
      // produce each of the mix tables by rotating the 2,1,1,3 value
      for(var n = 0; n < 4; ++n) {
        mix[n][e] = me;
        imix[n][sx] = ime;
        // cycle the right most byte to the left most position
        // ie: 2,1,1,3 becomes 3,2,1,1
        me = me << 24 | me >>> 8;
        ime = ime << 24 | ime >>> 8;
      }

      // get next element and inverse
      if(e === 0) {
        // 1 is the inverse of 1
        e = ei = 1;
      } else {
        // e = 2e + 2*2*2*(10e)) = multiply e by 82 (chosen generator)
        // ei = ei + 2*2*ei = multiply ei by 5 (inverse generator)
        e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];
        ei ^= xtime[xtime[ei]];
      }
    }
  }

  /**
   * Generates a key schedule using the AES key expansion algorithm.
   *
   * The AES algorithm takes the Cipher Key, K, and performs a Key Expansion
   * routine to generate a key schedule. The Key Expansion generates a total
   * of Nb*(Nr + 1) words: the algorithm requires an initial set of Nb words,
   * and each of the Nr rounds requires Nb words of key data. The resulting
   * key schedule consists of a linear array of 4-byte words, denoted [wi ],
   * with i in the range 0 <= i < Nb(Nr + 1).
   *
   * KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk)
   * AES-128 (Nb=4, Nk=4, Nr=10)
   * AES-192 (Nb=4, Nk=6, Nr=12)
   * AES-256 (Nb=4, Nk=8, Nr=14)
   * Note: Nr=Nk+6.
   *
   * Nb is the number of columns (32-bit words) comprising the State (or
   * number of bytes in a block). For AES, Nb=4.
   *
   * @param key the key to schedule (as an array of 32-bit words).
   * @param decrypt true to modify the key schedule to decrypt, false not to.
   *
   * @return the generated key schedule.
   */
  function _expandKey(key, decrypt) {
    // copy the key's words to initialize the key schedule
    var w = key.slice(0);

    /* RotWord() will rotate a word, moving the first byte to the last
      byte's position (shifting the other bytes left).

      We will be getting the value of Rcon at i / Nk. 'i' will iterate
      from Nk to (Nb * Nr+1). Nk = 4 (4 byte key), Nb = 4 (4 words in
      a block), Nr = Nk + 6 (10). Therefore 'i' will iterate from
      4 to 44 (exclusive). Each time we iterate 4 times, i / Nk will
      increase by 1. We use a counter iNk to keep track of this.
     */

    // go through the rounds expanding the key
    var temp, iNk = 1;
    var Nk = w.length;
    var Nr1 = Nk + 6 + 1;
    var end = Nb * Nr1;
    for(var i = Nk; i < end; ++i) {
      temp = w[i - 1];
      if(i % Nk === 0) {
        // temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk]
        temp =
          sbox[temp >>> 16 & 255] << 24 ^
          sbox[temp >>> 8 & 255] << 16 ^
          sbox[temp & 255] << 8 ^
          sbox[temp >>> 24] ^ (rcon[iNk] << 24);
        iNk++;
      } else if(Nk > 6 && (i % Nk === 4)) {
        // temp = SubWord(temp)
        temp =
          sbox[temp >>> 24] << 24 ^
          sbox[temp >>> 16 & 255] << 16 ^
          sbox[temp >>> 8 & 255] << 8 ^
          sbox[temp & 255];
      }
      w[i] = w[i - Nk] ^ temp;
    }

    /* When we are updating a cipher block we always use the code path for
       encryption whether we are decrypting or not (to shorten code and
       simplify the generation of look up tables). However, because there
       are differences in the decryption algorithm, other than just swapping
       in different look up tables, we must transform our key schedule to
       account for these changes:

       1. The decryption algorithm gets its key rounds in reverse order.
       2. The decryption algorithm adds the round key before mixing columns
         instead of afterwards.

       We don't need to modify our key schedule to handle the first case,
       we can just traverse the key schedule in reverse order when decrypting.

       The second case requires a little work.

       The tables we built for performing rounds will take an input and then
       perform SubBytes() and MixColumns() or, for the decrypt version,
       InvSubBytes() and InvMixColumns(). But the decrypt algorithm requires
       us to AddRoundKey() before InvMixColumns(). This means we'll need to
       apply some transformations to the round key to inverse-mix its columns
       so they'll be correct for moving AddRoundKey() to after the state has
       had its columns inverse-mixed.

       To inverse-mix the columns of the state when we're decrypting we use a
       lookup table that will apply InvSubBytes() and InvMixColumns() at the
       same time. However, the round key's bytes are not inverse-substituted
       in the decryption algorithm. To get around this problem, we can first
       substitute the bytes in the round key so that when we apply the
       transformation via the InvSubBytes()+InvMixColumns() table, it will
       undo our substitution leaving us with the original value that we
       want -- and then inverse-mix that value.

       This change will correctly alter our key schedule so that we can XOR
       each round key with our already transformed decryption state. This
       allows us to use the same code path as the encryption algorithm.

       We make one more change to the decryption key. Since the decryption
       algorithm runs in reverse from the encryption algorithm, we reverse
       the order of the round keys to avoid having to iterate over the key
       schedule backwards when running the encryption algorithm later in
       decryption mode. In addition to reversing the order of the round keys,
       we also swap each round key's 2nd and 4th rows. See the comments
       section where rounds are performed for more details about why this is
       done. These changes are done inline with the other substitution
       described above.
    */
    if(decrypt) {
      var tmp;
      var m0 = imix[0];
      var m1 = imix[1];
      var m2 = imix[2];
      var m3 = imix[3];
      var wnew = w.slice(0);
      end = w.length;
      for(var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb) {
        // do not sub the first or last round key (round keys are Nb
        // words) as no column mixing is performed before they are added,
        // but do change the key order
        if(i === 0 || i === (end - Nb)) {
          wnew[i] = w[wi];
          wnew[i + 1] = w[wi + 3];
          wnew[i + 2] = w[wi + 2];
          wnew[i + 3] = w[wi + 1];
        } else {
          // substitute each round key byte because the inverse-mix
          // table will inverse-substitute it (effectively cancel the
          // substitution because round key bytes aren't sub'd in
          // decryption mode) and swap indexes 3 and 1
          for(var n = 0; n < Nb; ++n) {
            tmp = w[wi + n];
            wnew[i + (3&-n)] =
              m0[sbox[tmp >>> 24]] ^
              m1[sbox[tmp >>> 16 & 255]] ^
              m2[sbox[tmp >>> 8 & 255]] ^
              m3[sbox[tmp & 255]];
          }
        }
      }
      w = wnew;
    }

    return w;
  }

  /**
   * Updates a single block (16 bytes) using AES. The update will either
   * encrypt or decrypt the block.
   *
   * @param w the key schedule.
   * @param input the input block (an array of 32-bit words).
   * @param output the updated output block.
   * @param decrypt true to decrypt the block, false to encrypt it.
   */
  function _updateBlock$1(w, input, output, decrypt) {
    /*
    Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
    begin
      byte state[4,Nb]
      state = in
      AddRoundKey(state, w[0, Nb-1])
      for round = 1 step 1 to Nr-1
        SubBytes(state)
        ShiftRows(state)
        MixColumns(state)
        AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
      end for
      SubBytes(state)
      ShiftRows(state)
      AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
      out = state
    end

    InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
    begin
      byte state[4,Nb]
      state = in
      AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
      for round = Nr-1 step -1 downto 1
        InvShiftRows(state)
        InvSubBytes(state)
        AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
        InvMixColumns(state)
      end for
      InvShiftRows(state)
      InvSubBytes(state)
      AddRoundKey(state, w[0, Nb-1])
      out = state
    end
    */

    // Encrypt: AddRoundKey(state, w[0, Nb-1])
    // Decrypt: AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    var Nr = w.length / 4 - 1;
    var m0, m1, m2, m3, sub;
    if(decrypt) {
      m0 = imix[0];
      m1 = imix[1];
      m2 = imix[2];
      m3 = imix[3];
      sub = isbox;
    } else {
      m0 = mix[0];
      m1 = mix[1];
      m2 = mix[2];
      m3 = mix[3];
      sub = sbox;
    }
    var a, b, c, d, a2, b2, c2;
    a = input[0] ^ w[0];
    b = input[decrypt ? 3 : 1] ^ w[1];
    c = input[2] ^ w[2];
    d = input[decrypt ? 1 : 3] ^ w[3];
    var i = 3;

    /* In order to share code we follow the encryption algorithm when both
      encrypting and decrypting. To account for the changes required in the
      decryption algorithm, we use different lookup tables when decrypting
      and use a modified key schedule to account for the difference in the
      order of transformations applied when performing rounds. We also get
      key rounds in reverse order (relative to encryption). */
    for(var round = 1; round < Nr; ++round) {
      /* As described above, we'll be using table lookups to perform the
        column mixing. Each column is stored as a word in the state (the
        array 'input' has one column as a word at each index). In order to
        mix a column, we perform these transformations on each row in c,
        which is 1 byte in each word. The new column for c0 is c'0:

                 m0      m1      m2      m3
        r0,c'0 = 2*r0,c0 + 3*r1,c0 + 1*r2,c0 + 1*r3,c0
        r1,c'0 = 1*r0,c0 + 2*r1,c0 + 3*r2,c0 + 1*r3,c0
        r2,c'0 = 1*r0,c0 + 1*r1,c0 + 2*r2,c0 + 3*r3,c0
        r3,c'0 = 3*r0,c0 + 1*r1,c0 + 1*r2,c0 + 2*r3,c0

        So using mix tables where c0 is a word with r0 being its upper
        8 bits and r3 being its lower 8 bits:

        m0[c0 >> 24] will yield this word: [2*r0,1*r0,1*r0,3*r0]
        ...
        m3[c0 & 255] will yield this word: [1*r3,1*r3,3*r3,2*r3]

        Therefore to mix the columns in each word in the state we
        do the following (& 255 omitted for brevity):
        c'0,r0 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
        c'0,r1 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
        c'0,r2 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
        c'0,r3 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]

        However, before mixing, the algorithm requires us to perform
        ShiftRows(). The ShiftRows() transformation cyclically shifts the
        last 3 rows of the state over different offsets. The first row
        (r = 0) is not shifted.

        s'_r,c = s_r,(c + shift(r, Nb) mod Nb
        for 0 < r < 4 and 0 <= c < Nb and
        shift(1, 4) = 1
        shift(2, 4) = 2
        shift(3, 4) = 3.

        This causes the first byte in r = 1 to be moved to the end of
        the row, the first 2 bytes in r = 2 to be moved to the end of
        the row, the first 3 bytes in r = 3 to be moved to the end of
        the row:

        r1: [c0 c1 c2 c3] => [c1 c2 c3 c0]
        r2: [c0 c1 c2 c3]    [c2 c3 c0 c1]
        r3: [c0 c1 c2 c3]    [c3 c0 c1 c2]

        We can make these substitutions inline with our column mixing to
        generate an updated set of equations to produce each word in the
        state (note the columns have changed positions):

        c0 c1 c2 c3 => c0 c1 c2 c3
        c0 c1 c2 c3    c1 c2 c3 c0  (cycled 1 byte)
        c0 c1 c2 c3    c2 c3 c0 c1  (cycled 2 bytes)
        c0 c1 c2 c3    c3 c0 c1 c2  (cycled 3 bytes)

        Therefore:

        c'0 = 2*r0,c0 + 3*r1,c1 + 1*r2,c2 + 1*r3,c3
        c'0 = 1*r0,c0 + 2*r1,c1 + 3*r2,c2 + 1*r3,c3
        c'0 = 1*r0,c0 + 1*r1,c1 + 2*r2,c2 + 3*r3,c3
        c'0 = 3*r0,c0 + 1*r1,c1 + 1*r2,c2 + 2*r3,c3

        c'1 = 2*r0,c1 + 3*r1,c2 + 1*r2,c3 + 1*r3,c0
        c'1 = 1*r0,c1 + 2*r1,c2 + 3*r2,c3 + 1*r3,c0
        c'1 = 1*r0,c1 + 1*r1,c2 + 2*r2,c3 + 3*r3,c0
        c'1 = 3*r0,c1 + 1*r1,c2 + 1*r2,c3 + 2*r3,c0

        ... and so forth for c'2 and c'3. The important distinction is
        that the columns are cycling, with c0 being used with the m0
        map when calculating c0, but c1 being used with the m0 map when
        calculating c1 ... and so forth.

        When performing the inverse we transform the mirror image and
        skip the bottom row, instead of the top one, and move upwards:

        c3 c2 c1 c0 => c0 c3 c2 c1  (cycled 3 bytes) *same as encryption
        c3 c2 c1 c0    c1 c0 c3 c2  (cycled 2 bytes)
        c3 c2 c1 c0    c2 c1 c0 c3  (cycled 1 byte)  *same as encryption
        c3 c2 c1 c0    c3 c2 c1 c0

        If you compare the resulting matrices for ShiftRows()+MixColumns()
        and for InvShiftRows()+InvMixColumns() the 2nd and 4th columns are
        different (in encrypt mode vs. decrypt mode). So in order to use
        the same code to handle both encryption and decryption, we will
        need to do some mapping.

        If in encryption mode we let a=c0, b=c1, c=c2, d=c3, and r<N> be
        a row number in the state, then the resulting matrix in encryption
        mode for applying the above transformations would be:

        r1: a b c d
        r2: b c d a
        r3: c d a b
        r4: d a b c

        If we did the same in decryption mode we would get:

        r1: a d c b
        r2: b a d c
        r3: c b a d
        r4: d c b a

        If instead we swap d and b (set b=c3 and d=c1), then we get:

        r1: a b c d
        r2: d a b c
        r3: c d a b
        r4: b c d a

        Now the 1st and 3rd rows are the same as the encryption matrix. All
        we need to do then to make the mapping exactly the same is to swap
        the 2nd and 4th rows when in decryption mode. To do this without
        having to do it on each iteration, we swapped the 2nd and 4th rows
        in the decryption key schedule. We also have to do the swap above
        when we first pull in the input and when we set the final output. */
      a2 =
        m0[a >>> 24] ^
        m1[b >>> 16 & 255] ^
        m2[c >>> 8 & 255] ^
        m3[d & 255] ^ w[++i];
      b2 =
        m0[b >>> 24] ^
        m1[c >>> 16 & 255] ^
        m2[d >>> 8 & 255] ^
        m3[a & 255] ^ w[++i];
      c2 =
        m0[c >>> 24] ^
        m1[d >>> 16 & 255] ^
        m2[a >>> 8 & 255] ^
        m3[b & 255] ^ w[++i];
      d =
        m0[d >>> 24] ^
        m1[a >>> 16 & 255] ^
        m2[b >>> 8 & 255] ^
        m3[c & 255] ^ w[++i];
      a = a2;
      b = b2;
      c = c2;
    }

    /*
      Encrypt:
      SubBytes(state)
      ShiftRows(state)
      AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])

      Decrypt:
      InvShiftRows(state)
      InvSubBytes(state)
      AddRoundKey(state, w[0, Nb-1])
     */
    // Note: rows are shifted inline
    output[0] =
      (sub[a >>> 24] << 24) ^
      (sub[b >>> 16 & 255] << 16) ^
      (sub[c >>> 8 & 255] << 8) ^
      (sub[d & 255]) ^ w[++i];
    output[decrypt ? 3 : 1] =
      (sub[b >>> 24] << 24) ^
      (sub[c >>> 16 & 255] << 16) ^
      (sub[d >>> 8 & 255] << 8) ^
      (sub[a & 255]) ^ w[++i];
    output[2] =
      (sub[c >>> 24] << 24) ^
      (sub[d >>> 16 & 255] << 16) ^
      (sub[a >>> 8 & 255] << 8) ^
      (sub[b & 255]) ^ w[++i];
    output[decrypt ? 1 : 3] =
      (sub[d >>> 24] << 24) ^
      (sub[a >>> 16 & 255] << 16) ^
      (sub[b >>> 8 & 255] << 8) ^
      (sub[c & 255]) ^ w[++i];
  }

  /**
   * Deprecated. Instead, use:
   *
   * forge.cipher.createCipher('AES-<mode>', key);
   * forge.cipher.createDecipher('AES-<mode>', key);
   *
   * Creates a deprecated AES cipher object. This object's mode will default to
   * CBC (cipher-block-chaining).
   *
   * The key and iv may be given as a string of bytes, an array of bytes, a
   * byte buffer, or an array of 32-bit words.
   *
   * @param options the options to use.
   *          key the symmetric key to use.
   *          output the buffer to write to.
   *          decrypt true for decryption, false for encryption.
   *          mode the cipher mode to use (default: 'CBC').
   *
   * @return the cipher.
   */
  function _createCipher$1(options) {
    options = options || {};
    var mode = (options.mode || 'CBC').toUpperCase();
    var algorithm = 'AES-' + mode;

    var cipher;
    if(options.decrypt) {
      cipher = forge$g.cipher.createDecipher(algorithm, options.key);
    } else {
      cipher = forge$g.cipher.createCipher(algorithm, options.key);
    }

    // backwards compatible start API
    var start = cipher.start;
    cipher.start = function(iv, options) {
      // backwards compatibility: support second arg as output buffer
      var output = null;
      if(options instanceof forge$g.util.ByteBuffer) {
        output = options;
        options = {};
      }
      options = options || {};
      options.output = output;
      options.iv = iv;
      start.call(cipher, options);
    };

    return cipher;
  }

  /**
   * DES (Data Encryption Standard) implementation.
   *
   * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.
   * It is based on the BSD-licensed implementation by Paul Tero:
   *
   * Paul Tero, July 2001
   * http://www.tero.co.uk/des/
   *
   * Optimised for performance with large blocks by
   * Michael Hayworth, November 2001
   * http://www.netdealing.com
   *
   * THIS SOFTWARE IS PROVIDED "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
   * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
   * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
   * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
   * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
   * SUCH DAMAGE.
   *
   * @author Stefan Siegl
   * @author Dave Longley
   *
   * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
   * Copyright (c) 2012-2014 Digital Bazaar, Inc.
   */

  var forge$f = forge$m;




  /* DES API */
  forge$f.des = forge$f.des || {};

  /**
   * Deprecated. Instead, use:
   *
   * var cipher = forge.cipher.createCipher('DES-<mode>', key);
   * cipher.start({iv: iv});
   *
   * Creates an DES cipher object to encrypt data using the given symmetric key.
   * The output will be stored in the 'output' member of the returned cipher.
   *
   * The key and iv may be given as binary-encoded strings of bytes or
   * byte buffers.
   *
   * @param key the symmetric key to use (64 or 192 bits).
   * @param iv the initialization vector to use.
   * @param output the buffer to write to, null to create one.
   * @param mode the cipher mode to use (default: 'CBC' if IV is
   *          given, 'ECB' if null).
   *
   * @return the cipher.
   */
  forge$f.des.startEncrypting = function(key, iv, output, mode) {
    var cipher = _createCipher({
      key: key,
      output: output,
      decrypt: false,
      mode: mode || (iv === null ? 'ECB' : 'CBC')
    });
    cipher.start(iv);
    return cipher;
  };

  /**
   * Deprecated. Instead, use:
   *
   * var cipher = forge.cipher.createCipher('DES-<mode>', key);
   *
   * Creates an DES cipher object to encrypt data using the given symmetric key.
   *
   * The key may be given as a binary-encoded string of bytes or a byte buffer.
   *
   * @param key the symmetric key to use (64 or 192 bits).
   * @param mode the cipher mode to use (default: 'CBC').
   *
   * @return the cipher.
   */
  forge$f.des.createEncryptionCipher = function(key, mode) {
    return _createCipher({
      key: key,
      output: null,
      decrypt: false,
      mode: mode
    });
  };

  /**
   * Deprecated. Instead, use:
   *
   * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
   * decipher.start({iv: iv});
   *
   * Creates an DES cipher object to decrypt data using the given symmetric key.
   * The output will be stored in the 'output' member of the returned cipher.
   *
   * The key and iv may be given as binary-encoded strings of bytes or
   * byte buffers.
   *
   * @param key the symmetric key to use (64 or 192 bits).
   * @param iv the initialization vector to use.
   * @param output the buffer to write to, null to create one.
   * @param mode the cipher mode to use (default: 'CBC' if IV is
   *          given, 'ECB' if null).
   *
   * @return the cipher.
   */
  forge$f.des.startDecrypting = function(key, iv, output, mode) {
    var cipher = _createCipher({
      key: key,
      output: output,
      decrypt: true,
      mode: mode || (iv === null ? 'ECB' : 'CBC')
    });
    cipher.start(iv);
    return cipher;
  };

  /**
   * Deprecated. Instead, use:
   *
   * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
   *
   * Creates an DES cipher object to decrypt data using the given symmetric key.
   *
   * The key may be given as a binary-encoded string of bytes or a byte buffer.
   *
   * @param key the symmetric key to use (64 or 192 bits).
   * @param mode the cipher mode to use (default: 'CBC').
   *
   * @return the cipher.
   */
  forge$f.des.createDecryptionCipher = function(key, mode) {
    return _createCipher({
      key: key,
      output: null,
      decrypt: true,
      mode: mode
    });
  };

  /**
   * Creates a new DES cipher algorithm object.
   *
   * @param name the name of the algorithm.
   * @param mode the mode factory function.
   *
   * @return the DES algorithm object.
   */
  forge$f.des.Algorithm = function(name, mode) {
    var self = this;
    self.name = name;
    self.mode = new mode({
      blockSize: 8,
      cipher: {
        encrypt: function(inBlock, outBlock) {
          return _updateBlock(self._keys, inBlock, outBlock, false);
        },
        decrypt: function(inBlock, outBlock) {
          return _updateBlock(self._keys, inBlock, outBlock, true);
        }
      }
    });
    self._init = false;
  };

  /**
   * Initializes this DES algorithm by expanding its key.
   *
   * @param options the options to use.
   *          key the key to use with this algorithm.
   *          decrypt true if the algorithm should be initialized for decryption,
   *            false for encryption.
   */
  forge$f.des.Algorithm.prototype.initialize = function(options) {
    if(this._init) {
      return;
    }

    var key = forge$f.util.createBuffer(options.key);
    if(this.name.indexOf('3DES') === 0) {
      if(key.length() !== 24) {
        throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);
      }
    }

    // do key expansion to 16 or 48 subkeys (single or triple DES)
    this._keys = _createKeys(key);
    this._init = true;
  };

  /** Register DES algorithms **/

  registerAlgorithm('DES-ECB', forge$f.cipher.modes.ecb);
  registerAlgorithm('DES-CBC', forge$f.cipher.modes.cbc);
  registerAlgorithm('DES-CFB', forge$f.cipher.modes.cfb);
  registerAlgorithm('DES-OFB', forge$f.cipher.modes.ofb);
  registerAlgorithm('DES-CTR', forge$f.cipher.modes.ctr);

  registerAlgorithm('3DES-ECB', forge$f.cipher.modes.ecb);
  registerAlgorithm('3DES-CBC', forge$f.cipher.modes.cbc);
  registerAlgorithm('3DES-CFB', forge$f.cipher.modes.cfb);
  registerAlgorithm('3DES-OFB', forge$f.cipher.modes.ofb);
  registerAlgorithm('3DES-CTR', forge$f.cipher.modes.ctr);

  function registerAlgorithm(name, mode) {
    var factory = function() {
      return new forge$f.des.Algorithm(name, mode);
    };
    forge$f.cipher.registerAlgorithm(name, factory);
  }

  /** DES implementation **/

  var spfunction1 = [0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004];
  var spfunction2 = [-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000];
  var spfunction3 = [0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200];
  var spfunction4 = [0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080];
  var spfunction5 = [0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100];
  var spfunction6 = [0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010];
  var spfunction7 = [0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002];
  var spfunction8 = [0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000];

  /**
   * Create necessary sub keys.
   *
   * @param key the 64-bit or 192-bit key.
   *
   * @return the expanded keys.
   */
  function _createKeys(key) {
    var pc2bytes0  = [0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204],
        pc2bytes1  = [0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101],
        pc2bytes2  = [0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808],
        pc2bytes3  = [0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000],
        pc2bytes4  = [0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010],
        pc2bytes5  = [0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420],
        pc2bytes6  = [0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002],
        pc2bytes7  = [0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800],
        pc2bytes8  = [0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002],
        pc2bytes9  = [0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408],
        pc2bytes10 = [0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020],
        pc2bytes11 = [0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200],
        pc2bytes12 = [0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010],
        pc2bytes13 = [0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105];

    // how many iterations (1 for des, 3 for triple des)
    // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys
    var iterations = key.length() > 8 ? 3 : 1;

    // stores the return keys
    var keys = [];

    // now define the left shifts which need to be done
    var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];

    var n = 0, tmp;
    for(var j = 0; j < iterations; j++) {
      var left = key.getInt32();
      var right = key.getInt32();

      tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
      right ^= tmp;
      left ^= (tmp << 4);

      tmp = ((right >>> -16) ^ left) & 0x0000ffff;
      left ^= tmp;
      right ^= (tmp << -16);

      tmp = ((left >>> 2) ^ right) & 0x33333333;
      right ^= tmp;
      left ^= (tmp << 2);

      tmp = ((right >>> -16) ^ left) & 0x0000ffff;
      left ^= tmp;
      right ^= (tmp << -16);

      tmp = ((left >>> 1) ^ right) & 0x55555555;
      right ^= tmp;
      left ^= (tmp << 1);

      tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
      left ^= tmp;
      right ^= (tmp << 8);

      tmp = ((left >>> 1) ^ right) & 0x55555555;
      right ^= tmp;
      left ^= (tmp << 1);

      // right needs to be shifted and OR'd with last four bits of left
      tmp = (left << 8) | ((right >>> 20) & 0x000000f0);

      // left needs to be put upside down
      left = ((right << 24) | ((right << 8) & 0xff0000) |
        ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0));
      right = tmp;

      // now go through and perform these shifts on the left and right keys
      for(var i = 0; i < shifts.length; ++i) {
        //shift the keys either one or two bits to the left
        if(shifts[i]) {
          left = (left << 2) | (left >>> 26);
          right = (right << 2) | (right >>> 26);
        } else {
          left = (left << 1) | (left >>> 27);
          right = (right << 1) | (right >>> 27);
        }
        left &= -0xf;
        right &= -0xf;

        // now apply PC-2, in such a way that E is easier when encrypting or
        // decrypting this conversion will look like PC-2 except only the last 6
        // bits of each byte are used rather than 48 consecutive bits and the
        // order of lines will be according to how the S selection functions will
        // be applied: S2, S4, S6, S8, S1, S3, S5, S7
        var lefttmp = (
          pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] |
          pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf] |
          pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf] |
          pc2bytes6[(left >>> 4) & 0xf]);
        var righttmp = (
          pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf] |
          pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf] |
          pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf] |
          pc2bytes13[(right >>> 4) & 0xf]);
        tmp = ((righttmp >>> 16) ^ lefttmp) & 0x0000ffff;
        keys[n++] = lefttmp ^ tmp;
        keys[n++] = righttmp ^ (tmp << 16);
      }
    }

    return keys;
  }

  /**
   * Updates a single block (1 byte) using DES. The update will either
   * encrypt or decrypt the block.
   *
   * @param keys the expanded keys.
   * @param input the input block (an array of 32-bit words).
   * @param output the updated output block.
   * @param decrypt true to decrypt the block, false to encrypt it.
   */
  function _updateBlock(keys, input, output, decrypt) {
    // set up loops for single or triple DES
    var iterations = keys.length === 32 ? 3 : 9;
    var looping;
    if(iterations === 3) {
      looping = decrypt ? [30, -2, -2] : [0, 32, 2];
    } else {
      looping = (decrypt ?
        [94, 62, -2, 32, 64, 2, 30, -2, -2] :
        [0, 32, 2, 62, 30, -2, 64, 96, 2]);
    }

    var tmp;

    var left = input[0];
    var right = input[1];

    // first each 64 bit chunk of the message must be permuted according to IP
    tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
    right ^= tmp;
    left ^= (tmp << 4);

    tmp = ((left >>> 16) ^ right) & 0x0000ffff;
    right ^= tmp;
    left ^= (tmp << 16);

    tmp = ((right >>> 2) ^ left) & 0x33333333;
    left ^= tmp;
    right ^= (tmp << 2);

    tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
    left ^= tmp;
    right ^= (tmp << 8);

    tmp = ((left >>> 1) ^ right) & 0x55555555;
    right ^= tmp;
    left ^= (tmp << 1);

    // rotate left 1 bit
    left = ((left << 1) | (left >>> 31));
    right = ((right << 1) | (right >>> 31));

    for(var j = 0; j < iterations; j += 3) {
      var endloop = looping[j + 1];
      var loopinc = looping[j + 2];

      // now go through and perform the encryption or decryption
      for(var i = looping[j]; i != endloop; i += loopinc) {
        var right1 = right ^ keys[i];
        var right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];

        // passing these bytes through the S selection functions
        tmp = left;
        left = right;
        right = tmp ^ (
          spfunction2[(right1 >>> 24) & 0x3f] |
          spfunction4[(right1 >>> 16) & 0x3f] |
          spfunction6[(right1 >>>  8) & 0x3f] |
          spfunction8[right1 & 0x3f] |
          spfunction1[(right2 >>> 24) & 0x3f] |
          spfunction3[(right2 >>> 16) & 0x3f] |
          spfunction5[(right2 >>>  8) & 0x3f] |
          spfunction7[right2 & 0x3f]);
      }
      // unreverse left and right
      tmp = left;
      left = right;
      right = tmp;
    }

    // rotate right 1 bit
    left = ((left >>> 1) | (left << 31));
    right = ((right >>> 1) | (right << 31));

    // now perform IP-1, which is IP in the opposite direction
    tmp = ((left >>> 1) ^ right) & 0x55555555;
    right ^= tmp;
    left ^= (tmp << 1);

    tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
    left ^= tmp;
    right ^= (tmp << 8);

    tmp = ((right >>> 2) ^ left) & 0x33333333;
    left ^= tmp;
    right ^= (tmp << 2);

    tmp = ((left >>> 16) ^ right) & 0x0000ffff;
    right ^= tmp;
    left ^= (tmp << 16);

    tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
    right ^= tmp;
    left ^= (tmp << 4);

    output[0] = left;
    output[1] = right;
  }

  /**
   * Deprecated. Instead, use:
   *
   * forge.cipher.createCipher('DES-<mode>', key);
   * forge.cipher.createDecipher('DES-<mode>', key);
   *
   * Creates a deprecated DES cipher object. This object's mode will default to
   * CBC (cipher-block-chaining).
   *
   * The key may be given as a binary-encoded string of bytes or a byte buffer.
   *
   * @param options the options to use.
   *          key the symmetric key to use (64 or 192 bits).
   *          output the buffer to write to.
   *          decrypt true for decryption, false for encryption.
   *          mode the cipher mode to use (default: 'CBC').
   *
   * @return the cipher.
   */
  function _createCipher(options) {
    options = options || {};
    var mode = (options.mode || 'CBC').toUpperCase();
    var algorithm = 'DES-' + mode;

    var cipher;
    if(options.decrypt) {
      cipher = forge$f.cipher.createDecipher(algorithm, options.key);
    } else {
      cipher = forge$f.cipher.createCipher(algorithm, options.key);
    }

    // backwards compatible start API
    var start = cipher.start;
    cipher.start = function(iv, options) {
      // backwards compatibility: support second arg as output buffer
      var output = null;
      if(options instanceof forge$f.util.ByteBuffer) {
        output = options;
        options = {};
      }
      options = options || {};
      options.output = output;
      options.iv = iv;
      start.call(cipher, options);
    };

    return cipher;
  }

  /**
   * Node.js module for Forge message digests.
   *
   * @author Dave Longley
   *
   * Copyright 2011-2017 Digital Bazaar, Inc.
   */

  var forge$e = forge$m;

  forge$e.md = forge$e.md || {};
  forge$e.md.algorithms = forge$e.md.algorithms || {};

  /**
   * Hash-based Message Authentication Code implementation. Requires a message
   * digest object that can be obtained, for example, from forge.md.sha1 or
   * forge.md.md5.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2010-2012 Digital Bazaar, Inc. All rights reserved.
   */

  var forge$d = forge$m;



  /* HMAC API */
  var hmac = forge$d.hmac = forge$d.hmac || {};

  /**
   * Creates an HMAC object that uses the given message digest object.
   *
   * @return an HMAC object.
   */
  hmac.create = function() {
    // the hmac key to use
    var _key = null;

    // the message digest to use
    var _md = null;

    // the inner padding
    var _ipadding = null;

    // the outer padding
    var _opadding = null;

    // hmac context
    var ctx = {};

    /**
     * Starts or restarts the HMAC with the given key and message digest.
     *
     * @param md the message digest to use, null to reuse the previous one,
     *           a string to use builtin 'sha1', 'md5', 'sha256'.
     * @param key the key to use as a string, array of bytes, byte buffer,
     *           or null to reuse the previous key.
     */
    ctx.start = function(md, key) {
      if(md !== null) {
        if(typeof md === 'string') {
          // create builtin message digest
          md = md.toLowerCase();
          if(md in forge$d.md.algorithms) {
            _md = forge$d.md.algorithms[md].create();
          } else {
            throw new Error('Unknown hash algorithm "' + md + '"');
          }
        } else {
          // store message digest
          _md = md;
        }
      }

      if(key === null) {
        // reuse previous key
        key = _key;
      } else {
        if(typeof key === 'string') {
          // convert string into byte buffer
          key = forge$d.util.createBuffer(key);
        } else if(forge$d.util.isArray(key)) {
          // convert byte array into byte buffer
          var tmp = key;
          key = forge$d.util.createBuffer();
          for(var i = 0; i < tmp.length; ++i) {
            key.putByte(tmp[i]);
          }
        }

        // if key is longer than blocksize, hash it
        var keylen = key.length();
        if(keylen > _md.blockLength) {
          _md.start();
          _md.update(key.bytes());
          key = _md.digest();
        }

        // mix key into inner and outer padding
        // ipadding = [0x36 * blocksize] ^ key
        // opadding = [0x5C * blocksize] ^ key
        _ipadding = forge$d.util.createBuffer();
        _opadding = forge$d.util.createBuffer();
        keylen = key.length();
        for(var i = 0; i < keylen; ++i) {
          var tmp = key.at(i);
          _ipadding.putByte(0x36 ^ tmp);
          _opadding.putByte(0x5C ^ tmp);
        }

        // if key is shorter than blocksize, add additional padding
        if(keylen < _md.blockLength) {
          var tmp = _md.blockLength - keylen;
          for(var i = 0; i < tmp; ++i) {
            _ipadding.putByte(0x36);
            _opadding.putByte(0x5C);
          }
        }
        _key = key;
        _ipadding = _ipadding.bytes();
        _opadding = _opadding.bytes();
      }

      // digest is done like so: hash(opadding | hash(ipadding | message))

      // prepare to do inner hash
      // hash(ipadding | message)
      _md.start();
      _md.update(_ipadding);
    };

    /**
     * Updates the HMAC with the given message bytes.
     *
     * @param bytes the bytes to update with.
     */
    ctx.update = function(bytes) {
      _md.update(bytes);
    };

    /**
     * Produces the Message Authentication Code (MAC).
     *
     * @return a byte buffer containing the digest value.
     */
    ctx.getMac = function() {
      // digest is done like so: hash(opadding | hash(ipadding | message))
      // here we do the outer hashing
      var inner = _md.digest().bytes();
      _md.start();
      _md.update(_opadding);
      _md.update(inner);
      return _md.digest();
    };
    // alias for getMac
    ctx.digest = ctx.getMac;

    return ctx;
  };

  var _nodeResolve_empty = {};

  var nodeCrypto = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: _nodeResolve_empty
  });

  var require$$1 = /*@__PURE__*/getAugmentedNamespace(nodeCrypto);

  /**
   * Password-Based Key-Derivation Function #2 implementation.
   *
   * See RFC 2898 for details.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2010-2013 Digital Bazaar, Inc.
   */

  var forge$c = forge$m;




  var pkcs5 = forge$c.pkcs5 = forge$c.pkcs5 || {};

  var crypto$4;
  if(forge$c.util.isNodejs && !forge$c.options.usePureJavaScript) {
    crypto$4 = require$$1;
  }

  /**
   * Derives a key from a password.
   *
   * @param p the password as a binary-encoded string of bytes.
   * @param s the salt as a binary-encoded string of bytes.
   * @param c the iteration count, a positive integer.
   * @param dkLen the intended length, in bytes, of the derived key,
   *          (max: 2^32 - 1) * hash length of the PRF.
   * @param [md] the message digest (or algorithm identifier as a string) to use
   *          in the PRF, defaults to SHA-1.
   * @param [callback(err, key)] presence triggers asynchronous version, called
   *          once the operation completes.
   *
   * @return the derived key, as a binary-encoded string of bytes, for the
   *           synchronous version (if no callback is specified).
   */
  var pbkdf2$1 = forge$c.pbkdf2 = pkcs5.pbkdf2 = function(
    p, s, c, dkLen, md, callback) {
    if(typeof md === 'function') {
      callback = md;
      md = null;
    }

    // use native implementation if possible and not disabled, note that
    // some node versions only support SHA-1, others allow digest to be changed
    if(forge$c.util.isNodejs && !forge$c.options.usePureJavaScript &&
      crypto$4.pbkdf2 && (md === null || typeof md !== 'object') &&
      (crypto$4.pbkdf2Sync.length > 4 || (!md || md === 'sha1'))) {
      if(typeof md !== 'string') {
        // default prf to SHA-1
        md = 'sha1';
      }
      p = Buffer.from(p, 'binary');
      s = Buffer.from(s, 'binary');
      if(!callback) {
        if(crypto$4.pbkdf2Sync.length === 4) {
          return crypto$4.pbkdf2Sync(p, s, c, dkLen).toString('binary');
        }
        return crypto$4.pbkdf2Sync(p, s, c, dkLen, md).toString('binary');
      }
      if(crypto$4.pbkdf2Sync.length === 4) {
        return crypto$4.pbkdf2(p, s, c, dkLen, function(err, key) {
          if(err) {
            return callback(err);
          }
          callback(null, key.toString('binary'));
        });
      }
      return crypto$4.pbkdf2(p, s, c, dkLen, md, function(err, key) {
        if(err) {
          return callback(err);
        }
        callback(null, key.toString('binary'));
      });
    }

    if(typeof md === 'undefined' || md === null) {
      // default prf to SHA-1
      md = 'sha1';
    }
    if(typeof md === 'string') {
      if(!(md in forge$c.md.algorithms)) {
        throw new Error('Unknown hash algorithm: ' + md);
      }
      md = forge$c.md[md].create();
    }

    var hLen = md.digestLength;

    /* 1. If dkLen > (2^32 - 1) * hLen, output "derived key too long" and
      stop. */
    if(dkLen > (0xFFFFFFFF * hLen)) {
      var err = new Error('Derived key is too long.');
      if(callback) {
        return callback(err);
      }
      throw err;
    }

    /* 2. Let len be the number of hLen-octet blocks in the derived key,
      rounding up, and let r be the number of octets in the last
      block:

      len = CEIL(dkLen / hLen),
      r = dkLen - (len - 1) * hLen. */
    var len = Math.ceil(dkLen / hLen);
    var r = dkLen - (len - 1) * hLen;

    /* 3. For each block of the derived key apply the function F defined
      below to the password P, the salt S, the iteration count c, and
      the block index to compute the block:

      T_1 = F(P, S, c, 1),
      T_2 = F(P, S, c, 2),
      ...
      T_len = F(P, S, c, len),

      where the function F is defined as the exclusive-or sum of the
      first c iterates of the underlying pseudorandom function PRF
      applied to the password P and the concatenation of the salt S
      and the block index i:

      F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c

      where

      u_1 = PRF(P, S || INT(i)),
      u_2 = PRF(P, u_1),
      ...
      u_c = PRF(P, u_{c-1}).

      Here, INT(i) is a four-octet encoding of the integer i, most
      significant octet first. */
    var prf = forge$c.hmac.create();
    prf.start(md, p);
    var dk = '';
    var xor, u_c, u_c1;

    // sync version
    if(!callback) {
      for(var i = 1; i <= len; ++i) {
        // PRF(P, S || INT(i)) (first iteration)
        prf.start(null, null);
        prf.update(s);
        prf.update(forge$c.util.int32ToBytes(i));
        xor = u_c1 = prf.digest().getBytes();

        // PRF(P, u_{c-1}) (other iterations)
        for(var j = 2; j <= c; ++j) {
          prf.start(null, null);
          prf.update(u_c1);
          u_c = prf.digest().getBytes();
          // F(p, s, c, i)
          xor = forge$c.util.xorBytes(xor, u_c, hLen);
          u_c1 = u_c;
        }

        /* 4. Concatenate the blocks and extract the first dkLen octets to
          produce a derived key DK:

          DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */
        dk += (i < len) ? xor : xor.substr(0, r);
      }
      /* 5. Output the derived key DK. */
      return dk;
    }

    // async version
    var i = 1, j;
    function outer() {
      if(i > len) {
        // done
        return callback(null, dk);
      }

      // PRF(P, S || INT(i)) (first iteration)
      prf.start(null, null);
      prf.update(s);
      prf.update(forge$c.util.int32ToBytes(i));
      xor = u_c1 = prf.digest().getBytes();

      // PRF(P, u_{c-1}) (other iterations)
      j = 2;
      inner();
    }

    function inner() {
      if(j <= c) {
        prf.start(null, null);
        prf.update(u_c1);
        u_c = prf.digest().getBytes();
        // F(p, s, c, i)
        xor = forge$c.util.xorBytes(xor, u_c, hLen);
        u_c1 = u_c;
        ++j;
        return forge$c.util.setImmediate(inner);
      }

      /* 4. Concatenate the blocks and extract the first dkLen octets to
        produce a derived key DK:

        DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */
      dk += (i < len) ? xor : xor.substr(0, r);

      ++i;
      outer();
    }

    outer();
  };

  var forgePbkdf2 = /*@__PURE__*/getDefaultExportFromCjs(pbkdf2$1);

  /**
   * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.
   *
   * See: RFC 1421.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2013-2014 Digital Bazaar, Inc.
   *
   * A Forge PEM object has the following fields:
   *
   * type: identifies the type of message (eg: "RSA PRIVATE KEY").
   *
   * procType: identifies the type of processing performed on the message,
   *   it has two subfields: version and type, eg: 4,ENCRYPTED.
   *
   * contentDomain: identifies the type of content in the message, typically
   *   only uses the value: "RFC822".
   *
   * dekInfo: identifies the message encryption algorithm and mode and includes
   *   any parameters for the algorithm, it has two subfields: algorithm and
   *   parameters, eg: DES-CBC,F8143EDE5960C597.
   *
   * headers: contains all other PEM encapsulated headers -- where order is
   *   significant (for pairing data like recipient ID + key info).
   *
   * body: the binary-encoded body.
   */

  var forge$b = forge$m;


  // shortcut for pem API
  var pem = forge$b.pem = forge$b.pem || {};

  /**
   * Encodes (serializes) the given PEM object.
   *
   * @param msg the PEM message object to encode.
   * @param options the options to use:
   *          maxline the maximum characters per line for the body, (default: 64).
   *
   * @return the PEM-formatted string.
   */
  pem.encode = function(msg, options) {
    options = options || {};
    var rval = '-----BEGIN ' + msg.type + '-----\r\n';

    // encode special headers
    var header;
    if(msg.procType) {
      header = {
        name: 'Proc-Type',
        values: [String(msg.procType.version), msg.procType.type]
      };
      rval += foldHeader(header);
    }
    if(msg.contentDomain) {
      header = {name: 'Content-Domain', values: [msg.contentDomain]};
      rval += foldHeader(header);
    }
    if(msg.dekInfo) {
      header = {name: 'DEK-Info', values: [msg.dekInfo.algorithm]};
      if(msg.dekInfo.parameters) {
        header.values.push(msg.dekInfo.parameters);
      }
      rval += foldHeader(header);
    }

    if(msg.headers) {
      // encode all other headers
      for(var i = 0; i < msg.headers.length; ++i) {
        rval += foldHeader(msg.headers[i]);
      }
    }

    // terminate header
    if(msg.procType) {
      rval += '\r\n';
    }

    // add body
    rval += forge$b.util.encode64(msg.body, options.maxline || 64) + '\r\n';

    rval += '-----END ' + msg.type + '-----\r\n';
    return rval;
  };

  /**
   * Decodes (deserializes) all PEM messages found in the given string.
   *
   * @param str the PEM-formatted string to decode.
   *
   * @return the PEM message objects in an array.
   */
  pem.decode = function(str) {
    var rval = [];

    // split string into PEM messages (be lenient w/EOF on BEGIN line)
    var rMessage = /\s*-----BEGIN ([A-Z0-9- ]+)-----\r?\n?([\x21-\x7e\s]+?(?:\r?\n\r?\n))?([:A-Za-z0-9+\/=\s]+?)-----END \1-----/g;
    var rHeader = /([\x21-\x7e]+):\s*([\x21-\x7e\s^:]+)/;
    var rCRLF = /\r?\n/;
    var match;
    while(true) {
      match = rMessage.exec(str);
      if(!match) {
        break;
      }

      // accept "NEW CERTIFICATE REQUEST" as "CERTIFICATE REQUEST"
      // https://datatracker.ietf.org/doc/html/rfc7468#section-7
      var type = match[1];
      if(type === 'NEW CERTIFICATE REQUEST') {
        type = 'CERTIFICATE REQUEST';
      }

      var msg = {
        type: type,
        procType: null,
        contentDomain: null,
        dekInfo: null,
        headers: [],
        body: forge$b.util.decode64(match[3])
      };
      rval.push(msg);

      // no headers
      if(!match[2]) {
        continue;
      }

      // parse headers
      var lines = match[2].split(rCRLF);
      var li = 0;
      while(match && li < lines.length) {
        // get line, trim any rhs whitespace
        var line = lines[li].replace(/\s+$/, '');

        // RFC2822 unfold any following folded lines
        for(var nl = li + 1; nl < lines.length; ++nl) {
          var next = lines[nl];
          if(!/\s/.test(next[0])) {
            break;
          }
          line += next;
          li = nl;
        }

        // parse header
        match = line.match(rHeader);
        if(match) {
          var header = {name: match[1], values: []};
          var values = match[2].split(',');
          for(var vi = 0; vi < values.length; ++vi) {
            header.values.push(ltrim(values[vi]));
          }

          // Proc-Type must be the first header
          if(!msg.procType) {
            if(header.name !== 'Proc-Type') {
              throw new Error('Invalid PEM formatted message. The first ' +
                'encapsulated header must be "Proc-Type".');
            } else if(header.values.length !== 2) {
              throw new Error('Invalid PEM formatted message. The "Proc-Type" ' +
                'header must have two subfields.');
            }
            msg.procType = {version: values[0], type: values[1]};
          } else if(!msg.contentDomain && header.name === 'Content-Domain') {
            // special-case Content-Domain
            msg.contentDomain = values[0] || '';
          } else if(!msg.dekInfo && header.name === 'DEK-Info') {
            // special-case DEK-Info
            if(header.values.length === 0) {
              throw new Error('Invalid PEM formatted message. The "DEK-Info" ' +
                'header must have at least one subfield.');
            }
            msg.dekInfo = {algorithm: values[0], parameters: values[1] || null};
          } else {
            msg.headers.push(header);
          }
        }

        ++li;
      }

      if(msg.procType === 'ENCRYPTED' && !msg.dekInfo) {
        throw new Error('Invalid PEM formatted message. The "DEK-Info" ' +
          'header must be present if "Proc-Type" is "ENCRYPTED".');
      }
    }

    if(rval.length === 0) {
      throw new Error('Invalid PEM formatted message.');
    }

    return rval;
  };

  function foldHeader(header) {
    var rval = header.name + ': ';

    // ensure values with CRLF are folded
    var values = [];
    var insertSpace = function(match, $1) {
      return ' ' + $1;
    };
    for(var i = 0; i < header.values.length; ++i) {
      values.push(header.values[i].replace(/^(\S+\r\n)/, insertSpace));
    }
    rval += values.join(',') + '\r\n';

    // do folding
    var length = 0;
    var candidate = -1;
    for(var i = 0; i < rval.length; ++i, ++length) {
      if(length > 65 && candidate !== -1) {
        var insert = rval[candidate];
        if(insert === ',') {
          ++candidate;
          rval = rval.substr(0, candidate) + '\r\n ' + rval.substr(candidate);
        } else {
          rval = rval.substr(0, candidate) +
            '\r\n' + insert + rval.substr(candidate + 1);
        }
        length = (i - candidate - 1);
        candidate = -1;
        ++i;
      } else if(rval[i] === ' ' || rval[i] === '\t' || rval[i] === ',') {
        candidate = i;
      }
    }

    return rval;
  }

  function ltrim(str) {
    return str.replace(/^\s+/, '');
  }

  /**
   * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.
   *
   * See FIPS 180-2 for details.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2010-2015 Digital Bazaar, Inc.
   */

  var forge$a = forge$m;



  var sha256$1 = forge$a.sha256 = forge$a.sha256 || {};
  forge$a.md.sha256 = forge$a.md.algorithms.sha256 = sha256$1;

  /**
   * Creates a SHA-256 message digest object.
   *
   * @return a message digest object.
   */
  sha256$1.create = function() {
    // do initialization as necessary
    if(!_initialized$2) {
      _init$2();
    }

    // SHA-256 state contains eight 32-bit integers
    var _state = null;

    // input buffer
    var _input = forge$a.util.createBuffer();

    // used for word storage
    var _w = new Array(64);

    // message digest object
    var md = {
      algorithm: 'sha256',
      blockLength: 64,
      digestLength: 32,
      // 56-bit length of message so far (does not including padding)
      messageLength: 0,
      // true message length
      fullMessageLength: null,
      // size of message length in bytes
      messageLengthSize: 8
    };

    /**
     * Starts the digest.
     *
     * @return this digest object.
     */
    md.start = function() {
      // up to 56-bit message length for convenience
      md.messageLength = 0;

      // full message length (set md.messageLength64 for backwards-compatibility)
      md.fullMessageLength = md.messageLength64 = [];
      var int32s = md.messageLengthSize / 4;
      for(var i = 0; i < int32s; ++i) {
        md.fullMessageLength.push(0);
      }
      _input = forge$a.util.createBuffer();
      _state = {
        h0: 0x6A09E667,
        h1: 0xBB67AE85,
        h2: 0x3C6EF372,
        h3: 0xA54FF53A,
        h4: 0x510E527F,
        h5: 0x9B05688C,
        h6: 0x1F83D9AB,
        h7: 0x5BE0CD19
      };
      return md;
    };
    // start digest automatically for first time
    md.start();

    /**
     * Updates the digest with the given message input. The given input can
     * treated as raw input (no encoding will be applied) or an encoding of
     * 'utf8' maybe given to encode the input using UTF-8.
     *
     * @param msg the message input to update with.
     * @param encoding the encoding to use (default: 'raw', other: 'utf8').
     *
     * @return this digest object.
     */
    md.update = function(msg, encoding) {
      if(encoding === 'utf8') {
        msg = forge$a.util.encodeUtf8(msg);
      }

      // update message length
      var len = msg.length;
      md.messageLength += len;
      len = [(len / 0x100000000) >>> 0, len >>> 0];
      for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
        md.fullMessageLength[i] += len[1];
        len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
        md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
        len[0] = ((len[1] / 0x100000000) >>> 0);
      }

      // add bytes to input buffer
      _input.putBytes(msg);

      // process bytes
      _update$2(_state, _w, _input);

      // compact input buffer every 2K or if empty
      if(_input.read > 2048 || _input.length() === 0) {
        _input.compact();
      }

      return md;
    };

    /**
     * Produces the digest.
     *
     * @return a byte buffer containing the digest value.
     */
    md.digest = function() {
      /* Note: Here we copy the remaining bytes in the input buffer and
      add the appropriate SHA-256 padding. Then we do the final update
      on a copy of the state so that if the user wants to get
      intermediate digests they can do so. */

      /* Determine the number of bytes that must be added to the message
      to ensure its length is congruent to 448 mod 512. In other words,
      the data to be digested must be a multiple of 512 bits (or 128 bytes).
      This data includes the message, some padding, and the length of the
      message. Since the length of the message will be encoded as 8 bytes (64
      bits), that means that the last segment of the data must have 56 bytes
      (448 bits) of message and padding. Therefore, the length of the message
      plus the padding must be congruent to 448 mod 512 because
      512 - 128 = 448.

      In order to fill up the message length it must be filled with
      padding that begins with 1 bit followed by all 0 bits. Padding
      must *always* be present, so if the message length is already
      congruent to 448 mod 512, then 512 padding bits must be added. */

      var finalBlock = forge$a.util.createBuffer();
      finalBlock.putBytes(_input.bytes());

      // compute remaining size to be digested (include message length size)
      var remaining = (
        md.fullMessageLength[md.fullMessageLength.length - 1] +
        md.messageLengthSize);

      // add padding for overflow blockSize - overflow
      // _padding starts with 1 byte with first bit is set (byte value 128), then
      // there may be up to (blockSize - 1) other pad bytes
      var overflow = remaining & (md.blockLength - 1);
      finalBlock.putBytes(_padding$2.substr(0, md.blockLength - overflow));

      // serialize message length in bits in big-endian order; since length
      // is stored in bytes we multiply by 8 and add carry from next int
      var next, carry;
      var bits = md.fullMessageLength[0] * 8;
      for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {
        next = md.fullMessageLength[i + 1] * 8;
        carry = (next / 0x100000000) >>> 0;
        bits += carry;
        finalBlock.putInt32(bits >>> 0);
        bits = next >>> 0;
      }
      finalBlock.putInt32(bits);

      var s2 = {
        h0: _state.h0,
        h1: _state.h1,
        h2: _state.h2,
        h3: _state.h3,
        h4: _state.h4,
        h5: _state.h5,
        h6: _state.h6,
        h7: _state.h7
      };
      _update$2(s2, _w, finalBlock);
      var rval = forge$a.util.createBuffer();
      rval.putInt32(s2.h0);
      rval.putInt32(s2.h1);
      rval.putInt32(s2.h2);
      rval.putInt32(s2.h3);
      rval.putInt32(s2.h4);
      rval.putInt32(s2.h5);
      rval.putInt32(s2.h6);
      rval.putInt32(s2.h7);
      return rval;
    };

    return md;
  };

  // sha-256 padding bytes not initialized yet
  var _padding$2 = null;
  var _initialized$2 = false;

  // table of constants
  var _k$1 = null;

  /**
   * Initializes the constant tables.
   */
  function _init$2() {
    // create padding
    _padding$2 = String.fromCharCode(128);
    _padding$2 += forge$a.util.fillString(String.fromCharCode(0x00), 64);

    // create K table for SHA-256
    _k$1 = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
      0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
      0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
      0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
      0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

    // now initialized
    _initialized$2 = true;
  }

  /**
   * Updates a SHA-256 state with the given byte buffer.
   *
   * @param s the SHA-256 state to update.
   * @param w the array to use to store words.
   * @param bytes the byte buffer to update with.
   */
  function _update$2(s, w, bytes) {
    // consume 512 bit (64 byte) chunks
    var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
    var len = bytes.length();
    while(len >= 64) {
      // the w array will be populated with sixteen 32-bit big-endian words
      // and then extended into 64 32-bit words according to SHA-256
      for(i = 0; i < 16; ++i) {
        w[i] = bytes.getInt32();
      }
      for(; i < 64; ++i) {
        // XOR word 2 words ago rot right 17, rot right 19, shft right 10
        t1 = w[i - 2];
        t1 =
          ((t1 >>> 17) | (t1 << 15)) ^
          ((t1 >>> 19) | (t1 << 13)) ^
          (t1 >>> 10);
        // XOR word 15 words ago rot right 7, rot right 18, shft right 3
        t2 = w[i - 15];
        t2 =
          ((t2 >>> 7) | (t2 << 25)) ^
          ((t2 >>> 18) | (t2 << 14)) ^
          (t2 >>> 3);
        // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32
        w[i] = (t1 + w[i - 7] + t2 + w[i - 16]) | 0;
      }

      // initialize hash value for this chunk
      a = s.h0;
      b = s.h1;
      c = s.h2;
      d = s.h3;
      e = s.h4;
      f = s.h5;
      g = s.h6;
      h = s.h7;

      // round function
      for(i = 0; i < 64; ++i) {
        // Sum1(e)
        s1 =
          ((e >>> 6) | (e << 26)) ^
          ((e >>> 11) | (e << 21)) ^
          ((e >>> 25) | (e << 7));
        // Ch(e, f, g) (optimized the same way as SHA-1)
        ch = g ^ (e & (f ^ g));
        // Sum0(a)
        s0 =
          ((a >>> 2) | (a << 30)) ^
          ((a >>> 13) | (a << 19)) ^
          ((a >>> 22) | (a << 10));
        // Maj(a, b, c) (optimized the same way as SHA-1)
        maj = (a & b) | (c & (a ^ b));

        // main algorithm
        t1 = h + s1 + ch + _k$1[i] + w[i];
        t2 = s0 + maj;
        h = g;
        g = f;
        f = e;
        // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
        // can't truncate with `| 0`
        e = (d + t1) >>> 0;
        d = c;
        c = b;
        b = a;
        // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
        // can't truncate with `| 0`
        a = (t1 + t2) >>> 0;
      }

      // update hash state
      s.h0 = (s.h0 + a) | 0;
      s.h1 = (s.h1 + b) | 0;
      s.h2 = (s.h2 + c) | 0;
      s.h3 = (s.h3 + d) | 0;
      s.h4 = (s.h4 + e) | 0;
      s.h5 = (s.h5 + f) | 0;
      s.h6 = (s.h6 + g) | 0;
      s.h7 = (s.h7 + h) | 0;
      len -= 64;
    }
  }

  /**
   * A javascript implementation of a cryptographically-secure
   * Pseudo Random Number Generator (PRNG). The Fortuna algorithm is followed
   * here though the use of SHA-256 is not enforced; when generating an
   * a PRNG context, the hashing algorithm and block cipher used for
   * the generator are specified via a plugin.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2010-2014 Digital Bazaar, Inc.
   */

  var forge$9 = forge$m;


  var _crypto$1 = null;
  if(forge$9.util.isNodejs && !forge$9.options.usePureJavaScript &&
    !process.versions['node-webkit']) {
    _crypto$1 = require$$1;
  }

  /* PRNG API */
  var prng = forge$9.prng = forge$9.prng || {};

  /**
   * Creates a new PRNG context.
   *
   * A PRNG plugin must be passed in that will provide:
   *
   * 1. A function that initializes the key and seed of a PRNG context. It
   *   will be given a 16 byte key and a 16 byte seed. Any key expansion
   *   or transformation of the seed from a byte string into an array of
   *   integers (or similar) should be performed.
   * 2. The cryptographic function used by the generator. It takes a key and
   *   a seed.
   * 3. A seed increment function. It takes the seed and returns seed + 1.
   * 4. An api to create a message digest.
   *
   * For an example, see random.js.
   *
   * @param plugin the PRNG plugin to use.
   */
  prng.create = function(plugin) {
    var ctx = {
      plugin: plugin,
      key: null,
      seed: null,
      time: null,
      // number of reseeds so far
      reseeds: 0,
      // amount of data generated so far
      generated: 0,
      // no initial key bytes
      keyBytes: ''
    };

    // create 32 entropy pools (each is a message digest)
    var md = plugin.md;
    var pools = new Array(32);
    for(var i = 0; i < 32; ++i) {
      pools[i] = md.create();
    }
    ctx.pools = pools;

    // entropy pools are written to cyclically, starting at index 0
    ctx.pool = 0;

    /**
     * Generates random bytes. The bytes may be generated synchronously or
     * asynchronously. Web workers must use the asynchronous interface or
     * else the behavior is undefined.
     *
     * @param count the number of random bytes to generate.
     * @param [callback(err, bytes)] called once the operation completes.
     *
     * @return count random bytes as a string.
     */
    ctx.generate = function(count, callback) {
      // do synchronously
      if(!callback) {
        return ctx.generateSync(count);
      }

      // simple generator using counter-based CBC
      var cipher = ctx.plugin.cipher;
      var increment = ctx.plugin.increment;
      var formatKey = ctx.plugin.formatKey;
      var formatSeed = ctx.plugin.formatSeed;
      var b = forge$9.util.createBuffer();

      // paranoid deviation from Fortuna:
      // reset key for every request to protect previously
      // generated random bytes should the key be discovered;
      // there is no 100ms based reseeding because of this
      // forced reseed for every `generate` call
      ctx.key = null;

      generate();

      function generate(err) {
        if(err) {
          return callback(err);
        }

        // sufficient bytes generated
        if(b.length() >= count) {
          return callback(null, b.getBytes(count));
        }

        // if amount of data generated is greater than 1 MiB, trigger reseed
        if(ctx.generated > 0xfffff) {
          ctx.key = null;
        }

        if(ctx.key === null) {
          // prevent stack overflow
          return forge$9.util.nextTick(function() {
            _reseed(generate);
          });
        }

        // generate the random bytes
        var bytes = cipher(ctx.key, ctx.seed);
        ctx.generated += bytes.length;
        b.putBytes(bytes);

        // generate bytes for a new key and seed
        ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
        ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));

        forge$9.util.setImmediate(generate);
      }
    };

    /**
     * Generates random bytes synchronously.
     *
     * @param count the number of random bytes to generate.
     *
     * @return count random bytes as a string.
     */
    ctx.generateSync = function(count) {
      // simple generator using counter-based CBC
      var cipher = ctx.plugin.cipher;
      var increment = ctx.plugin.increment;
      var formatKey = ctx.plugin.formatKey;
      var formatSeed = ctx.plugin.formatSeed;

      // paranoid deviation from Fortuna:
      // reset key for every request to protect previously
      // generated random bytes should the key be discovered;
      // there is no 100ms based reseeding because of this
      // forced reseed for every `generateSync` call
      ctx.key = null;

      var b = forge$9.util.createBuffer();
      while(b.length() < count) {
        // if amount of data generated is greater than 1 MiB, trigger reseed
        if(ctx.generated > 0xfffff) {
          ctx.key = null;
        }

        if(ctx.key === null) {
          _reseedSync();
        }

        // generate the random bytes
        var bytes = cipher(ctx.key, ctx.seed);
        ctx.generated += bytes.length;
        b.putBytes(bytes);

        // generate bytes for a new key and seed
        ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
        ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
      }

      return b.getBytes(count);
    };

    /**
     * Private function that asynchronously reseeds a generator.
     *
     * @param callback(err) called once the operation completes.
     */
    function _reseed(callback) {
      if(ctx.pools[0].messageLength >= 32) {
        _seed();
        return callback();
      }
      // not enough seed data...
      var needed = (32 - ctx.pools[0].messageLength) << 5;
      ctx.seedFile(needed, function(err, bytes) {
        if(err) {
          return callback(err);
        }
        ctx.collect(bytes);
        _seed();
        callback();
      });
    }

    /**
     * Private function that synchronously reseeds a generator.
     */
    function _reseedSync() {
      if(ctx.pools[0].messageLength >= 32) {
        return _seed();
      }
      // not enough seed data...
      var needed = (32 - ctx.pools[0].messageLength) << 5;
      ctx.collect(ctx.seedFileSync(needed));
      _seed();
    }

    /**
     * Private function that seeds a generator once enough bytes are available.
     */
    function _seed() {
      // update reseed count
      ctx.reseeds = (ctx.reseeds === 0xffffffff) ? 0 : ctx.reseeds + 1;

      // goal is to update `key` via:
      // key = hash(key + s)
      //   where 's' is all collected entropy from selected pools, then...

      // create a plugin-based message digest
      var md = ctx.plugin.md.create();

      // consume current key bytes
      md.update(ctx.keyBytes);

      // digest the entropy of pools whose index k meet the
      // condition 'n mod 2^k == 0' where n is the number of reseeds
      var _2powK = 1;
      for(var k = 0; k < 32; ++k) {
        if(ctx.reseeds % _2powK === 0) {
          md.update(ctx.pools[k].digest().getBytes());
          ctx.pools[k].start();
        }
        _2powK = _2powK << 1;
      }

      // get digest for key bytes
      ctx.keyBytes = md.digest().getBytes();

      // paranoid deviation from Fortuna:
      // update `seed` via `seed = hash(key)`
      // instead of initializing to zero once and only
      // ever incrementing it
      md.start();
      md.update(ctx.keyBytes);
      var seedBytes = md.digest().getBytes();

      // update state
      ctx.key = ctx.plugin.formatKey(ctx.keyBytes);
      ctx.seed = ctx.plugin.formatSeed(seedBytes);
      ctx.generated = 0;
    }

    /**
     * The built-in default seedFile. This seedFile is used when entropy
     * is needed immediately.
     *
     * @param needed the number of bytes that are needed.
     *
     * @return the random bytes.
     */
    function defaultSeedFile(needed) {
      // use window.crypto.getRandomValues strong source of entropy if available
      var getRandomValues = null;
      var globalScope = forge$9.util.globalScope;
      var _crypto = globalScope.crypto || globalScope.msCrypto;
      if(_crypto && _crypto.getRandomValues) {
        getRandomValues = function(arr) {
          return _crypto.getRandomValues(arr);
        };
      }

      var b = forge$9.util.createBuffer();
      if(getRandomValues) {
        while(b.length() < needed) {
          // max byte length is 65536 before QuotaExceededError is thrown
          // http://www.w3.org/TR/WebCryptoAPI/#RandomSource-method-getRandomValues
          var count = Math.max(1, Math.min(needed - b.length(), 65536) / 4);
          var entropy = new Uint32Array(Math.floor(count));
          try {
            getRandomValues(entropy);
            for(var i = 0; i < entropy.length; ++i) {
              b.putInt32(entropy[i]);
            }
          } catch(e) {
            /* only ignore QuotaExceededError */
            if(!(typeof QuotaExceededError !== 'undefined' &&
              e instanceof QuotaExceededError)) {
              throw e;
            }
          }
        }
      }

      // be sad and add some weak random data
      if(b.length() < needed) {
        /* Draws from Park-Miller "minimal standard" 31 bit PRNG,
        implemented with David G. Carta's optimization: with 32 bit math
        and without division (Public Domain). */
        var hi, lo, next;
        var seed = Math.floor(Math.random() * 0x010000);
        while(b.length() < needed) {
          lo = 16807 * (seed & 0xFFFF);
          hi = 16807 * (seed >> 16);
          lo += (hi & 0x7FFF) << 16;
          lo += hi >> 15;
          lo = (lo & 0x7FFFFFFF) + (lo >> 31);
          seed = lo & 0xFFFFFFFF;

          // consume lower 3 bytes of seed
          for(var i = 0; i < 3; ++i) {
            // throw in more pseudo random
            next = seed >>> (i << 3);
            next ^= Math.floor(Math.random() * 0x0100);
            b.putByte(next & 0xFF);
          }
        }
      }

      return b.getBytes(needed);
    }
    // initialize seed file APIs
    if(_crypto$1) {
      // use nodejs async API
      ctx.seedFile = function(needed, callback) {
        _crypto$1.randomBytes(needed, function(err, bytes) {
          if(err) {
            return callback(err);
          }
          callback(null, bytes.toString());
        });
      };
      // use nodejs sync API
      ctx.seedFileSync = function(needed) {
        return _crypto$1.randomBytes(needed).toString();
      };
    } else {
      ctx.seedFile = function(needed, callback) {
        try {
          callback(null, defaultSeedFile(needed));
        } catch(e) {
          callback(e);
        }
      };
      ctx.seedFileSync = defaultSeedFile;
    }

    /**
     * Adds entropy to a prng ctx's accumulator.
     *
     * @param bytes the bytes of entropy as a string.
     */
    ctx.collect = function(bytes) {
      // iterate over pools distributing entropy cyclically
      var count = bytes.length;
      for(var i = 0; i < count; ++i) {
        ctx.pools[ctx.pool].update(bytes.substr(i, 1));
        ctx.pool = (ctx.pool === 31) ? 0 : ctx.pool + 1;
      }
    };

    /**
     * Collects an integer of n bits.
     *
     * @param i the integer entropy.
     * @param n the number of bits in the integer.
     */
    ctx.collectInt = function(i, n) {
      var bytes = '';
      for(var x = 0; x < n; x += 8) {
        bytes += String.fromCharCode((i >> x) & 0xFF);
      }
      ctx.collect(bytes);
    };

    /**
     * Registers a Web Worker to receive immediate entropy from the main thread.
     * This method is required until Web Workers can access the native crypto
     * API. This method should be called twice for each created worker, once in
     * the main thread, and once in the worker itself.
     *
     * @param worker the worker to register.
     */
    ctx.registerWorker = function(worker) {
      // worker receives random bytes
      if(worker === self) {
        ctx.seedFile = function(needed, callback) {
          function listener(e) {
            var data = e.data;
            if(data.forge && data.forge.prng) {
              self.removeEventListener('message', listener);
              callback(data.forge.prng.err, data.forge.prng.bytes);
            }
          }
          self.addEventListener('message', listener);
          self.postMessage({forge: {prng: {needed: needed}}});
        };
      } else {
        // main thread sends random bytes upon request
        var listener = function(e) {
          var data = e.data;
          if(data.forge && data.forge.prng) {
            ctx.seedFile(data.forge.prng.needed, function(err, bytes) {
              worker.postMessage({forge: {prng: {err: err, bytes: bytes}}});
            });
          }
        };
        // TODO: do we need to remove the event listener when the worker dies?
        worker.addEventListener('message', listener);
      }
    };

    return ctx;
  };

  /**
   * An API for getting cryptographically-secure random bytes. The bytes are
   * generated using the Fortuna algorithm devised by Bruce Schneier and
   * Niels Ferguson.
   *
   * Getting strong random bytes is not yet easy to do in javascript. The only
   * truish random entropy that can be collected is from the mouse, keyboard, or
   * from timing with respect to page loads, etc. This generator makes a poor
   * attempt at providing random bytes when those sources haven't yet provided
   * enough entropy to initially seed or to reseed the PRNG.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2009-2014 Digital Bazaar, Inc.
   */

  var forge$8 = forge$m;





  (function() {

  // forge.random already defined
  if(forge$8.random && forge$8.random.getBytes) {
    forge$8.random;
    return;
  }

  (function(jQuery) {

  // the default prng plugin, uses AES-128
  var prng_aes = {};
  var _prng_aes_output = new Array(4);
  var _prng_aes_buffer = forge$8.util.createBuffer();
  prng_aes.formatKey = function(key) {
    // convert the key into 32-bit integers
    var tmp = forge$8.util.createBuffer(key);
    key = new Array(4);
    key[0] = tmp.getInt32();
    key[1] = tmp.getInt32();
    key[2] = tmp.getInt32();
    key[3] = tmp.getInt32();

    // return the expanded key
    return forge$8.aes._expandKey(key, false);
  };
  prng_aes.formatSeed = function(seed) {
    // convert seed into 32-bit integers
    var tmp = forge$8.util.createBuffer(seed);
    seed = new Array(4);
    seed[0] = tmp.getInt32();
    seed[1] = tmp.getInt32();
    seed[2] = tmp.getInt32();
    seed[3] = tmp.getInt32();
    return seed;
  };
  prng_aes.cipher = function(key, seed) {
    forge$8.aes._updateBlock(key, seed, _prng_aes_output, false);
    _prng_aes_buffer.putInt32(_prng_aes_output[0]);
    _prng_aes_buffer.putInt32(_prng_aes_output[1]);
    _prng_aes_buffer.putInt32(_prng_aes_output[2]);
    _prng_aes_buffer.putInt32(_prng_aes_output[3]);
    return _prng_aes_buffer.getBytes();
  };
  prng_aes.increment = function(seed) {
    // FIXME: do we care about carry or signed issues?
    ++seed[3];
    return seed;
  };
  prng_aes.md = forge$8.md.sha256;

  /**
   * Creates a new PRNG.
   */
  function spawnPrng() {
    var ctx = forge$8.prng.create(prng_aes);

    /**
     * Gets random bytes. If a native secure crypto API is unavailable, this
     * method tries to make the bytes more unpredictable by drawing from data that
     * can be collected from the user of the browser, eg: mouse movement.
     *
     * If a callback is given, this method will be called asynchronously.
     *
     * @param count the number of random bytes to get.
     * @param [callback(err, bytes)] called once the operation completes.
     *
     * @return the random bytes in a string.
     */
    ctx.getBytes = function(count, callback) {
      return ctx.generate(count, callback);
    };

    /**
     * Gets random bytes asynchronously. If a native secure crypto API is
     * unavailable, this method tries to make the bytes more unpredictable by
     * drawing from data that can be collected from the user of the browser,
     * eg: mouse movement.
     *
     * @param count the number of random bytes to get.
     *
     * @return the random bytes in a string.
     */
    ctx.getBytesSync = function(count) {
      return ctx.generate(count);
    };

    return ctx;
  }

  // create default prng context
  var _ctx = spawnPrng();

  // add other sources of entropy only if window.crypto.getRandomValues is not
  // available -- otherwise this source will be automatically used by the prng
  var getRandomValues = null;
  var globalScope = forge$8.util.globalScope;
  var _crypto = globalScope.crypto || globalScope.msCrypto;
  if(_crypto && _crypto.getRandomValues) {
    getRandomValues = function(arr) {
      return _crypto.getRandomValues(arr);
    };
  }

  if(forge$8.options.usePureJavaScript ||
    (!forge$8.util.isNodejs && !getRandomValues)) {

    // get load time entropy
    _ctx.collectInt(+new Date(), 32);

    // add some entropy from navigator object
    if(typeof(navigator) !== 'undefined') {
      var _navBytes = '';
      for(var key in navigator) {
        try {
          if(typeof(navigator[key]) == 'string') {
            _navBytes += navigator[key];
          }
        } catch(e) {
          /* Some navigator keys might not be accessible, e.g. the geolocation
            attribute throws an exception if touched in Mozilla chrome://
            context.

            Silently ignore this and just don't use this as a source of
            entropy. */
        }
      }
      _ctx.collect(_navBytes);
      _navBytes = null;
    }

    // add mouse and keyboard collectors if jquery is available
    if(jQuery) {
      // set up mouse entropy capture
      jQuery().mousemove(function(e) {
        // add mouse coords
        _ctx.collectInt(e.clientX, 16);
        _ctx.collectInt(e.clientY, 16);
      });

      // set up keyboard entropy capture
      jQuery().keypress(function(e) {
        _ctx.collectInt(e.charCode, 8);
      });
    }
  }

  /* Random API */
  if(!forge$8.random) {
    forge$8.random = _ctx;
  } else {
    // extend forge.random with _ctx
    for(var key in _ctx) {
      forge$8.random[key] = _ctx[key];
    }
  }

  // expose spawn PRNG
  forge$8.random.createInstance = spawnPrng;

  forge$8.random;

  })(typeof(jQuery) !== 'undefined' ? jQuery : null);

  })();

  /**
   * RC2 implementation.
   *
   * @author Stefan Siegl
   *
   * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
   *
   * Information on the RC2 cipher is available from RFC #2268,
   * http://www.ietf.org/rfc/rfc2268.txt
   */

  var forge$7 = forge$m;


  var piTable = [
    0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d,
    0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2,
    0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32,
    0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82,
    0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc,
    0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26,
    0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03,
    0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7,
    0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a,
    0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec,
    0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39,
    0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31,
    0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9,
    0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9,
    0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e,
    0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad
  ];

  var s = [1, 2, 3, 5];

  /**
   * Rotate a word left by given number of bits.
   *
   * Bits that are shifted out on the left are put back in on the right
   * hand side.
   *
   * @param word The word to shift left.
   * @param bits The number of bits to shift by.
   * @return The rotated word.
   */
  var rol = function(word, bits) {
    return ((word << bits) & 0xffff) | ((word & 0xffff) >> (16 - bits));
  };

  /**
   * Rotate a word right by given number of bits.
   *
   * Bits that are shifted out on the right are put back in on the left
   * hand side.
   *
   * @param word The word to shift right.
   * @param bits The number of bits to shift by.
   * @return The rotated word.
   */
  var ror = function(word, bits) {
    return ((word & 0xffff) >> bits) | ((word << (16 - bits)) & 0xffff);
  };

  /* RC2 API */
  forge$7.rc2 = forge$7.rc2 || {};

  /**
   * Perform RC2 key expansion as per RFC #2268, section 2.
   *
   * @param key variable-length user key (between 1 and 128 bytes)
   * @param effKeyBits number of effective key bits (default: 128)
   * @return the expanded RC2 key (ByteBuffer of 128 bytes)
   */
  forge$7.rc2.expandKey = function(key, effKeyBits) {
    if(typeof key === 'string') {
      key = forge$7.util.createBuffer(key);
    }
    effKeyBits = effKeyBits || 128;

    /* introduce variables that match the names used in RFC #2268 */
    var L = key;
    var T = key.length();
    var T1 = effKeyBits;
    var T8 = Math.ceil(T1 / 8);
    var TM = 0xff >> (T1 & 0x07);
    var i;

    for(i = T; i < 128; i++) {
      L.putByte(piTable[(L.at(i - 1) + L.at(i - T)) & 0xff]);
    }

    L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);

    for(i = 127 - T8; i >= 0; i--) {
      L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);
    }

    return L;
  };

  /**
   * Creates a RC2 cipher object.
   *
   * @param key the symmetric key to use (as base for key generation).
   * @param bits the number of effective key bits.
   * @param encrypt false for decryption, true for encryption.
   *
   * @return the cipher.
   */
  var createCipher = function(key, bits, encrypt) {
    var _finish = false, _input = null, _output = null, _iv = null;
    var mixRound, mashRound;
    var i, j, K = [];

    /* Expand key and fill into K[] Array */
    key = forge$7.rc2.expandKey(key, bits);
    for(i = 0; i < 64; i++) {
      K.push(key.getInt16Le());
    }

    if(encrypt) {
      /**
       * Perform one mixing round "in place".
       *
       * @param R Array of four words to perform mixing on.
       */
      mixRound = function(R) {
        for(i = 0; i < 4; i++) {
          R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +
            ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);
          R[i] = rol(R[i], s[i]);
          j++;
        }
      };

      /**
       * Perform one mashing round "in place".
       *
       * @param R Array of four words to perform mashing on.
       */
      mashRound = function(R) {
        for(i = 0; i < 4; i++) {
          R[i] += K[R[(i + 3) % 4] & 63];
        }
      };
    } else {
      /**
       * Perform one r-mixing round "in place".
       *
       * @param R Array of four words to perform mixing on.
       */
      mixRound = function(R) {
        for(i = 3; i >= 0; i--) {
          R[i] = ror(R[i], s[i]);
          R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +
            ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);
          j--;
        }
      };

      /**
       * Perform one r-mashing round "in place".
       *
       * @param R Array of four words to perform mashing on.
       */
      mashRound = function(R) {
        for(i = 3; i >= 0; i--) {
          R[i] -= K[R[(i + 3) % 4] & 63];
        }
      };
    }

    /**
     * Run the specified cipher execution plan.
     *
     * This function takes four words from the input buffer, applies the IV on
     * it (if requested) and runs the provided execution plan.
     *
     * The plan must be put together in form of a array of arrays.  Where the
     * outer one is simply a list of steps to perform and the inner one needs
     * to have two elements: the first one telling how many rounds to perform,
     * the second one telling what to do (i.e. the function to call).
     *
     * @param {Array} plan The plan to execute.
     */
    var runPlan = function(plan) {
      var R = [];

      /* Get data from input buffer and fill the four words into R */
      for(i = 0; i < 4; i++) {
        var val = _input.getInt16Le();

        if(_iv !== null) {
          if(encrypt) {
            /* We're encrypting, apply the IV first. */
            val ^= _iv.getInt16Le();
          } else {
            /* We're decryption, keep cipher text for next block. */
            _iv.putInt16Le(val);
          }
        }

        R.push(val & 0xffff);
      }

      /* Reset global "j" variable as per spec. */
      j = encrypt ? 0 : 63;

      /* Run execution plan. */
      for(var ptr = 0; ptr < plan.length; ptr++) {
        for(var ctr = 0; ctr < plan[ptr][0]; ctr++) {
          plan[ptr][1](R);
        }
      }

      /* Write back result to output buffer. */
      for(i = 0; i < 4; i++) {
        if(_iv !== null) {
          if(encrypt) {
            /* We're encrypting in CBC-mode, feed back encrypted bytes into
               IV buffer to carry it forward to next block. */
            _iv.putInt16Le(R[i]);
          } else {
            R[i] ^= _iv.getInt16Le();
          }
        }

        _output.putInt16Le(R[i]);
      }
    };

    /* Create cipher object */
    var cipher = null;
    cipher = {
      /**
       * Starts or restarts the encryption or decryption process, whichever
       * was previously configured.
       *
       * To use the cipher in CBC mode, iv may be given either as a string
       * of bytes, or as a byte buffer.  For ECB mode, give null as iv.
       *
       * @param iv the initialization vector to use, null for ECB mode.
       * @param output the output the buffer to write to, null to create one.
       */
      start: function(iv, output) {
        if(iv) {
          /* CBC mode */
          if(typeof iv === 'string') {
            iv = forge$7.util.createBuffer(iv);
          }
        }

        _finish = false;
        _input = forge$7.util.createBuffer();
        _output = output || new forge$7.util.createBuffer();
        _iv = iv;

        cipher.output = _output;
      },

      /**
       * Updates the next block.
       *
       * @param input the buffer to read from.
       */
      update: function(input) {
        if(!_finish) {
          // not finishing, so fill the input buffer with more input
          _input.putBuffer(input);
        }

        while(_input.length() >= 8) {
          runPlan([
              [ 5, mixRound ],
              [ 1, mashRound ],
              [ 6, mixRound ],
              [ 1, mashRound ],
              [ 5, mixRound ]
            ]);
        }
      },

      /**
       * Finishes encrypting or decrypting.
       *
       * @param pad a padding function to use, null for PKCS#7 padding,
       *           signature(blockSize, buffer, decrypt).
       *
       * @return true if successful, false on error.
       */
      finish: function(pad) {
        var rval = true;

        if(encrypt) {
          if(pad) {
            rval = pad(8, _input, !encrypt);
          } else {
            // add PKCS#7 padding to block (each pad byte is the
            // value of the number of pad bytes)
            var padding = (_input.length() === 8) ? 8 : (8 - _input.length());
            _input.fillWithByte(padding, padding);
          }
        }

        if(rval) {
          // do final update
          _finish = true;
          cipher.update();
        }

        if(!encrypt) {
          // check for error: input data not a multiple of block size
          rval = (_input.length() === 0);
          if(rval) {
            if(pad) {
              rval = pad(8, _output, !encrypt);
            } else {
              // ensure padding byte count is valid
              var len = _output.length();
              var count = _output.at(len - 1);

              if(count > len) {
                rval = false;
              } else {
                // trim off padding bytes
                _output.truncate(count);
              }
            }
          }
        }

        return rval;
      }
    };

    return cipher;
  };

  /**
   * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
   * given symmetric key. The output will be stored in the 'output' member
   * of the returned cipher.
   *
   * The key and iv may be given as a string of bytes or a byte buffer.
   * The cipher is initialized to use 128 effective key bits.
   *
   * @param key the symmetric key to use.
   * @param iv the initialization vector to use.
   * @param output the buffer to write to, null to create one.
   *
   * @return the cipher.
   */
  forge$7.rc2.startEncrypting = function(key, iv, output) {
    var cipher = forge$7.rc2.createEncryptionCipher(key, 128);
    cipher.start(iv, output);
    return cipher;
  };

  /**
   * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
   * given symmetric key.
   *
   * The key may be given as a string of bytes or a byte buffer.
   *
   * To start encrypting call start() on the cipher with an iv and optional
   * output buffer.
   *
   * @param key the symmetric key to use.
   *
   * @return the cipher.
   */
  forge$7.rc2.createEncryptionCipher = function(key, bits) {
    return createCipher(key, bits, true);
  };

  /**
   * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
   * given symmetric key. The output will be stored in the 'output' member
   * of the returned cipher.
   *
   * The key and iv may be given as a string of bytes or a byte buffer.
   * The cipher is initialized to use 128 effective key bits.
   *
   * @param key the symmetric key to use.
   * @param iv the initialization vector to use.
   * @param output the buffer to write to, null to create one.
   *
   * @return the cipher.
   */
  forge$7.rc2.startDecrypting = function(key, iv, output) {
    var cipher = forge$7.rc2.createDecryptionCipher(key, 128);
    cipher.start(iv, output);
    return cipher;
  };

  /**
   * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
   * given symmetric key.
   *
   * The key may be given as a string of bytes or a byte buffer.
   *
   * To start decrypting call start() on the cipher with an iv and optional
   * output buffer.
   *
   * @param key the symmetric key to use.
   *
   * @return the cipher.
   */
  forge$7.rc2.createDecryptionCipher = function(key, bits) {
    return createCipher(key, bits, false);
  };

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // See "LICENSE" for details.

  // Basic JavaScript BN library - subset useful for RSA encryption.

  /*
  Licensing (LICENSE)
  -------------------

  This software is covered under the following copyright:
  */
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  /*
  Address all questions regarding this license to:

    Tom Wu
    tjw@cs.Stanford.EDU
  */
  var forge$6 = forge$m;

  forge$6.jsbn = forge$6.jsbn || {};

  // Bits per digit
  var dbits;

  // (public) Constructor
  function BigInteger$2(a,b,c) {
    this.data = [];
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  forge$6.jsbn.BigInteger = BigInteger$2;

  // return new, unset BigInteger
  function nbi() { return new BigInteger$2(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this.data[i++]+w.data[j]+c;
      c = Math.floor(v/0x4000000);
      w.data[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this.data[i]&0x7fff;
      var h = this.data[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w.data[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w.data[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this.data[i]&0x3fff;
      var h = this.data[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w.data[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w.data[j++] = l&0xfffffff;
    }
    return c;
  }

  // node.js (no browser)
  if(typeof(navigator) === 'undefined')
  {
     BigInteger$2.prototype.am = am3;
     dbits = 28;
  } else if((navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger$2.prototype.am = am2;
    dbits = 30;
  } else if((navigator.appName != "Netscape")) {
    BigInteger$2.prototype.am = am1;
    dbits = 26;
  } else { // Mozilla/Netscape seems to prefer am3
    BigInteger$2.prototype.am = am3;
    dbits = 28;
  }

  BigInteger$2.prototype.DB = dbits;
  BigInteger$2.prototype.DM = ((1<<dbits)-1);
  BigInteger$2.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger$2.prototype.FV = Math.pow(2,BI_FP);
  BigInteger$2.prototype.F1 = BI_FP-dbits;
  BigInteger$2.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r.data[i] = this.data[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this.data[0] = x;
    else if(x < -1) this.data[0] = x+this.DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this.data[this.t++] = x;
      else if(sh+k > this.DB) {
        this.data[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this.data[this.t++] = (x>>(this.DB-sh));
      } else
        this.data[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this.data[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger$2.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this.data[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this.data[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this.data[i]&((1<<p)-1))<<(k-p);
          d |= this.data[--i]>>(p+=this.DB-k);
        } else {
          d = (this.data[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger$2.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this.data[i]-a.data[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this.data[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r.data[i+n] = this.data[i];
    for(i = n-1; i >= 0; --i) r.data[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r.data[i-n] = this.data[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r.data[i+ds+1] = (this.data[i]>>cbs)|c;
      c = (this.data[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r.data[i] = 0;
    r.data[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r.data[0] = this.data[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r.data[i-ds-1] |= (this.data[i]&bm)<<cbs;
      r.data[i-ds] = this.data[i]>>bs;
    }
    if(bs > 0) r.data[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this.data[i]-a.data[i];
      r.data[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this.data[i];
        r.data[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    } else {
      c += this.s;
      while(i < a.t) {
        c -= a.data[i];
        r.data[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r.data[i++] = this.DV+c;
    else if(c > 0) r.data[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r.data[i] = 0;
    for(i = 0; i < y.t; ++i) r.data[i+x.t] = x.am(0,y.data[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger$2.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r.data[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x.data[i],r,2*i,0,1);
      if((r.data[i+x.t]+=x.am(i+1,2*x.data[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r.data[i+x.t] -= x.DV;
        r.data[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r.data[r.t-1] += x.am(i,x.data[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm.data[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); } else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y.data[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y.data[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r.data[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger$2.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y.data[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r.data[--i]==y0)?this.DM:Math.floor(r.data[i]*d1+(r.data[i-1]+e)*d2);
      if((r.data[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r.data[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger$2.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger$2.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger$2.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this.data[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger$2.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x.data[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x.data[i]*mp mod DV
      var j = x.data[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x.data[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x.data[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x.data[j] >= x.DV) { x.data[j] -= x.DV; x.data[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this.data[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger$2.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger$2.prototype.copyTo = bnpCopyTo;
  BigInteger$2.prototype.fromInt = bnpFromInt;
  BigInteger$2.prototype.fromString = bnpFromString;
  BigInteger$2.prototype.clamp = bnpClamp;
  BigInteger$2.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger$2.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger$2.prototype.lShiftTo = bnpLShiftTo;
  BigInteger$2.prototype.rShiftTo = bnpRShiftTo;
  BigInteger$2.prototype.subTo = bnpSubTo;
  BigInteger$2.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger$2.prototype.squareTo = bnpSquareTo;
  BigInteger$2.prototype.divRemTo = bnpDivRemTo;
  BigInteger$2.prototype.invDigit = bnpInvDigit;
  BigInteger$2.prototype.isEven = bnpIsEven;
  BigInteger$2.prototype.exp = bnpExp;

  // public
  BigInteger$2.prototype.toString = bnToString;
  BigInteger$2.prototype.negate = bnNegate;
  BigInteger$2.prototype.abs = bnAbs;
  BigInteger$2.prototype.compareTo = bnCompareTo;
  BigInteger$2.prototype.bitLength = bnBitLength;
  BigInteger$2.prototype.mod = bnMod;
  BigInteger$2.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger$2.ZERO = nbv(0);
  BigInteger$2.ONE = nbv(1);

  // jsbn2 lib

  //Copyright (c) 2005-2009  Tom Wu
  //All Rights Reserved.
  //See "LICENSE" for details (See jsbn.js for LICENSE).

  //Extended JavaScript BN functions, required for RSA private ops.

  //Version 1.1: new BigInteger("0", 10) returns "proper" zero

  //(public)
  function bnClone() { var r = nbi(); this.copyTo(r); return r; }

  //(public) return value as integer
  function bnIntValue() {
  if(this.s < 0) {
   if(this.t == 1) return this.data[0]-this.DV;
   else if(this.t == 0) return -1;
  } else if(this.t == 1) return this.data[0];
  else if(this.t == 0) return 0;
  // assumes 16 < DB < 32
  return ((this.data[1]&((1<<(32-this.DB))-1))<<this.DB)|this.data[0];
  }

  //(public) return value as byte
  function bnByteValue() { return (this.t==0)?this.s:(this.data[0]<<24)>>24; }

  //(public) return value as short (assumes DB>=16)
  function bnShortValue() { return (this.t==0)?this.s:(this.data[0]<<16)>>16; }

  //(protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  //(public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
  if(this.s < 0) return -1;
  else if(this.t <= 0 || (this.t == 1 && this.data[0] <= 0)) return 0;
  else return 1;
  }

  //(protected) convert to radix string
  function bnpToRadix(b) {
  if(b == null) b = 10;
  if(this.signum() == 0 || b < 2 || b > 36) return "0";
  var cs = this.chunkSize(b);
  var a = Math.pow(b,cs);
  var d = nbv(a), y = nbi(), z = nbi(), r = "";
  this.divRemTo(d,y,z);
  while(y.signum() > 0) {
   r = (a+z.intValue()).toString(b).substr(1) + r;
   y.divRemTo(d,y,z);
  }
  return z.intValue().toString(b) + r;
  }

  //(protected) convert from radix string
  function bnpFromRadix(s,b) {
  this.fromInt(0);
  if(b == null) b = 10;
  var cs = this.chunkSize(b);
  var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
  for(var i = 0; i < s.length; ++i) {
   var x = intAt(s,i);
   if(x < 0) {
     if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
     continue;
   }
   w = b*w+x;
   if(++j >= cs) {
     this.dMultiply(d);
     this.dAddOffset(w,0);
     j = 0;
     w = 0;
   }
  }
  if(j > 0) {
   this.dMultiply(Math.pow(b,j));
   this.dAddOffset(w,0);
  }
  if(mi) BigInteger$2.ZERO.subTo(this,this);
  }

  //(protected) alternate constructor
  function bnpFromNumber(a,b,c) {
  if("number" == typeof b) {
   // new BigInteger(int,int,RNG)
   if(a < 2) this.fromInt(1);
   else {
     this.fromNumber(a,c);
     if(!this.testBit(a-1))  // force MSB set
       this.bitwiseTo(BigInteger$2.ONE.shiftLeft(a-1),op_or,this);
     if(this.isEven()) this.dAddOffset(1,0); // force odd
     while(!this.isProbablePrime(b)) {
       this.dAddOffset(2,0);
       if(this.bitLength() > a) this.subTo(BigInteger$2.ONE.shiftLeft(a-1),this);
     }
   }
  } else {
   // new BigInteger(int,RNG)
   var x = new Array(), t = a&7;
   x.length = (a>>3)+1;
   b.nextBytes(x);
   if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
   this.fromString(x,256);
  }
  }

  //(public) convert to bigendian byte array
  function bnToByteArray() {
  var i = this.t, r = new Array();
  r[0] = this.s;
  var p = this.DB-(i*this.DB)%8, d, k = 0;
  if(i-- > 0) {
   if(p < this.DB && (d = this.data[i]>>p) != (this.s&this.DM)>>p)
     r[k++] = d|(this.s<<(this.DB-p));
   while(i >= 0) {
     if(p < 8) {
       d = (this.data[i]&((1<<p)-1))<<(8-p);
       d |= this.data[--i]>>(p+=this.DB-8);
     } else {
       d = (this.data[i]>>(p-=8))&0xff;
       if(p <= 0) { p += this.DB; --i; }
     }
     if((d&0x80) != 0) d |= -256;
     if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;
     if(k > 0 || d != this.s) r[k++] = d;
   }
  }
  return r;
  }

  function bnEquals(a) { return(this.compareTo(a)==0); }
  function bnMin(a) { return (this.compareTo(a)<0)?this:a; }
  function bnMax(a) { return (this.compareTo(a)>0)?this:a; }

  //(protected) r = this op a (bitwise)
  function bnpBitwiseTo(a,op,r) {
  var i, f, m = Math.min(a.t,this.t);
  for(i = 0; i < m; ++i) r.data[i] = op(this.data[i],a.data[i]);
  if(a.t < this.t) {
   f = a.s&this.DM;
   for(i = m; i < this.t; ++i) r.data[i] = op(this.data[i],f);
   r.t = this.t;
  } else {
   f = this.s&this.DM;
   for(i = m; i < a.t; ++i) r.data[i] = op(f,a.data[i]);
   r.t = a.t;
  }
  r.s = op(this.s,a.s);
  r.clamp();
  }

  //(public) this & a
  function op_and(x,y) { return x&y; }
  function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

  //(public) this | a
  function op_or(x,y) { return x|y; }
  function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

  //(public) this ^ a
  function op_xor(x,y) { return x^y; }
  function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

  //(public) this & ~a
  function op_andnot(x,y) { return x&~y; }
  function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

  //(public) ~this
  function bnNot() {
  var r = nbi();
  for(var i = 0; i < this.t; ++i) r.data[i] = this.DM&~this.data[i];
  r.t = this.t;
  r.s = ~this.s;
  return r;
  }

  //(public) this << n
  function bnShiftLeft(n) {
  var r = nbi();
  if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
  return r;
  }

  //(public) this >> n
  function bnShiftRight(n) {
  var r = nbi();
  if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
  return r;
  }

  //return index of lowest 1-bit in x, x < 2^31
  function lbit(x) {
  if(x == 0) return -1;
  var r = 0;
  if((x&0xffff) == 0) { x >>= 16; r += 16; }
  if((x&0xff) == 0) { x >>= 8; r += 8; }
  if((x&0xf) == 0) { x >>= 4; r += 4; }
  if((x&3) == 0) { x >>= 2; r += 2; }
  if((x&1) == 0) ++r;
  return r;
  }

  //(public) returns index of lowest 1-bit (or -1 if none)
  function bnGetLowestSetBit() {
  for(var i = 0; i < this.t; ++i)
   if(this.data[i] != 0) return i*this.DB+lbit(this.data[i]);
  if(this.s < 0) return this.t*this.DB;
  return -1;
  }

  //return number of 1 bits in x
  function cbit(x) {
  var r = 0;
  while(x != 0) { x &= x-1; ++r; }
  return r;
  }

  //(public) return number of set bits
  function bnBitCount() {
  var r = 0, x = this.s&this.DM;
  for(var i = 0; i < this.t; ++i) r += cbit(this.data[i]^x);
  return r;
  }

  //(public) true iff nth bit is set
  function bnTestBit(n) {
  var j = Math.floor(n/this.DB);
  if(j >= this.t) return(this.s!=0);
  return((this.data[j]&(1<<(n%this.DB)))!=0);
  }

  //(protected) this op (1<<n)
  function bnpChangeBit(n,op) {
  var r = BigInteger$2.ONE.shiftLeft(n);
  this.bitwiseTo(r,op,r);
  return r;
  }

  //(public) this | (1<<n)
  function bnSetBit(n) { return this.changeBit(n,op_or); }

  //(public) this & ~(1<<n)
  function bnClearBit(n) { return this.changeBit(n,op_andnot); }

  //(public) this ^ (1<<n)
  function bnFlipBit(n) { return this.changeBit(n,op_xor); }

  //(protected) r = this + a
  function bnpAddTo(a,r) {
  var i = 0, c = 0, m = Math.min(a.t,this.t);
  while(i < m) {
   c += this.data[i]+a.data[i];
   r.data[i++] = c&this.DM;
   c >>= this.DB;
  }
  if(a.t < this.t) {
   c += a.s;
   while(i < this.t) {
     c += this.data[i];
     r.data[i++] = c&this.DM;
     c >>= this.DB;
   }
   c += this.s;
  } else {
   c += this.s;
   while(i < a.t) {
     c += a.data[i];
     r.data[i++] = c&this.DM;
     c >>= this.DB;
   }
   c += a.s;
  }
  r.s = (c<0)?-1:0;
  if(c > 0) r.data[i++] = c;
  else if(c < -1) r.data[i++] = this.DV+c;
  r.t = i;
  r.clamp();
  }

  //(public) this + a
  function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

  //(public) this - a
  function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

  //(public) this * a
  function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

  //(public) this / a
  function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

  //(public) this % a
  function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

  //(public) [this/a,this%a]
  function bnDivideAndRemainder(a) {
  var q = nbi(), r = nbi();
  this.divRemTo(a,q,r);
  return new Array(q,r);
  }

  //(protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
  this.data[this.t] = this.am(0,n-1,this,0,0,this.t);
  ++this.t;
  this.clamp();
  }

  //(protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
  if(n == 0) return;
  while(this.t <= w) this.data[this.t++] = 0;
  this.data[w] += n;
  while(this.data[w] >= this.DV) {
   this.data[w] -= this.DV;
   if(++w >= this.t) this.data[this.t++] = 0;
   ++this.data[w];
  }
  }

  //A "null" reducer
  function NullExp() {}
  function nNop(x) { return x; }
  function nMulTo(x,y,r) { x.multiplyTo(y,r); }
  function nSqrTo(x,r) { x.squareTo(r); }

  NullExp.prototype.convert = nNop;
  NullExp.prototype.revert = nNop;
  NullExp.prototype.mulTo = nMulTo;
  NullExp.prototype.sqrTo = nSqrTo;

  //(public) this^e
  function bnPow(e) { return this.exp(e,new NullExp()); }

  //(protected) r = lower n words of "this * a", a.t <= n
  //"this" should be the larger one if appropriate.
  function bnpMultiplyLowerTo(a,n,r) {
  var i = Math.min(this.t+a.t,n);
  r.s = 0; // assumes a,this >= 0
  r.t = i;
  while(i > 0) r.data[--i] = 0;
  var j;
  for(j = r.t-this.t; i < j; ++i) r.data[i+this.t] = this.am(0,a.data[i],r,i,0,this.t);
  for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a.data[i],r,i,0,n-i);
  r.clamp();
  }

  //(protected) r = "this * a" without lower n words, n > 0
  //"this" should be the larger one if appropriate.
  function bnpMultiplyUpperTo(a,n,r) {
  --n;
  var i = r.t = this.t+a.t-n;
  r.s = 0; // assumes a,this >= 0
  while(--i >= 0) r.data[i] = 0;
  for(i = Math.max(n-this.t,0); i < a.t; ++i)
   r.data[this.t+i-n] = this.am(n-i,a.data[i],r,0,0,this.t+i-n);
  r.clamp();
  r.drShiftTo(1,r);
  }

  //Barrett modular reduction
  function Barrett(m) {
  // setup Barrett
  this.r2 = nbi();
  this.q3 = nbi();
  BigInteger$2.ONE.dlShiftTo(2*m.t,this.r2);
  this.mu = this.r2.divide(m);
  this.m = m;
  }

  function barrettConvert(x) {
  if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
  else if(x.compareTo(this.m) < 0) return x;
  else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
  }

  function barrettRevert(x) { return x; }

  //x = x mod m (HAC 14.42)
  function barrettReduce(x) {
  x.drShiftTo(this.m.t-1,this.r2);
  if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
  this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
  this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
  while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);
  x.subTo(this.r2,x);
  while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  //r = x^2 mod m; x != r
  function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  //r = x*y mod m; x,y != r
  function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Barrett.prototype.convert = barrettConvert;
  Barrett.prototype.revert = barrettRevert;
  Barrett.prototype.reduce = barrettReduce;
  Barrett.prototype.mulTo = barrettMulTo;
  Barrett.prototype.sqrTo = barrettSqrTo;

  //(public) this^e % m (HAC 14.85)
  function bnModPow(e,m) {
  var i = e.bitLength(), k, r = nbv(1), z;
  if(i <= 0) return r;
  else if(i < 18) k = 1;
  else if(i < 48) k = 3;
  else if(i < 144) k = 4;
  else if(i < 768) k = 5;
  else k = 6;
  if(i < 8)
   z = new Classic(m);
  else if(m.isEven())
   z = new Barrett(m);
  else
   z = new Montgomery(m);

  // precomputation
  var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
  g[1] = z.convert(this);
  if(k > 1) {
   var g2 = nbi();
   z.sqrTo(g[1],g2);
   while(n <= km) {
     g[n] = nbi();
     z.mulTo(g2,g[n-2],g[n]);
     n += 2;
   }
  }

  var j = e.t-1, w, is1 = true, r2 = nbi(), t;
  i = nbits(e.data[j])-1;
  while(j >= 0) {
   if(i >= k1) w = (e.data[j]>>(i-k1))&km;
   else {
     w = (e.data[j]&((1<<(i+1))-1))<<(k1-i);
     if(j > 0) w |= e.data[j-1]>>(this.DB+i-k1);
   }

   n = k;
   while((w&1) == 0) { w >>= 1; --n; }
   if((i -= n) < 0) { i += this.DB; --j; }
   if(is1) {  // ret == 1, don't bother squaring or multiplying it
     g[w].copyTo(r);
     is1 = false;
   } else {
     while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
     if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
     z.mulTo(r2,g[w],r);
   }

   while(j >= 0 && (e.data[j]&(1<<i)) == 0) {
     z.sqrTo(r,r2); t = r; r = r2; r2 = t;
     if(--i < 0) { i = this.DB-1; --j; }
   }
  }
  return z.revert(r);
  }

  //(public) gcd(this,a) (HAC 14.54)
  function bnGCD(a) {
  var x = (this.s<0)?this.negate():this.clone();
  var y = (a.s<0)?a.negate():a.clone();
  if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
  var i = x.getLowestSetBit(), g = y.getLowestSetBit();
  if(g < 0) return x;
  if(i < g) g = i;
  if(g > 0) {
   x.rShiftTo(g,x);
   y.rShiftTo(g,y);
  }
  while(x.signum() > 0) {
   if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
   if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
   if(x.compareTo(y) >= 0) {
     x.subTo(y,x);
     x.rShiftTo(1,x);
   } else {
     y.subTo(x,y);
     y.rShiftTo(1,y);
   }
  }
  if(g > 0) y.lShiftTo(g,y);
  return y;
  }

  //(protected) this % n, n < 2^26
  function bnpModInt(n) {
  if(n <= 0) return 0;
  var d = this.DV%n, r = (this.s<0)?n-1:0;
  if(this.t > 0)
   if(d == 0) r = this.data[0]%n;
   else for(var i = this.t-1; i >= 0; --i) r = (d*r+this.data[i])%n;
  return r;
  }

  //(public) 1/this % m (HAC 14.61)
  function bnModInverse(m) {
  var ac = m.isEven();
  if((this.isEven() && ac) || m.signum() == 0) return BigInteger$2.ZERO;
  var u = m.clone(), v = this.clone();
  var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
  while(u.signum() != 0) {
   while(u.isEven()) {
     u.rShiftTo(1,u);
     if(ac) {
       if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
       a.rShiftTo(1,a);
     } else if(!b.isEven()) b.subTo(m,b);
     b.rShiftTo(1,b);
   }
   while(v.isEven()) {
     v.rShiftTo(1,v);
     if(ac) {
       if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
       c.rShiftTo(1,c);
     } else if(!d.isEven()) d.subTo(m,d);
     d.rShiftTo(1,d);
   }
   if(u.compareTo(v) >= 0) {
     u.subTo(v,u);
     if(ac) a.subTo(c,a);
     b.subTo(d,b);
   } else {
     v.subTo(u,v);
     if(ac) c.subTo(a,c);
     d.subTo(b,d);
   }
  }
  if(v.compareTo(BigInteger$2.ONE) != 0) return BigInteger$2.ZERO;
  if(d.compareTo(m) >= 0) return d.subtract(m);
  if(d.signum() < 0) d.addTo(m,d); else return d;
  if(d.signum() < 0) return d.add(m); else return d;
  }

  var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];
  var lplim = (1<<26)/lowprimes[lowprimes.length-1];

  //(public) test primality with certainty >= 1-.5^t
  function bnIsProbablePrime(t) {
  var i, x = this.abs();
  if(x.t == 1 && x.data[0] <= lowprimes[lowprimes.length-1]) {
   for(i = 0; i < lowprimes.length; ++i)
     if(x.data[0] == lowprimes[i]) return true;
   return false;
  }
  if(x.isEven()) return false;
  i = 1;
  while(i < lowprimes.length) {
   var m = lowprimes[i], j = i+1;
   while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];
   m = x.modInt(m);
   while(i < j) if(m%lowprimes[i++] == 0) return false;
  }
  return x.millerRabin(t);
  }

  //(protected) true if probably prime (HAC 4.24, Miller-Rabin)
  function bnpMillerRabin(t) {
  var n1 = this.subtract(BigInteger$2.ONE);
  var k = n1.getLowestSetBit();
  if(k <= 0) return false;
  var r = n1.shiftRight(k);
  var prng = bnGetPrng();
  var a;
  for(var i = 0; i < t; ++i) {
   // select witness 'a' at random from between 1 and n1
   do {
     a = new BigInteger$2(this.bitLength(), prng);
   }
   while(a.compareTo(BigInteger$2.ONE) <= 0 || a.compareTo(n1) >= 0);
   var y = a.modPow(r,this);
   if(y.compareTo(BigInteger$2.ONE) != 0 && y.compareTo(n1) != 0) {
     var j = 1;
     while(j++ < k && y.compareTo(n1) != 0) {
       y = y.modPowInt(2,this);
       if(y.compareTo(BigInteger$2.ONE) == 0) return false;
     }
     if(y.compareTo(n1) != 0) return false;
   }
  }
  return true;
  }

  // get pseudo random number generator
  function bnGetPrng() {
    // create prng with api that matches BigInteger secure random
    return {
      // x is an array to fill with bytes
      nextBytes: function(x) {
        for(var i = 0; i < x.length; ++i) {
          x[i] = Math.floor(Math.random() * 0x0100);
        }
      }
    };
  }

  //protected
  BigInteger$2.prototype.chunkSize = bnpChunkSize;
  BigInteger$2.prototype.toRadix = bnpToRadix;
  BigInteger$2.prototype.fromRadix = bnpFromRadix;
  BigInteger$2.prototype.fromNumber = bnpFromNumber;
  BigInteger$2.prototype.bitwiseTo = bnpBitwiseTo;
  BigInteger$2.prototype.changeBit = bnpChangeBit;
  BigInteger$2.prototype.addTo = bnpAddTo;
  BigInteger$2.prototype.dMultiply = bnpDMultiply;
  BigInteger$2.prototype.dAddOffset = bnpDAddOffset;
  BigInteger$2.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
  BigInteger$2.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
  BigInteger$2.prototype.modInt = bnpModInt;
  BigInteger$2.prototype.millerRabin = bnpMillerRabin;

  //public
  BigInteger$2.prototype.clone = bnClone;
  BigInteger$2.prototype.intValue = bnIntValue;
  BigInteger$2.prototype.byteValue = bnByteValue;
  BigInteger$2.prototype.shortValue = bnShortValue;
  BigInteger$2.prototype.signum = bnSigNum;
  BigInteger$2.prototype.toByteArray = bnToByteArray;
  BigInteger$2.prototype.equals = bnEquals;
  BigInteger$2.prototype.min = bnMin;
  BigInteger$2.prototype.max = bnMax;
  BigInteger$2.prototype.and = bnAnd;
  BigInteger$2.prototype.or = bnOr;
  BigInteger$2.prototype.xor = bnXor;
  BigInteger$2.prototype.andNot = bnAndNot;
  BigInteger$2.prototype.not = bnNot;
  BigInteger$2.prototype.shiftLeft = bnShiftLeft;
  BigInteger$2.prototype.shiftRight = bnShiftRight;
  BigInteger$2.prototype.getLowestSetBit = bnGetLowestSetBit;
  BigInteger$2.prototype.bitCount = bnBitCount;
  BigInteger$2.prototype.testBit = bnTestBit;
  BigInteger$2.prototype.setBit = bnSetBit;
  BigInteger$2.prototype.clearBit = bnClearBit;
  BigInteger$2.prototype.flipBit = bnFlipBit;
  BigInteger$2.prototype.add = bnAdd;
  BigInteger$2.prototype.subtract = bnSubtract;
  BigInteger$2.prototype.multiply = bnMultiply;
  BigInteger$2.prototype.divide = bnDivide;
  BigInteger$2.prototype.remainder = bnRemainder;
  BigInteger$2.prototype.divideAndRemainder = bnDivideAndRemainder;
  BigInteger$2.prototype.modPow = bnModPow;
  BigInteger$2.prototype.modInverse = bnModInverse;
  BigInteger$2.prototype.pow = bnPow;
  BigInteger$2.prototype.gcd = bnGCD;
  BigInteger$2.prototype.isProbablePrime = bnIsProbablePrime;

  /**
   * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2010-2015 Digital Bazaar, Inc.
   */

  var forge$5 = forge$m;



  var sha1 = forge$5.sha1 = forge$5.sha1 || {};
  forge$5.md.sha1 = forge$5.md.algorithms.sha1 = sha1;

  /**
   * Creates a SHA-1 message digest object.
   *
   * @return a message digest object.
   */
  sha1.create = function() {
    // do initialization as necessary
    if(!_initialized$1) {
      _init$1();
    }

    // SHA-1 state contains five 32-bit integers
    var _state = null;

    // input buffer
    var _input = forge$5.util.createBuffer();

    // used for word storage
    var _w = new Array(80);

    // message digest object
    var md = {
      algorithm: 'sha1',
      blockLength: 64,
      digestLength: 20,
      // 56-bit length of message so far (does not including padding)
      messageLength: 0,
      // true message length
      fullMessageLength: null,
      // size of message length in bytes
      messageLengthSize: 8
    };

    /**
     * Starts the digest.
     *
     * @return this digest object.
     */
    md.start = function() {
      // up to 56-bit message length for convenience
      md.messageLength = 0;

      // full message length (set md.messageLength64 for backwards-compatibility)
      md.fullMessageLength = md.messageLength64 = [];
      var int32s = md.messageLengthSize / 4;
      for(var i = 0; i < int32s; ++i) {
        md.fullMessageLength.push(0);
      }
      _input = forge$5.util.createBuffer();
      _state = {
        h0: 0x67452301,
        h1: 0xEFCDAB89,
        h2: 0x98BADCFE,
        h3: 0x10325476,
        h4: 0xC3D2E1F0
      };
      return md;
    };
    // start digest automatically for first time
    md.start();

    /**
     * Updates the digest with the given message input. The given input can
     * treated as raw input (no encoding will be applied) or an encoding of
     * 'utf8' maybe given to encode the input using UTF-8.
     *
     * @param msg the message input to update with.
     * @param encoding the encoding to use (default: 'raw', other: 'utf8').
     *
     * @return this digest object.
     */
    md.update = function(msg, encoding) {
      if(encoding === 'utf8') {
        msg = forge$5.util.encodeUtf8(msg);
      }

      // update message length
      var len = msg.length;
      md.messageLength += len;
      len = [(len / 0x100000000) >>> 0, len >>> 0];
      for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
        md.fullMessageLength[i] += len[1];
        len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
        md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
        len[0] = ((len[1] / 0x100000000) >>> 0);
      }

      // add bytes to input buffer
      _input.putBytes(msg);

      // process bytes
      _update$1(_state, _w, _input);

      // compact input buffer every 2K or if empty
      if(_input.read > 2048 || _input.length() === 0) {
        _input.compact();
      }

      return md;
    };

    /**
     * Produces the digest.
     *
     * @return a byte buffer containing the digest value.
     */
    md.digest = function() {
      /* Note: Here we copy the remaining bytes in the input buffer and
      add the appropriate SHA-1 padding. Then we do the final update
      on a copy of the state so that if the user wants to get
      intermediate digests they can do so. */

      /* Determine the number of bytes that must be added to the message
      to ensure its length is congruent to 448 mod 512. In other words,
      the data to be digested must be a multiple of 512 bits (or 128 bytes).
      This data includes the message, some padding, and the length of the
      message. Since the length of the message will be encoded as 8 bytes (64
      bits), that means that the last segment of the data must have 56 bytes
      (448 bits) of message and padding. Therefore, the length of the message
      plus the padding must be congruent to 448 mod 512 because
      512 - 128 = 448.

      In order to fill up the message length it must be filled with
      padding that begins with 1 bit followed by all 0 bits. Padding
      must *always* be present, so if the message length is already
      congruent to 448 mod 512, then 512 padding bits must be added. */

      var finalBlock = forge$5.util.createBuffer();
      finalBlock.putBytes(_input.bytes());

      // compute remaining size to be digested (include message length size)
      var remaining = (
        md.fullMessageLength[md.fullMessageLength.length - 1] +
        md.messageLengthSize);

      // add padding for overflow blockSize - overflow
      // _padding starts with 1 byte with first bit is set (byte value 128), then
      // there may be up to (blockSize - 1) other pad bytes
      var overflow = remaining & (md.blockLength - 1);
      finalBlock.putBytes(_padding$1.substr(0, md.blockLength - overflow));

      // serialize message length in bits in big-endian order; since length
      // is stored in bytes we multiply by 8 and add carry from next int
      var next, carry;
      var bits = md.fullMessageLength[0] * 8;
      for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {
        next = md.fullMessageLength[i + 1] * 8;
        carry = (next / 0x100000000) >>> 0;
        bits += carry;
        finalBlock.putInt32(bits >>> 0);
        bits = next >>> 0;
      }
      finalBlock.putInt32(bits);

      var s2 = {
        h0: _state.h0,
        h1: _state.h1,
        h2: _state.h2,
        h3: _state.h3,
        h4: _state.h4
      };
      _update$1(s2, _w, finalBlock);
      var rval = forge$5.util.createBuffer();
      rval.putInt32(s2.h0);
      rval.putInt32(s2.h1);
      rval.putInt32(s2.h2);
      rval.putInt32(s2.h3);
      rval.putInt32(s2.h4);
      return rval;
    };

    return md;
  };

  // sha-1 padding bytes not initialized yet
  var _padding$1 = null;
  var _initialized$1 = false;

  /**
   * Initializes the constant tables.
   */
  function _init$1() {
    // create padding
    _padding$1 = String.fromCharCode(128);
    _padding$1 += forge$5.util.fillString(String.fromCharCode(0x00), 64);

    // now initialized
    _initialized$1 = true;
  }

  /**
   * Updates a SHA-1 state with the given byte buffer.
   *
   * @param s the SHA-1 state to update.
   * @param w the array to use to store words.
   * @param bytes the byte buffer to update with.
   */
  function _update$1(s, w, bytes) {
    // consume 512 bit (64 byte) chunks
    var t, a, b, c, d, e, f, i;
    var len = bytes.length();
    while(len >= 64) {
      // the w array will be populated with sixteen 32-bit big-endian words
      // and then extended into 80 32-bit words according to SHA-1 algorithm
      // and for 32-79 using Max Locktyukhin's optimization

      // initialize hash value for this chunk
      a = s.h0;
      b = s.h1;
      c = s.h2;
      d = s.h3;
      e = s.h4;

      // round 1
      for(i = 0; i < 16; ++i) {
        t = bytes.getInt32();
        w[i] = t;
        f = d ^ (b & (c ^ d));
        t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
        e = d;
        d = c;
        // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
        c = ((b << 30) | (b >>> 2)) >>> 0;
        b = a;
        a = t;
      }
      for(; i < 20; ++i) {
        t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
        t = (t << 1) | (t >>> 31);
        w[i] = t;
        f = d ^ (b & (c ^ d));
        t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
        e = d;
        d = c;
        // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
        c = ((b << 30) | (b >>> 2)) >>> 0;
        b = a;
        a = t;
      }
      // round 2
      for(; i < 32; ++i) {
        t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
        t = (t << 1) | (t >>> 31);
        w[i] = t;
        f = b ^ c ^ d;
        t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
        e = d;
        d = c;
        // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
        c = ((b << 30) | (b >>> 2)) >>> 0;
        b = a;
        a = t;
      }
      for(; i < 40; ++i) {
        t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
        t = (t << 2) | (t >>> 30);
        w[i] = t;
        f = b ^ c ^ d;
        t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
        e = d;
        d = c;
        // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
        c = ((b << 30) | (b >>> 2)) >>> 0;
        b = a;
        a = t;
      }
      // round 3
      for(; i < 60; ++i) {
        t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
        t = (t << 2) | (t >>> 30);
        w[i] = t;
        f = (b & c) | (d & (b ^ c));
        t = ((a << 5) | (a >>> 27)) + f + e + 0x8F1BBCDC + t;
        e = d;
        d = c;
        // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
        c = ((b << 30) | (b >>> 2)) >>> 0;
        b = a;
        a = t;
      }
      // round 4
      for(; i < 80; ++i) {
        t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
        t = (t << 2) | (t >>> 30);
        w[i] = t;
        f = b ^ c ^ d;
        t = ((a << 5) | (a >>> 27)) + f + e + 0xCA62C1D6 + t;
        e = d;
        d = c;
        // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
        c = ((b << 30) | (b >>> 2)) >>> 0;
        b = a;
        a = t;
      }

      // update hash state
      s.h0 = (s.h0 + a) | 0;
      s.h1 = (s.h1 + b) | 0;
      s.h2 = (s.h2 + c) | 0;
      s.h3 = (s.h3 + d) | 0;
      s.h4 = (s.h4 + e) | 0;

      len -= 64;
    }
  }

  /**
   * Partial implementation of PKCS#1 v2.2: RSA-OEAP
   *
   * Modified but based on the following MIT and BSD licensed code:
   *
   * https://github.com/kjur/jsjws/blob/master/rsa.js:
   *
   * The 'jsjws'(JSON Web Signature JavaScript Library) License
   *
   * Copyright (c) 2012 Kenji Urushima
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *
   * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:
   *
   * RSAES-OAEP.js
   * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $
   * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)
   * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.
   * Contact: ellis@nukinetics.com
   * Distributed under the BSD License.
   *
   * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125
   *
   * @author Evan Jones (http://evanjones.ca/)
   * @author Dave Longley
   *
   * Copyright (c) 2013-2014 Digital Bazaar, Inc.
   */

  var forge$4 = forge$m;




  // shortcut for PKCS#1 API
  var pkcs1 = forge$4.pkcs1 = forge$4.pkcs1 || {};

  /**
   * Encode the given RSAES-OAEP message (M) using key, with optional label (L)
   * and seed.
   *
   * This method does not perform RSA encryption, it only encodes the message
   * using RSAES-OAEP.
   *
   * @param key the RSA key to use.
   * @param message the message to encode.
   * @param options the options to use:
   *          label an optional label to use.
   *          seed the seed to use.
   *          md the message digest object to use, undefined for SHA-1.
   *          mgf1 optional mgf1 parameters:
   *            md the message digest object to use for MGF1.
   *
   * @return the encoded message bytes.
   */
  pkcs1.encode_rsa_oaep = function(key, message, options) {
    // parse arguments
    var label;
    var seed;
    var md;
    var mgf1Md;
    // legacy args (label, seed, md)
    if(typeof options === 'string') {
      label = options;
      seed = arguments[3] || undefined;
      md = arguments[4] || undefined;
    } else if(options) {
      label = options.label || undefined;
      seed = options.seed || undefined;
      md = options.md || undefined;
      if(options.mgf1 && options.mgf1.md) {
        mgf1Md = options.mgf1.md;
      }
    }

    // default OAEP to SHA-1 message digest
    if(!md) {
      md = forge$4.md.sha1.create();
    } else {
      md.start();
    }

    // default MGF-1 to same as OAEP
    if(!mgf1Md) {
      mgf1Md = md;
    }

    // compute length in bytes and check output
    var keyLength = Math.ceil(key.n.bitLength() / 8);
    var maxLength = keyLength - 2 * md.digestLength - 2;
    if(message.length > maxLength) {
      var error = new Error('RSAES-OAEP input message length is too long.');
      error.length = message.length;
      error.maxLength = maxLength;
      throw error;
    }

    if(!label) {
      label = '';
    }
    md.update(label, 'raw');
    var lHash = md.digest();

    var PS = '';
    var PS_length = maxLength - message.length;
    for(var i = 0; i < PS_length; i++) {
      PS += '\x00';
    }

    var DB = lHash.getBytes() + PS + '\x01' + message;

    if(!seed) {
      seed = forge$4.random.getBytes(md.digestLength);
    } else if(seed.length !== md.digestLength) {
      var error = new Error('Invalid RSAES-OAEP seed. The seed length must ' +
        'match the digest length.');
      error.seedLength = seed.length;
      error.digestLength = md.digestLength;
      throw error;
    }

    var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
    var maskedDB = forge$4.util.xorBytes(DB, dbMask, DB.length);

    var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
    var maskedSeed = forge$4.util.xorBytes(seed, seedMask, seed.length);

    // return encoded message
    return '\x00' + maskedSeed + maskedDB;
  };

  /**
   * Decode the given RSAES-OAEP encoded message (EM) using key, with optional
   * label (L).
   *
   * This method does not perform RSA decryption, it only decodes the message
   * using RSAES-OAEP.
   *
   * @param key the RSA key to use.
   * @param em the encoded message to decode.
   * @param options the options to use:
   *          label an optional label to use.
   *          md the message digest object to use for OAEP, undefined for SHA-1.
   *          mgf1 optional mgf1 parameters:
   *            md the message digest object to use for MGF1.
   *
   * @return the decoded message bytes.
   */
  pkcs1.decode_rsa_oaep = function(key, em, options) {
    // parse args
    var label;
    var md;
    var mgf1Md;
    // legacy args
    if(typeof options === 'string') {
      label = options;
      md = arguments[3] || undefined;
    } else if(options) {
      label = options.label || undefined;
      md = options.md || undefined;
      if(options.mgf1 && options.mgf1.md) {
        mgf1Md = options.mgf1.md;
      }
    }

    // compute length in bytes
    var keyLength = Math.ceil(key.n.bitLength() / 8);

    if(em.length !== keyLength) {
      var error = new Error('RSAES-OAEP encoded message length is invalid.');
      error.length = em.length;
      error.expectedLength = keyLength;
      throw error;
    }

    // default OAEP to SHA-1 message digest
    if(md === undefined) {
      md = forge$4.md.sha1.create();
    } else {
      md.start();
    }

    // default MGF-1 to same as OAEP
    if(!mgf1Md) {
      mgf1Md = md;
    }

    if(keyLength < 2 * md.digestLength + 2) {
      throw new Error('RSAES-OAEP key is too short for the hash function.');
    }

    if(!label) {
      label = '';
    }
    md.update(label, 'raw');
    var lHash = md.digest().getBytes();

    // split the message into its parts
    var y = em.charAt(0);
    var maskedSeed = em.substring(1, md.digestLength + 1);
    var maskedDB = em.substring(1 + md.digestLength);

    var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
    var seed = forge$4.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);

    var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
    var db = forge$4.util.xorBytes(maskedDB, dbMask, maskedDB.length);

    var lHashPrime = db.substring(0, md.digestLength);

    // constant time check that all values match what is expected
    var error = (y !== '\x00');

    // constant time check lHash vs lHashPrime
    for(var i = 0; i < md.digestLength; ++i) {
      error |= (lHash.charAt(i) !== lHashPrime.charAt(i));
    }

    // "constant time" find the 0x1 byte separating the padding (zeros) from the
    // message
    // TODO: It must be possible to do this in a better/smarter way?
    var in_ps = 1;
    var index = md.digestLength;
    for(var j = md.digestLength; j < db.length; j++) {
      var code = db.charCodeAt(j);

      var is_0 = (code & 0x1) ^ 0x1;

      // non-zero if not 0 or 1 in the ps section
      var error_mask = in_ps ? 0xfffe : 0x0000;
      error |= (code & error_mask);

      // latch in_ps to zero after we find 0x1
      in_ps = in_ps & is_0;
      index += in_ps;
    }

    if(error || db.charCodeAt(index) !== 0x1) {
      throw new Error('Invalid RSAES-OAEP padding.');
    }

    return db.substring(index + 1);
  };

  function rsa_mgf1(seed, maskLength, hash) {
    // default to SHA-1 message digest
    if(!hash) {
      hash = forge$4.md.sha1.create();
    }
    var t = '';
    var count = Math.ceil(maskLength / hash.digestLength);
    for(var i = 0; i < count; ++i) {
      var c = String.fromCharCode(
        (i >> 24) & 0xFF, (i >> 16) & 0xFF, (i >> 8) & 0xFF, i & 0xFF);
      hash.start();
      hash.update(seed + c);
      t += hash.digest().getBytes();
    }
    return t.substring(0, maskLength);
  }

  /**
   * Prime number generation API.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2014 Digital Bazaar, Inc.
   */

  var forge$3 = forge$m;




  (function() {

  // forge.prime already defined
  if(forge$3.prime) {
    forge$3.prime;
    return;
  }

  /* PRIME API */
  var prime = forge$3.prime = forge$3.prime || {};

  var BigInteger = forge$3.jsbn.BigInteger;

  // primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
  var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];
  var THIRTY = new BigInteger(null);
  THIRTY.fromInt(30);
  var op_or = function(x, y) {return x|y;};

  /**
   * Generates a random probable prime with the given number of bits.
   *
   * Alternative algorithms can be specified by name as a string or as an
   * object with custom options like so:
   *
   * {
   *   name: 'PRIMEINC',
   *   options: {
   *     maxBlockTime: <the maximum amount of time to block the main
   *       thread before allowing I/O other JS to run>,
   *     millerRabinTests: <the number of miller-rabin tests to run>,
   *     workerScript: <the worker script URL>,
   *     workers: <the number of web workers (if supported) to use,
   *       -1 to use estimated cores minus one>.
   *     workLoad: the size of the work load, ie: number of possible prime
   *       numbers for each web worker to check per work assignment,
   *       (default: 100).
   *   }
   * }
   *
   * @param bits the number of bits for the prime number.
   * @param options the options to use.
   *          [algorithm] the algorithm to use (default: 'PRIMEINC').
   *          [prng] a custom crypto-secure pseudo-random number generator to use,
   *            that must define "getBytesSync".
   *
   * @return callback(err, num) called once the operation completes.
   */
  prime.generateProbablePrime = function(bits, options, callback) {
    if(typeof options === 'function') {
      callback = options;
      options = {};
    }
    options = options || {};

    // default to PRIMEINC algorithm
    var algorithm = options.algorithm || 'PRIMEINC';
    if(typeof algorithm === 'string') {
      algorithm = {name: algorithm};
    }
    algorithm.options = algorithm.options || {};

    // create prng with api that matches BigInteger secure random
    var prng = options.prng || forge$3.random;
    var rng = {
      // x is an array to fill with bytes
      nextBytes: function(x) {
        var b = prng.getBytesSync(x.length);
        for(var i = 0; i < x.length; ++i) {
          x[i] = b.charCodeAt(i);
        }
      }
    };

    if(algorithm.name === 'PRIMEINC') {
      return primeincFindPrime(bits, rng, algorithm.options, callback);
    }

    throw new Error('Invalid prime generation algorithm: ' + algorithm.name);
  };

  function primeincFindPrime(bits, rng, options, callback) {
    if('workers' in options) {
      return primeincFindPrimeWithWorkers(bits, rng, options, callback);
    }
    return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
  }

  function primeincFindPrimeWithoutWorkers(bits, rng, options, callback) {
    // initialize random number
    var num = generateRandom(bits, rng);

    /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The
    number we are given is always aligned at 30k + 1. Each time the number is
    determined not to be prime we add to get to the next 'i', eg: if the number
    was at 30k + 1 we add 6. */
    var deltaIdx = 0;

    // get required number of MR tests
    var mrTests = getMillerRabinTests(num.bitLength());
    if('millerRabinTests' in options) {
      mrTests = options.millerRabinTests;
    }

    // find prime nearest to 'num' for maxBlockTime ms
    // 10 ms gives 5ms of leeway for other calculations before dropping
    // below 60fps (1000/60 == 16.67), but in reality, the number will
    // likely be higher due to an 'atomic' big int modPow
    var maxBlockTime = 10;
    if('maxBlockTime' in options) {
      maxBlockTime = options.maxBlockTime;
    }

    _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
  }

  function _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback) {
    var start = +new Date();
    do {
      // overflow, regenerate random number
      if(num.bitLength() > bits) {
        num = generateRandom(bits, rng);
      }
      // do primality test
      if(num.isProbablePrime(mrTests)) {
        return callback(null, num);
      }
      // get next potential prime
      num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
    } while(maxBlockTime < 0 || (+new Date() - start < maxBlockTime));

    // keep trying later
    forge$3.util.setImmediate(function() {
      _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
    });
  }

  // NOTE: This algorithm is indeterminate in nature because workers
  // run in parallel looking at different segments of numbers. Even if this
  // algorithm is run twice with the same input from a predictable RNG, it
  // may produce different outputs.
  function primeincFindPrimeWithWorkers(bits, rng, options, callback) {
    // web workers unavailable
    if(typeof Worker === 'undefined') {
      return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
    }

    // initialize random number
    var num = generateRandom(bits, rng);

    // use web workers to generate keys
    var numWorkers = options.workers;
    var workLoad = options.workLoad || 100;
    var range = workLoad * 30 / 8;
    var workerScript = options.workerScript || 'forge/prime.worker.js';
    if(numWorkers === -1) {
      return forge$3.util.estimateCores(function(err, cores) {
        if(err) {
          // default to 2
          cores = 2;
        }
        numWorkers = cores - 1;
        generate();
      });
    }
    generate();

    function generate() {
      // require at least 1 worker
      numWorkers = Math.max(1, numWorkers);

      // TODO: consider optimizing by starting workers outside getPrime() ...
      // note that in order to clean up they will have to be made internally
      // asynchronous which may actually be slower

      // start workers immediately
      var workers = [];
      for(var i = 0; i < numWorkers; ++i) {
        // FIXME: fix path or use blob URLs
        workers[i] = new Worker(workerScript);
      }

      // listen for requests from workers and assign ranges to find prime
      for(var i = 0; i < numWorkers; ++i) {
        workers[i].addEventListener('message', workerMessage);
      }

      /* Note: The distribution of random numbers is unknown. Therefore, each
      web worker is continuously allocated a range of numbers to check for a
      random number until one is found.

      Every 30 numbers will be checked just 8 times, because prime numbers
      have the form:

      30k+i, for i < 30 and gcd(30, i)=1 (there are 8 values of i for this)

      Therefore, if we want a web worker to run N checks before asking for
      a new range of numbers, each range must contain N*30/8 numbers.

      For 100 checks (workLoad), this is a range of 375. */

      var found = false;
      function workerMessage(e) {
        // ignore message, prime already found
        if(found) {
          return;
        }
        var data = e.data;
        if(data.found) {
          // terminate all workers
          for(var i = 0; i < workers.length; ++i) {
            workers[i].terminate();
          }
          found = true;
          return callback(null, new BigInteger(data.prime, 16));
        }

        // overflow, regenerate random number
        if(num.bitLength() > bits) {
          num = generateRandom(bits, rng);
        }

        // assign new range to check
        var hex = num.toString(16);

        // start prime search
        e.target.postMessage({
          hex: hex,
          workLoad: workLoad
        });

        num.dAddOffset(range, 0);
      }
    }
  }

  /**
   * Generates a random number using the given number of bits and RNG.
   *
   * @param bits the number of bits for the number.
   * @param rng the random number generator to use.
   *
   * @return the random number.
   */
  function generateRandom(bits, rng) {
    var num = new BigInteger(bits, rng);
    // force MSB set
    var bits1 = bits - 1;
    if(!num.testBit(bits1)) {
      num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);
    }
    // align number on 30k+1 boundary
    num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);
    return num;
  }

  /**
   * Returns the required number of Miller-Rabin tests to generate a
   * prime with an error probability of (1/2)^80.
   *
   * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
   *
   * @param bits the bit size.
   *
   * @return the required number of iterations.
   */
  function getMillerRabinTests(bits) {
    if(bits <= 100) return 27;
    if(bits <= 150) return 18;
    if(bits <= 200) return 15;
    if(bits <= 250) return 12;
    if(bits <= 300) return 9;
    if(bits <= 350) return 8;
    if(bits <= 400) return 7;
    if(bits <= 500) return 6;
    if(bits <= 600) return 5;
    if(bits <= 800) return 4;
    if(bits <= 1250) return 3;
    return 2;
  }

  })();

  /**
   * Javascript implementation of basic RSA algorithms.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2010-2014 Digital Bazaar, Inc.
   *
   * The only algorithm currently supported for PKI is RSA.
   *
   * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo
   * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier
   * and a subjectPublicKey of type bit string.
   *
   * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
   * for the algorithm, if any. In the case of RSA, there aren't any.
   *
   * SubjectPublicKeyInfo ::= SEQUENCE {
   *   algorithm AlgorithmIdentifier,
   *   subjectPublicKey BIT STRING
   * }
   *
   * AlgorithmIdentifer ::= SEQUENCE {
   *   algorithm OBJECT IDENTIFIER,
   *   parameters ANY DEFINED BY algorithm OPTIONAL
   * }
   *
   * For an RSA public key, the subjectPublicKey is:
   *
   * RSAPublicKey ::= SEQUENCE {
   *   modulus            INTEGER,    -- n
   *   publicExponent     INTEGER     -- e
   * }
   *
   * PrivateKeyInfo ::= SEQUENCE {
   *   version                   Version,
   *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
   *   privateKey                PrivateKey,
   *   attributes           [0]  IMPLICIT Attributes OPTIONAL
   * }
   *
   * Version ::= INTEGER
   * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
   * PrivateKey ::= OCTET STRING
   * Attributes ::= SET OF Attribute
   *
   * An RSA private key as the following structure:
   *
   * RSAPrivateKey ::= SEQUENCE {
   *   version Version,
   *   modulus INTEGER, -- n
   *   publicExponent INTEGER, -- e
   *   privateExponent INTEGER, -- d
   *   prime1 INTEGER, -- p
   *   prime2 INTEGER, -- q
   *   exponent1 INTEGER, -- d mod (p-1)
   *   exponent2 INTEGER, -- d mod (q-1)
   *   coefficient INTEGER -- (inverse of q) mod p
   * }
   *
   * Version ::= INTEGER
   *
   * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1
   */

  var forge$2 = forge$m;








  if(typeof BigInteger$1 === 'undefined') {
    var BigInteger$1 = forge$2.jsbn.BigInteger;
  }

  var _crypto = forge$2.util.isNodejs ? require$$1 : null;

  // shortcut for asn.1 API
  var asn1$1 = forge$2.asn1;

  // shortcut for util API
  var util$a = forge$2.util;

  /*
   * RSA encryption and decryption, see RFC 2313.
   */
  forge$2.pki = forge$2.pki || {};
  forge$2.pki.rsa = forge$2.rsa = forge$2.rsa || {};
  var pki$1 = forge$2.pki;

  // for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
  var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];

  // validator for a PrivateKeyInfo structure
  var privateKeyValidator = {
    // PrivateKeyInfo
    name: 'PrivateKeyInfo',
    tagClass: asn1$1.Class.UNIVERSAL,
    type: asn1$1.Type.SEQUENCE,
    constructed: true,
    value: [{
      // Version (INTEGER)
      name: 'PrivateKeyInfo.version',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.INTEGER,
      constructed: false,
      capture: 'privateKeyVersion'
    }, {
      // privateKeyAlgorithm
      name: 'PrivateKeyInfo.privateKeyAlgorithm',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'AlgorithmIdentifier.algorithm',
        tagClass: asn1$1.Class.UNIVERSAL,
        type: asn1$1.Type.OID,
        constructed: false,
        capture: 'privateKeyOid'
      }]
    }, {
      // PrivateKey
      name: 'PrivateKeyInfo',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.OCTETSTRING,
      constructed: false,
      capture: 'privateKey'
    }]
  };

  // validator for an RSA private key
  var rsaPrivateKeyValidator = {
    // RSAPrivateKey
    name: 'RSAPrivateKey',
    tagClass: asn1$1.Class.UNIVERSAL,
    type: asn1$1.Type.SEQUENCE,
    constructed: true,
    value: [{
      // Version (INTEGER)
      name: 'RSAPrivateKey.version',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.INTEGER,
      constructed: false,
      capture: 'privateKeyVersion'
    }, {
      // modulus (n)
      name: 'RSAPrivateKey.modulus',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.INTEGER,
      constructed: false,
      capture: 'privateKeyModulus'
    }, {
      // publicExponent (e)
      name: 'RSAPrivateKey.publicExponent',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.INTEGER,
      constructed: false,
      capture: 'privateKeyPublicExponent'
    }, {
      // privateExponent (d)
      name: 'RSAPrivateKey.privateExponent',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.INTEGER,
      constructed: false,
      capture: 'privateKeyPrivateExponent'
    }, {
      // prime1 (p)
      name: 'RSAPrivateKey.prime1',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.INTEGER,
      constructed: false,
      capture: 'privateKeyPrime1'
    }, {
      // prime2 (q)
      name: 'RSAPrivateKey.prime2',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.INTEGER,
      constructed: false,
      capture: 'privateKeyPrime2'
    }, {
      // exponent1 (d mod (p-1))
      name: 'RSAPrivateKey.exponent1',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.INTEGER,
      constructed: false,
      capture: 'privateKeyExponent1'
    }, {
      // exponent2 (d mod (q-1))
      name: 'RSAPrivateKey.exponent2',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.INTEGER,
      constructed: false,
      capture: 'privateKeyExponent2'
    }, {
      // coefficient ((inverse of q) mod p)
      name: 'RSAPrivateKey.coefficient',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.INTEGER,
      constructed: false,
      capture: 'privateKeyCoefficient'
    }]
  };

  // validator for an RSA public key
  var rsaPublicKeyValidator = {
    // RSAPublicKey
    name: 'RSAPublicKey',
    tagClass: asn1$1.Class.UNIVERSAL,
    type: asn1$1.Type.SEQUENCE,
    constructed: true,
    value: [{
      // modulus (n)
      name: 'RSAPublicKey.modulus',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.INTEGER,
      constructed: false,
      capture: 'publicKeyModulus'
    }, {
      // publicExponent (e)
      name: 'RSAPublicKey.exponent',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.INTEGER,
      constructed: false,
      capture: 'publicKeyExponent'
    }]
  };

  // validator for an SubjectPublicKeyInfo structure
  // Note: Currently only works with an RSA public key
  var publicKeyValidator = forge$2.pki.rsa.publicKeyValidator = {
    name: 'SubjectPublicKeyInfo',
    tagClass: asn1$1.Class.UNIVERSAL,
    type: asn1$1.Type.SEQUENCE,
    constructed: true,
    captureAsn1: 'subjectPublicKeyInfo',
    value: [{
      name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'AlgorithmIdentifier.algorithm',
        tagClass: asn1$1.Class.UNIVERSAL,
        type: asn1$1.Type.OID,
        constructed: false,
        capture: 'publicKeyOid'
      }]
    }, {
      // subjectPublicKey
      name: 'SubjectPublicKeyInfo.subjectPublicKey',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.BITSTRING,
      constructed: false,
      value: [{
        // RSAPublicKey
        name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',
        tagClass: asn1$1.Class.UNIVERSAL,
        type: asn1$1.Type.SEQUENCE,
        constructed: true,
        optional: true,
        captureAsn1: 'rsaPublicKey'
      }]
    }]
  };

  // validator for a DigestInfo structure
  var digestInfoValidator = {
    name: 'DigestInfo',
    tagClass: asn1$1.Class.UNIVERSAL,
    type: asn1$1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'DigestInfo.DigestAlgorithm',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'DigestInfo.DigestAlgorithm.algorithmIdentifier',
        tagClass: asn1$1.Class.UNIVERSAL,
        type: asn1$1.Type.OID,
        constructed: false,
        capture: 'algorithmIdentifier'
      }, {
        // NULL paramters
        name: 'DigestInfo.DigestAlgorithm.parameters',
        tagClass: asn1$1.Class.UNIVERSAL,
        type: asn1$1.Type.NULL,
        // captured only to check existence for md2 and md5
        capture: 'parameters',
        optional: true,
        constructed: false
      }]
    }, {
      // digest
      name: 'DigestInfo.digest',
      tagClass: asn1$1.Class.UNIVERSAL,
      type: asn1$1.Type.OCTETSTRING,
      constructed: false,
      capture: 'digest'
    }]
  };

  /**
   * Wrap digest in DigestInfo object.
   *
   * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.
   *
   * DigestInfo ::= SEQUENCE {
   *   digestAlgorithm DigestAlgorithmIdentifier,
   *   digest Digest
   * }
   *
   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
   * Digest ::= OCTET STRING
   *
   * @param md the message digest object with the hash to sign.
   *
   * @return the encoded message (ready for RSA encrytion)
   */
  var emsaPkcs1v15encode = function(md) {
    // get the oid for the algorithm
    var oid;
    if(md.algorithm in pki$1.oids) {
      oid = pki$1.oids[md.algorithm];
    } else {
      var error = new Error('Unknown message digest algorithm.');
      error.algorithm = md.algorithm;
      throw error;
    }
    var oidBytes = asn1$1.oidToDer(oid).getBytes();

    // create the digest info
    var digestInfo = asn1$1.create(
      asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, []);
    var digestAlgorithm = asn1$1.create(
      asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, []);
    digestAlgorithm.value.push(asn1$1.create(
      asn1$1.Class.UNIVERSAL, asn1$1.Type.OID, false, oidBytes));
    digestAlgorithm.value.push(asn1$1.create(
      asn1$1.Class.UNIVERSAL, asn1$1.Type.NULL, false, ''));
    var digest = asn1$1.create(
      asn1$1.Class.UNIVERSAL, asn1$1.Type.OCTETSTRING,
      false, md.digest().getBytes());
    digestInfo.value.push(digestAlgorithm);
    digestInfo.value.push(digest);

    // encode digest info
    return asn1$1.toDer(digestInfo).getBytes();
  };

  /**
   * Performs x^c mod n (RSA encryption or decryption operation).
   *
   * @param x the number to raise and mod.
   * @param key the key to use.
   * @param pub true if the key is public, false if private.
   *
   * @return the result of x^c mod n.
   */
  var _modPow = function(x, key, pub) {
    if(pub) {
      return x.modPow(key.e, key.n);
    }

    if(!key.p || !key.q) {
      // allow calculation without CRT params (slow)
      return x.modPow(key.d, key.n);
    }

    // pre-compute dP, dQ, and qInv if necessary
    if(!key.dP) {
      key.dP = key.d.mod(key.p.subtract(BigInteger$1.ONE));
    }
    if(!key.dQ) {
      key.dQ = key.d.mod(key.q.subtract(BigInteger$1.ONE));
    }
    if(!key.qInv) {
      key.qInv = key.q.modInverse(key.p);
    }

    /* Chinese remainder theorem (CRT) states:

      Suppose n1, n2, ..., nk are positive integers which are pairwise
      coprime (n1 and n2 have no common factors other than 1). For any
      integers x1, x2, ..., xk there exists an integer x solving the
      system of simultaneous congruences (where ~= means modularly
      congruent so a ~= b mod n means a mod n = b mod n):

      x ~= x1 mod n1
      x ~= x2 mod n2
      ...
      x ~= xk mod nk

      This system of congruences has a single simultaneous solution x
      between 0 and n - 1. Furthermore, each xk solution and x itself
      is congruent modulo the product n = n1*n2*...*nk.
      So x1 mod n = x2 mod n = xk mod n = x mod n.

      The single simultaneous solution x can be solved with the following
      equation:

      x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.

      Where x is less than n, xi = x mod ni.

      For RSA we are only concerned with k = 2. The modulus n = pq, where
      p and q are coprime. The RSA decryption algorithm is:

      y = x^d mod n

      Given the above:

      x1 = x^d mod p
      r1 = n/p = q
      s1 = q^-1 mod p
      x2 = x^d mod q
      r2 = n/q = p
      s2 = p^-1 mod q

      So y = (x1r1s1 + x2r2s2) mod n
           = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n

      According to Fermat's Little Theorem, if the modulus P is prime,
      for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.
      Since A is not divisible by P it follows that if:
      N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:

      A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort
      to calculate). In order to calculate x^d mod p more quickly the
      exponent d mod (p - 1) is stored in the RSA private key (the same
      is done for x^d mod q). These values are referred to as dP and dQ
      respectively. Therefore we now have:

      y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n

      Since we'll be reducing x^dP by modulo p (same for q) we can also
      reduce x by p (and q respectively) before hand. Therefore, let

      xp = ((x mod p)^dP mod p), and
      xq = ((x mod q)^dQ mod q), yielding:

      y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n

      This can be further reduced to a simple algorithm that only
      requires 1 inverse (the q inverse is used) to be used and stored.
      The algorithm is called Garner's algorithm. If qInv is the
      inverse of q, we simply calculate:

      y = (qInv*(xp - xq) mod p) * q + xq

      However, there are two further complications. First, we need to
      ensure that xp > xq to prevent signed BigIntegers from being used
      so we add p until this is true (since we will be mod'ing with
      p anyway). Then, there is a known timing attack on algorithms
      using the CRT. To mitigate this risk, "cryptographic blinding"
      should be used. This requires simply generating a random number r
      between 0 and n-1 and its inverse and multiplying x by r^e before
      calculating y and then multiplying y by r^-1 afterwards. Note that
      r must be coprime with n (gcd(r, n) === 1) in order to have an
      inverse.
    */

    // cryptographic blinding
    var r;
    do {
      r = new BigInteger$1(
        forge$2.util.bytesToHex(forge$2.random.getBytes(key.n.bitLength() / 8)),
        16);
    } while(r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger$1.ONE));
    x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);

    // calculate xp and xq
    var xp = x.mod(key.p).modPow(key.dP, key.p);
    var xq = x.mod(key.q).modPow(key.dQ, key.q);

    // xp must be larger than xq to avoid signed bit usage
    while(xp.compareTo(xq) < 0) {
      xp = xp.add(key.p);
    }

    // do last step
    var y = xp.subtract(xq)
      .multiply(key.qInv).mod(key.p)
      .multiply(key.q).add(xq);

    // remove effect of random for cryptographic blinding
    y = y.multiply(r.modInverse(key.n)).mod(key.n);

    return y;
  };

  /**
   * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or
   * 'encrypt' on a public key object instead.
   *
   * Performs RSA encryption.
   *
   * The parameter bt controls whether to put padding bytes before the
   * message passed in. Set bt to either true or false to disable padding
   * completely (in order to handle e.g. EMSA-PSS encoding seperately before),
   * signaling whether the encryption operation is a public key operation
   * (i.e. encrypting data) or not, i.e. private key operation (data signing).
   *
   * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01
   * (for signing) or 0x02 (for encryption). The key operation mode (private
   * or public) is derived from this flag in that case).
   *
   * @param m the message to encrypt as a byte string.
   * @param key the RSA key to use.
   * @param bt for PKCS#1 v1.5 padding, the block type to use
   *   (0x01 for private key, 0x02 for public),
   *   to disable padding: true = public key, false = private key.
   *
   * @return the encrypted bytes as a string.
   */
  pki$1.rsa.encrypt = function(m, key, bt) {
    var pub = bt;
    var eb;

    // get the length of the modulus in bytes
    var k = Math.ceil(key.n.bitLength() / 8);

    if(bt !== false && bt !== true) {
      // legacy, default to PKCS#1 v1.5 padding
      pub = (bt === 0x02);
      eb = _encodePkcs1_v1_5(m, key, bt);
    } else {
      eb = forge$2.util.createBuffer();
      eb.putBytes(m);
    }

    // load encryption block as big integer 'x'
    // FIXME: hex conversion inefficient, get BigInteger w/byte strings
    var x = new BigInteger$1(eb.toHex(), 16);

    // do RSA encryption
    var y = _modPow(x, key, pub);

    // convert y into the encrypted data byte string, if y is shorter in
    // bytes than k, then prepend zero bytes to fill up ed
    // FIXME: hex conversion inefficient, get BigInteger w/byte strings
    var yhex = y.toString(16);
    var ed = forge$2.util.createBuffer();
    var zeros = k - Math.ceil(yhex.length / 2);
    while(zeros > 0) {
      ed.putByte(0x00);
      --zeros;
    }
    ed.putBytes(forge$2.util.hexToBytes(yhex));
    return ed.getBytes();
  };

  /**
   * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or
   * 'verify' on a public key object instead.
   *
   * Performs RSA decryption.
   *
   * The parameter ml controls whether to apply PKCS#1 v1.5 padding
   * or not.  Set ml = false to disable padding removal completely
   * (in order to handle e.g. EMSA-PSS later on) and simply pass back
   * the RSA encryption block.
   *
   * @param ed the encrypted data to decrypt in as a byte string.
   * @param key the RSA key to use.
   * @param pub true for a public key operation, false for private.
   * @param ml the message length, if known, false to disable padding.
   *
   * @return the decrypted message as a byte string.
   */
  pki$1.rsa.decrypt = function(ed, key, pub, ml) {
    // get the length of the modulus in bytes
    var k = Math.ceil(key.n.bitLength() / 8);

    // error if the length of the encrypted data ED is not k
    if(ed.length !== k) {
      var error = new Error('Encrypted message length is invalid.');
      error.length = ed.length;
      error.expected = k;
      throw error;
    }

    // convert encrypted data into a big integer
    // FIXME: hex conversion inefficient, get BigInteger w/byte strings
    var y = new BigInteger$1(forge$2.util.createBuffer(ed).toHex(), 16);

    // y must be less than the modulus or it wasn't the result of
    // a previous mod operation (encryption) using that modulus
    if(y.compareTo(key.n) >= 0) {
      throw new Error('Encrypted message is invalid.');
    }

    // do RSA decryption
    var x = _modPow(y, key, pub);

    // create the encryption block, if x is shorter in bytes than k, then
    // prepend zero bytes to fill up eb
    // FIXME: hex conversion inefficient, get BigInteger w/byte strings
    var xhex = x.toString(16);
    var eb = forge$2.util.createBuffer();
    var zeros = k - Math.ceil(xhex.length / 2);
    while(zeros > 0) {
      eb.putByte(0x00);
      --zeros;
    }
    eb.putBytes(forge$2.util.hexToBytes(xhex));

    if(ml !== false) {
      // legacy, default to PKCS#1 v1.5 padding
      return _decodePkcs1_v1_5(eb.getBytes(), key, pub);
    }

    // return message
    return eb.getBytes();
  };

  /**
   * Creates an RSA key-pair generation state object. It is used to allow
   * key-generation to be performed in steps. It also allows for a UI to
   * display progress updates.
   *
   * @param bits the size for the private key in bits, defaults to 2048.
   * @param e the public exponent to use, defaults to 65537 (0x10001).
   * @param [options] the options to use.
   *          prng a custom crypto-secure pseudo-random number generator to use,
   *            that must define "getBytesSync".
   *          algorithm the algorithm to use (default: 'PRIMEINC').
   *
   * @return the state object to use to generate the key-pair.
   */
  pki$1.rsa.createKeyPairGenerationState = function(bits, e, options) {
    // TODO: migrate step-based prime generation code to forge.prime

    // set default bits
    if(typeof(bits) === 'string') {
      bits = parseInt(bits, 10);
    }
    bits = bits || 2048;

    // create prng with api that matches BigInteger secure random
    options = options || {};
    var prng = options.prng || forge$2.random;
    var rng = {
      // x is an array to fill with bytes
      nextBytes: function(x) {
        var b = prng.getBytesSync(x.length);
        for(var i = 0; i < x.length; ++i) {
          x[i] = b.charCodeAt(i);
        }
      }
    };

    var algorithm = options.algorithm || 'PRIMEINC';

    // create PRIMEINC algorithm state
    var rval;
    if(algorithm === 'PRIMEINC') {
      rval = {
        algorithm: algorithm,
        state: 0,
        bits: bits,
        rng: rng,
        eInt: e || 65537,
        e: new BigInteger$1(null),
        p: null,
        q: null,
        qBits: bits >> 1,
        pBits: bits - (bits >> 1),
        pqState: 0,
        num: null,
        keys: null
      };
      rval.e.fromInt(rval.eInt);
    } else {
      throw new Error('Invalid key generation algorithm: ' + algorithm);
    }

    return rval;
  };

  /**
   * Attempts to runs the key-generation algorithm for at most n seconds
   * (approximately) using the given state. When key-generation has completed,
   * the keys will be stored in state.keys.
   *
   * To use this function to update a UI while generating a key or to prevent
   * causing browser lockups/warnings, set "n" to a value other than 0. A
   * simple pattern for generating a key and showing a progress indicator is:
   *
   * var state = pki.rsa.createKeyPairGenerationState(2048);
   * var step = function() {
   *   // step key-generation, run algorithm for 100 ms, repeat
   *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {
   *     setTimeout(step, 1);
   *   } else {
   *     // key-generation complete
   *     // TODO: turn off progress indicator here
   *     // TODO: use the generated key-pair in "state.keys"
   *   }
   * };
   * // TODO: turn on progress indicator here
   * setTimeout(step, 0);
   *
   * @param state the state to use.
   * @param n the maximum number of milliseconds to run the algorithm for, 0
   *          to run the algorithm to completion.
   *
   * @return true if the key-generation completed, false if not.
   */
  pki$1.rsa.stepKeyPairGenerationState = function(state, n) {
    // set default algorithm if not set
    if(!('algorithm' in state)) {
      state.algorithm = 'PRIMEINC';
    }

    // TODO: migrate step-based prime generation code to forge.prime
    // TODO: abstract as PRIMEINC algorithm

    // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)
    // with some minor optimizations and designed to run in steps

    // local state vars
    var THIRTY = new BigInteger$1(null);
    THIRTY.fromInt(30);
    var deltaIdx = 0;
    var op_or = function(x, y) {return x | y;};

    // keep stepping until time limit is reached or done
    var t1 = +new Date();
    var t2;
    var total = 0;
    while(state.keys === null && (n <= 0 || total < n)) {
      // generate p or q
      if(state.state === 0) {
        /* Note: All primes are of the form:

          30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i

          When we generate a random number, we always align it at 30k + 1. Each
          time the number is determined not to be prime we add to get to the
          next 'i', eg: if the number was at 30k + 1 we add 6. */
        var bits = (state.p === null) ? state.pBits : state.qBits;
        var bits1 = bits - 1;

        // get a random number
        if(state.pqState === 0) {
          state.num = new BigInteger$1(bits, state.rng);
          // force MSB set
          if(!state.num.testBit(bits1)) {
            state.num.bitwiseTo(
              BigInteger$1.ONE.shiftLeft(bits1), op_or, state.num);
          }
          // align number on 30k+1 boundary
          state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);
          deltaIdx = 0;

          ++state.pqState;
        } else if(state.pqState === 1) {
          // try to make the number a prime
          if(state.num.bitLength() > bits) {
            // overflow, try again
            state.pqState = 0;
            // do primality test
          } else if(state.num.isProbablePrime(
            _getMillerRabinTests(state.num.bitLength()))) {
            ++state.pqState;
          } else {
            // get next potential prime
            state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
          }
        } else if(state.pqState === 2) {
          // ensure number is coprime with e
          state.pqState =
            (state.num.subtract(BigInteger$1.ONE).gcd(state.e)
              .compareTo(BigInteger$1.ONE) === 0) ? 3 : 0;
        } else if(state.pqState === 3) {
          // store p or q
          state.pqState = 0;
          if(state.p === null) {
            state.p = state.num;
          } else {
            state.q = state.num;
          }

          // advance state if both p and q are ready
          if(state.p !== null && state.q !== null) {
            ++state.state;
          }
          state.num = null;
        }
      } else if(state.state === 1) {
        // ensure p is larger than q (swap them if not)
        if(state.p.compareTo(state.q) < 0) {
          state.num = state.p;
          state.p = state.q;
          state.q = state.num;
        }
        ++state.state;
      } else if(state.state === 2) {
        // compute phi: (p - 1)(q - 1) (Euler's totient function)
        state.p1 = state.p.subtract(BigInteger$1.ONE);
        state.q1 = state.q.subtract(BigInteger$1.ONE);
        state.phi = state.p1.multiply(state.q1);
        ++state.state;
      } else if(state.state === 3) {
        // ensure e and phi are coprime
        if(state.phi.gcd(state.e).compareTo(BigInteger$1.ONE) === 0) {
          // phi and e are coprime, advance
          ++state.state;
        } else {
          // phi and e aren't coprime, so generate a new p and q
          state.p = null;
          state.q = null;
          state.state = 0;
        }
      } else if(state.state === 4) {
        // create n, ensure n is has the right number of bits
        state.n = state.p.multiply(state.q);

        // ensure n is right number of bits
        if(state.n.bitLength() === state.bits) {
          // success, advance
          ++state.state;
        } else {
          // failed, get new q
          state.q = null;
          state.state = 0;
        }
      } else if(state.state === 5) {
        // set keys
        var d = state.e.modInverse(state.phi);
        state.keys = {
          privateKey: pki$1.rsa.setPrivateKey(
            state.n, state.e, d, state.p, state.q,
            d.mod(state.p1), d.mod(state.q1),
            state.q.modInverse(state.p)),
          publicKey: pki$1.rsa.setPublicKey(state.n, state.e)
        };
      }

      // update timing
      t2 = +new Date();
      total += t2 - t1;
      t1 = t2;
    }

    return state.keys !== null;
  };

  /**
   * Generates an RSA public-private key pair in a single call.
   *
   * To generate a key-pair in steps (to allow for progress updates and to
   * prevent blocking or warnings in slow browsers) then use the key-pair
   * generation state functions.
   *
   * To generate a key-pair asynchronously (either through web-workers, if
   * available, or by breaking up the work on the main thread), pass a
   * callback function.
   *
   * @param [bits] the size for the private key in bits, defaults to 2048.
   * @param [e] the public exponent to use, defaults to 65537.
   * @param [options] options for key-pair generation, if given then 'bits'
   *            and 'e' must *not* be given:
   *          bits the size for the private key in bits, (default: 2048).
   *          e the public exponent to use, (default: 65537 (0x10001)).
   *          workerScript the worker script URL.
   *          workers the number of web workers (if supported) to use,
   *            (default: 2).
   *          workLoad the size of the work load, ie: number of possible prime
   *            numbers for each web worker to check per work assignment,
   *            (default: 100).
   *          prng a custom crypto-secure pseudo-random number generator to use,
   *            that must define "getBytesSync". Disables use of native APIs.
   *          algorithm the algorithm to use (default: 'PRIMEINC').
   * @param [callback(err, keypair)] called once the operation completes.
   *
   * @return an object with privateKey and publicKey properties.
   */
  pki$1.rsa.generateKeyPair = function(bits, e, options, callback) {
    // (bits), (options), (callback)
    if(arguments.length === 1) {
      if(typeof bits === 'object') {
        options = bits;
        bits = undefined;
      } else if(typeof bits === 'function') {
        callback = bits;
        bits = undefined;
      }
    } else if(arguments.length === 2) {
      // (bits, e), (bits, options), (bits, callback), (options, callback)
      if(typeof bits === 'number') {
        if(typeof e === 'function') {
          callback = e;
          e = undefined;
        } else if(typeof e !== 'number') {
          options = e;
          e = undefined;
        }
      } else {
        options = bits;
        callback = e;
        bits = undefined;
        e = undefined;
      }
    } else if(arguments.length === 3) {
      // (bits, e, options), (bits, e, callback), (bits, options, callback)
      if(typeof e === 'number') {
        if(typeof options === 'function') {
          callback = options;
          options = undefined;
        }
      } else {
        callback = options;
        options = e;
        e = undefined;
      }
    }
    options = options || {};
    if(bits === undefined) {
      bits = options.bits || 2048;
    }
    if(e === undefined) {
      e = options.e || 0x10001;
    }

    // use native code if permitted, available, and parameters are acceptable
    if(!forge$2.options.usePureJavaScript && !options.prng &&
      bits >= 256 && bits <= 16384 && (e === 0x10001 || e === 3)) {
      if(callback) {
        // try native async
        if(_detectNodeCrypto('generateKeyPair')) {
          return _crypto.generateKeyPair('rsa', {
            modulusLength: bits,
            publicExponent: e,
            publicKeyEncoding: {
              type: 'spki',
              format: 'pem'
            },
            privateKeyEncoding: {
              type: 'pkcs8',
              format: 'pem'
            }
          }, function(err, pub, priv) {
            if(err) {
              return callback(err);
            }
            callback(null, {
              privateKey: pki$1.privateKeyFromPem(priv),
              publicKey: pki$1.publicKeyFromPem(pub)
            });
          });
        }
        if(_detectSubtleCrypto('generateKey') &&
          _detectSubtleCrypto('exportKey')) {
          // use standard native generateKey
          return util$a.globalScope.crypto.subtle.generateKey({
            name: 'RSASSA-PKCS1-v1_5',
            modulusLength: bits,
            publicExponent: _intToUint8Array(e),
            hash: {name: 'SHA-256'}
          }, true /* key can be exported*/, ['sign', 'verify'])
          .then(function(pair) {
            return util$a.globalScope.crypto.subtle.exportKey(
              'pkcs8', pair.privateKey);
          // avoiding catch(function(err) {...}) to support IE <= 8
          }).then(undefined, function(err) {
            callback(err);
          }).then(function(pkcs8) {
            if(pkcs8) {
              var privateKey = pki$1.privateKeyFromAsn1(
                asn1$1.fromDer(forge$2.util.createBuffer(pkcs8)));
              callback(null, {
                privateKey: privateKey,
                publicKey: pki$1.setRsaPublicKey(privateKey.n, privateKey.e)
              });
            }
          });
        }
        if(_detectSubtleMsCrypto('generateKey') &&
          _detectSubtleMsCrypto('exportKey')) {
          var genOp = util$a.globalScope.msCrypto.subtle.generateKey({
            name: 'RSASSA-PKCS1-v1_5',
            modulusLength: bits,
            publicExponent: _intToUint8Array(e),
            hash: {name: 'SHA-256'}
          }, true /* key can be exported*/, ['sign', 'verify']);
          genOp.oncomplete = function(e) {
            var pair = e.target.result;
            var exportOp = util$a.globalScope.msCrypto.subtle.exportKey(
              'pkcs8', pair.privateKey);
            exportOp.oncomplete = function(e) {
              var pkcs8 = e.target.result;
              var privateKey = pki$1.privateKeyFromAsn1(
                asn1$1.fromDer(forge$2.util.createBuffer(pkcs8)));
              callback(null, {
                privateKey: privateKey,
                publicKey: pki$1.setRsaPublicKey(privateKey.n, privateKey.e)
              });
            };
            exportOp.onerror = function(err) {
              callback(err);
            };
          };
          genOp.onerror = function(err) {
            callback(err);
          };
          return;
        }
      } else {
        // try native sync
        if(_detectNodeCrypto('generateKeyPairSync')) {
          var keypair = _crypto.generateKeyPairSync('rsa', {
            modulusLength: bits,
            publicExponent: e,
            publicKeyEncoding: {
              type: 'spki',
              format: 'pem'
            },
            privateKeyEncoding: {
              type: 'pkcs8',
              format: 'pem'
            }
          });
          return {
            privateKey: pki$1.privateKeyFromPem(keypair.privateKey),
            publicKey: pki$1.publicKeyFromPem(keypair.publicKey)
          };
        }
      }
    }

    // use JavaScript implementation
    var state = pki$1.rsa.createKeyPairGenerationState(bits, e, options);
    if(!callback) {
      pki$1.rsa.stepKeyPairGenerationState(state, 0);
      return state.keys;
    }
    _generateKeyPair(state, options, callback);
  };

  /**
   * Sets an RSA public key from BigIntegers modulus and exponent.
   *
   * @param n the modulus.
   * @param e the exponent.
   *
   * @return the public key.
   */
  pki$1.setRsaPublicKey = pki$1.rsa.setPublicKey = function(n, e) {
    var key = {
      n: n,
      e: e
    };

    /**
     * Encrypts the given data with this public key. Newer applications
     * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for
     * legacy applications.
     *
     * @param data the byte string to encrypt.
     * @param scheme the encryption scheme to use:
     *          'RSAES-PKCS1-V1_5' (default),
     *          'RSA-OAEP',
     *          'RAW', 'NONE', or null to perform raw RSA encryption,
     *          an object with an 'encode' property set to a function
     *          with the signature 'function(data, key)' that returns
     *          a binary-encoded string representing the encoded data.
     * @param schemeOptions any scheme-specific options.
     *
     * @return the encrypted byte string.
     */
    key.encrypt = function(data, scheme, schemeOptions) {
      if(typeof scheme === 'string') {
        scheme = scheme.toUpperCase();
      } else if(scheme === undefined) {
        scheme = 'RSAES-PKCS1-V1_5';
      }

      if(scheme === 'RSAES-PKCS1-V1_5') {
        scheme = {
          encode: function(m, key, pub) {
            return _encodePkcs1_v1_5(m, key, 0x02).getBytes();
          }
        };
      } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
        scheme = {
          encode: function(m, key) {
            return forge$2.pkcs1.encode_rsa_oaep(key, m, schemeOptions);
          }
        };
      } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
        scheme = {encode: function(e) {return e;}};
      } else if(typeof scheme === 'string') {
        throw new Error('Unsupported encryption scheme: "' + scheme + '".');
      }

      // do scheme-based encoding then rsa encryption
      var e = scheme.encode(data, key, true);
      return pki$1.rsa.encrypt(e, key, true);
    };

    /**
     * Verifies the given signature against the given digest.
     *
     * PKCS#1 supports multiple (currently two) signature schemes:
     * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
     *
     * By default this implementation uses the "old scheme", i.e.
     * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the
     * signature is an OCTET STRING that holds a DigestInfo.
     *
     * DigestInfo ::= SEQUENCE {
     *   digestAlgorithm DigestAlgorithmIdentifier,
     *   digest Digest
     * }
     * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
     * Digest ::= OCTET STRING
     *
     * To perform PSS signature verification, provide an instance
     * of Forge PSS object as the scheme parameter.
     *
     * @param digest the message digest hash to compare against the signature,
     *          as a binary-encoded string.
     * @param signature the signature to verify, as a binary-encoded string.
     * @param scheme signature verification scheme to use:
     *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
     *          a Forge PSS object for RSASSA-PSS,
     *          'NONE' or null for none, DigestInfo will not be expected, but
     *            PKCS#1 v1.5 padding will still be used.
     * @param options optional verify options
     *          _parseAllDigestBytes testing flag to control parsing of all
     *            digest bytes. Unsupported and not for general usage.
     *            (default: true)
     *
     * @return true if the signature was verified, false if not.
     */
    key.verify = function(digest, signature, scheme, options) {
      if(typeof scheme === 'string') {
        scheme = scheme.toUpperCase();
      } else if(scheme === undefined) {
        scheme = 'RSASSA-PKCS1-V1_5';
      }
      if(options === undefined) {
        options = {
          _parseAllDigestBytes: true
        };
      }
      if(!('_parseAllDigestBytes' in options)) {
        options._parseAllDigestBytes = true;
      }

      if(scheme === 'RSASSA-PKCS1-V1_5') {
        scheme = {
          verify: function(digest, d) {
            // remove padding
            d = _decodePkcs1_v1_5(d, key, true);
            // d is ASN.1 BER-encoded DigestInfo
            var obj = asn1$1.fromDer(d, {
              parseAllBytes: options._parseAllDigestBytes
            });

            // validate DigestInfo
            var capture = {};
            var errors = [];
            if(!asn1$1.validate(obj, digestInfoValidator, capture, errors)) {
              var error = new Error(
                'ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 ' +
                'DigestInfo value.');
              error.errors = errors;
              throw error;
            }
            // check hash algorithm identifier
            // see PKCS1-v1-5DigestAlgorithms in RFC 8017
            // FIXME: add support to vaidator for strict value choices
            var oid = asn1$1.derToOid(capture.algorithmIdentifier);
            if(!(oid === forge$2.oids.md2 ||
              oid === forge$2.oids.md5 ||
              oid === forge$2.oids.sha1 ||
              oid === forge$2.oids.sha224 ||
              oid === forge$2.oids.sha256 ||
              oid === forge$2.oids.sha384 ||
              oid === forge$2.oids.sha512 ||
              oid === forge$2.oids['sha512-224'] ||
              oid === forge$2.oids['sha512-256'])) {
              var error = new Error(
                'Unknown RSASSA-PKCS1-v1_5 DigestAlgorithm identifier.');
              error.oid = oid;
              throw error;
            }

            // special check for md2 and md5 that NULL parameters exist
            if(oid === forge$2.oids.md2 || oid === forge$2.oids.md5) {
              if(!('parameters' in capture)) {
                throw new Error(
                  'ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 ' +
                  'DigestInfo value. ' +
                  'Missing algorithm identifer NULL parameters.');
              }
            }

            // compare the given digest to the decrypted one
            return digest === capture.digest;
          }
        };
      } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
        scheme = {
          verify: function(digest, d) {
            // remove padding
            d = _decodePkcs1_v1_5(d, key, true);
            return digest === d;
          }
        };
      }

      // do rsa decryption w/o any decoding, then verify -- which does decoding
      var d = pki$1.rsa.decrypt(signature, key, true, false);
      return scheme.verify(digest, d, key.n.bitLength());
    };

    return key;
  };

  /**
   * Sets an RSA private key from BigIntegers modulus, exponent, primes,
   * prime exponents, and modular multiplicative inverse.
   *
   * @param n the modulus.
   * @param e the public exponent.
   * @param d the private exponent ((inverse of e) mod n).
   * @param p the first prime.
   * @param q the second prime.
   * @param dP exponent1 (d mod (p-1)).
   * @param dQ exponent2 (d mod (q-1)).
   * @param qInv ((inverse of q) mod p)
   *
   * @return the private key.
   */
  pki$1.setRsaPrivateKey = pki$1.rsa.setPrivateKey = function(
    n, e, d, p, q, dP, dQ, qInv) {
    var key = {
      n: n,
      e: e,
      d: d,
      p: p,
      q: q,
      dP: dP,
      dQ: dQ,
      qInv: qInv
    };

    /**
     * Decrypts the given data with this private key. The decryption scheme
     * must match the one used to encrypt the data.
     *
     * @param data the byte string to decrypt.
     * @param scheme the decryption scheme to use:
     *          'RSAES-PKCS1-V1_5' (default),
     *          'RSA-OAEP',
     *          'RAW', 'NONE', or null to perform raw RSA decryption.
     * @param schemeOptions any scheme-specific options.
     *
     * @return the decrypted byte string.
     */
    key.decrypt = function(data, scheme, schemeOptions) {
      if(typeof scheme === 'string') {
        scheme = scheme.toUpperCase();
      } else if(scheme === undefined) {
        scheme = 'RSAES-PKCS1-V1_5';
      }

      // do rsa decryption w/o any decoding
      var d = pki$1.rsa.decrypt(data, key, false, false);

      if(scheme === 'RSAES-PKCS1-V1_5') {
        scheme = {decode: _decodePkcs1_v1_5};
      } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
        scheme = {
          decode: function(d, key) {
            return forge$2.pkcs1.decode_rsa_oaep(key, d, schemeOptions);
          }
        };
      } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
        scheme = {decode: function(d) {return d;}};
      } else {
        throw new Error('Unsupported encryption scheme: "' + scheme + '".');
      }

      // decode according to scheme
      return scheme.decode(d, key, false);
    };

    /**
     * Signs the given digest, producing a signature.
     *
     * PKCS#1 supports multiple (currently two) signature schemes:
     * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
     *
     * By default this implementation uses the "old scheme", i.e.
     * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide
     * an instance of Forge PSS object as the scheme parameter.
     *
     * @param md the message digest object with the hash to sign.
     * @param scheme the signature scheme to use:
     *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
     *          a Forge PSS object for RSASSA-PSS,
     *          'NONE' or null for none, DigestInfo will not be used but
     *            PKCS#1 v1.5 padding will still be used.
     *
     * @return the signature as a byte string.
     */
    key.sign = function(md, scheme) {
      /* Note: The internal implementation of RSA operations is being
        transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy
        code like the use of an encoding block identifier 'bt' will eventually
        be removed. */

      // private key operation
      var bt = false;

      if(typeof scheme === 'string') {
        scheme = scheme.toUpperCase();
      }

      if(scheme === undefined || scheme === 'RSASSA-PKCS1-V1_5') {
        scheme = {encode: emsaPkcs1v15encode};
        bt = 0x01;
      } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
        scheme = {encode: function() {return md;}};
        bt = 0x01;
      }

      // encode and then encrypt
      var d = scheme.encode(md, key.n.bitLength());
      return pki$1.rsa.encrypt(d, key, bt);
    };

    return key;
  };

  /**
   * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.
   *
   * @param rsaKey the ASN.1 RSAPrivateKey.
   *
   * @return the ASN.1 PrivateKeyInfo.
   */
  pki$1.wrapRsaPrivateKey = function(rsaKey) {
    // PrivateKeyInfo
    return asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
      // version (0)
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
        asn1$1.integerToDer(0).getBytes()),
      // privateKeyAlgorithm
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
        asn1$1.create(
          asn1$1.Class.UNIVERSAL, asn1$1.Type.OID, false,
          asn1$1.oidToDer(pki$1.oids.rsaEncryption).getBytes()),
        asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.NULL, false, '')
      ]),
      // PrivateKey
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.OCTETSTRING, false,
        asn1$1.toDer(rsaKey).getBytes())
    ]);
  };

  /**
   * Converts a private key from an ASN.1 object.
   *
   * @param obj the ASN.1 representation of a PrivateKeyInfo containing an
   *          RSAPrivateKey or an RSAPrivateKey.
   *
   * @return the private key.
   */
  pki$1.privateKeyFromAsn1 = function(obj) {
    // get PrivateKeyInfo
    var capture = {};
    var errors = [];
    if(asn1$1.validate(obj, privateKeyValidator, capture, errors)) {
      obj = asn1$1.fromDer(forge$2.util.createBuffer(capture.privateKey));
    }

    // get RSAPrivateKey
    capture = {};
    errors = [];
    if(!asn1$1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {
      var error = new Error('Cannot read private key. ' +
        'ASN.1 object does not contain an RSAPrivateKey.');
      error.errors = errors;
      throw error;
    }

    // Note: Version is currently ignored.
    // capture.privateKeyVersion
    // FIXME: inefficient, get a BigInteger that uses byte strings
    var n, e, d, p, q, dP, dQ, qInv;
    n = forge$2.util.createBuffer(capture.privateKeyModulus).toHex();
    e = forge$2.util.createBuffer(capture.privateKeyPublicExponent).toHex();
    d = forge$2.util.createBuffer(capture.privateKeyPrivateExponent).toHex();
    p = forge$2.util.createBuffer(capture.privateKeyPrime1).toHex();
    q = forge$2.util.createBuffer(capture.privateKeyPrime2).toHex();
    dP = forge$2.util.createBuffer(capture.privateKeyExponent1).toHex();
    dQ = forge$2.util.createBuffer(capture.privateKeyExponent2).toHex();
    qInv = forge$2.util.createBuffer(capture.privateKeyCoefficient).toHex();

    // set private key
    return pki$1.setRsaPrivateKey(
      new BigInteger$1(n, 16),
      new BigInteger$1(e, 16),
      new BigInteger$1(d, 16),
      new BigInteger$1(p, 16),
      new BigInteger$1(q, 16),
      new BigInteger$1(dP, 16),
      new BigInteger$1(dQ, 16),
      new BigInteger$1(qInv, 16));
  };

  /**
   * Converts a private key to an ASN.1 RSAPrivateKey.
   *
   * @param key the private key.
   *
   * @return the ASN.1 representation of an RSAPrivateKey.
   */
  pki$1.privateKeyToAsn1 = pki$1.privateKeyToRSAPrivateKey = function(key) {
    // RSAPrivateKey
    return asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
      // version (0 = only 2 primes, 1 multiple primes)
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
        asn1$1.integerToDer(0).getBytes()),
      // modulus (n)
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
        _bnToBytes(key.n)),
      // publicExponent (e)
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
        _bnToBytes(key.e)),
      // privateExponent (d)
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
        _bnToBytes(key.d)),
      // privateKeyPrime1 (p)
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
        _bnToBytes(key.p)),
      // privateKeyPrime2 (q)
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
        _bnToBytes(key.q)),
      // privateKeyExponent1 (dP)
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
        _bnToBytes(key.dP)),
      // privateKeyExponent2 (dQ)
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
        _bnToBytes(key.dQ)),
      // coefficient (qInv)
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
        _bnToBytes(key.qInv))
    ]);
  };

  /**
   * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.
   *
   * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.
   *
   * @return the public key.
   */
  pki$1.publicKeyFromAsn1 = function(obj) {
    // get SubjectPublicKeyInfo
    var capture = {};
    var errors = [];
    if(asn1$1.validate(obj, publicKeyValidator, capture, errors)) {
      // get oid
      var oid = asn1$1.derToOid(capture.publicKeyOid);
      if(oid !== pki$1.oids.rsaEncryption) {
        var error = new Error('Cannot read public key. Unknown OID.');
        error.oid = oid;
        throw error;
      }
      obj = capture.rsaPublicKey;
    }

    // get RSA params
    errors = [];
    if(!asn1$1.validate(obj, rsaPublicKeyValidator, capture, errors)) {
      var error = new Error('Cannot read public key. ' +
        'ASN.1 object does not contain an RSAPublicKey.');
      error.errors = errors;
      throw error;
    }

    // FIXME: inefficient, get a BigInteger that uses byte strings
    var n = forge$2.util.createBuffer(capture.publicKeyModulus).toHex();
    var e = forge$2.util.createBuffer(capture.publicKeyExponent).toHex();

    // set public key
    return pki$1.setRsaPublicKey(
      new BigInteger$1(n, 16),
      new BigInteger$1(e, 16));
  };

  /**
   * Converts a public key to an ASN.1 SubjectPublicKeyInfo.
   *
   * @param key the public key.
   *
   * @return the asn1 representation of a SubjectPublicKeyInfo.
   */
  pki$1.publicKeyToAsn1 = pki$1.publicKeyToSubjectPublicKeyInfo = function(key) {
    // SubjectPublicKeyInfo
    return asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
      // AlgorithmIdentifier
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
        // algorithm
        asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.OID, false,
          asn1$1.oidToDer(pki$1.oids.rsaEncryption).getBytes()),
        // parameters (null)
        asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.NULL, false, '')
      ]),
      // subjectPublicKey
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.BITSTRING, false, [
        pki$1.publicKeyToRSAPublicKey(key)
      ])
    ]);
  };

  /**
   * Converts a public key to an ASN.1 RSAPublicKey.
   *
   * @param key the public key.
   *
   * @return the asn1 representation of a RSAPublicKey.
   */
  pki$1.publicKeyToRSAPublicKey = function(key) {
    // RSAPublicKey
    return asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
      // modulus (n)
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
        _bnToBytes(key.n)),
      // publicExponent (e)
      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
        _bnToBytes(key.e))
    ]);
  };

  /**
   * Encodes a message using PKCS#1 v1.5 padding.
   *
   * @param m the message to encode.
   * @param key the RSA key to use.
   * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02
   *          (for encryption).
   *
   * @return the padded byte buffer.
   */
  function _encodePkcs1_v1_5(m, key, bt) {
    var eb = forge$2.util.createBuffer();

    // get the length of the modulus in bytes
    var k = Math.ceil(key.n.bitLength() / 8);

    /* use PKCS#1 v1.5 padding */
    if(m.length > (k - 11)) {
      var error = new Error('Message is too long for PKCS#1 v1.5 padding.');
      error.length = m.length;
      error.max = k - 11;
      throw error;
    }

    /* A block type BT, a padding string PS, and the data D shall be
      formatted into an octet string EB, the encryption block:

      EB = 00 || BT || PS || 00 || D

      The block type BT shall be a single octet indicating the structure of
      the encryption block. For this version of the document it shall have
      value 00, 01, or 02. For a private-key operation, the block type
      shall be 00 or 01. For a public-key operation, it shall be 02.

      The padding string PS shall consist of k-3-||D|| octets. For block
      type 00, the octets shall have value 00; for block type 01, they
      shall have value FF; and for block type 02, they shall be
      pseudorandomly generated and nonzero. This makes the length of the
      encryption block EB equal to k. */

    // build the encryption block
    eb.putByte(0x00);
    eb.putByte(bt);

    // create the padding
    var padNum = k - 3 - m.length;
    var padByte;
    // private key op
    if(bt === 0x00 || bt === 0x01) {
      padByte = (bt === 0x00) ? 0x00 : 0xFF;
      for(var i = 0; i < padNum; ++i) {
        eb.putByte(padByte);
      }
    } else {
      // public key op
      // pad with random non-zero values
      while(padNum > 0) {
        var numZeros = 0;
        var padBytes = forge$2.random.getBytes(padNum);
        for(var i = 0; i < padNum; ++i) {
          padByte = padBytes.charCodeAt(i);
          if(padByte === 0) {
            ++numZeros;
          } else {
            eb.putByte(padByte);
          }
        }
        padNum = numZeros;
      }
    }

    // zero followed by message
    eb.putByte(0x00);
    eb.putBytes(m);

    return eb;
  }

  /**
   * Decodes a message using PKCS#1 v1.5 padding.
   *
   * @param em the message to decode.
   * @param key the RSA key to use.
   * @param pub true if the key is a public key, false if it is private.
   * @param ml the message length, if specified.
   *
   * @return the decoded bytes.
   */
  function _decodePkcs1_v1_5(em, key, pub, ml) {
    // get the length of the modulus in bytes
    var k = Math.ceil(key.n.bitLength() / 8);

    /* It is an error if any of the following conditions occurs:

      1. The encryption block EB cannot be parsed unambiguously.
      2. The padding string PS consists of fewer than eight octets
        or is inconsisent with the block type BT.
      3. The decryption process is a public-key operation and the block
        type BT is not 00 or 01, or the decryption process is a
        private-key operation and the block type is not 02.
     */

    // parse the encryption block
    var eb = forge$2.util.createBuffer(em);
    var first = eb.getByte();
    var bt = eb.getByte();
    if(first !== 0x00 ||
      (pub && bt !== 0x00 && bt !== 0x01) ||
      (!pub && bt != 0x02) ||
      (pub && bt === 0x00 && typeof(ml) === 'undefined')) {
      throw new Error('Encryption block is invalid.');
    }

    var padNum = 0;
    if(bt === 0x00) {
      // check all padding bytes for 0x00
      padNum = k - 3 - ml;
      for(var i = 0; i < padNum; ++i) {
        if(eb.getByte() !== 0x00) {
          throw new Error('Encryption block is invalid.');
        }
      }
    } else if(bt === 0x01) {
      // find the first byte that isn't 0xFF, should be after all padding
      padNum = 0;
      while(eb.length() > 1) {
        if(eb.getByte() !== 0xFF) {
          --eb.read;
          break;
        }
        ++padNum;
      }
    } else if(bt === 0x02) {
      // look for 0x00 byte
      padNum = 0;
      while(eb.length() > 1) {
        if(eb.getByte() === 0x00) {
          --eb.read;
          break;
        }
        ++padNum;
      }
    }

    // zero must be 0x00 and padNum must be (k - 3 - message length)
    var zero = eb.getByte();
    if(zero !== 0x00 || padNum !== (k - 3 - eb.length())) {
      throw new Error('Encryption block is invalid.');
    }

    return eb.getBytes();
  }

  /**
   * Runs the key-generation algorithm asynchronously, either in the background
   * via Web Workers, or using the main thread and setImmediate.
   *
   * @param state the key-pair generation state.
   * @param [options] options for key-pair generation:
   *          workerScript the worker script URL.
   *          workers the number of web workers (if supported) to use,
   *            (default: 2, -1 to use estimated cores minus one).
   *          workLoad the size of the work load, ie: number of possible prime
   *            numbers for each web worker to check per work assignment,
   *            (default: 100).
   * @param callback(err, keypair) called once the operation completes.
   */
  function _generateKeyPair(state, options, callback) {
    if(typeof options === 'function') {
      callback = options;
      options = {};
    }
    options = options || {};

    var opts = {
      algorithm: {
        name: options.algorithm || 'PRIMEINC',
        options: {
          workers: options.workers || 2,
          workLoad: options.workLoad || 100,
          workerScript: options.workerScript
        }
      }
    };
    if('prng' in options) {
      opts.prng = options.prng;
    }

    generate();

    function generate() {
      // find p and then q (done in series to simplify)
      getPrime(state.pBits, function(err, num) {
        if(err) {
          return callback(err);
        }
        state.p = num;
        if(state.q !== null) {
          return finish(err, state.q);
        }
        getPrime(state.qBits, finish);
      });
    }

    function getPrime(bits, callback) {
      forge$2.prime.generateProbablePrime(bits, opts, callback);
    }

    function finish(err, num) {
      if(err) {
        return callback(err);
      }

      // set q
      state.q = num;

      // ensure p is larger than q (swap them if not)
      if(state.p.compareTo(state.q) < 0) {
        var tmp = state.p;
        state.p = state.q;
        state.q = tmp;
      }

      // ensure p is coprime with e
      if(state.p.subtract(BigInteger$1.ONE).gcd(state.e)
        .compareTo(BigInteger$1.ONE) !== 0) {
        state.p = null;
        generate();
        return;
      }

      // ensure q is coprime with e
      if(state.q.subtract(BigInteger$1.ONE).gcd(state.e)
        .compareTo(BigInteger$1.ONE) !== 0) {
        state.q = null;
        getPrime(state.qBits, finish);
        return;
      }

      // compute phi: (p - 1)(q - 1) (Euler's totient function)
      state.p1 = state.p.subtract(BigInteger$1.ONE);
      state.q1 = state.q.subtract(BigInteger$1.ONE);
      state.phi = state.p1.multiply(state.q1);

      // ensure e and phi are coprime
      if(state.phi.gcd(state.e).compareTo(BigInteger$1.ONE) !== 0) {
        // phi and e aren't coprime, so generate a new p and q
        state.p = state.q = null;
        generate();
        return;
      }

      // create n, ensure n is has the right number of bits
      state.n = state.p.multiply(state.q);
      if(state.n.bitLength() !== state.bits) {
        // failed, get new q
        state.q = null;
        getPrime(state.qBits, finish);
        return;
      }

      // set keys
      var d = state.e.modInverse(state.phi);
      state.keys = {
        privateKey: pki$1.rsa.setPrivateKey(
          state.n, state.e, d, state.p, state.q,
          d.mod(state.p1), d.mod(state.q1),
          state.q.modInverse(state.p)),
        publicKey: pki$1.rsa.setPublicKey(state.n, state.e)
      };

      callback(null, state.keys);
    }
  }

  /**
   * Converts a positive BigInteger into 2's-complement big-endian bytes.
   *
   * @param b the big integer to convert.
   *
   * @return the bytes.
   */
  function _bnToBytes(b) {
    // prepend 0x00 if first byte >= 0x80
    var hex = b.toString(16);
    if(hex[0] >= '8') {
      hex = '00' + hex;
    }
    var bytes = forge$2.util.hexToBytes(hex);

    // ensure integer is minimally-encoded
    if(bytes.length > 1 &&
      // leading 0x00 for positive integer
      ((bytes.charCodeAt(0) === 0 &&
      (bytes.charCodeAt(1) & 0x80) === 0) ||
      // leading 0xFF for negative integer
      (bytes.charCodeAt(0) === 0xFF &&
      (bytes.charCodeAt(1) & 0x80) === 0x80))) {
      return bytes.substr(1);
    }
    return bytes;
  }

  /**
   * Returns the required number of Miller-Rabin tests to generate a
   * prime with an error probability of (1/2)^80.
   *
   * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
   *
   * @param bits the bit size.
   *
   * @return the required number of iterations.
   */
  function _getMillerRabinTests(bits) {
    if(bits <= 100) return 27;
    if(bits <= 150) return 18;
    if(bits <= 200) return 15;
    if(bits <= 250) return 12;
    if(bits <= 300) return 9;
    if(bits <= 350) return 8;
    if(bits <= 400) return 7;
    if(bits <= 500) return 6;
    if(bits <= 600) return 5;
    if(bits <= 800) return 4;
    if(bits <= 1250) return 3;
    return 2;
  }

  /**
   * Performs feature detection on the Node crypto interface.
   *
   * @param fn the feature (function) to detect.
   *
   * @return true if detected, false if not.
   */
  function _detectNodeCrypto(fn) {
    return forge$2.util.isNodejs && typeof _crypto[fn] === 'function';
  }

  /**
   * Performs feature detection on the SubtleCrypto interface.
   *
   * @param fn the feature (function) to detect.
   *
   * @return true if detected, false if not.
   */
  function _detectSubtleCrypto(fn) {
    return (typeof util$a.globalScope !== 'undefined' &&
      typeof util$a.globalScope.crypto === 'object' &&
      typeof util$a.globalScope.crypto.subtle === 'object' &&
      typeof util$a.globalScope.crypto.subtle[fn] === 'function');
  }

  /**
   * Performs feature detection on the deprecated Microsoft Internet Explorer
   * outdated SubtleCrypto interface. This function should only be used after
   * checking for the modern, standard SubtleCrypto interface.
   *
   * @param fn the feature (function) to detect.
   *
   * @return true if detected, false if not.
   */
  function _detectSubtleMsCrypto(fn) {
    return (typeof util$a.globalScope !== 'undefined' &&
      typeof util$a.globalScope.msCrypto === 'object' &&
      typeof util$a.globalScope.msCrypto.subtle === 'object' &&
      typeof util$a.globalScope.msCrypto.subtle[fn] === 'function');
  }

  function _intToUint8Array(x) {
    var bytes = forge$2.util.hexToBytes(x.toString(16));
    var buffer = new Uint8Array(bytes.length);
    for(var i = 0; i < bytes.length; ++i) {
      buffer[i] = bytes.charCodeAt(i);
    }
    return buffer;
  }

  /**
   * Password-based encryption functions.
   *
   * @author Dave Longley
   * @author Stefan Siegl <stesie@brokenpipe.de>
   *
   * Copyright (c) 2010-2013 Digital Bazaar, Inc.
   * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
   *
   * An EncryptedPrivateKeyInfo:
   *
   * EncryptedPrivateKeyInfo ::= SEQUENCE {
   *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,
   *   encryptedData        EncryptedData }
   *
   * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
   *
   * EncryptedData ::= OCTET STRING
   */

  var forge$1 = forge$m;












  if(typeof BigInteger === 'undefined') {
    var BigInteger = forge$1.jsbn.BigInteger;
  }

  // shortcut for asn.1 API
  var asn1 = forge$1.asn1;

  /* Password-based encryption implementation. */
  var pki = forge$1.pki = forge$1.pki || {};
  pki.pbe = forge$1.pbe = forge$1.pbe || {};
  var oids = pki.oids;

  // validator for an EncryptedPrivateKeyInfo structure
  // Note: Currently only works w/algorithm params
  var encryptedPrivateKeyValidator = {
    name: 'EncryptedPrivateKeyInfo',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'AlgorithmIdentifier.algorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: 'encryptionOid'
      }, {
        name: 'AlgorithmIdentifier.parameters',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        captureAsn1: 'encryptionParams'
      }]
    }, {
      // encryptedData
      name: 'EncryptedPrivateKeyInfo.encryptedData',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OCTETSTRING,
      constructed: false,
      capture: 'encryptedData'
    }]
  };

  // validator for a PBES2Algorithms structure
  // Note: Currently only works w/PBKDF2 + AES encryption schemes
  var PBES2AlgorithmsValidator = {
    name: 'PBES2Algorithms',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'PBES2Algorithms.keyDerivationFunc',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'PBES2Algorithms.keyDerivationFunc.oid',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: 'kdfOid'
      }, {
        name: 'PBES2Algorithms.params',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: 'PBES2Algorithms.params.salt',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OCTETSTRING,
          constructed: false,
          capture: 'kdfSalt'
        }, {
          name: 'PBES2Algorithms.params.iterationCount',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.INTEGER,
          constructed: false,
          capture: 'kdfIterationCount'
        }, {
          name: 'PBES2Algorithms.params.keyLength',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.INTEGER,
          constructed: false,
          optional: true,
          capture: 'keyLength'
        }, {
          // prf
          name: 'PBES2Algorithms.params.prf',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          optional: true,
          value: [{
            name: 'PBES2Algorithms.params.prf.algorithm',
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OID,
            constructed: false,
            capture: 'prfOid'
          }]
        }]
      }]
    }, {
      name: 'PBES2Algorithms.encryptionScheme',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'PBES2Algorithms.encryptionScheme.oid',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: 'encOid'
      }, {
        name: 'PBES2Algorithms.encryptionScheme.iv',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: 'encIv'
      }]
    }]
  };

  var pkcs12PbeParamsValidator = {
    name: 'pkcs-12PbeParams',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'pkcs-12PbeParams.salt',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OCTETSTRING,
      constructed: false,
      capture: 'salt'
    }, {
      name: 'pkcs-12PbeParams.iterations',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.INTEGER,
      constructed: false,
      capture: 'iterations'
    }]
  };

  /**
   * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.
   *
   * PBES2Algorithms ALGORITHM-IDENTIFIER ::=
   *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}
   *
   * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}
   *
   * PBES2-params ::= SEQUENCE {
   *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
   *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
   * }
   *
   * PBES2-KDFs ALGORITHM-IDENTIFIER ::=
   *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }
   *
   * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }
   *
   * PBKDF2-params ::= SEQUENCE {
   *   salt CHOICE {
   *     specified OCTET STRING,
   *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}
   *   },
   *   iterationCount INTEGER (1..MAX),
   *   keyLength INTEGER (1..MAX) OPTIONAL,
   *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1
   * }
   *
   * @param obj the ASN.1 PrivateKeyInfo object.
   * @param password the password to encrypt with.
   * @param options:
   *          algorithm the encryption algorithm to use
   *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
   *          count the iteration count to use.
   *          saltSize the salt size to use.
   *          prfAlgorithm the PRF message digest algorithm to use
   *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')
   *
   * @return the ASN.1 EncryptedPrivateKeyInfo.
   */
  pki.encryptPrivateKeyInfo = function(obj, password, options) {
    // set default options
    options = options || {};
    options.saltSize = options.saltSize || 8;
    options.count = options.count || 2048;
    options.algorithm = options.algorithm || 'aes128';
    options.prfAlgorithm = options.prfAlgorithm || 'sha1';

    // generate PBE params
    var salt = forge$1.random.getBytesSync(options.saltSize);
    var count = options.count;
    var countBytes = asn1.integerToDer(count);
    var dkLen;
    var encryptionAlgorithm;
    var encryptedData;
    if(options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {
      // do PBES2
      var ivLen, encOid, cipherFn;
      switch(options.algorithm) {
      case 'aes128':
        dkLen = 16;
        ivLen = 16;
        encOid = oids['aes128-CBC'];
        cipherFn = forge$1.aes.createEncryptionCipher;
        break;
      case 'aes192':
        dkLen = 24;
        ivLen = 16;
        encOid = oids['aes192-CBC'];
        cipherFn = forge$1.aes.createEncryptionCipher;
        break;
      case 'aes256':
        dkLen = 32;
        ivLen = 16;
        encOid = oids['aes256-CBC'];
        cipherFn = forge$1.aes.createEncryptionCipher;
        break;
      case 'des':
        dkLen = 8;
        ivLen = 8;
        encOid = oids['desCBC'];
        cipherFn = forge$1.des.createEncryptionCipher;
        break;
      default:
        var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
        error.algorithm = options.algorithm;
        throw error;
      }

      // get PRF message digest
      var prfAlgorithm = 'hmacWith' + options.prfAlgorithm.toUpperCase();
      var md = prfAlgorithmToMessageDigest(prfAlgorithm);

      // encrypt private key using pbe SHA-1 and AES/DES
      var dk = forge$1.pkcs5.pbkdf2(password, salt, count, dkLen, md);
      var iv = forge$1.random.getBytesSync(ivLen);
      var cipher = cipherFn(dk);
      cipher.start(iv);
      cipher.update(asn1.toDer(obj));
      cipher.finish();
      encryptedData = cipher.output.getBytes();

      // get PBKDF2-params
      var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);

      encryptionAlgorithm = asn1.create(
        asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
          asn1.oidToDer(oids['pkcs5PBES2']).getBytes()),
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // keyDerivationFunc
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
              asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()),
            // PBKDF2-params
            params
          ]),
          // encryptionScheme
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
              asn1.oidToDer(encOid).getBytes()),
            // iv
            asn1.create(
              asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)
          ])
        ])
      ]);
    } else if(options.algorithm === '3des') {
      // Do PKCS12 PBE
      dkLen = 24;

      var saltBytes = new forge$1.util.ByteBuffer(salt);
      var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);
      var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);
      var cipher = forge$1.des.createEncryptionCipher(dk);
      cipher.start(iv);
      cipher.update(asn1.toDer(obj));
      cipher.finish();
      encryptedData = cipher.output.getBytes();

      encryptionAlgorithm = asn1.create(
        asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
          asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()),
        // pkcs-12PbeParams
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // salt
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),
          // iteration count
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
            countBytes.getBytes())
        ])
      ]);
    } else {
      var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
      error.algorithm = options.algorithm;
      throw error;
    }

    // EncryptedPrivateKeyInfo
    var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // encryptionAlgorithm
      encryptionAlgorithm,
      // encryptedData
      asn1.create(
        asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)
    ]);
    return rval;
  };

  /**
   * Decrypts a ASN.1 PrivateKeyInfo object.
   *
   * @param obj the ASN.1 EncryptedPrivateKeyInfo object.
   * @param password the password to decrypt with.
   *
   * @return the ASN.1 PrivateKeyInfo on success, null on failure.
   */
  pki.decryptPrivateKeyInfo = function(obj, password) {
    var rval = null;

    // get PBE params
    var capture = {};
    var errors = [];
    if(!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {
      var error = new Error('Cannot read encrypted private key. ' +
        'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
      error.errors = errors;
      throw error;
    }

    // get cipher
    var oid = asn1.derToOid(capture.encryptionOid);
    var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);

    // get encrypted data
    var encrypted = forge$1.util.createBuffer(capture.encryptedData);

    cipher.update(encrypted);
    if(cipher.finish()) {
      rval = asn1.fromDer(cipher.output);
    }

    return rval;
  };

  /**
   * Converts a EncryptedPrivateKeyInfo to PEM format.
   *
   * @param epki the EncryptedPrivateKeyInfo.
   * @param maxline the maximum characters per line, defaults to 64.
   *
   * @return the PEM-formatted encrypted private key.
   */
  pki.encryptedPrivateKeyToPem = function(epki, maxline) {
    // convert to DER, then PEM-encode
    var msg = {
      type: 'ENCRYPTED PRIVATE KEY',
      body: asn1.toDer(epki).getBytes()
    };
    return forge$1.pem.encode(msg, {maxline: maxline});
  };

  /**
   * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption
   * is not performed.
   *
   * @param pem the EncryptedPrivateKeyInfo in PEM-format.
   *
   * @return the ASN.1 EncryptedPrivateKeyInfo.
   */
  pki.encryptedPrivateKeyFromPem = function(pem) {
    var msg = forge$1.pem.decode(pem)[0];

    if(msg.type !== 'ENCRYPTED PRIVATE KEY') {
      var error = new Error('Could not convert encrypted private key from PEM; ' +
        'PEM header type is "ENCRYPTED PRIVATE KEY".');
      error.headerType = msg.type;
      throw error;
    }
    if(msg.procType && msg.procType.type === 'ENCRYPTED') {
      throw new Error('Could not convert encrypted private key from PEM; ' +
        'PEM is encrypted.');
    }

    // convert DER to ASN.1 object
    return asn1.fromDer(msg.body);
  };

  /**
   * Encrypts an RSA private key. By default, the key will be wrapped in
   * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.
   * This is the standard, preferred way to encrypt a private key.
   *
   * To produce a non-standard PEM-encrypted private key that uses encapsulated
   * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL
   * private key encryption), set the 'legacy' option to true. Note: Using this
   * option will cause the iteration count to be forced to 1.
   *
   * Note: The 'des' algorithm is supported, but it is not considered to be
   * secure because it only uses a single 56-bit key. If possible, it is highly
   * recommended that a different algorithm be used.
   *
   * @param rsaKey the RSA key to encrypt.
   * @param password the password to use.
   * @param options:
   *          algorithm: the encryption algorithm to use
   *            ('aes128', 'aes192', 'aes256', '3des', 'des').
   *          count: the iteration count to use.
   *          saltSize: the salt size to use.
   *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated
   *            headers (DEK-Info) private key.
   *
   * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.
   */
  pki.encryptRsaPrivateKey = function(rsaKey, password, options) {
    // standard PKCS#8
    options = options || {};
    if(!options.legacy) {
      // encrypt PrivateKeyInfo
      var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));
      rval = pki.encryptPrivateKeyInfo(rval, password, options);
      return pki.encryptedPrivateKeyToPem(rval);
    }

    // legacy non-PKCS#8
    var algorithm;
    var iv;
    var dkLen;
    var cipherFn;
    switch(options.algorithm) {
    case 'aes128':
      algorithm = 'AES-128-CBC';
      dkLen = 16;
      iv = forge$1.random.getBytesSync(16);
      cipherFn = forge$1.aes.createEncryptionCipher;
      break;
    case 'aes192':
      algorithm = 'AES-192-CBC';
      dkLen = 24;
      iv = forge$1.random.getBytesSync(16);
      cipherFn = forge$1.aes.createEncryptionCipher;
      break;
    case 'aes256':
      algorithm = 'AES-256-CBC';
      dkLen = 32;
      iv = forge$1.random.getBytesSync(16);
      cipherFn = forge$1.aes.createEncryptionCipher;
      break;
    case '3des':
      algorithm = 'DES-EDE3-CBC';
      dkLen = 24;
      iv = forge$1.random.getBytesSync(8);
      cipherFn = forge$1.des.createEncryptionCipher;
      break;
    case 'des':
      algorithm = 'DES-CBC';
      dkLen = 8;
      iv = forge$1.random.getBytesSync(8);
      cipherFn = forge$1.des.createEncryptionCipher;
      break;
    default:
      var error = new Error('Could not encrypt RSA private key; unsupported ' +
        'encryption algorithm "' + options.algorithm + '".');
      error.algorithm = options.algorithm;
      throw error;
    }

    // encrypt private key using OpenSSL legacy key derivation
    var dk = forge$1.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
    var cipher = cipherFn(dk);
    cipher.start(iv);
    cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));
    cipher.finish();

    var msg = {
      type: 'RSA PRIVATE KEY',
      procType: {
        version: '4',
        type: 'ENCRYPTED'
      },
      dekInfo: {
        algorithm: algorithm,
        parameters: forge$1.util.bytesToHex(iv).toUpperCase()
      },
      body: cipher.output.getBytes()
    };
    return forge$1.pem.encode(msg);
  };

  /**
   * Decrypts an RSA private key.
   *
   * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.
   * @param password the password to use.
   *
   * @return the RSA key on success, null on failure.
   */
  pki.decryptRsaPrivateKey = function(pem, password) {
    var rval = null;

    var msg = forge$1.pem.decode(pem)[0];

    if(msg.type !== 'ENCRYPTED PRIVATE KEY' &&
      msg.type !== 'PRIVATE KEY' &&
      msg.type !== 'RSA PRIVATE KEY') {
      var error = new Error('Could not convert private key from PEM; PEM header type ' +
        'is not "ENCRYPTED PRIVATE KEY", "PRIVATE KEY", or "RSA PRIVATE KEY".');
      error.headerType = error;
      throw error;
    }

    if(msg.procType && msg.procType.type === 'ENCRYPTED') {
      var dkLen;
      var cipherFn;
      switch(msg.dekInfo.algorithm) {
      case 'DES-CBC':
        dkLen = 8;
        cipherFn = forge$1.des.createDecryptionCipher;
        break;
      case 'DES-EDE3-CBC':
        dkLen = 24;
        cipherFn = forge$1.des.createDecryptionCipher;
        break;
      case 'AES-128-CBC':
        dkLen = 16;
        cipherFn = forge$1.aes.createDecryptionCipher;
        break;
      case 'AES-192-CBC':
        dkLen = 24;
        cipherFn = forge$1.aes.createDecryptionCipher;
        break;
      case 'AES-256-CBC':
        dkLen = 32;
        cipherFn = forge$1.aes.createDecryptionCipher;
        break;
      case 'RC2-40-CBC':
        dkLen = 5;
        cipherFn = function(key) {
          return forge$1.rc2.createDecryptionCipher(key, 40);
        };
        break;
      case 'RC2-64-CBC':
        dkLen = 8;
        cipherFn = function(key) {
          return forge$1.rc2.createDecryptionCipher(key, 64);
        };
        break;
      case 'RC2-128-CBC':
        dkLen = 16;
        cipherFn = function(key) {
          return forge$1.rc2.createDecryptionCipher(key, 128);
        };
        break;
      default:
        var error = new Error('Could not decrypt private key; unsupported ' +
          'encryption algorithm "' + msg.dekInfo.algorithm + '".');
        error.algorithm = msg.dekInfo.algorithm;
        throw error;
      }

      // use OpenSSL legacy key derivation
      var iv = forge$1.util.hexToBytes(msg.dekInfo.parameters);
      var dk = forge$1.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
      var cipher = cipherFn(dk);
      cipher.start(iv);
      cipher.update(forge$1.util.createBuffer(msg.body));
      if(cipher.finish()) {
        rval = cipher.output.getBytes();
      } else {
        return rval;
      }
    } else {
      rval = msg.body;
    }

    if(msg.type === 'ENCRYPTED PRIVATE KEY') {
      rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);
    } else {
      // decryption already performed above
      rval = asn1.fromDer(rval);
    }

    if(rval !== null) {
      rval = pki.privateKeyFromAsn1(rval);
    }

    return rval;
  };

  /**
   * Derives a PKCS#12 key.
   *
   * @param password the password to derive the key material from, null or
   *          undefined for none.
   * @param salt the salt, as a ByteBuffer, to use.
   * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
   * @param iter the iteration count.
   * @param n the number of bytes to derive from the password.
   * @param md the message digest to use, defaults to SHA-1.
   *
   * @return a ByteBuffer with the bytes derived from the password.
   */
  pki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {
    var j, l;

    if(typeof md === 'undefined' || md === null) {
      if(!('sha1' in forge$1.md)) {
        throw new Error('"sha1" hash algorithm unavailable.');
      }
      md = forge$1.md.sha1.create();
    }

    var u = md.digestLength;
    var v = md.blockLength;
    var result = new forge$1.util.ByteBuffer();

    /* Convert password to Unicode byte buffer + trailing 0-byte. */
    var passBuf = new forge$1.util.ByteBuffer();
    if(password !== null && password !== undefined) {
      for(l = 0; l < password.length; l++) {
        passBuf.putInt16(password.charCodeAt(l));
      }
      passBuf.putInt16(0);
    }

    /* Length of salt and password in BYTES. */
    var p = passBuf.length();
    var s = salt.length();

    /* 1. Construct a string, D (the "diversifier"), by concatenating
          v copies of ID. */
    var D = new forge$1.util.ByteBuffer();
    D.fillWithByte(id, v);

    /* 2. Concatenate copies of the salt together to create a string S of length
          v * ceil(s / v) bytes (the final copy of the salt may be trunacted
          to create S).
          Note that if the salt is the empty string, then so is S. */
    var Slen = v * Math.ceil(s / v);
    var S = new forge$1.util.ByteBuffer();
    for(l = 0; l < Slen; l++) {
      S.putByte(salt.at(l % s));
    }

    /* 3. Concatenate copies of the password together to create a string P of
          length v * ceil(p / v) bytes (the final copy of the password may be
          truncated to create P).
          Note that if the password is the empty string, then so is P. */
    var Plen = v * Math.ceil(p / v);
    var P = new forge$1.util.ByteBuffer();
    for(l = 0; l < Plen; l++) {
      P.putByte(passBuf.at(l % p));
    }

    /* 4. Set I=S||P to be the concatenation of S and P. */
    var I = S;
    I.putBuffer(P);

    /* 5. Set c=ceil(n / u). */
    var c = Math.ceil(n / u);

    /* 6. For i=1, 2, ..., c, do the following: */
    for(var i = 1; i <= c; i++) {
      /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */
      var buf = new forge$1.util.ByteBuffer();
      buf.putBytes(D.bytes());
      buf.putBytes(I.bytes());
      for(var round = 0; round < iter; round++) {
        md.start();
        md.update(buf.getBytes());
        buf = md.digest();
      }

      /* b) Concatenate copies of Ai to create a string B of length v bytes (the
            final copy of Ai may be truncated to create B). */
      var B = new forge$1.util.ByteBuffer();
      for(l = 0; l < v; l++) {
        B.putByte(buf.at(l % u));
      }

      /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,
            where k=ceil(s / v) + ceil(p / v), modify I by setting
            Ij=(Ij+B+1) mod 2v for each j.  */
      var k = Math.ceil(s / v) + Math.ceil(p / v);
      var Inew = new forge$1.util.ByteBuffer();
      for(j = 0; j < k; j++) {
        var chunk = new forge$1.util.ByteBuffer(I.getBytes(v));
        var x = 0x1ff;
        for(l = B.length() - 1; l >= 0; l--) {
          x = x >> 8;
          x += B.at(l) + chunk.at(l);
          chunk.setAt(l, x & 0xff);
        }
        Inew.putBuffer(chunk);
      }
      I = Inew;

      /* Add Ai to A. */
      result.putBuffer(buf);
    }

    result.truncate(result.length() - n);
    return result;
  };

  /**
   * Get new Forge cipher object instance.
   *
   * @param oid the OID (in string notation).
   * @param params the ASN.1 params object.
   * @param password the password to decrypt with.
   *
   * @return new cipher object instance.
   */
  pki.pbe.getCipher = function(oid, params, password) {
    switch(oid) {
    case pki.oids['pkcs5PBES2']:
      return pki.pbe.getCipherForPBES2(oid, params, password);

    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:
      return pki.pbe.getCipherForPKCS12PBE(oid, params, password);

    default:
      var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');
      error.oid = oid;
      error.supportedOids = [
        'pkcs5PBES2',
        'pbeWithSHAAnd3-KeyTripleDES-CBC',
        'pbewithSHAAnd40BitRC2-CBC'
      ];
      throw error;
    }
  };

  /**
   * Get new Forge cipher object instance according to PBES2 params block.
   *
   * The returned cipher instance is already started using the IV
   * from PBES2 parameter block.
   *
   * @param oid the PKCS#5 PBKDF2 OID (in string notation).
   * @param params the ASN.1 PBES2-params object.
   * @param password the password to decrypt with.
   *
   * @return new cipher object instance.
   */
  pki.pbe.getCipherForPBES2 = function(oid, params, password) {
    // get PBE params
    var capture = {};
    var errors = [];
    if(!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {
      var error = new Error('Cannot read password-based-encryption algorithm ' +
        'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
      error.errors = errors;
      throw error;
    }

    // check oids
    oid = asn1.derToOid(capture.kdfOid);
    if(oid !== pki.oids['pkcs5PBKDF2']) {
      var error = new Error('Cannot read encrypted private key. ' +
        'Unsupported key derivation function OID.');
      error.oid = oid;
      error.supportedOids = ['pkcs5PBKDF2'];
      throw error;
    }
    oid = asn1.derToOid(capture.encOid);
    if(oid !== pki.oids['aes128-CBC'] &&
      oid !== pki.oids['aes192-CBC'] &&
      oid !== pki.oids['aes256-CBC'] &&
      oid !== pki.oids['des-EDE3-CBC'] &&
      oid !== pki.oids['desCBC']) {
      var error = new Error('Cannot read encrypted private key. ' +
        'Unsupported encryption scheme OID.');
      error.oid = oid;
      error.supportedOids = [
        'aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];
      throw error;
    }

    // set PBE params
    var salt = capture.kdfSalt;
    var count = forge$1.util.createBuffer(capture.kdfIterationCount);
    count = count.getInt(count.length() << 3);
    var dkLen;
    var cipherFn;
    switch(pki.oids[oid]) {
    case 'aes128-CBC':
      dkLen = 16;
      cipherFn = forge$1.aes.createDecryptionCipher;
      break;
    case 'aes192-CBC':
      dkLen = 24;
      cipherFn = forge$1.aes.createDecryptionCipher;
      break;
    case 'aes256-CBC':
      dkLen = 32;
      cipherFn = forge$1.aes.createDecryptionCipher;
      break;
    case 'des-EDE3-CBC':
      dkLen = 24;
      cipherFn = forge$1.des.createDecryptionCipher;
      break;
    case 'desCBC':
      dkLen = 8;
      cipherFn = forge$1.des.createDecryptionCipher;
      break;
    }

    // get PRF message digest
    var md = prfOidToMessageDigest(capture.prfOid);

    // decrypt private key using pbe with chosen PRF and AES/DES
    var dk = forge$1.pkcs5.pbkdf2(password, salt, count, dkLen, md);
    var iv = capture.encIv;
    var cipher = cipherFn(dk);
    cipher.start(iv);

    return cipher;
  };

  /**
   * Get new Forge cipher object instance for PKCS#12 PBE.
   *
   * The returned cipher instance is already started using the key & IV
   * derived from the provided password and PKCS#12 PBE salt.
   *
   * @param oid The PKCS#12 PBE OID (in string notation).
   * @param params The ASN.1 PKCS#12 PBE-params object.
   * @param password The password to decrypt with.
   *
   * @return the new cipher object instance.
   */
  pki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {
    // get PBE params
    var capture = {};
    var errors = [];
    if(!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {
      var error = new Error('Cannot read password-based-encryption algorithm ' +
        'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
      error.errors = errors;
      throw error;
    }

    var salt = forge$1.util.createBuffer(capture.salt);
    var count = forge$1.util.createBuffer(capture.iterations);
    count = count.getInt(count.length() << 3);

    var dkLen, dIvLen, cipherFn;
    switch(oid) {
      case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
        dkLen = 24;
        dIvLen = 8;
        cipherFn = forge$1.des.startDecrypting;
        break;

      case pki.oids['pbewithSHAAnd40BitRC2-CBC']:
        dkLen = 5;
        dIvLen = 8;
        cipherFn = function(key, iv) {
          var cipher = forge$1.rc2.createDecryptionCipher(key, 40);
          cipher.start(iv, null);
          return cipher;
        };
        break;

      default:
        var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');
        error.oid = oid;
        throw error;
    }

    // get PRF message digest
    var md = prfOidToMessageDigest(capture.prfOid);
    var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);
    md.start();
    var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);

    return cipherFn(key, iv);
  };

  /**
   * OpenSSL's legacy key derivation function.
   *
   * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html
   *
   * @param password the password to derive the key from.
   * @param salt the salt to use, null for none.
   * @param dkLen the number of bytes needed for the derived key.
   * @param [options] the options to use:
   *          [md] an optional message digest object to use.
   */
  pki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {
    if(typeof md === 'undefined' || md === null) {
      if(!('md5' in forge$1.md)) {
        throw new Error('"md5" hash algorithm unavailable.');
      }
      md = forge$1.md.md5.create();
    }
    if(salt === null) {
      salt = '';
    }
    var digests = [hash(md, password + salt)];
    for(var length = 16, i = 1; length < dkLen; ++i, length += 16) {
      digests.push(hash(md, digests[i - 1] + password + salt));
    }
    return digests.join('').substr(0, dkLen);
  };

  function hash(md, bytes) {
    return md.start().update(bytes).digest().getBytes();
  }

  function prfOidToMessageDigest(prfOid) {
    // get PRF algorithm, default to SHA-1
    var prfAlgorithm;
    if(!prfOid) {
      prfAlgorithm = 'hmacWithSHA1';
    } else {
      prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];
      if(!prfAlgorithm) {
        var error = new Error('Unsupported PRF OID.');
        error.oid = prfOid;
        error.supported = [
          'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',
          'hmacWithSHA512'];
        throw error;
      }
    }
    return prfAlgorithmToMessageDigest(prfAlgorithm);
  }

  function prfAlgorithmToMessageDigest(prfAlgorithm) {
    var factory = forge$1.md;
    switch(prfAlgorithm) {
    case 'hmacWithSHA224':
      factory = forge$1.md.sha512;
    case 'hmacWithSHA1':
    case 'hmacWithSHA256':
    case 'hmacWithSHA384':
    case 'hmacWithSHA512':
      prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();
      break;
    default:
      var error = new Error('Unsupported PRF algorithm.');
      error.algorithm = prfAlgorithm;
      error.supported = [
        'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',
        'hmacWithSHA512'];
      throw error;
    }
    if(!factory || !(prfAlgorithm in factory)) {
      throw new Error('Unknown hash algorithm: ' + prfAlgorithm);
    }
    return factory[prfAlgorithm].create();
  }

  function createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {
    var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
      // salt
      asn1.create(
        asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),
      // iteration count
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
        countBytes.getBytes())
    ]);
    // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm
    if(prfAlgorithm !== 'hmacWithSHA1') {
      params.value.push(
        // key length
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
          forge$1.util.hexToBytes(dkLen.toString(16))),
        // AlgorithmIdentifier
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // algorithm
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
            asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()),
          // parameters (null)
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
        ]));
    }
    return params;
  }

  /**
   * When this error is thrown it means an operation was aborted,
   * usually in response to the `abort` event being emitted by an
   * AbortSignal.
   */
  let AbortError$5 = class AbortError extends Error {
      code;
      type;
      constructor(message = 'The operation was aborted') {
          super(message);
          this.code = AbortError.code;
          this.type = AbortError.type;
      }
      static code = 'ABORT_ERR';
      static type = 'aborted';
  };
  class CodeError extends Error {
      code;
      props;
      constructor(message, code, props) {
          super(message);
          this.code = code;
          this.name = props?.name ?? 'CodeError';
          this.props = props ?? {}; // eslint-disable-line @typescript-eslint/consistent-type-assertions
      }
  }

  /**
   * To guarantee Uint8Array semantics, convert nodejs Buffers
   * into vanilla Uint8Arrays
   */
  function asUint8Array(buf) {
      if (globalThis.Buffer != null) {
          return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
      }
      return buf;
  }

  // base-x encoding / decoding
  // Copyright (c) 2018 base-x contributors
  // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
  // Distributed under the MIT software license, see the accompanying
  // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
  function base (ALPHABET, name) {
    if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
      BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
    function encode (source) {
      if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {
        source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
      } else if (Array.isArray(source)) {
        source = Uint8Array.from(source);
      }
      if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }
      if (source.length === 0) { return '' }
          // Skip & count leading zeroes.
      var zeroes = 0;
      var length = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
          // Allocate enough space in big-endian base58 representation.
      var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
      var b58 = new Uint8Array(size);
          // Process the bytes.
      while (pbegin !== pend) {
        var carry = source[pbegin];
              // Apply "b58 = b58 * 256 + ch".
        var i = 0;
        for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
          carry += (256 * b58[it1]) >>> 0;
          b58[it1] = (carry % BASE) >>> 0;
          carry = (carry / BASE) >>> 0;
        }
        if (carry !== 0) { throw new Error('Non-zero carry') }
        length = i;
        pbegin++;
      }
          // Skip leading zeroes in base58 result.
      var it2 = size - length;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
          // Translate the result into a string.
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
      return str
    }
    function decodeUnsafe (source) {
      if (typeof source !== 'string') { throw new TypeError('Expected String') }
      if (source.length === 0) { return new Uint8Array() }
      var psz = 0;
          // Skip leading spaces.
      if (source[psz] === ' ') { return }
          // Skip and count leading '1's.
      var zeroes = 0;
      var length = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
          // Allocate enough space in big-endian base256 representation.
      var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
      var b256 = new Uint8Array(size);
          // Process the characters.
      while (source[psz]) {
              // Decode character
        var carry = BASE_MAP[source.charCodeAt(psz)];
              // Invalid character
        if (carry === 255) { return }
        var i = 0;
        for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
          carry += (BASE * b256[it3]) >>> 0;
          b256[it3] = (carry % 256) >>> 0;
          carry = (carry / 256) >>> 0;
        }
        if (carry !== 0) { throw new Error('Non-zero carry') }
        length = i;
        psz++;
      }
          // Skip trailing spaces.
      if (source[psz] === ' ') { return }
          // Skip leading zeroes in b256.
      var it4 = size - length;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = new Uint8Array(zeroes + (size - it4));
      var j = zeroes;
      while (it4 !== size) {
        vch[j++] = b256[it4++];
      }
      return vch
    }
    function decode (string) {
      var buffer = decodeUnsafe(string);
      if (buffer) { return buffer }
      throw new Error(`Non-${name} character`)
    }
    return {
      encode: encode,
      decodeUnsafe: decodeUnsafe,
      decode: decode
    }
  }
  var src = base;

  var _brrp__multiformats_scope_baseX = src;

  /**
   * @param {Uint8Array} aa
   * @param {Uint8Array} bb
   */
  const equals$2 = (aa, bb) => {
    if (aa === bb) return true
    if (aa.byteLength !== bb.byteLength) {
      return false
    }

    for (let ii = 0; ii < aa.byteLength; ii++) {
      if (aa[ii] !== bb[ii]) {
        return false
      }
    }

    return true
  };

  /**
   * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o
   * @returns {Uint8Array}
   */
  const coerce = o => {
    if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o
    if (o instanceof ArrayBuffer) return new Uint8Array(o)
    if (ArrayBuffer.isView(o)) {
      return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)
    }
    throw new Error('Unknown type, must be binary type')
  };

  /**
   * @param {string} str
   * @returns {Uint8Array}
   */
  const fromString$2 = str => (new TextEncoder()).encode(str);

  /**
   * @param {Uint8Array} b
   * @returns {string}
   */
  const toString$2 = b => (new TextDecoder()).decode(b);

  /**
   * Class represents both BaseEncoder and MultibaseEncoder meaning it
   * can be used to encode to multibase or base encode without multibase
   * prefix.
   *
   * @class
   * @template {string} Base
   * @template {string} Prefix
   * @implements {API.MultibaseEncoder<Prefix>}
   * @implements {API.BaseEncoder}
   */
  class Encoder {
    /**
     * @param {Base} name
     * @param {Prefix} prefix
     * @param {(bytes:Uint8Array) => string} baseEncode
     */
    constructor (name, prefix, baseEncode) {
      this.name = name;
      this.prefix = prefix;
      this.baseEncode = baseEncode;
    }

    /**
     * @param {Uint8Array} bytes
     * @returns {API.Multibase<Prefix>}
     */
    encode (bytes) {
      if (bytes instanceof Uint8Array) {
        return `${this.prefix}${this.baseEncode(bytes)}`
      } else {
        throw Error('Unknown type, must be binary type')
      }
    }
  }

  /**
   * @template {string} Prefix
   */
  /**
   * Class represents both BaseDecoder and MultibaseDecoder so it could be used
   * to decode multibases (with matching prefix) or just base decode strings
   * with corresponding base encoding.
   *
   * @class
   * @template {string} Base
   * @template {string} Prefix
   * @implements {API.MultibaseDecoder<Prefix>}
   * @implements {API.UnibaseDecoder<Prefix>}
   * @implements {API.BaseDecoder}
   */
  class Decoder {
    /**
     * @param {Base} name
     * @param {Prefix} prefix
     * @param {(text:string) => Uint8Array} baseDecode
     */
    constructor (name, prefix, baseDecode) {
      this.name = name;
      this.prefix = prefix;
      /* c8 ignore next 3 */
      if (prefix.codePointAt(0) === undefined) {
        throw new Error('Invalid prefix character')
      }
      /** @private */
      this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0));
      this.baseDecode = baseDecode;
    }

    /**
     * @param {string} text
     */
    decode (text) {
      if (typeof text === 'string') {
        if (text.codePointAt(0) !== this.prefixCodePoint) {
          throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)
        }
        return this.baseDecode(text.slice(this.prefix.length))
      } else {
        throw Error('Can only multibase decode strings')
      }
    }

    /**
     * @template {string} OtherPrefix
     * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder
     * @returns {ComposedDecoder<Prefix|OtherPrefix>}
     */
    or (decoder) {
      return or(this, decoder)
    }
  }

  /**
   * @template {string} Prefix
   * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders
   */

  /**
   * @template {string} Prefix
   * @implements {API.MultibaseDecoder<Prefix>}
   * @implements {API.CombobaseDecoder<Prefix>}
   */
  class ComposedDecoder {
    /**
     * @param {Decoders<Prefix>} decoders
     */
    constructor (decoders) {
      this.decoders = decoders;
    }

    /**
     * @template {string} OtherPrefix
     * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder
     * @returns {ComposedDecoder<Prefix|OtherPrefix>}
     */
    or (decoder) {
      return or(this, decoder)
    }

    /**
     * @param {string} input
     * @returns {Uint8Array}
     */
    decode (input) {
      const prefix = /** @type {Prefix} */ (input[0]);
      const decoder = this.decoders[prefix];
      if (decoder) {
        return decoder.decode(input)
      } else {
        throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)
      }
    }
  }

  /**
   * @template {string} L
   * @template {string} R
   * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left
   * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right
   * @returns {ComposedDecoder<L|R>}
   */
  const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({
    ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),
    ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })
  }));

  /**
   * @class
   * @template {string} Base
   * @template {string} Prefix
   * @implements {API.MultibaseCodec<Prefix>}
   * @implements {API.MultibaseEncoder<Prefix>}
   * @implements {API.MultibaseDecoder<Prefix>}
   * @implements {API.BaseCodec}
   * @implements {API.BaseEncoder}
   * @implements {API.BaseDecoder}
   */
  class Codec {
    /**
     * @param {Base} name
     * @param {Prefix} prefix
     * @param {(bytes:Uint8Array) => string} baseEncode
     * @param {(text:string) => Uint8Array} baseDecode
     */
    constructor (name, prefix, baseEncode, baseDecode) {
      this.name = name;
      this.prefix = prefix;
      this.baseEncode = baseEncode;
      this.baseDecode = baseDecode;
      this.encoder = new Encoder(name, prefix, baseEncode);
      this.decoder = new Decoder(name, prefix, baseDecode);
    }

    /**
     * @param {Uint8Array} input
     */
    encode (input) {
      return this.encoder.encode(input)
    }

    /**
     * @param {string} input
     */
    decode (input) {
      return this.decoder.decode(input)
    }
  }

  /**
   * @template {string} Base
   * @template {string} Prefix
   * @param {object} options
   * @param {Base} options.name
   * @param {Prefix} options.prefix
   * @param {(bytes:Uint8Array) => string} options.encode
   * @param {(input:string) => Uint8Array} options.decode
   * @returns {Codec<Base, Prefix>}
   */
  const from$1 = ({ name, prefix, encode, decode }) =>
    new Codec(name, prefix, encode, decode);

  /**
   * @template {string} Base
   * @template {string} Prefix
   * @param {object} options
   * @param {Base} options.name
   * @param {Prefix} options.prefix
   * @param {string} options.alphabet
   * @returns {Codec<Base, Prefix>}
   */
  const baseX = ({ prefix, name, alphabet }) => {
    const { encode, decode } = _brrp__multiformats_scope_baseX(alphabet, name);
    return from$1({
      prefix,
      name,
      encode,
      /**
       * @param {string} text
       */
      decode: text => coerce(decode(text))
    })
  };

  /**
   * @param {string} string
   * @param {string} alphabet
   * @param {number} bitsPerChar
   * @param {string} name
   * @returns {Uint8Array}
   */
  const decode$6 = (string, alphabet, bitsPerChar, name) => {
    // Build the character lookup table:
    /** @type {Record<string, number>} */
    const codes = {};
    for (let i = 0; i < alphabet.length; ++i) {
      codes[alphabet[i]] = i;
    }

    // Count the padding bytes:
    let end = string.length;
    while (string[end - 1] === '=') {
      --end;
    }

    // Allocate the output:
    const out = new Uint8Array((end * bitsPerChar / 8) | 0);

    // Parse the data:
    let bits = 0; // Number of bits currently in the buffer
    let buffer = 0; // Bits waiting to be written out, MSB first
    let written = 0; // Next byte to write
    for (let i = 0; i < end; ++i) {
      // Read one character from the string:
      const value = codes[string[i]];
      if (value === undefined) {
        throw new SyntaxError(`Non-${name} character`)
      }

      // Append the bits to the buffer:
      buffer = (buffer << bitsPerChar) | value;
      bits += bitsPerChar;

      // Write out some bits if the buffer has a byte's worth:
      if (bits >= 8) {
        bits -= 8;
        out[written++] = 0xff & (buffer >> bits);
      }
    }

    // Verify that we have received just enough bits:
    if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {
      throw new SyntaxError('Unexpected end of data')
    }

    return out
  };

  /**
   * @param {Uint8Array} data
   * @param {string} alphabet
   * @param {number} bitsPerChar
   * @returns {string}
   */
  const encode$6 = (data, alphabet, bitsPerChar) => {
    const pad = alphabet[alphabet.length - 1] === '=';
    const mask = (1 << bitsPerChar) - 1;
    let out = '';

    let bits = 0; // Number of bits currently in the buffer
    let buffer = 0; // Bits waiting to be written out, MSB first
    for (let i = 0; i < data.length; ++i) {
      // Slurp data into the buffer:
      buffer = (buffer << 8) | data[i];
      bits += 8;

      // Write out as much as we can:
      while (bits > bitsPerChar) {
        bits -= bitsPerChar;
        out += alphabet[mask & (buffer >> bits)];
      }
    }

    // Partial character:
    if (bits) {
      out += alphabet[mask & (buffer << (bitsPerChar - bits))];
    }

    // Add padding characters until we hit a byte boundary:
    if (pad) {
      while ((out.length * bitsPerChar) & 7) {
        out += '=';
      }
    }

    return out
  };

  /**
   * RFC4648 Factory
   *
   * @template {string} Base
   * @template {string} Prefix
   * @param {object} options
   * @param {Base} options.name
   * @param {Prefix} options.prefix
   * @param {string} options.alphabet
   * @param {number} options.bitsPerChar
   */
  const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {
    return from$1({
      prefix,
      name,
      encode (input) {
        return encode$6(input, alphabet, bitsPerChar)
      },
      decode (input) {
        return decode$6(input, alphabet, bitsPerChar, name)
      }
    })
  };

  // @ts-check


  const identity$1 = from$1({
    prefix: '\x00',
    name: 'identity',
    encode: (buf) => toString$2(buf),
    decode: (str) => fromString$2(str)
  });

  var identityBase = /*#__PURE__*/Object.freeze({
    __proto__: null,
    identity: identity$1
  });

  // @ts-check


  const base2 = rfc4648({
    prefix: '0',
    name: 'base2',
    alphabet: '01',
    bitsPerChar: 1
  });

  var base2$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    base2: base2
  });

  // @ts-check


  const base8 = rfc4648({
    prefix: '7',
    name: 'base8',
    alphabet: '01234567',
    bitsPerChar: 3
  });

  var base8$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    base8: base8
  });

  const base10 = baseX({
    prefix: '9',
    name: 'base10',
    alphabet: '0123456789'
  });

  var base10$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    base10: base10
  });

  // @ts-check


  const base16 = rfc4648({
    prefix: 'f',
    name: 'base16',
    alphabet: '0123456789abcdef',
    bitsPerChar: 4
  });

  const base16upper = rfc4648({
    prefix: 'F',
    name: 'base16upper',
    alphabet: '0123456789ABCDEF',
    bitsPerChar: 4
  });

  var base16$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    base16: base16,
    base16upper: base16upper
  });

  const base32 = rfc4648({
    prefix: 'b',
    name: 'base32',
    alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
    bitsPerChar: 5
  });

  const base32upper = rfc4648({
    prefix: 'B',
    name: 'base32upper',
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
    bitsPerChar: 5
  });

  const base32pad = rfc4648({
    prefix: 'c',
    name: 'base32pad',
    alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
    bitsPerChar: 5
  });

  const base32padupper = rfc4648({
    prefix: 'C',
    name: 'base32padupper',
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
    bitsPerChar: 5
  });

  const base32hex = rfc4648({
    prefix: 'v',
    name: 'base32hex',
    alphabet: '0123456789abcdefghijklmnopqrstuv',
    bitsPerChar: 5
  });

  const base32hexupper = rfc4648({
    prefix: 'V',
    name: 'base32hexupper',
    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
    bitsPerChar: 5
  });

  const base32hexpad = rfc4648({
    prefix: 't',
    name: 'base32hexpad',
    alphabet: '0123456789abcdefghijklmnopqrstuv=',
    bitsPerChar: 5
  });

  const base32hexpadupper = rfc4648({
    prefix: 'T',
    name: 'base32hexpadupper',
    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
    bitsPerChar: 5
  });

  const base32z = rfc4648({
    prefix: 'h',
    name: 'base32z',
    alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
    bitsPerChar: 5
  });

  var base32$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    base32: base32,
    base32hex: base32hex,
    base32hexpad: base32hexpad,
    base32hexpadupper: base32hexpadupper,
    base32hexupper: base32hexupper,
    base32pad: base32pad,
    base32padupper: base32padupper,
    base32upper: base32upper,
    base32z: base32z
  });

  const base36 = baseX({
    prefix: 'k',
    name: 'base36',
    alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
  });

  const base36upper = baseX({
    prefix: 'K',
    name: 'base36upper',
    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  });

  var base36$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    base36: base36,
    base36upper: base36upper
  });

  const base58btc = baseX({
    name: 'base58btc',
    prefix: 'z',
    alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
  });

  const base58flickr = baseX({
    name: 'base58flickr',
    prefix: 'Z',
    alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
  });

  var base58 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    base58btc: base58btc,
    base58flickr: base58flickr
  });

  // @ts-check


  const base64$3 = rfc4648({
    prefix: 'm',
    name: 'base64',
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
    bitsPerChar: 6
  });

  const base64pad = rfc4648({
    prefix: 'M',
    name: 'base64pad',
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
    bitsPerChar: 6
  });

  const base64url = rfc4648({
    prefix: 'u',
    name: 'base64url',
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
    bitsPerChar: 6
  });

  const base64urlpad = rfc4648({
    prefix: 'U',
    name: 'base64urlpad',
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',
    bitsPerChar: 6
  });

  var base64$4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    base64: base64$3,
    base64pad: base64pad,
    base64url: base64url,
    base64urlpad: base64urlpad
  });

  const alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂');
  const alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])));
  const alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])));

  /**
   * @param {Uint8Array} data
   * @returns {string}
   */
  function encode$5 (data) {
    return data.reduce((p, c) => {
      p += alphabetBytesToChars[c];
      return p
    }, '')
  }

  /**
   * @param {string} str
   * @returns {Uint8Array}
   */
  function decode$5 (str) {
    const byts = [];
    for (const char of str) {
      const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))];
      if (byt === undefined) {
        throw new Error(`Non-base256emoji character: ${char}`)
      }
      byts.push(byt);
    }
    return new Uint8Array(byts)
  }

  const base256emoji = from$1({
    prefix: '🚀',
    name: 'base256emoji',
    encode: encode$5,
    decode: decode$5
  });

  var base256emoji$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    base256emoji: base256emoji
  });

  var encode_1$1 = encode$4;

  var MSB$2 = 0x80
    , REST$2 = 0x7F
    , MSBALL$1 = ~REST$2
    , INT$1 = Math.pow(2, 31);

  function encode$4(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;

    while(num >= INT$1) {
      out[offset++] = (num & 0xFF) | MSB$2;
      num /= 128;
    }
    while(num & MSBALL$1) {
      out[offset++] = (num & 0xFF) | MSB$2;
      num >>>= 7;
    }
    out[offset] = num | 0;
    
    encode$4.bytes = offset - oldOffset + 1;
    
    return out
  }

  var decode$4 = read$2;

  var MSB$1$1 = 0x80
    , REST$1$1 = 0x7F;

  function read$2(buf, offset) {
    var res    = 0
      , offset = offset || 0
      , shift  = 0
      , counter = offset
      , b
      , l = buf.length;

    do {
      if (counter >= l) {
        read$2.bytes = 0;
        throw new RangeError('Could not decode varint')
      }
      b = buf[counter++];
      res += shift < 28
        ? (b & REST$1$1) << shift
        : (b & REST$1$1) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB$1$1)

    read$2.bytes = counter - offset;

    return res
  }

  var N1$2 = Math.pow(2,  7);
  var N2$2 = Math.pow(2, 14);
  var N3$2 = Math.pow(2, 21);
  var N4$2 = Math.pow(2, 28);
  var N5$2 = Math.pow(2, 35);
  var N6$2 = Math.pow(2, 42);
  var N7$2 = Math.pow(2, 49);
  var N8$2 = Math.pow(2, 56);
  var N9$2 = Math.pow(2, 63);

  var length$1 = function (value) {
    return (
      value < N1$2 ? 1
    : value < N2$2 ? 2
    : value < N3$2 ? 3
    : value < N4$2 ? 4
    : value < N5$2 ? 5
    : value < N6$2 ? 6
    : value < N7$2 ? 7
    : value < N8$2 ? 8
    : value < N9$2 ? 9
    :              10
    )
  };

  var varint$2 = {
      encode: encode_1$1
    , decode: decode$4
    , encodingLength: length$1
  };

  var _brrp_varint = varint$2;

  /**
   * @param {Uint8Array} data
   * @param {number} [offset=0]
   * @returns {[number, number]}
   */
  const decode$3 = (data, offset = 0) => {
    const code = _brrp_varint.decode(data, offset);
    return [code, _brrp_varint.decode.bytes]
  };

  /**
   * @param {number} int
   * @param {Uint8Array} target
   * @param {number} [offset=0]
   */
  const encodeTo = (int, target, offset = 0) => {
    _brrp_varint.encode(int, target, offset);
    return target
  };

  /**
   * @param {number} int
   * @returns {number}
   */
  const encodingLength = (int) => {
    return _brrp_varint.encodingLength(int)
  };

  /**
   * Creates a multihash digest.
   *
   * @template {number} Code
   * @param {Code} code
   * @param {Uint8Array} digest
   */
  const create$5 = (code, digest) => {
    const size = digest.byteLength;
    const sizeOffset = encodingLength(code);
    const digestOffset = sizeOffset + encodingLength(size);

    const bytes = new Uint8Array(digestOffset + size);
    encodeTo(code, bytes, 0);
    encodeTo(size, bytes, sizeOffset);
    bytes.set(digest, digestOffset);

    return new Digest(code, size, digest, bytes)
  };

  /**
   * Turns bytes representation of multihash digest into an instance.
   *
   * @param {Uint8Array} multihash
   * @returns {MultihashDigest}
   */
  const decode$2 = (multihash) => {
    const bytes = coerce(multihash);
    const [code, sizeOffset] = decode$3(bytes);
    const [size, digestOffset] = decode$3(bytes.subarray(sizeOffset));
    const digest = bytes.subarray(sizeOffset + digestOffset);

    if (digest.byteLength !== size) {
      throw new Error('Incorrect length')
    }

    return new Digest(code, size, digest, bytes)
  };

  /**
   * @param {MultihashDigest} a
   * @param {unknown} b
   * @returns {b is MultihashDigest}
   */
  const equals$1 = (a, b) => {
    if (a === b) {
      return true
    } else {
      const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b);

      return (
        a.code === data.code &&
        a.size === data.size &&
        data.bytes instanceof Uint8Array &&
        equals$2(a.bytes, data.bytes)
      )
    }
  };

  /**
   * @typedef {import('./interface.js').MultihashDigest} MultihashDigest
   */

  /**
   * Represents a multihash digest which carries information about the
   * hashing algorithm and an actual hash digest.
   *
   * @template {number} Code
   * @template {number} Size
   * @class
   * @implements {MultihashDigest}
   */
  class Digest {
    /**
     * Creates a multihash digest.
     *
     * @param {Code} code
     * @param {Size} size
     * @param {Uint8Array} digest
     * @param {Uint8Array} bytes
     */
    constructor (code, size, digest, bytes) {
      this.code = code;
      this.size = size;
      this.digest = digest;
      this.bytes = bytes;
    }
  }

  /**
   * @template {string} Name
   * @template {number} Code
   * @param {object} options
   * @param {Name} options.name
   * @param {Code} options.code
   * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode
   */
  const from = ({ name, code, encode }) => new Hasher(name, code, encode);

  /**
   * Hasher represents a hashing algorithm implementation that produces as
   * `MultihashDigest`.
   *
   * @template {string} Name
   * @template {number} Code
   * @class
   * @implements {MultihashHasher<Code>}
   */
  class Hasher {
    /**
     *
     * @param {Name} name
     * @param {Code} code
     * @param {(input: Uint8Array) => Await<Uint8Array>} encode
     */
    constructor (name, code, encode) {
      this.name = name;
      this.code = code;
      this.encode = encode;
    }

    /**
     * @param {Uint8Array} input
     * @returns {Await<Digest.Digest<Code, number>>}
     */
    digest (input) {
      if (input instanceof Uint8Array) {
        const result = this.encode(input);
        return result instanceof Uint8Array
          ? create$5(this.code, result)
          /* c8 ignore next 1 */
          : result.then(digest => create$5(this.code, digest))
      } else {
        throw Error('Unknown type, must be binary type')
        /* c8 ignore next 1 */
      }
    }
  }

  /**
   * @template {number} Alg
   * @typedef {import('./interface.js').MultihashHasher} MultihashHasher
   */

  /**
   * @template T
   * @typedef {Promise<T>|T} Await
   */

  /* global crypto */


  /**
   * @param {AlgorithmIdentifier} name
   */
  const sha = name =>
    /**
     * @param {Uint8Array} data
     */
    async data => new Uint8Array(await crypto.subtle.digest(name, data));

  const sha256 = from({
    name: 'sha2-256',
    code: 0x12,
    encode: sha('SHA-256')
  });

  const code = 0x0;
  const name = 'identity';

  /** @type {(input:Uint8Array) => Uint8Array} */
  const encode$3 = coerce;

  /**
   * @param {Uint8Array} input
   * @returns {Digest.Digest<typeof code, number>}
   */
  const digest = (input) => create$5(code, encode$3(input));

  const identity = { code, name, encode: encode$3, digest };

  // @ts-check

  /**
   * @template T
   * @typedef {import('./interface.js').ByteView<T>} ByteView
   */

  new TextEncoder();
  new TextDecoder();

  /**
   * @template {API.Link<unknown, number, number, API.Version>} T
   * @template {string} Prefix
   * @param {T} link
   * @param {API.MultibaseEncoder<Prefix>} [base]
   * @returns {API.ToString<T, Prefix>}
   */
  const format = (link, base) => {
    const { bytes, version } = link;
    switch (version) {
      case 0:
        return toStringV0(
          bytes,
          baseCache(link),
          /** @type {API.MultibaseEncoder<"z">} */ (base) || base58btc.encoder
        )
      default:
        return toStringV1(
          bytes,
          baseCache(link),
          /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)
        )
    }
  };

  /** @type {WeakMap<API.UnknownLink, Map<string, string>>} */
  const cache$1 = new WeakMap();

  /**
   * @param {API.UnknownLink} cid
   * @returns {Map<string, string>}
   */
  const baseCache = cid => {
    const baseCache = cache$1.get(cid);
    if (baseCache == null) {
      const baseCache = new Map();
      cache$1.set(cid, baseCache);
      return baseCache
    }
    return baseCache
  };

  /**
   * @template {unknown} [Data=unknown]
   * @template {number} [Format=number]
   * @template {number} [Alg=number]
   * @template {API.Version} [Version=API.Version]
   * @implements {API.Link<Data, Format, Alg, Version>}
   */

  class CID {
    /**
     * @param {Version} version - Version of the CID
     * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
     * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.
     * @param {Uint8Array} bytes
     *
     */
    constructor (version, code, multihash, bytes) {
      /** @readonly */
      this.code = code;
      /** @readonly */
      this.version = version;
      /** @readonly */
      this.multihash = multihash;
      /** @readonly */
      this.bytes = bytes;

      // flag to serializers that this is a CID and
      // should be treated specially
      /** @readonly */
      this['/'] = bytes;
    }

    /**
     * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`
     * please either use `CID.asCID(cid)` or switch to new signalling mechanism
     *
     * @deprecated
     */
    get asCID () {
      return this
    }

    // ArrayBufferView
    get byteOffset () {
      return this.bytes.byteOffset
    }

    // ArrayBufferView
    get byteLength () {
      return this.bytes.byteLength
    }

    /**
     * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}
     */
    toV0 () {
      switch (this.version) {
        case 0: {
          return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)
        }
        case 1: {
          const { code, multihash } = this;

          if (code !== DAG_PB_CODE) {
            throw new Error('Cannot convert a non dag-pb CID to CIDv0')
          }

          // sha2-256
          if (multihash.code !== SHA_256_CODE) {
            throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')
          }

          return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (
            CID.createV0(
              /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)
            )
          )
        }
        default: {
          throw Error(
            `Can not convert CID version ${this.version} to version 0. This is a bug please report`
          )
        }
      }
    }

    /**
     * @returns {CID<Data, Format, Alg, 1>}
     */
    toV1 () {
      switch (this.version) {
        case 0: {
          const { code, digest } = this.multihash;
          const multihash = create$5(code, digest);
          return /** @type {CID<Data, Format, Alg, 1>} */ (
            CID.createV1(this.code, multihash)
          )
        }
        case 1: {
          return /** @type {CID<Data, Format, Alg, 1>} */ (this)
        }
        default: {
          throw Error(
            `Can not convert CID version ${this.version} to version 1. This is a bug please report`
          )
        }
      }
    }

    /**
     * @param {unknown} other
     * @returns {other is CID<Data, Format, Alg, Version>}
     */
    equals (other) {
      return CID.equals(this, other)
    }

    /**
     * @template {unknown} Data
     * @template {number} Format
     * @template {number} Alg
     * @template {API.Version} Version
     * @param {API.Link<Data, Format, Alg, Version>} self
     * @param {unknown} other
     * @returns {other is CID}
     */
    static equals (self, other) {
      const unknown =
        /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (
          other
        );
      return (
        unknown &&
        self.code === unknown.code &&
        self.version === unknown.version &&
        equals$1(self.multihash, unknown.multihash)
      )
    }

    /**
     * @param {API.MultibaseEncoder<string>} [base]
     * @returns {string}
     */
    toString (base) {
      return format(this, base)
    }

    toJSON () {
      return { '/': format(this) }
    }

    link () {
      return this
    }

    get [Symbol.toStringTag] () {
      return 'CID'
    }

    // Legacy

    [Symbol.for('nodejs.util.inspect.custom')] () {
      return `CID(${this.toString()})`
    }

    /**
     * Takes any input `value` and returns a `CID` instance if it was
     * a `CID` otherwise returns `null`. If `value` is instanceof `CID`
     * it will return value back. If `value` is not instance of this CID
     * class, but is compatible CID it will return new instance of this
     * `CID` class. Otherwise returns null.
     *
     * This allows two different incompatible versions of CID library to
     * co-exist and interop as long as binary interface is compatible.
     *
     * @template {unknown} Data
     * @template {number} Format
     * @template {number} Alg
     * @template {API.Version} Version
     * @template {unknown} U
     * @param {API.Link<Data, Format, Alg, Version>|U} input
     * @returns {CID<Data, Format, Alg, Version>|null}
     */
    static asCID (input) {
      if (input == null) {
        return null
      }

      const value = /** @type {any} */ (input);
      if (value instanceof CID) {
        // If value is instance of CID then we're all set.
        return value
      } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {
        // If value isn't instance of this CID class but `this.asCID === this` or
        // `value['/'] === value.bytes` is true it is CID instance coming from a
        // different implementation (diff version or duplicate). In that case we
        // rebase it to this `CID` implementation so caller is guaranteed to get
        // instance with expected API.
        const { version, code, multihash, bytes } = value;
        return new CID(
          version,
          code,
          /** @type {API.MultihashDigest<Alg>} */ (multihash),
          bytes || encodeCID(version, code, multihash.bytes)
        )
      } else if (value[cidSymbol] === true) {
        // If value is a CID from older implementation that used to be tagged via
        // symbol we still rebase it to the this `CID` implementation by
        // delegating that to a constructor.
        const { version, multihash, code } = value;
        const digest =
          /** @type {API.MultihashDigest<Alg>} */
          (decode$2(multihash));
        return CID.create(version, code, digest)
      } else {
        // Otherwise value is not a CID (or an incompatible version of it) in
        // which case we return `null`.
        return null
      }
    }

    /**
     *
     * @template {unknown} Data
     * @template {number} Format
     * @template {number} Alg
     * @template {API.Version} Version
     * @param {Version} version - Version of the CID
     * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
     * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.
     * @returns {CID<Data, Format, Alg, Version>}
     */
    static create (version, code, digest) {
      if (typeof code !== 'number') {
        throw new Error('String codecs are no longer supported')
      }

      if (!(digest.bytes instanceof Uint8Array)) {
        throw new Error('Invalid digest')
      }

      switch (version) {
        case 0: {
          if (code !== DAG_PB_CODE) {
            throw new Error(
              `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`
            )
          } else {
            return new CID(version, code, digest, digest.bytes)
          }
        }
        case 1: {
          const bytes = encodeCID(version, code, digest.bytes);
          return new CID(version, code, digest, bytes)
        }
        default: {
          throw new Error('Invalid version')
        }
      }
    }

    /**
     * Simplified version of `create` for CIDv0.
     *
     * @template {unknown} [T=unknown]
     * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.
     * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}
     */
    static createV0 (digest) {
      return CID.create(0, DAG_PB_CODE, digest)
    }

    /**
     * Simplified version of `create` for CIDv1.
     *
     * @template {unknown} Data
     * @template {number} Code
     * @template {number} Alg
     * @param {Code} code - Content encoding format code.
     * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.
     * @returns {CID<Data, Code, Alg, 1>}
     */
    static createV1 (code, digest) {
      return CID.create(1, code, digest)
    }

    /**
     * Decoded a CID from its binary representation. The byte array must contain
     * only the CID with no additional bytes.
     *
     * An error will be thrown if the bytes provided do not contain a valid
     * binary representation of a CID.
     *
     * @template {unknown} Data
     * @template {number} Code
     * @template {number} Alg
     * @template {API.Version} Ver
     * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes
     * @returns {CID<Data, Code, Alg, Ver>}
     */
    static decode (bytes) {
      const [cid, remainder] = CID.decodeFirst(bytes);
      if (remainder.length) {
        throw new Error('Incorrect length')
      }
      return cid
    }

    /**
     * Decoded a CID from its binary representation at the beginning of a byte
     * array.
     *
     * Returns an array with the first element containing the CID and the second
     * element containing the remainder of the original byte array. The remainder
     * will be a zero-length byte array if the provided bytes only contained a
     * binary CID representation.
     *
     * @template {unknown} T
     * @template {number} C
     * @template {number} A
     * @template {API.Version} V
     * @param {API.ByteView<API.Link<T, C, A, V>>} bytes
     * @returns {[CID<T, C, A, V>, Uint8Array]}
     */
    static decodeFirst (bytes) {
      const specs = CID.inspectBytes(bytes);
      const prefixSize = specs.size - specs.multihashSize;
      const multihashBytes = coerce(
        bytes.subarray(prefixSize, prefixSize + specs.multihashSize)
      );
      if (multihashBytes.byteLength !== specs.multihashSize) {
        throw new Error('Incorrect length')
      }
      const digestBytes = multihashBytes.subarray(
        specs.multihashSize - specs.digestSize
      );
      const digest = new Digest(
        specs.multihashCode,
        specs.digestSize,
        digestBytes,
        multihashBytes
      );
      const cid =
        specs.version === 0
          ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))
          : CID.createV1(specs.codec, digest);
      return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]
    }

    /**
     * Inspect the initial bytes of a CID to determine its properties.
     *
     * Involves decoding up to 4 varints. Typically this will require only 4 to 6
     * bytes but for larger multicodec code values and larger multihash digest
     * lengths these varints can be quite large. It is recommended that at least
     * 10 bytes be made available in the `initialBytes` argument for a complete
     * inspection.
     *
     * @template {unknown} T
     * @template {number} C
     * @template {number} A
     * @template {API.Version} V
     * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes
     * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}
     */
    static inspectBytes (initialBytes) {
      let offset = 0;
      const next = () => {
        const [i, length] = decode$3(initialBytes.subarray(offset));
        offset += length;
        return i
      };

      let version = /** @type {V} */ (next());
      let codec = /** @type {C} */ (DAG_PB_CODE);
      if (/** @type {number} */(version) === 18) {
        // CIDv0
        version = /** @type {V} */ (0);
        offset = 0;
      } else {
        codec = /** @type {C} */ (next());
      }

      if (version !== 0 && version !== 1) {
        throw new RangeError(`Invalid CID version ${version}`)
      }

      const prefixSize = offset;
      const multihashCode = /** @type {A} */ (next()); // multihash code
      const digestSize = next(); // multihash length
      const size = offset + digestSize;
      const multihashSize = size - prefixSize;

      return { version, codec, multihashCode, digestSize, multihashSize, size }
    }

    /**
     * Takes cid in a string representation and creates an instance. If `base`
     * decoder is not provided will use a default from the configuration. It will
     * throw an error if encoding of the CID is not compatible with supplied (or
     * a default decoder).
     *
     * @template {string} Prefix
     * @template {unknown} Data
     * @template {number} Code
     * @template {number} Alg
     * @template {API.Version} Ver
     * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source
     * @param {API.MultibaseDecoder<Prefix>} [base]
     * @returns {CID<Data, Code, Alg, Ver>}
     */
    static parse (source, base) {
      const [prefix, bytes] = parseCIDtoBytes(source, base);

      const cid = CID.decode(bytes);

      if (cid.version === 0 && source[0] !== 'Q') {
        throw Error('Version 0 CID string must not include multibase prefix')
      }

      // Cache string representation to avoid computing it on `this.toString()`
      baseCache(cid).set(prefix, source);

      return cid
    }
  }

  /**
   * @template {string} Prefix
   * @template {unknown} Data
   * @template {number} Code
   * @template {number} Alg
   * @template {API.Version} Ver
   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source
   * @param {API.MultibaseDecoder<Prefix>} [base]
   * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}
   */
  const parseCIDtoBytes = (source, base) => {
    switch (source[0]) {
      // CIDv0 is parsed differently
      case 'Q': {
        const decoder = base || base58btc;
        return [
          /** @type {Prefix} */ (base58btc.prefix),
          decoder.decode(`${base58btc.prefix}${source}`)
        ]
      }
      case base58btc.prefix: {
        const decoder = base || base58btc;
        return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]
      }
      case base32.prefix: {
        const decoder = base || base32;
        return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]
      }
      default: {
        if (base == null) {
          throw Error(
            'To parse non base32 or base58btc encoded CID multibase decoder must be provided'
          )
        }
        return [/** @type {Prefix} */(source[0]), base.decode(source)]
      }
    }
  };

  /**
   *
   * @param {Uint8Array} bytes
   * @param {Map<string, string>} cache
   * @param {API.MultibaseEncoder<'z'>} base
   */
  const toStringV0 = (bytes, cache, base) => {
    const { prefix } = base;
    if (prefix !== base58btc.prefix) {
      throw Error(`Cannot string encode V0 in ${base.name} encoding`)
    }

    const cid = cache.get(prefix);
    if (cid == null) {
      const cid = base.encode(bytes).slice(1);
      cache.set(prefix, cid);
      return cid
    } else {
      return cid
    }
  };

  /**
   * @template {string} Prefix
   * @param {Uint8Array} bytes
   * @param {Map<string, string>} cache
   * @param {API.MultibaseEncoder<Prefix>} base
   */
  const toStringV1 = (bytes, cache, base) => {
    const { prefix } = base;
    const cid = cache.get(prefix);
    if (cid == null) {
      const cid = base.encode(bytes);
      cache.set(prefix, cid);
      return cid
    } else {
      return cid
    }
  };

  const DAG_PB_CODE = 0x70;
  const SHA_256_CODE = 0x12;

  /**
   * @param {API.Version} version
   * @param {number} code
   * @param {Uint8Array} multihash
   * @returns {Uint8Array}
   */
  const encodeCID = (version, code, multihash) => {
    const codeOffset = encodingLength(version);
    const hashOffset = codeOffset + encodingLength(code);
    const bytes = new Uint8Array(hashOffset + multihash.byteLength);
    encodeTo(version, bytes, 0);
    encodeTo(code, bytes, codeOffset);
    bytes.set(multihash, hashOffset);
    return bytes
  };

  const cidSymbol = Symbol.for('@ipld/js-cid/CID');

  // @ts-check


  const bases = { ...identityBase, ...base2$1, ...base8$1, ...base10$1, ...base16$1, ...base32$1, ...base36$1, ...base58, ...base64$4, ...base256emoji$1 };

  /**
   * Returns a `Uint8Array` of the requested size. Referenced memory will
   * be initialized to 0.
   */
  function alloc(size = 0) {
      if (globalThis.Buffer?.alloc != null) {
          return asUint8Array(globalThis.Buffer.alloc(size));
      }
      return new Uint8Array(size);
  }
  /**
   * Where possible returns a Uint8Array of the requested size that references
   * uninitialized memory. Only use if you are certain you will immediately
   * overwrite every value in the returned `Uint8Array`.
   */
  function allocUnsafe(size = 0) {
      if (globalThis.Buffer?.allocUnsafe != null) {
          return asUint8Array(globalThis.Buffer.allocUnsafe(size));
      }
      return new Uint8Array(size);
  }

  function createCodec$1(name, prefix, encode, decode) {
      return {
          name,
          prefix,
          encoder: {
              name,
              prefix,
              encode
          },
          decoder: {
              decode
          }
      };
  }
  const string = createCodec$1('utf8', 'u', (buf) => {
      const decoder = new TextDecoder('utf8');
      return 'u' + decoder.decode(buf);
  }, (str) => {
      const encoder = new TextEncoder();
      return encoder.encode(str.substring(1));
  });
  const ascii = createCodec$1('ascii', 'a', (buf) => {
      let string = 'a';
      for (let i = 0; i < buf.length; i++) {
          string += String.fromCharCode(buf[i]);
      }
      return string;
  }, (str) => {
      str = str.substring(1);
      const buf = allocUnsafe(str.length);
      for (let i = 0; i < str.length; i++) {
          buf[i] = str.charCodeAt(i);
      }
      return buf;
  });
  const BASES = {
      utf8: string,
      'utf-8': string,
      hex: bases.base16,
      latin1: ascii,
      ascii,
      binary: ascii,
      ...bases
  };

  /**
   * Create a `Uint8Array` from the passed string
   *
   * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.
   *
   * Also `ascii` which is similar to node's 'binary' encoding.
   */
  function fromString$1(string, encoding = 'utf8') {
      const base = BASES[encoding];
      if (base == null) {
          throw new Error(`Unsupported encoding "${encoding}"`);
      }
      if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {
          return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));
      }
      // add multibase prefix
      return base.decoder.decode(`${base.prefix}${string}`); // eslint-disable-line @typescript-eslint/restrict-template-expressions
  }

  /**
   * Returns true if the two passed Uint8Arrays have the same content
   */
  function equals(a, b) {
      if (a === b) {
          return true;
      }
      if (a.byteLength !== b.byteLength) {
          return false;
      }
      for (let i = 0; i < a.byteLength; i++) {
          if (a[i] !== b[i]) {
              return false;
          }
      }
      return true;
  }

  /*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */
  const _0n$1 = BigInt(0);
  const _1n$1 = BigInt(1);
  const _2n$1 = BigInt(2);
  const _8n$1 = BigInt(8);
  const CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');
  const CURVE$1 = Object.freeze({
      a: BigInt(-1),
      d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),
      P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),
      l: CU_O,
      n: CU_O,
      h: BigInt(8),
      Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),
      Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),
  });
  const POW_2_256$1 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');
  const SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');
  BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');
  const SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');
  const INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');
  const ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');
  const D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');
  class ExtendedPoint {
      constructor(x, y, z, t) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.t = t;
      }
      static fromAffine(p) {
          if (!(p instanceof Point$1)) {
              throw new TypeError('ExtendedPoint#fromAffine: expected Point');
          }
          if (p.equals(Point$1.ZERO))
              return ExtendedPoint.ZERO;
          return new ExtendedPoint(p.x, p.y, _1n$1, mod$1(p.x * p.y));
      }
      static toAffineBatch(points) {
          const toInv = invertBatch$1(points.map((p) => p.z));
          return points.map((p, i) => p.toAffine(toInv[i]));
      }
      static normalizeZ(points) {
          return this.toAffineBatch(points).map(this.fromAffine);
      }
      equals(other) {
          assertExtPoint(other);
          const { x: X1, y: Y1, z: Z1 } = this;
          const { x: X2, y: Y2, z: Z2 } = other;
          const X1Z2 = mod$1(X1 * Z2);
          const X2Z1 = mod$1(X2 * Z1);
          const Y1Z2 = mod$1(Y1 * Z2);
          const Y2Z1 = mod$1(Y2 * Z1);
          return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
      }
      negate() {
          return new ExtendedPoint(mod$1(-this.x), this.y, this.z, mod$1(-this.t));
      }
      double() {
          const { x: X1, y: Y1, z: Z1 } = this;
          const { a } = CURVE$1;
          const A = mod$1(X1 * X1);
          const B = mod$1(Y1 * Y1);
          const C = mod$1(_2n$1 * mod$1(Z1 * Z1));
          const D = mod$1(a * A);
          const x1y1 = X1 + Y1;
          const E = mod$1(mod$1(x1y1 * x1y1) - A - B);
          const G = D + B;
          const F = G - C;
          const H = D - B;
          const X3 = mod$1(E * F);
          const Y3 = mod$1(G * H);
          const T3 = mod$1(E * H);
          const Z3 = mod$1(F * G);
          return new ExtendedPoint(X3, Y3, Z3, T3);
      }
      add(other) {
          assertExtPoint(other);
          const { x: X1, y: Y1, z: Z1, t: T1 } = this;
          const { x: X2, y: Y2, z: Z2, t: T2 } = other;
          const A = mod$1((Y1 - X1) * (Y2 + X2));
          const B = mod$1((Y1 + X1) * (Y2 - X2));
          const F = mod$1(B - A);
          if (F === _0n$1)
              return this.double();
          const C = mod$1(Z1 * _2n$1 * T2);
          const D = mod$1(T1 * _2n$1 * Z2);
          const E = D + C;
          const G = B + A;
          const H = D - C;
          const X3 = mod$1(E * F);
          const Y3 = mod$1(G * H);
          const T3 = mod$1(E * H);
          const Z3 = mod$1(F * G);
          return new ExtendedPoint(X3, Y3, Z3, T3);
      }
      subtract(other) {
          return this.add(other.negate());
      }
      precomputeWindow(W) {
          const windows = 1 + 256 / W;
          const points = [];
          let p = this;
          let base = p;
          for (let window = 0; window < windows; window++) {
              base = p;
              points.push(base);
              for (let i = 1; i < 2 ** (W - 1); i++) {
                  base = base.add(p);
                  points.push(base);
              }
              p = base.double();
          }
          return points;
      }
      wNAF(n, affinePoint) {
          if (!affinePoint && this.equals(ExtendedPoint.BASE))
              affinePoint = Point$1.BASE;
          const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;
          if (256 % W) {
              throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');
          }
          let precomputes = affinePoint && pointPrecomputes$1.get(affinePoint);
          if (!precomputes) {
              precomputes = this.precomputeWindow(W);
              if (affinePoint && W !== 1) {
                  precomputes = ExtendedPoint.normalizeZ(precomputes);
                  pointPrecomputes$1.set(affinePoint, precomputes);
              }
          }
          let p = ExtendedPoint.ZERO;
          let f = ExtendedPoint.BASE;
          const windows = 1 + 256 / W;
          const windowSize = 2 ** (W - 1);
          const mask = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window = 0; window < windows; window++) {
              const offset = window * windowSize;
              let wbits = Number(n & mask);
              n >>= shiftBy;
              if (wbits > windowSize) {
                  wbits -= maxNumber;
                  n += _1n$1;
              }
              const offset1 = offset;
              const offset2 = offset + Math.abs(wbits) - 1;
              const cond1 = window % 2 !== 0;
              const cond2 = wbits < 0;
              if (wbits === 0) {
                  f = f.add(constTimeNegate$1(cond1, precomputes[offset1]));
              }
              else {
                  p = p.add(constTimeNegate$1(cond2, precomputes[offset2]));
              }
          }
          return ExtendedPoint.normalizeZ([p, f])[0];
      }
      multiply(scalar, affinePoint) {
          return this.wNAF(normalizeScalar$1(scalar, CURVE$1.l), affinePoint);
      }
      multiplyUnsafe(scalar) {
          let n = normalizeScalar$1(scalar, CURVE$1.l, false);
          const G = ExtendedPoint.BASE;
          const P0 = ExtendedPoint.ZERO;
          if (n === _0n$1)
              return P0;
          if (this.equals(P0) || n === _1n$1)
              return this;
          if (this.equals(G))
              return this.wNAF(n);
          let p = P0;
          let d = this;
          while (n > _0n$1) {
              if (n & _1n$1)
                  p = p.add(d);
              d = d.double();
              n >>= _1n$1;
          }
          return p;
      }
      isSmallOrder() {
          return this.multiplyUnsafe(CURVE$1.h).equals(ExtendedPoint.ZERO);
      }
      isTorsionFree() {
          let p = this.multiplyUnsafe(CURVE$1.l / _2n$1).double();
          if (CURVE$1.l % _2n$1)
              p = p.add(this);
          return p.equals(ExtendedPoint.ZERO);
      }
      toAffine(invZ) {
          const { x, y, z } = this;
          const is0 = this.equals(ExtendedPoint.ZERO);
          if (invZ == null)
              invZ = is0 ? _8n$1 : invert$1(z);
          const ax = mod$1(x * invZ);
          const ay = mod$1(y * invZ);
          const zz = mod$1(z * invZ);
          if (is0)
              return Point$1.ZERO;
          if (zz !== _1n$1)
              throw new Error('invZ was invalid');
          return new Point$1(ax, ay);
      }
      fromRistrettoBytes() {
          legacyRist();
      }
      toRistrettoBytes() {
          legacyRist();
      }
      fromRistrettoHash() {
          legacyRist();
      }
  }
  ExtendedPoint.BASE = new ExtendedPoint(CURVE$1.Gx, CURVE$1.Gy, _1n$1, mod$1(CURVE$1.Gx * CURVE$1.Gy));
  ExtendedPoint.ZERO = new ExtendedPoint(_0n$1, _1n$1, _1n$1, _0n$1);
  function constTimeNegate$1(condition, item) {
      const neg = item.negate();
      return condition ? neg : item;
  }
  function assertExtPoint(other) {
      if (!(other instanceof ExtendedPoint))
          throw new TypeError('ExtendedPoint expected');
  }
  function assertRstPoint(other) {
      if (!(other instanceof RistrettoPoint))
          throw new TypeError('RistrettoPoint expected');
  }
  function legacyRist() {
      throw new Error('Legacy method: switch to RistrettoPoint');
  }
  class RistrettoPoint {
      constructor(ep) {
          this.ep = ep;
      }
      static calcElligatorRistrettoMap(r0) {
          const { d } = CURVE$1;
          const r = mod$1(SQRT_M1 * r0 * r0);
          const Ns = mod$1((r + _1n$1) * ONE_MINUS_D_SQ);
          let c = BigInt(-1);
          const D = mod$1((c - d * r) * mod$1(r + d));
          let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);
          let s_ = mod$1(s * r0);
          if (!edIsNegative(s_))
              s_ = mod$1(-s_);
          if (!Ns_D_is_sq)
              s = s_;
          if (!Ns_D_is_sq)
              c = r;
          const Nt = mod$1(c * (r - _1n$1) * D_MINUS_ONE_SQ - D);
          const s2 = s * s;
          const W0 = mod$1((s + s) * D);
          const W1 = mod$1(Nt * SQRT_AD_MINUS_ONE);
          const W2 = mod$1(_1n$1 - s2);
          const W3 = mod$1(_1n$1 + s2);
          return new ExtendedPoint(mod$1(W0 * W3), mod$1(W2 * W1), mod$1(W1 * W3), mod$1(W0 * W2));
      }
      static hashToCurve(hex) {
          hex = ensureBytes$1(hex, 64);
          const r1 = bytes255ToNumberLE(hex.slice(0, 32));
          const R1 = this.calcElligatorRistrettoMap(r1);
          const r2 = bytes255ToNumberLE(hex.slice(32, 64));
          const R2 = this.calcElligatorRistrettoMap(r2);
          return new RistrettoPoint(R1.add(R2));
      }
      static fromHex(hex) {
          hex = ensureBytes$1(hex, 32);
          const { a, d } = CURVE$1;
          const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';
          const s = bytes255ToNumberLE(hex);
          if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))
              throw new Error(emsg);
          const s2 = mod$1(s * s);
          const u1 = mod$1(_1n$1 + a * s2);
          const u2 = mod$1(_1n$1 - a * s2);
          const u1_2 = mod$1(u1 * u1);
          const u2_2 = mod$1(u2 * u2);
          const v = mod$1(a * d * u1_2 - u2_2);
          const { isValid, value: I } = invertSqrt(mod$1(v * u2_2));
          const Dx = mod$1(I * u2);
          const Dy = mod$1(I * Dx * v);
          let x = mod$1((s + s) * Dx);
          if (edIsNegative(x))
              x = mod$1(-x);
          const y = mod$1(u1 * Dy);
          const t = mod$1(x * y);
          if (!isValid || edIsNegative(t) || y === _0n$1)
              throw new Error(emsg);
          return new RistrettoPoint(new ExtendedPoint(x, y, _1n$1, t));
      }
      toRawBytes() {
          let { x, y, z, t } = this.ep;
          const u1 = mod$1(mod$1(z + y) * mod$1(z - y));
          const u2 = mod$1(x * y);
          const u2sq = mod$1(u2 * u2);
          const { value: invsqrt } = invertSqrt(mod$1(u1 * u2sq));
          const D1 = mod$1(invsqrt * u1);
          const D2 = mod$1(invsqrt * u2);
          const zInv = mod$1(D1 * D2 * t);
          let D;
          if (edIsNegative(t * zInv)) {
              let _x = mod$1(y * SQRT_M1);
              let _y = mod$1(x * SQRT_M1);
              x = _x;
              y = _y;
              D = mod$1(D1 * INVSQRT_A_MINUS_D);
          }
          else {
              D = D2;
          }
          if (edIsNegative(x * zInv))
              y = mod$1(-y);
          let s = mod$1((z - y) * D);
          if (edIsNegative(s))
              s = mod$1(-s);
          return numberTo32BytesLE(s);
      }
      toHex() {
          return bytesToHex$1(this.toRawBytes());
      }
      toString() {
          return this.toHex();
      }
      equals(other) {
          assertRstPoint(other);
          const a = this.ep;
          const b = other.ep;
          const one = mod$1(a.x * b.y) === mod$1(a.y * b.x);
          const two = mod$1(a.y * b.y) === mod$1(a.x * b.x);
          return one || two;
      }
      add(other) {
          assertRstPoint(other);
          return new RistrettoPoint(this.ep.add(other.ep));
      }
      subtract(other) {
          assertRstPoint(other);
          return new RistrettoPoint(this.ep.subtract(other.ep));
      }
      multiply(scalar) {
          return new RistrettoPoint(this.ep.multiply(scalar));
      }
      multiplyUnsafe(scalar) {
          return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));
      }
  }
  RistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);
  RistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);
  const pointPrecomputes$1 = new WeakMap();
  let Point$1 = class Point {
      constructor(x, y) {
          this.x = x;
          this.y = y;
      }
      _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes$1.delete(this);
      }
      static fromHex(hex, strict = true) {
          const { d, P } = CURVE$1;
          hex = ensureBytes$1(hex, 32);
          const normed = hex.slice();
          normed[31] = hex[31] & ~0x80;
          const y = bytesToNumberLE(normed);
          if (strict && y >= P)
              throw new Error('Expected 0 < hex < P');
          if (!strict && y >= POW_2_256$1)
              throw new Error('Expected 0 < hex < 2**256');
          const y2 = mod$1(y * y);
          const u = mod$1(y2 - _1n$1);
          const v = mod$1(d * y2 + _1n$1);
          let { isValid, value: x } = uvRatio(u, v);
          if (!isValid)
              throw new Error('Point.fromHex: invalid y coordinate');
          const isXOdd = (x & _1n$1) === _1n$1;
          const isLastByteOdd = (hex[31] & 0x80) !== 0;
          if (isLastByteOdd !== isXOdd) {
              x = mod$1(-x);
          }
          return new Point(x, y);
      }
      static async fromPrivateKey(privateKey) {
          return (await getExtendedPublicKey(privateKey)).point;
      }
      toRawBytes() {
          const bytes = numberTo32BytesLE(this.y);
          bytes[31] |= this.x & _1n$1 ? 0x80 : 0;
          return bytes;
      }
      toHex() {
          return bytesToHex$1(this.toRawBytes());
      }
      toX25519() {
          const { y } = this;
          const u = mod$1((_1n$1 + y) * invert$1(_1n$1 - y));
          return numberTo32BytesLE(u);
      }
      isTorsionFree() {
          return ExtendedPoint.fromAffine(this).isTorsionFree();
      }
      equals(other) {
          return this.x === other.x && this.y === other.y;
      }
      negate() {
          return new Point(mod$1(-this.x), this.y);
      }
      add(other) {
          return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();
      }
      subtract(other) {
          return this.add(other.negate());
      }
      multiply(scalar) {
          return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();
      }
  };
  Point$1.BASE = new Point$1(CURVE$1.Gx, CURVE$1.Gy);
  Point$1.ZERO = new Point$1(_0n$1, _1n$1);
  let Signature$1 = class Signature {
      constructor(r, s) {
          this.r = r;
          this.s = s;
          this.assertValidity();
      }
      static fromHex(hex) {
          const bytes = ensureBytes$1(hex, 64);
          const r = Point$1.fromHex(bytes.slice(0, 32), false);
          const s = bytesToNumberLE(bytes.slice(32, 64));
          return new Signature(r, s);
      }
      assertValidity() {
          const { r, s } = this;
          if (!(r instanceof Point$1))
              throw new Error('Expected Point instance');
          normalizeScalar$1(s, CURVE$1.l, false);
          return this;
      }
      toRawBytes() {
          const u8 = new Uint8Array(64);
          u8.set(this.r.toRawBytes());
          u8.set(numberTo32BytesLE(this.s), 32);
          return u8;
      }
      toHex() {
          return bytesToHex$1(this.toRawBytes());
      }
  };
  function concatBytes$1(...arrays) {
      if (!arrays.every((a) => a instanceof Uint8Array))
          throw new Error('Expected Uint8Array list');
      if (arrays.length === 1)
          return arrays[0];
      const length = arrays.reduce((a, arr) => a + arr.length, 0);
      const result = new Uint8Array(length);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
          const arr = arrays[i];
          result.set(arr, pad);
          pad += arr.length;
      }
      return result;
  }
  const hexes$1 = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
  function bytesToHex$1(uint8a) {
      if (!(uint8a instanceof Uint8Array))
          throw new Error('Uint8Array expected');
      let hex = '';
      for (let i = 0; i < uint8a.length; i++) {
          hex += hexes$1[uint8a[i]];
      }
      return hex;
  }
  function hexToBytes$1(hex) {
      if (typeof hex !== 'string') {
          throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
      }
      if (hex.length % 2)
          throw new Error('hexToBytes: received invalid unpadded hex');
      const array = new Uint8Array(hex.length / 2);
      for (let i = 0; i < array.length; i++) {
          const j = i * 2;
          const hexByte = hex.slice(j, j + 2);
          const byte = Number.parseInt(hexByte, 16);
          if (Number.isNaN(byte) || byte < 0)
              throw new Error('Invalid byte sequence');
          array[i] = byte;
      }
      return array;
  }
  function numberTo32BytesBE(num) {
      const length = 32;
      const hex = num.toString(16).padStart(length * 2, '0');
      return hexToBytes$1(hex);
  }
  function numberTo32BytesLE(num) {
      return numberTo32BytesBE(num).reverse();
  }
  function edIsNegative(num) {
      return (mod$1(num) & _1n$1) === _1n$1;
  }
  function bytesToNumberLE(uint8a) {
      if (!(uint8a instanceof Uint8Array))
          throw new Error('Expected Uint8Array');
      return BigInt('0x' + bytesToHex$1(Uint8Array.from(uint8a).reverse()));
  }
  const MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
  function bytes255ToNumberLE(bytes) {
      return mod$1(bytesToNumberLE(bytes) & MAX_255B);
  }
  function mod$1(a, b = CURVE$1.P) {
      const res = a % b;
      return res >= _0n$1 ? res : b + res;
  }
  function invert$1(number, modulo = CURVE$1.P) {
      if (number === _0n$1 || modulo <= _0n$1) {
          throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
      }
      let a = mod$1(number, modulo);
      let b = modulo;
      let x = _0n$1, u = _1n$1;
      while (a !== _0n$1) {
          const q = b / a;
          const r = b % a;
          const m = x - u * q;
          b = a, a = r, x = u, u = m;
      }
      const gcd = b;
      if (gcd !== _1n$1)
          throw new Error('invert: does not exist');
      return mod$1(x, modulo);
  }
  function invertBatch$1(nums, p = CURVE$1.P) {
      const tmp = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num, i) => {
          if (num === _0n$1)
              return acc;
          tmp[i] = acc;
          return mod$1(acc * num, p);
      }, _1n$1);
      const inverted = invert$1(lastMultiplied, p);
      nums.reduceRight((acc, num, i) => {
          if (num === _0n$1)
              return acc;
          tmp[i] = mod$1(acc * tmp[i], p);
          return mod$1(acc * num, p);
      }, inverted);
      return tmp;
  }
  function pow2$1(x, power) {
      const { P } = CURVE$1;
      let res = x;
      while (power-- > _0n$1) {
          res *= res;
          res %= P;
      }
      return res;
  }
  function pow_2_252_3(x) {
      const { P } = CURVE$1;
      const _5n = BigInt(5);
      const _10n = BigInt(10);
      const _20n = BigInt(20);
      const _40n = BigInt(40);
      const _80n = BigInt(80);
      const x2 = (x * x) % P;
      const b2 = (x2 * x) % P;
      const b4 = (pow2$1(b2, _2n$1) * b2) % P;
      const b5 = (pow2$1(b4, _1n$1) * x) % P;
      const b10 = (pow2$1(b5, _5n) * b5) % P;
      const b20 = (pow2$1(b10, _10n) * b10) % P;
      const b40 = (pow2$1(b20, _20n) * b20) % P;
      const b80 = (pow2$1(b40, _40n) * b40) % P;
      const b160 = (pow2$1(b80, _80n) * b80) % P;
      const b240 = (pow2$1(b160, _80n) * b80) % P;
      const b250 = (pow2$1(b240, _10n) * b10) % P;
      const pow_p_5_8 = (pow2$1(b250, _2n$1) * x) % P;
      return { pow_p_5_8, b2 };
  }
  function uvRatio(u, v) {
      const v3 = mod$1(v * v * v);
      const v7 = mod$1(v3 * v3 * v);
      const pow = pow_2_252_3(u * v7).pow_p_5_8;
      let x = mod$1(u * v3 * pow);
      const vx2 = mod$1(v * x * x);
      const root1 = x;
      const root2 = mod$1(x * SQRT_M1);
      const useRoot1 = vx2 === u;
      const useRoot2 = vx2 === mod$1(-u);
      const noRoot = vx2 === mod$1(-u * SQRT_M1);
      if (useRoot1)
          x = root1;
      if (useRoot2 || noRoot)
          x = root2;
      if (edIsNegative(x))
          x = mod$1(-x);
      return { isValid: useRoot1 || useRoot2, value: x };
  }
  function invertSqrt(number) {
      return uvRatio(_1n$1, number);
  }
  function modlLE(hash) {
      return mod$1(bytesToNumberLE(hash), CURVE$1.l);
  }
  function equalBytes(b1, b2) {
      if (b1.length !== b2.length) {
          return false;
      }
      for (let i = 0; i < b1.length; i++) {
          if (b1[i] !== b2[i]) {
              return false;
          }
      }
      return true;
  }
  function ensureBytes$1(hex, expectedLength) {
      const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes$1(hex);
      if (typeof expectedLength === 'number' && bytes.length !== expectedLength)
          throw new Error(`Expected ${expectedLength} bytes`);
      return bytes;
  }
  function normalizeScalar$1(num, max, strict = true) {
      if (!max)
          throw new TypeError('Specify max value');
      if (typeof num === 'number' && Number.isSafeInteger(num))
          num = BigInt(num);
      if (typeof num === 'bigint' && num < max) {
          if (strict) {
              if (_0n$1 < num)
                  return num;
          }
          else {
              if (_0n$1 <= num)
                  return num;
          }
      }
      throw new TypeError('Expected valid scalar: 0 < scalar < max');
  }
  function adjustBytes25519(bytes) {
      bytes[0] &= 248;
      bytes[31] &= 127;
      bytes[31] |= 64;
      return bytes;
  }
  function checkPrivateKey(key) {
      key =
          typeof key === 'bigint' || typeof key === 'number'
              ? numberTo32BytesBE(normalizeScalar$1(key, POW_2_256$1))
              : ensureBytes$1(key);
      if (key.length !== 32)
          throw new Error(`Expected 32 bytes`);
      return key;
  }
  function getKeyFromHash(hashed) {
      const head = adjustBytes25519(hashed.slice(0, 32));
      const prefix = hashed.slice(32, 64);
      const scalar = modlLE(head);
      const point = Point$1.BASE.multiply(scalar);
      const pointBytes = point.toRawBytes();
      return { head, prefix, scalar, point, pointBytes };
  }
  let _sha512Sync;
  async function getExtendedPublicKey(key) {
      return getKeyFromHash(await utils$1.sha512(checkPrivateKey(key)));
  }
  async function getPublicKey$1(privateKey) {
      return (await getExtendedPublicKey(privateKey)).pointBytes;
  }
  async function sign$1(message, privateKey) {
      message = ensureBytes$1(message);
      const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);
      const r = modlLE(await utils$1.sha512(prefix, message));
      const R = Point$1.BASE.multiply(r);
      const k = modlLE(await utils$1.sha512(R.toRawBytes(), pointBytes, message));
      const s = mod$1(r + k * scalar, CURVE$1.l);
      return new Signature$1(R, s).toRawBytes();
  }
  function prepareVerification(sig, message, publicKey) {
      message = ensureBytes$1(message);
      if (!(publicKey instanceof Point$1))
          publicKey = Point$1.fromHex(publicKey, false);
      const { r, s } = sig instanceof Signature$1 ? sig.assertValidity() : Signature$1.fromHex(sig);
      const SB = ExtendedPoint.BASE.multiplyUnsafe(s);
      return { r, s, SB, pub: publicKey, msg: message };
  }
  function finishVerification(publicKey, r, SB, hashed) {
      const k = modlLE(hashed);
      const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);
      const RkA = ExtendedPoint.fromAffine(r).add(kA);
      return RkA.subtract(SB).multiplyUnsafe(CURVE$1.h).equals(ExtendedPoint.ZERO);
  }
  async function verify$1(sig, message, publicKey) {
      const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);
      const hashed = await utils$1.sha512(r.toRawBytes(), pub.toRawBytes(), msg);
      return finishVerification(pub, r, SB, hashed);
  }
  Point$1.BASE._setWindowSize(8);
  const crypto$3 = {
      node: nodeCrypto,
      web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,
  };
  const utils$1 = {
      bytesToHex: bytesToHex$1,
      hexToBytes: hexToBytes$1,
      concatBytes: concatBytes$1,
      getExtendedPublicKey,
      mod: mod$1,
      invert: invert$1,
      TORSION_SUBGROUP: [
          '0100000000000000000000000000000000000000000000000000000000000000',
          'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',
          '0000000000000000000000000000000000000000000000000000000000000080',
          '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',
          'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',
          '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',
          '0000000000000000000000000000000000000000000000000000000000000000',
          'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',
      ],
      hashToPrivateScalar: (hash) => {
          hash = ensureBytes$1(hash);
          if (hash.length < 40 || hash.length > 1024)
              throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');
          return mod$1(bytesToNumberLE(hash), CURVE$1.l - _1n$1) + _1n$1;
      },
      randomBytes: (bytesLength = 32) => {
          if (crypto$3.web) {
              return crypto$3.web.getRandomValues(new Uint8Array(bytesLength));
          }
          else if (crypto$3.node) {
              const { randomBytes } = crypto$3.node;
              return new Uint8Array(randomBytes(bytesLength).buffer);
          }
          else {
              throw new Error("The environment doesn't have randomBytes function");
          }
      },
      randomPrivateKey: () => {
          return utils$1.randomBytes(32);
      },
      sha512: async (...messages) => {
          const message = concatBytes$1(...messages);
          if (crypto$3.web) {
              const buffer = await crypto$3.web.subtle.digest('SHA-512', message.buffer);
              return new Uint8Array(buffer);
          }
          else if (crypto$3.node) {
              return Uint8Array.from(crypto$3.node.createHash('sha512').update(message).digest());
          }
          else {
              throw new Error("The environment doesn't have sha512 function");
          }
      },
      precompute(windowSize = 8, point = Point$1.BASE) {
          const cached = point.equals(Point$1.BASE) ? point : new Point$1(point.x, point.y);
          cached._setWindowSize(windowSize);
          cached.multiply(_2n$1);
          return cached;
      },
      sha512Sync: undefined,
  };
  Object.defineProperties(utils$1, {
      sha512Sync: {
          configurable: false,
          get() {
              return _sha512Sync;
          },
          set(val) {
              if (!_sha512Sync)
                  _sha512Sync = val;
          },
      },
  });

  const PUBLIC_KEY_BYTE_LENGTH = 32;
  const PRIVATE_KEY_BYTE_LENGTH = 64; // private key is actually 32 bytes but for historical reasons we concat private and public keys
  const KEYS_BYTE_LENGTH = 32;
  async function generateKey$2() {
      // the actual private key (32 bytes)
      const privateKeyRaw = utils$1.randomPrivateKey();
      const publicKey = await getPublicKey$1(privateKeyRaw);
      // concatenated the public key to the private key
      const privateKey = concatKeys(privateKeyRaw, publicKey);
      return {
          privateKey,
          publicKey
      };
  }
  /**
   * Generate keypair from a 32 byte uint8array
   */
  async function generateKeyFromSeed(seed) {
      if (seed.length !== KEYS_BYTE_LENGTH) {
          throw new TypeError('"seed" must be 32 bytes in length.');
      }
      else if (!(seed instanceof Uint8Array)) {
          throw new TypeError('"seed" must be a node.js Buffer, or Uint8Array.');
      }
      // based on node forges algorithm, the seed is used directly as private key
      const privateKeyRaw = seed;
      const publicKey = await getPublicKey$1(privateKeyRaw);
      const privateKey = concatKeys(privateKeyRaw, publicKey);
      return {
          privateKey,
          publicKey
      };
  }
  async function hashAndSign$2(privateKey, msg) {
      const privateKeyRaw = privateKey.subarray(0, KEYS_BYTE_LENGTH);
      return sign$1(msg, privateKeyRaw);
  }
  async function hashAndVerify$2(publicKey, sig, msg) {
      return verify$1(sig, msg, publicKey);
  }
  function concatKeys(privateKeyRaw, publicKey) {
      const privateKey = new Uint8Array(PRIVATE_KEY_BYTE_LENGTH);
      for (let i = 0; i < KEYS_BYTE_LENGTH; i++) {
          privateKey[i] = privateKeyRaw[i];
          privateKey[KEYS_BYTE_LENGTH + i] = publicKey[i];
      }
      return privateKey;
  }

  /**
   * Returns a new Uint8Array created by concatenating the passed ArrayLikes
   */
  function concat(arrays, length) {
      if (length == null) {
          length = arrays.reduce((acc, curr) => acc + curr.length, 0);
      }
      const output = allocUnsafe(length);
      let offset = 0;
      for (const arr of arrays) {
          output.set(arr, offset);
          offset += arr.length;
      }
      return asUint8Array(output);
  }

  /* eslint-env browser */
  // Check native crypto exists and is enabled (In insecure context `self.crypto`
  // exists but `self.crypto.subtle` does not).
  var webcrypto = {
      get(win = globalThis) {
          const nativeCrypto = win.crypto;
          if (nativeCrypto == null || nativeCrypto.subtle == null) {
              throw Object.assign(new Error('Missing Web Crypto API. ' +
                  'The most likely cause of this error is that this page is being accessed ' +
                  'from an insecure context (i.e. not HTTPS). For more information and ' +
                  'possible resolutions see ' +
                  'https://github.com/libp2p/js-libp2p-crypto/blob/master/README.md#web-crypto-api'), { code: 'ERR_MISSING_WEB_CRYPTO' });
          }
          return nativeCrypto;
      }
  };

  // WebKit on Linux does not support deriving a key from an empty PBKDF2 key.
  // So, as a workaround, we provide the generated key as a constant. We test that
  // this generated key is accurate in test/workaround.spec.ts
  // Generated via:
  // await crypto.subtle.exportKey('jwk',
  //   await crypto.subtle.deriveKey(
  //     { name: 'PBKDF2', salt: new Uint8Array(16), iterations: 32767, hash: { name: 'SHA-256' } },
  //     await crypto.subtle.importKey('raw', new Uint8Array(0), { name: 'PBKDF2' }, false, ['deriveKey']),
  //     { name: 'AES-GCM', length: 128 }, true, ['encrypt', 'decrypt'])
  // )
  const derivedEmptyPasswordKey = { alg: 'A128GCM', ext: true, k: 'scm9jmO_4BJAgdwWGVulLg', key_ops: ['encrypt', 'decrypt'], kty: 'oct' };
  // Based off of code from https://github.com/luke-park/SecureCompatibleEncryptionExamples
  function create$4(opts) {
      const algorithm = opts?.algorithm ?? 'AES-GCM';
      let keyLength = opts?.keyLength ?? 16;
      const nonceLength = opts?.nonceLength ?? 12;
      const digest = opts?.digest ?? 'SHA-256';
      const saltLength = opts?.saltLength ?? 16;
      const iterations = opts?.iterations ?? 32767;
      const crypto = webcrypto.get();
      keyLength *= 8; // Browser crypto uses bits instead of bytes
      /**
       * Uses the provided password to derive a pbkdf2 key. The key
       * will then be used to encrypt the data.
       */
      async function encrypt(data, password) {
          const salt = crypto.getRandomValues(new Uint8Array(saltLength));
          const nonce = crypto.getRandomValues(new Uint8Array(nonceLength));
          const aesGcm = { name: algorithm, iv: nonce };
          if (typeof password === 'string') {
              password = fromString$1(password);
          }
          let cryptoKey;
          if (password.length === 0) {
              cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['encrypt']);
              try {
                  const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };
                  const runtimeDerivedEmptyPassword = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);
                  cryptoKey = await crypto.subtle.deriveKey(deriveParams, runtimeDerivedEmptyPassword, { name: algorithm, length: keyLength }, true, ['encrypt']);
              }
              catch {
                  cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['encrypt']);
              }
          }
          else {
              // Derive a key using PBKDF2.
              const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };
              const rawKey = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);
              cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['encrypt']);
          }
          // Encrypt the string.
          const ciphertext = await crypto.subtle.encrypt(aesGcm, cryptoKey, data);
          return concat([salt, aesGcm.iv, new Uint8Array(ciphertext)]);
      }
      /**
       * Uses the provided password to derive a pbkdf2 key. The key
       * will then be used to decrypt the data. The options used to create
       * this decryption cipher must be the same as those used to create
       * the encryption cipher.
       */
      async function decrypt(data, password) {
          const salt = data.subarray(0, saltLength);
          const nonce = data.subarray(saltLength, saltLength + nonceLength);
          const ciphertext = data.subarray(saltLength + nonceLength);
          const aesGcm = { name: algorithm, iv: nonce };
          if (typeof password === 'string') {
              password = fromString$1(password);
          }
          let cryptoKey;
          if (password.length === 0) {
              try {
                  const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };
                  const runtimeDerivedEmptyPassword = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);
                  cryptoKey = await crypto.subtle.deriveKey(deriveParams, runtimeDerivedEmptyPassword, { name: algorithm, length: keyLength }, true, ['decrypt']);
              }
              catch {
                  cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['decrypt']);
              }
          }
          else {
              // Derive the key using PBKDF2.
              const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };
              const rawKey = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);
              cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['decrypt']);
          }
          // Decrypt the string.
          const plaintext = await crypto.subtle.decrypt(aesGcm, cryptoKey, ciphertext);
          return new Uint8Array(plaintext);
      }
      const cipher = {
          encrypt,
          decrypt
      };
      return cipher;
  }

  /**
   * Exports the given PrivateKey as a base64 encoded string.
   * The PrivateKey is encrypted via a password derived PBKDF2 key
   * leveraging the aes-gcm cipher algorithm.
   */
  async function exporter(privateKey, password) {
      const cipher = create$4();
      const encryptedKey = await cipher.encrypt(privateKey, password);
      return base64$3.encode(encryptedKey);
  }

  var minimal$2 = {};

  var aspromise;
  var hasRequiredAspromise;

  function requireAspromise () {
  	if (hasRequiredAspromise) return aspromise;
  	hasRequiredAspromise = 1;
  	aspromise = asPromise;

  	/**
  	 * Callback as used by {@link util.asPromise}.
  	 * @typedef asPromiseCallback
  	 * @type {function}
  	 * @param {Error|null} error Error, if any
  	 * @param {...*} params Additional arguments
  	 * @returns {undefined}
  	 */

  	/**
  	 * Returns a promise from a node-style callback function.
  	 * @memberof util
  	 * @param {asPromiseCallback} fn Function to call
  	 * @param {*} ctx Function context
  	 * @param {...*} params Function arguments
  	 * @returns {Promise<*>} Promisified function
  	 */
  	function asPromise(fn, ctx/*, varargs */) {
  	    var params  = new Array(arguments.length - 1),
  	        offset  = 0,
  	        index   = 2,
  	        pending = true;
  	    while (index < arguments.length)
  	        params[offset++] = arguments[index++];
  	    return new Promise(function executor(resolve, reject) {
  	        params[offset] = function callback(err/*, varargs */) {
  	            if (pending) {
  	                pending = false;
  	                if (err)
  	                    reject(err);
  	                else {
  	                    var params = new Array(arguments.length - 1),
  	                        offset = 0;
  	                    while (offset < params.length)
  	                        params[offset++] = arguments[offset];
  	                    resolve.apply(null, params);
  	                }
  	            }
  	        };
  	        try {
  	            fn.apply(ctx || null, params);
  	        } catch (err) {
  	            if (pending) {
  	                pending = false;
  	                reject(err);
  	            }
  	        }
  	    });
  	}
  	return aspromise;
  }

  var base64$2 = {};

  var hasRequiredBase64;

  function requireBase64 () {
  	if (hasRequiredBase64) return base64$2;
  	hasRequiredBase64 = 1;
  	(function (exports) {

  		/**
  		 * A minimal base64 implementation for number arrays.
  		 * @memberof util
  		 * @namespace
  		 */
  		var base64 = exports;

  		/**
  		 * Calculates the byte length of a base64 encoded string.
  		 * @param {string} string Base64 encoded string
  		 * @returns {number} Byte length
  		 */
  		base64.length = function length(string) {
  		    var p = string.length;
  		    if (!p)
  		        return 0;
  		    var n = 0;
  		    while (--p % 4 > 1 && string.charAt(p) === "=")
  		        ++n;
  		    return Math.ceil(string.length * 3) / 4 - n;
  		};

  		// Base64 encoding table
  		var b64 = new Array(64);

  		// Base64 decoding table
  		var s64 = new Array(123);

  		// 65..90, 97..122, 48..57, 43, 47
  		for (var i = 0; i < 64;)
  		    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

  		/**
  		 * Encodes a buffer to a base64 encoded string.
  		 * @param {Uint8Array} buffer Source buffer
  		 * @param {number} start Source start
  		 * @param {number} end Source end
  		 * @returns {string} Base64 encoded string
  		 */
  		base64.encode = function encode(buffer, start, end) {
  		    var parts = null,
  		        chunk = [];
  		    var i = 0, // output index
  		        j = 0, // goto index
  		        t;     // temporary
  		    while (start < end) {
  		        var b = buffer[start++];
  		        switch (j) {
  		            case 0:
  		                chunk[i++] = b64[b >> 2];
  		                t = (b & 3) << 4;
  		                j = 1;
  		                break;
  		            case 1:
  		                chunk[i++] = b64[t | b >> 4];
  		                t = (b & 15) << 2;
  		                j = 2;
  		                break;
  		            case 2:
  		                chunk[i++] = b64[t | b >> 6];
  		                chunk[i++] = b64[b & 63];
  		                j = 0;
  		                break;
  		        }
  		        if (i > 8191) {
  		            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
  		            i = 0;
  		        }
  		    }
  		    if (j) {
  		        chunk[i++] = b64[t];
  		        chunk[i++] = 61;
  		        if (j === 1)
  		            chunk[i++] = 61;
  		    }
  		    if (parts) {
  		        if (i)
  		            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
  		        return parts.join("");
  		    }
  		    return String.fromCharCode.apply(String, chunk.slice(0, i));
  		};

  		var invalidEncoding = "invalid encoding";

  		/**
  		 * Decodes a base64 encoded string to a buffer.
  		 * @param {string} string Source string
  		 * @param {Uint8Array} buffer Destination buffer
  		 * @param {number} offset Destination offset
  		 * @returns {number} Number of bytes written
  		 * @throws {Error} If encoding is invalid
  		 */
  		base64.decode = function decode(string, buffer, offset) {
  		    var start = offset;
  		    var j = 0, // goto index
  		        t;     // temporary
  		    for (var i = 0; i < string.length;) {
  		        var c = string.charCodeAt(i++);
  		        if (c === 61 && j > 1)
  		            break;
  		        if ((c = s64[c]) === undefined)
  		            throw Error(invalidEncoding);
  		        switch (j) {
  		            case 0:
  		                t = c;
  		                j = 1;
  		                break;
  		            case 1:
  		                buffer[offset++] = t << 2 | (c & 48) >> 4;
  		                t = c;
  		                j = 2;
  		                break;
  		            case 2:
  		                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
  		                t = c;
  		                j = 3;
  		                break;
  		            case 3:
  		                buffer[offset++] = (t & 3) << 6 | c;
  		                j = 0;
  		                break;
  		        }
  		    }
  		    if (j === 1)
  		        throw Error(invalidEncoding);
  		    return offset - start;
  		};

  		/**
  		 * Tests if the specified string appears to be base64 encoded.
  		 * @param {string} string String to test
  		 * @returns {boolean} `true` if probably base64 encoded, otherwise false
  		 */
  		base64.test = function test(string) {
  		    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
  		}; 
  	} (base64$2));
  	return base64$2;
  }

  var eventemitter;
  var hasRequiredEventemitter;

  function requireEventemitter () {
  	if (hasRequiredEventemitter) return eventemitter;
  	hasRequiredEventemitter = 1;
  	eventemitter = EventEmitter;

  	/**
  	 * Constructs a new event emitter instance.
  	 * @classdesc A minimal event emitter.
  	 * @memberof util
  	 * @constructor
  	 */
  	function EventEmitter() {

  	    /**
  	     * Registered listeners.
  	     * @type {Object.<string,*>}
  	     * @private
  	     */
  	    this._listeners = {};
  	}

  	/**
  	 * Registers an event listener.
  	 * @param {string} evt Event name
  	 * @param {function} fn Listener
  	 * @param {*} [ctx] Listener context
  	 * @returns {util.EventEmitter} `this`
  	 */
  	EventEmitter.prototype.on = function on(evt, fn, ctx) {
  	    (this._listeners[evt] || (this._listeners[evt] = [])).push({
  	        fn  : fn,
  	        ctx : ctx || this
  	    });
  	    return this;
  	};

  	/**
  	 * Removes an event listener or any matching listeners if arguments are omitted.
  	 * @param {string} [evt] Event name. Removes all listeners if omitted.
  	 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
  	 * @returns {util.EventEmitter} `this`
  	 */
  	EventEmitter.prototype.off = function off(evt, fn) {
  	    if (evt === undefined)
  	        this._listeners = {};
  	    else {
  	        if (fn === undefined)
  	            this._listeners[evt] = [];
  	        else {
  	            var listeners = this._listeners[evt];
  	            for (var i = 0; i < listeners.length;)
  	                if (listeners[i].fn === fn)
  	                    listeners.splice(i, 1);
  	                else
  	                    ++i;
  	        }
  	    }
  	    return this;
  	};

  	/**
  	 * Emits an event by calling its listeners with the specified arguments.
  	 * @param {string} evt Event name
  	 * @param {...*} args Arguments
  	 * @returns {util.EventEmitter} `this`
  	 */
  	EventEmitter.prototype.emit = function emit(evt) {
  	    var listeners = this._listeners[evt];
  	    if (listeners) {
  	        var args = [],
  	            i = 1;
  	        for (; i < arguments.length;)
  	            args.push(arguments[i++]);
  	        for (i = 0; i < listeners.length;)
  	            listeners[i].fn.apply(listeners[i++].ctx, args);
  	    }
  	    return this;
  	};
  	return eventemitter;
  }

  var float;
  var hasRequiredFloat;

  function requireFloat () {
  	if (hasRequiredFloat) return float;
  	hasRequiredFloat = 1;

  	float = factory(factory);

  	/**
  	 * Reads / writes floats / doubles from / to buffers.
  	 * @name util.float
  	 * @namespace
  	 */

  	/**
  	 * Writes a 32 bit float to a buffer using little endian byte order.
  	 * @name util.float.writeFloatLE
  	 * @function
  	 * @param {number} val Value to write
  	 * @param {Uint8Array} buf Target buffer
  	 * @param {number} pos Target buffer offset
  	 * @returns {undefined}
  	 */

  	/**
  	 * Writes a 32 bit float to a buffer using big endian byte order.
  	 * @name util.float.writeFloatBE
  	 * @function
  	 * @param {number} val Value to write
  	 * @param {Uint8Array} buf Target buffer
  	 * @param {number} pos Target buffer offset
  	 * @returns {undefined}
  	 */

  	/**
  	 * Reads a 32 bit float from a buffer using little endian byte order.
  	 * @name util.float.readFloatLE
  	 * @function
  	 * @param {Uint8Array} buf Source buffer
  	 * @param {number} pos Source buffer offset
  	 * @returns {number} Value read
  	 */

  	/**
  	 * Reads a 32 bit float from a buffer using big endian byte order.
  	 * @name util.float.readFloatBE
  	 * @function
  	 * @param {Uint8Array} buf Source buffer
  	 * @param {number} pos Source buffer offset
  	 * @returns {number} Value read
  	 */

  	/**
  	 * Writes a 64 bit double to a buffer using little endian byte order.
  	 * @name util.float.writeDoubleLE
  	 * @function
  	 * @param {number} val Value to write
  	 * @param {Uint8Array} buf Target buffer
  	 * @param {number} pos Target buffer offset
  	 * @returns {undefined}
  	 */

  	/**
  	 * Writes a 64 bit double to a buffer using big endian byte order.
  	 * @name util.float.writeDoubleBE
  	 * @function
  	 * @param {number} val Value to write
  	 * @param {Uint8Array} buf Target buffer
  	 * @param {number} pos Target buffer offset
  	 * @returns {undefined}
  	 */

  	/**
  	 * Reads a 64 bit double from a buffer using little endian byte order.
  	 * @name util.float.readDoubleLE
  	 * @function
  	 * @param {Uint8Array} buf Source buffer
  	 * @param {number} pos Source buffer offset
  	 * @returns {number} Value read
  	 */

  	/**
  	 * Reads a 64 bit double from a buffer using big endian byte order.
  	 * @name util.float.readDoubleBE
  	 * @function
  	 * @param {Uint8Array} buf Source buffer
  	 * @param {number} pos Source buffer offset
  	 * @returns {number} Value read
  	 */

  	// Factory function for the purpose of node-based testing in modified global environments
  	function factory(exports) {

  	    // float: typed array
  	    if (typeof Float32Array !== "undefined") (function() {

  	        var f32 = new Float32Array([ -0 ]),
  	            f8b = new Uint8Array(f32.buffer),
  	            le  = f8b[3] === 128;

  	        function writeFloat_f32_cpy(val, buf, pos) {
  	            f32[0] = val;
  	            buf[pos    ] = f8b[0];
  	            buf[pos + 1] = f8b[1];
  	            buf[pos + 2] = f8b[2];
  	            buf[pos + 3] = f8b[3];
  	        }

  	        function writeFloat_f32_rev(val, buf, pos) {
  	            f32[0] = val;
  	            buf[pos    ] = f8b[3];
  	            buf[pos + 1] = f8b[2];
  	            buf[pos + 2] = f8b[1];
  	            buf[pos + 3] = f8b[0];
  	        }

  	        /* istanbul ignore next */
  	        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
  	        /* istanbul ignore next */
  	        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

  	        function readFloat_f32_cpy(buf, pos) {
  	            f8b[0] = buf[pos    ];
  	            f8b[1] = buf[pos + 1];
  	            f8b[2] = buf[pos + 2];
  	            f8b[3] = buf[pos + 3];
  	            return f32[0];
  	        }

  	        function readFloat_f32_rev(buf, pos) {
  	            f8b[3] = buf[pos    ];
  	            f8b[2] = buf[pos + 1];
  	            f8b[1] = buf[pos + 2];
  	            f8b[0] = buf[pos + 3];
  	            return f32[0];
  	        }

  	        /* istanbul ignore next */
  	        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
  	        /* istanbul ignore next */
  	        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

  	    // float: ieee754
  	    })(); else (function() {

  	        function writeFloat_ieee754(writeUint, val, buf, pos) {
  	            var sign = val < 0 ? 1 : 0;
  	            if (sign)
  	                val = -val;
  	            if (val === 0)
  	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
  	            else if (isNaN(val))
  	                writeUint(2143289344, buf, pos);
  	            else if (val > 3.4028234663852886e+38) // +-Infinity
  	                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
  	            else if (val < 1.1754943508222875e-38) // denormal
  	                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
  	            else {
  	                var exponent = Math.floor(Math.log(val) / Math.LN2),
  	                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
  	                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
  	            }
  	        }

  	        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
  	        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

  	        function readFloat_ieee754(readUint, buf, pos) {
  	            var uint = readUint(buf, pos),
  	                sign = (uint >> 31) * 2 + 1,
  	                exponent = uint >>> 23 & 255,
  	                mantissa = uint & 8388607;
  	            return exponent === 255
  	                ? mantissa
  	                ? NaN
  	                : sign * Infinity
  	                : exponent === 0 // denormal
  	                ? sign * 1.401298464324817e-45 * mantissa
  	                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
  	        }

  	        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
  	        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

  	    })();

  	    // double: typed array
  	    if (typeof Float64Array !== "undefined") (function() {

  	        var f64 = new Float64Array([-0]),
  	            f8b = new Uint8Array(f64.buffer),
  	            le  = f8b[7] === 128;

  	        function writeDouble_f64_cpy(val, buf, pos) {
  	            f64[0] = val;
  	            buf[pos    ] = f8b[0];
  	            buf[pos + 1] = f8b[1];
  	            buf[pos + 2] = f8b[2];
  	            buf[pos + 3] = f8b[3];
  	            buf[pos + 4] = f8b[4];
  	            buf[pos + 5] = f8b[5];
  	            buf[pos + 6] = f8b[6];
  	            buf[pos + 7] = f8b[7];
  	        }

  	        function writeDouble_f64_rev(val, buf, pos) {
  	            f64[0] = val;
  	            buf[pos    ] = f8b[7];
  	            buf[pos + 1] = f8b[6];
  	            buf[pos + 2] = f8b[5];
  	            buf[pos + 3] = f8b[4];
  	            buf[pos + 4] = f8b[3];
  	            buf[pos + 5] = f8b[2];
  	            buf[pos + 6] = f8b[1];
  	            buf[pos + 7] = f8b[0];
  	        }

  	        /* istanbul ignore next */
  	        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
  	        /* istanbul ignore next */
  	        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

  	        function readDouble_f64_cpy(buf, pos) {
  	            f8b[0] = buf[pos    ];
  	            f8b[1] = buf[pos + 1];
  	            f8b[2] = buf[pos + 2];
  	            f8b[3] = buf[pos + 3];
  	            f8b[4] = buf[pos + 4];
  	            f8b[5] = buf[pos + 5];
  	            f8b[6] = buf[pos + 6];
  	            f8b[7] = buf[pos + 7];
  	            return f64[0];
  	        }

  	        function readDouble_f64_rev(buf, pos) {
  	            f8b[7] = buf[pos    ];
  	            f8b[6] = buf[pos + 1];
  	            f8b[5] = buf[pos + 2];
  	            f8b[4] = buf[pos + 3];
  	            f8b[3] = buf[pos + 4];
  	            f8b[2] = buf[pos + 5];
  	            f8b[1] = buf[pos + 6];
  	            f8b[0] = buf[pos + 7];
  	            return f64[0];
  	        }

  	        /* istanbul ignore next */
  	        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
  	        /* istanbul ignore next */
  	        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

  	    // double: ieee754
  	    })(); else (function() {

  	        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
  	            var sign = val < 0 ? 1 : 0;
  	            if (sign)
  	                val = -val;
  	            if (val === 0) {
  	                writeUint(0, buf, pos + off0);
  	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
  	            } else if (isNaN(val)) {
  	                writeUint(0, buf, pos + off0);
  	                writeUint(2146959360, buf, pos + off1);
  	            } else if (val > 1.7976931348623157e+308) { // +-Infinity
  	                writeUint(0, buf, pos + off0);
  	                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
  	            } else {
  	                var mantissa;
  	                if (val < 2.2250738585072014e-308) { // denormal
  	                    mantissa = val / 5e-324;
  	                    writeUint(mantissa >>> 0, buf, pos + off0);
  	                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
  	                } else {
  	                    var exponent = Math.floor(Math.log(val) / Math.LN2);
  	                    if (exponent === 1024)
  	                        exponent = 1023;
  	                    mantissa = val * Math.pow(2, -exponent);
  	                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
  	                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
  	                }
  	            }
  	        }

  	        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
  	        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

  	        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
  	            var lo = readUint(buf, pos + off0),
  	                hi = readUint(buf, pos + off1);
  	            var sign = (hi >> 31) * 2 + 1,
  	                exponent = hi >>> 20 & 2047,
  	                mantissa = 4294967296 * (hi & 1048575) + lo;
  	            return exponent === 2047
  	                ? mantissa
  	                ? NaN
  	                : sign * Infinity
  	                : exponent === 0 // denormal
  	                ? sign * 5e-324 * mantissa
  	                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
  	        }

  	        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
  	        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

  	    })();

  	    return exports;
  	}

  	// uint helpers

  	function writeUintLE(val, buf, pos) {
  	    buf[pos    ] =  val        & 255;
  	    buf[pos + 1] =  val >>> 8  & 255;
  	    buf[pos + 2] =  val >>> 16 & 255;
  	    buf[pos + 3] =  val >>> 24;
  	}

  	function writeUintBE(val, buf, pos) {
  	    buf[pos    ] =  val >>> 24;
  	    buf[pos + 1] =  val >>> 16 & 255;
  	    buf[pos + 2] =  val >>> 8  & 255;
  	    buf[pos + 3] =  val        & 255;
  	}

  	function readUintLE(buf, pos) {
  	    return (buf[pos    ]
  	          | buf[pos + 1] << 8
  	          | buf[pos + 2] << 16
  	          | buf[pos + 3] << 24) >>> 0;
  	}

  	function readUintBE(buf, pos) {
  	    return (buf[pos    ] << 24
  	          | buf[pos + 1] << 16
  	          | buf[pos + 2] << 8
  	          | buf[pos + 3]) >>> 0;
  	}
  	return float;
  }

  var inquire_1;
  var hasRequiredInquire;

  function requireInquire () {
  	if (hasRequiredInquire) return inquire_1;
  	hasRequiredInquire = 1;
  	inquire_1 = inquire;

  	/**
  	 * Requires a module only if available.
  	 * @memberof util
  	 * @param {string} moduleName Module to require
  	 * @returns {?Object} Required module if available and not empty, otherwise `null`
  	 */
  	function inquire(moduleName) {
  	    try {
  	        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
  	        if (mod && (mod.length || Object.keys(mod).length))
  	            return mod;
  	    } catch (e) {} // eslint-disable-line no-empty
  	    return null;
  	}
  	return inquire_1;
  }

  var utf8$4 = {};

  var hasRequiredUtf8;

  function requireUtf8 () {
  	if (hasRequiredUtf8) return utf8$4;
  	hasRequiredUtf8 = 1;
  	(function (exports) {

  		/**
  		 * A minimal UTF8 implementation for number arrays.
  		 * @memberof util
  		 * @namespace
  		 */
  		var utf8 = exports;

  		/**
  		 * Calculates the UTF8 byte length of a string.
  		 * @param {string} string String
  		 * @returns {number} Byte length
  		 */
  		utf8.length = function utf8_length(string) {
  		    var len = 0,
  		        c = 0;
  		    for (var i = 0; i < string.length; ++i) {
  		        c = string.charCodeAt(i);
  		        if (c < 128)
  		            len += 1;
  		        else if (c < 2048)
  		            len += 2;
  		        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
  		            ++i;
  		            len += 4;
  		        } else
  		            len += 3;
  		    }
  		    return len;
  		};

  		/**
  		 * Reads UTF8 bytes as a string.
  		 * @param {Uint8Array} buffer Source buffer
  		 * @param {number} start Source start
  		 * @param {number} end Source end
  		 * @returns {string} String read
  		 */
  		utf8.read = function utf8_read(buffer, start, end) {
  		    var len = end - start;
  		    if (len < 1)
  		        return "";
  		    var parts = null,
  		        chunk = [],
  		        i = 0, // char offset
  		        t;     // temporary
  		    while (start < end) {
  		        t = buffer[start++];
  		        if (t < 128)
  		            chunk[i++] = t;
  		        else if (t > 191 && t < 224)
  		            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
  		        else if (t > 239 && t < 365) {
  		            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
  		            chunk[i++] = 0xD800 + (t >> 10);
  		            chunk[i++] = 0xDC00 + (t & 1023);
  		        } else
  		            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
  		        if (i > 8191) {
  		            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
  		            i = 0;
  		        }
  		    }
  		    if (parts) {
  		        if (i)
  		            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
  		        return parts.join("");
  		    }
  		    return String.fromCharCode.apply(String, chunk.slice(0, i));
  		};

  		/**
  		 * Writes a string as UTF8 bytes.
  		 * @param {string} string Source string
  		 * @param {Uint8Array} buffer Destination buffer
  		 * @param {number} offset Destination offset
  		 * @returns {number} Bytes written
  		 */
  		utf8.write = function utf8_write(string, buffer, offset) {
  		    var start = offset,
  		        c1, // character 1
  		        c2; // character 2
  		    for (var i = 0; i < string.length; ++i) {
  		        c1 = string.charCodeAt(i);
  		        if (c1 < 128) {
  		            buffer[offset++] = c1;
  		        } else if (c1 < 2048) {
  		            buffer[offset++] = c1 >> 6       | 192;
  		            buffer[offset++] = c1       & 63 | 128;
  		        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
  		            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
  		            ++i;
  		            buffer[offset++] = c1 >> 18      | 240;
  		            buffer[offset++] = c1 >> 12 & 63 | 128;
  		            buffer[offset++] = c1 >> 6  & 63 | 128;
  		            buffer[offset++] = c1       & 63 | 128;
  		        } else {
  		            buffer[offset++] = c1 >> 12      | 224;
  		            buffer[offset++] = c1 >> 6  & 63 | 128;
  		            buffer[offset++] = c1       & 63 | 128;
  		        }
  		    }
  		    return offset - start;
  		}; 
  	} (utf8$4));
  	return utf8$4;
  }

  var pool_1;
  var hasRequiredPool;

  function requirePool () {
  	if (hasRequiredPool) return pool_1;
  	hasRequiredPool = 1;
  	pool_1 = pool;

  	/**
  	 * An allocator as used by {@link util.pool}.
  	 * @typedef PoolAllocator
  	 * @type {function}
  	 * @param {number} size Buffer size
  	 * @returns {Uint8Array} Buffer
  	 */

  	/**
  	 * A slicer as used by {@link util.pool}.
  	 * @typedef PoolSlicer
  	 * @type {function}
  	 * @param {number} start Start offset
  	 * @param {number} end End offset
  	 * @returns {Uint8Array} Buffer slice
  	 * @this {Uint8Array}
  	 */

  	/**
  	 * A general purpose buffer pool.
  	 * @memberof util
  	 * @function
  	 * @param {PoolAllocator} alloc Allocator
  	 * @param {PoolSlicer} slice Slicer
  	 * @param {number} [size=8192] Slab size
  	 * @returns {PoolAllocator} Pooled allocator
  	 */
  	function pool(alloc, slice, size) {
  	    var SIZE   = size || 8192;
  	    var MAX    = SIZE >>> 1;
  	    var slab   = null;
  	    var offset = SIZE;
  	    return function pool_alloc(size) {
  	        if (size < 1 || size > MAX)
  	            return alloc(size);
  	        if (offset + size > SIZE) {
  	            slab = alloc(SIZE);
  	            offset = 0;
  	        }
  	        var buf = slice.call(slab, offset, offset += size);
  	        if (offset & 7) // align to 32 bit
  	            offset = (offset | 7) + 1;
  	        return buf;
  	    };
  	}
  	return pool_1;
  }

  var longbits$1;
  var hasRequiredLongbits$1;

  function requireLongbits$1 () {
  	if (hasRequiredLongbits$1) return longbits$1;
  	hasRequiredLongbits$1 = 1;
  	longbits$1 = LongBits;

  	var util = requireMinimal$1();

  	/**
  	 * Constructs new long bits.
  	 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
  	 * @memberof util
  	 * @constructor
  	 * @param {number} lo Low 32 bits, unsigned
  	 * @param {number} hi High 32 bits, unsigned
  	 */
  	function LongBits(lo, hi) {

  	    // note that the casts below are theoretically unnecessary as of today, but older statically
  	    // generated converter code might still call the ctor with signed 32bits. kept for compat.

  	    /**
  	     * Low bits.
  	     * @type {number}
  	     */
  	    this.lo = lo >>> 0;

  	    /**
  	     * High bits.
  	     * @type {number}
  	     */
  	    this.hi = hi >>> 0;
  	}

  	/**
  	 * Zero bits.
  	 * @memberof util.LongBits
  	 * @type {util.LongBits}
  	 */
  	var zero = LongBits.zero = new LongBits(0, 0);

  	zero.toNumber = function() { return 0; };
  	zero.zzEncode = zero.zzDecode = function() { return this; };
  	zero.length = function() { return 1; };

  	/**
  	 * Zero hash.
  	 * @memberof util.LongBits
  	 * @type {string}
  	 */
  	var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

  	/**
  	 * Constructs new long bits from the specified number.
  	 * @param {number} value Value
  	 * @returns {util.LongBits} Instance
  	 */
  	LongBits.fromNumber = function fromNumber(value) {
  	    if (value === 0)
  	        return zero;
  	    var sign = value < 0;
  	    if (sign)
  	        value = -value;
  	    var lo = value >>> 0,
  	        hi = (value - lo) / 4294967296 >>> 0;
  	    if (sign) {
  	        hi = ~hi >>> 0;
  	        lo = ~lo >>> 0;
  	        if (++lo > 4294967295) {
  	            lo = 0;
  	            if (++hi > 4294967295)
  	                hi = 0;
  	        }
  	    }
  	    return new LongBits(lo, hi);
  	};

  	/**
  	 * Constructs new long bits from a number, long or string.
  	 * @param {Long|number|string} value Value
  	 * @returns {util.LongBits} Instance
  	 */
  	LongBits.from = function from(value) {
  	    if (typeof value === "number")
  	        return LongBits.fromNumber(value);
  	    if (util.isString(value)) {
  	        /* istanbul ignore else */
  	        if (util.Long)
  	            value = util.Long.fromString(value);
  	        else
  	            return LongBits.fromNumber(parseInt(value, 10));
  	    }
  	    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
  	};

  	/**
  	 * Converts this long bits to a possibly unsafe JavaScript number.
  	 * @param {boolean} [unsigned=false] Whether unsigned or not
  	 * @returns {number} Possibly unsafe number
  	 */
  	LongBits.prototype.toNumber = function toNumber(unsigned) {
  	    if (!unsigned && this.hi >>> 31) {
  	        var lo = ~this.lo + 1 >>> 0,
  	            hi = ~this.hi     >>> 0;
  	        if (!lo)
  	            hi = hi + 1 >>> 0;
  	        return -(lo + hi * 4294967296);
  	    }
  	    return this.lo + this.hi * 4294967296;
  	};

  	/**
  	 * Converts this long bits to a long.
  	 * @param {boolean} [unsigned=false] Whether unsigned or not
  	 * @returns {Long} Long
  	 */
  	LongBits.prototype.toLong = function toLong(unsigned) {
  	    return util.Long
  	        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
  	        /* istanbul ignore next */
  	        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
  	};

  	var charCodeAt = String.prototype.charCodeAt;

  	/**
  	 * Constructs new long bits from the specified 8 characters long hash.
  	 * @param {string} hash Hash
  	 * @returns {util.LongBits} Bits
  	 */
  	LongBits.fromHash = function fromHash(hash) {
  	    if (hash === zeroHash)
  	        return zero;
  	    return new LongBits(
  	        ( charCodeAt.call(hash, 0)
  	        | charCodeAt.call(hash, 1) << 8
  	        | charCodeAt.call(hash, 2) << 16
  	        | charCodeAt.call(hash, 3) << 24) >>> 0
  	    ,
  	        ( charCodeAt.call(hash, 4)
  	        | charCodeAt.call(hash, 5) << 8
  	        | charCodeAt.call(hash, 6) << 16
  	        | charCodeAt.call(hash, 7) << 24) >>> 0
  	    );
  	};

  	/**
  	 * Converts this long bits to a 8 characters long hash.
  	 * @returns {string} Hash
  	 */
  	LongBits.prototype.toHash = function toHash() {
  	    return String.fromCharCode(
  	        this.lo        & 255,
  	        this.lo >>> 8  & 255,
  	        this.lo >>> 16 & 255,
  	        this.lo >>> 24      ,
  	        this.hi        & 255,
  	        this.hi >>> 8  & 255,
  	        this.hi >>> 16 & 255,
  	        this.hi >>> 24
  	    );
  	};

  	/**
  	 * Zig-zag encodes this long bits.
  	 * @returns {util.LongBits} `this`
  	 */
  	LongBits.prototype.zzEncode = function zzEncode() {
  	    var mask =   this.hi >> 31;
  	    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
  	    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
  	    return this;
  	};

  	/**
  	 * Zig-zag decodes this long bits.
  	 * @returns {util.LongBits} `this`
  	 */
  	LongBits.prototype.zzDecode = function zzDecode() {
  	    var mask = -(this.lo & 1);
  	    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
  	    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
  	    return this;
  	};

  	/**
  	 * Calculates the length of this longbits when encoded as a varint.
  	 * @returns {number} Length
  	 */
  	LongBits.prototype.length = function length() {
  	    var part0 =  this.lo,
  	        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
  	        part2 =  this.hi >>> 24;
  	    return part2 === 0
  	         ? part1 === 0
  	           ? part0 < 16384
  	             ? part0 < 128 ? 1 : 2
  	             : part0 < 2097152 ? 3 : 4
  	           : part1 < 16384
  	             ? part1 < 128 ? 5 : 6
  	             : part1 < 2097152 ? 7 : 8
  	         : part2 < 128 ? 9 : 10;
  	};
  	return longbits$1;
  }

  var hasRequiredMinimal$1;

  function requireMinimal$1 () {
  	if (hasRequiredMinimal$1) return minimal$2;
  	hasRequiredMinimal$1 = 1;
  	(function (exports) {
  		var util = exports;

  		// used to return a Promise where callback is omitted
  		util.asPromise = requireAspromise();

  		// converts to / from base64 encoded strings
  		util.base64 = requireBase64();

  		// base class of rpc.Service
  		util.EventEmitter = requireEventemitter();

  		// float handling accross browsers
  		util.float = requireFloat();

  		// requires modules optionally and hides the call from bundlers
  		util.inquire = requireInquire();

  		// converts to / from utf8 encoded strings
  		util.utf8 = requireUtf8();

  		// provides a node-like buffer pool in the browser
  		util.pool = requirePool();

  		// utility to work with the low and high bits of a 64 bit value
  		util.LongBits = requireLongbits$1();

  		/**
  		 * Whether running within node or not.
  		 * @memberof util
  		 * @type {boolean}
  		 */
  		util.isNode = Boolean(typeof commonjsGlobal !== "undefined"
  		                   && commonjsGlobal
  		                   && commonjsGlobal.process
  		                   && commonjsGlobal.process.versions
  		                   && commonjsGlobal.process.versions.node);

  		/**
  		 * Global object reference.
  		 * @memberof util
  		 * @type {Object}
  		 */
  		util.global = util.isNode && commonjsGlobal
  		           || typeof window !== "undefined" && window
  		           || typeof self   !== "undefined" && self
  		           || commonjsGlobal; // eslint-disable-line no-invalid-this

  		/**
  		 * An immuable empty array.
  		 * @memberof util
  		 * @type {Array.<*>}
  		 * @const
  		 */
  		util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

  		/**
  		 * An immutable empty object.
  		 * @type {Object}
  		 * @const
  		 */
  		util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

  		/**
  		 * Tests if the specified value is an integer.
  		 * @function
  		 * @param {*} value Value to test
  		 * @returns {boolean} `true` if the value is an integer
  		 */
  		util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
  		    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
  		};

  		/**
  		 * Tests if the specified value is a string.
  		 * @param {*} value Value to test
  		 * @returns {boolean} `true` if the value is a string
  		 */
  		util.isString = function isString(value) {
  		    return typeof value === "string" || value instanceof String;
  		};

  		/**
  		 * Tests if the specified value is a non-null object.
  		 * @param {*} value Value to test
  		 * @returns {boolean} `true` if the value is a non-null object
  		 */
  		util.isObject = function isObject(value) {
  		    return value && typeof value === "object";
  		};

  		/**
  		 * Checks if a property on a message is considered to be present.
  		 * This is an alias of {@link util.isSet}.
  		 * @function
  		 * @param {Object} obj Plain object or message instance
  		 * @param {string} prop Property name
  		 * @returns {boolean} `true` if considered to be present, otherwise `false`
  		 */
  		util.isset =

  		/**
  		 * Checks if a property on a message is considered to be present.
  		 * @param {Object} obj Plain object or message instance
  		 * @param {string} prop Property name
  		 * @returns {boolean} `true` if considered to be present, otherwise `false`
  		 */
  		util.isSet = function isSet(obj, prop) {
  		    var value = obj[prop];
  		    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
  		        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
  		    return false;
  		};

  		/**
  		 * Any compatible Buffer instance.
  		 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
  		 * @interface Buffer
  		 * @extends Uint8Array
  		 */

  		/**
  		 * Node's Buffer class if available.
  		 * @type {Constructor<Buffer>}
  		 */
  		util.Buffer = (function() {
  		    try {
  		        var Buffer = util.inquire("buffer").Buffer;
  		        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
  		        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
  		    } catch (e) {
  		        /* istanbul ignore next */
  		        return null;
  		    }
  		})();

  		// Internal alias of or polyfull for Buffer.from.
  		util._Buffer_from = null;

  		// Internal alias of or polyfill for Buffer.allocUnsafe.
  		util._Buffer_allocUnsafe = null;

  		/**
  		 * Creates a new buffer of whatever type supported by the environment.
  		 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
  		 * @returns {Uint8Array|Buffer} Buffer
  		 */
  		util.newBuffer = function newBuffer(sizeOrArray) {
  		    /* istanbul ignore next */
  		    return typeof sizeOrArray === "number"
  		        ? util.Buffer
  		            ? util._Buffer_allocUnsafe(sizeOrArray)
  		            : new util.Array(sizeOrArray)
  		        : util.Buffer
  		            ? util._Buffer_from(sizeOrArray)
  		            : typeof Uint8Array === "undefined"
  		                ? sizeOrArray
  		                : new Uint8Array(sizeOrArray);
  		};

  		/**
  		 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
  		 * @type {Constructor<Uint8Array>}
  		 */
  		util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

  		/**
  		 * Any compatible Long instance.
  		 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
  		 * @interface Long
  		 * @property {number} low Low bits
  		 * @property {number} high High bits
  		 * @property {boolean} unsigned Whether unsigned or not
  		 */

  		/**
  		 * Long.js's Long class if available.
  		 * @type {Constructor<Long>}
  		 */
  		util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
  		         || /* istanbul ignore next */ util.global.Long
  		         || util.inquire("long");

  		/**
  		 * Regular expression used to verify 2 bit (`bool`) map keys.
  		 * @type {RegExp}
  		 * @const
  		 */
  		util.key2Re = /^true|false|0|1$/;

  		/**
  		 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
  		 * @type {RegExp}
  		 * @const
  		 */
  		util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

  		/**
  		 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
  		 * @type {RegExp}
  		 * @const
  		 */
  		util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

  		/**
  		 * Converts a number or long to an 8 characters long hash string.
  		 * @param {Long|number} value Value to convert
  		 * @returns {string} Hash
  		 */
  		util.longToHash = function longToHash(value) {
  		    return value
  		        ? util.LongBits.from(value).toHash()
  		        : util.LongBits.zeroHash;
  		};

  		/**
  		 * Converts an 8 characters long hash string to a long or number.
  		 * @param {string} hash Hash
  		 * @param {boolean} [unsigned=false] Whether unsigned or not
  		 * @returns {Long|number} Original value
  		 */
  		util.longFromHash = function longFromHash(hash, unsigned) {
  		    var bits = util.LongBits.fromHash(hash);
  		    if (util.Long)
  		        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
  		    return bits.toNumber(Boolean(unsigned));
  		};

  		/**
  		 * Merges the properties of the source object into the destination object.
  		 * @memberof util
  		 * @param {Object.<string,*>} dst Destination object
  		 * @param {Object.<string,*>} src Source object
  		 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
  		 * @returns {Object.<string,*>} Destination object
  		 */
  		function merge(dst, src, ifNotSet) { // used by converters
  		    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
  		        if (dst[keys[i]] === undefined || !ifNotSet)
  		            dst[keys[i]] = src[keys[i]];
  		    return dst;
  		}

  		util.merge = merge;

  		/**
  		 * Converts the first character of a string to lower case.
  		 * @param {string} str String to convert
  		 * @returns {string} Converted string
  		 */
  		util.lcFirst = function lcFirst(str) {
  		    return str.charAt(0).toLowerCase() + str.substring(1);
  		};

  		/**
  		 * Creates a custom error constructor.
  		 * @memberof util
  		 * @param {string} name Error name
  		 * @returns {Constructor<Error>} Custom error constructor
  		 */
  		function newError(name) {

  		    function CustomError(message, properties) {

  		        if (!(this instanceof CustomError))
  		            return new CustomError(message, properties);

  		        // Error.call(this, message);
  		        // ^ just returns a new error instance because the ctor can be called as a function

  		        Object.defineProperty(this, "message", { get: function() { return message; } });

  		        /* istanbul ignore next */
  		        if (Error.captureStackTrace) // node
  		            Error.captureStackTrace(this, CustomError);
  		        else
  		            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

  		        if (properties)
  		            merge(this, properties);
  		    }

  		    CustomError.prototype = Object.create(Error.prototype, {
  		        constructor: {
  		            value: CustomError,
  		            writable: true,
  		            enumerable: false,
  		            configurable: true,
  		        },
  		        name: {
  		            get: function get() { return name; },
  		            set: undefined,
  		            enumerable: false,
  		            // configurable: false would accurately preserve the behavior of
  		            // the original, but I'm guessing that was not intentional.
  		            // For an actual error subclass, this property would
  		            // be configurable.
  		            configurable: true,
  		        },
  		        toString: {
  		            value: function value() { return this.name + ": " + this.message; },
  		            writable: true,
  		            enumerable: false,
  		            configurable: true,
  		        },
  		    });

  		    return CustomError;
  		}

  		util.newError = newError;

  		/**
  		 * Constructs a new protocol error.
  		 * @classdesc Error subclass indicating a protocol specifc error.
  		 * @memberof util
  		 * @extends Error
  		 * @template T extends Message<T>
  		 * @constructor
  		 * @param {string} message Error message
  		 * @param {Object.<string,*>} [properties] Additional properties
  		 * @example
  		 * try {
  		 *     MyMessage.decode(someBuffer); // throws if required fields are missing
  		 * } catch (e) {
  		 *     if (e instanceof ProtocolError && e.instance)
  		 *         console.log("decoded so far: " + JSON.stringify(e.instance));
  		 * }
  		 */
  		util.ProtocolError = newError("ProtocolError");

  		/**
  		 * So far decoded message instance.
  		 * @name util.ProtocolError#instance
  		 * @type {Message<T>}
  		 */

  		/**
  		 * A OneOf getter as returned by {@link util.oneOfGetter}.
  		 * @typedef OneOfGetter
  		 * @type {function}
  		 * @returns {string|undefined} Set field name, if any
  		 */

  		/**
  		 * Builds a getter for a oneof's present field name.
  		 * @param {string[]} fieldNames Field names
  		 * @returns {OneOfGetter} Unbound getter
  		 */
  		util.oneOfGetter = function getOneOf(fieldNames) {
  		    var fieldMap = {};
  		    for (var i = 0; i < fieldNames.length; ++i)
  		        fieldMap[fieldNames[i]] = 1;

  		    /**
  		     * @returns {string|undefined} Set field name, if any
  		     * @this Object
  		     * @ignore
  		     */
  		    return function() { // eslint-disable-line consistent-return
  		        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
  		            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
  		                return keys[i];
  		    };
  		};

  		/**
  		 * A OneOf setter as returned by {@link util.oneOfSetter}.
  		 * @typedef OneOfSetter
  		 * @type {function}
  		 * @param {string|undefined} value Field name
  		 * @returns {undefined}
  		 */

  		/**
  		 * Builds a setter for a oneof's present field name.
  		 * @param {string[]} fieldNames Field names
  		 * @returns {OneOfSetter} Unbound setter
  		 */
  		util.oneOfSetter = function setOneOf(fieldNames) {

  		    /**
  		     * @param {string} name Field name
  		     * @returns {undefined}
  		     * @this Object
  		     * @ignore
  		     */
  		    return function(name) {
  		        for (var i = 0; i < fieldNames.length; ++i)
  		            if (fieldNames[i] !== name)
  		                delete this[fieldNames[i]];
  		    };
  		};

  		/**
  		 * Default conversion options used for {@link Message#toJSON} implementations.
  		 *
  		 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
  		 *
  		 * - Longs become strings
  		 * - Enums become string keys
  		 * - Bytes become base64 encoded strings
  		 * - (Sub-)Messages become plain objects
  		 * - Maps become plain objects with all string keys
  		 * - Repeated fields become arrays
  		 * - NaN and Infinity for float and double fields become strings
  		 *
  		 * @type {IConversionOptions}
  		 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
  		 */
  		util.toJSONOptions = {
  		    longs: String,
  		    enums: String,
  		    bytes: String,
  		    json: true
  		};

  		// Sets up buffer utility according to the environment (called in index-minimal)
  		util._configure = function() {
  		    var Buffer = util.Buffer;
  		    /* istanbul ignore if */
  		    if (!Buffer) {
  		        util._Buffer_from = util._Buffer_allocUnsafe = null;
  		        return;
  		    }
  		    // because node 4.x buffers are incompatible & immutable
  		    // see: https://github.com/dcodeIO/protobuf.js/pull/665
  		    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
  		        /* istanbul ignore next */
  		        function Buffer_from(value, encoding) {
  		            return new Buffer(value, encoding);
  		        };
  		    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
  		        /* istanbul ignore next */
  		        function Buffer_allocUnsafe(size) {
  		            return new Buffer(size);
  		        };
  		}; 
  	} (minimal$2));
  	return minimal$2;
  }

  var reader$3 = Reader$3;

  var util$9      = requireMinimal$1();

  var BufferReader$3; // cyclic

  var LongBits$4  = util$9.LongBits,
      utf8$3      = util$9.utf8;

  /* istanbul ignore next */
  function indexOutOfRange$1(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
  }

  /**
   * Constructs a new reader instance using the specified buffer.
   * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
   * @constructor
   * @param {Uint8Array} buffer Buffer to read from
   */
  function Reader$3(buffer) {

      /**
       * Read buffer.
       * @type {Uint8Array}
       */
      this.buf = buffer;

      /**
       * Read buffer position.
       * @type {number}
       */
      this.pos = 0;

      /**
       * Read buffer length.
       * @type {number}
       */
      this.len = buffer.length;
  }

  var create_array$1 = typeof Uint8Array !== "undefined"
      ? function create_typed_array(buffer) {
          if (buffer instanceof Uint8Array || Array.isArray(buffer))
              return new Reader$3(buffer);
          throw Error("illegal buffer");
      }
      /* istanbul ignore next */
      : function create_array(buffer) {
          if (Array.isArray(buffer))
              return new Reader$3(buffer);
          throw Error("illegal buffer");
      };

  var create$3 = function create() {
      return util$9.Buffer
          ? function create_buffer_setup(buffer) {
              return (Reader$3.create = function create_buffer(buffer) {
                  return util$9.Buffer.isBuffer(buffer)
                      ? new BufferReader$3(buffer)
                      /* istanbul ignore next */
                      : create_array$1(buffer);
              })(buffer);
          }
          /* istanbul ignore next */
          : create_array$1;
  };

  /**
   * Creates a new reader using the specified buffer.
   * @function
   * @param {Uint8Array|Buffer} buffer Buffer to read from
   * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
   * @throws {Error} If `buffer` is not a valid buffer
   */
  Reader$3.create = create$3();

  Reader$3.prototype._slice = util$9.Array.prototype.subarray || /* istanbul ignore next */ util$9.Array.prototype.slice;

  /**
   * Reads a varint as an unsigned 32 bit value.
   * @function
   * @returns {number} Value read
   */
  Reader$3.prototype.uint32 = (function read_uint32_setup() {
      var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
      return function read_uint32() {
          value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

          /* istanbul ignore if */
          if ((this.pos += 5) > this.len) {
              this.pos = this.len;
              throw indexOutOfRange$1(this, 10);
          }
          return value;
      };
  })();

  /**
   * Reads a varint as a signed 32 bit value.
   * @returns {number} Value read
   */
  Reader$3.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
  };

  /**
   * Reads a zig-zag encoded varint as a signed 32 bit value.
   * @returns {number} Value read
   */
  Reader$3.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
  };

  /* eslint-disable no-invalid-this */

  function readLongVarint$1() {
      // tends to deopt with local vars for octet etc.
      var bits = new LongBits$4(0, 0);
      var i = 0;
      if (this.len - this.pos > 4) { // fast route (lo)
          for (; i < 4; ++i) {
              // 1st..4th
              bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
              if (this.buf[this.pos++] < 128)
                  return bits;
          }
          // 5th
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
          if (this.buf[this.pos++] < 128)
              return bits;
          i = 0;
      } else {
          for (; i < 3; ++i) {
              /* istanbul ignore if */
              if (this.pos >= this.len)
                  throw indexOutOfRange$1(this);
              // 1st..3th
              bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
              if (this.buf[this.pos++] < 128)
                  return bits;
          }
          // 4th
          bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
          return bits;
      }
      if (this.len - this.pos > 4) { // fast route (hi)
          for (; i < 5; ++i) {
              // 6th..10th
              bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
              if (this.buf[this.pos++] < 128)
                  return bits;
          }
      } else {
          for (; i < 5; ++i) {
              /* istanbul ignore if */
              if (this.pos >= this.len)
                  throw indexOutOfRange$1(this);
              // 6th..10th
              bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
              if (this.buf[this.pos++] < 128)
                  return bits;
          }
      }
      /* istanbul ignore next */
      throw Error("invalid varint encoding");
  }

  /* eslint-enable no-invalid-this */

  /**
   * Reads a varint as a signed 64 bit value.
   * @name Reader#int64
   * @function
   * @returns {Long} Value read
   */

  /**
   * Reads a varint as an unsigned 64 bit value.
   * @name Reader#uint64
   * @function
   * @returns {Long} Value read
   */

  /**
   * Reads a zig-zag encoded varint as a signed 64 bit value.
   * @name Reader#sint64
   * @function
   * @returns {Long} Value read
   */

  /**
   * Reads a varint as a boolean.
   * @returns {boolean} Value read
   */
  Reader$3.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
  };

  function readFixed32_end$1(buf, end) { // note that this uses `end`, not `pos`
      return (buf[end - 4]
            | buf[end - 3] << 8
            | buf[end - 2] << 16
            | buf[end - 1] << 24) >>> 0;
  }

  /**
   * Reads fixed 32 bits as an unsigned 32 bit integer.
   * @returns {number} Value read
   */
  Reader$3.prototype.fixed32 = function read_fixed32() {

      /* istanbul ignore if */
      if (this.pos + 4 > this.len)
          throw indexOutOfRange$1(this, 4);

      return readFixed32_end$1(this.buf, this.pos += 4);
  };

  /**
   * Reads fixed 32 bits as a signed 32 bit integer.
   * @returns {number} Value read
   */
  Reader$3.prototype.sfixed32 = function read_sfixed32() {

      /* istanbul ignore if */
      if (this.pos + 4 > this.len)
          throw indexOutOfRange$1(this, 4);

      return readFixed32_end$1(this.buf, this.pos += 4) | 0;
  };

  /* eslint-disable no-invalid-this */

  function readFixed64$1(/* this: Reader */) {

      /* istanbul ignore if */
      if (this.pos + 8 > this.len)
          throw indexOutOfRange$1(this, 8);

      return new LongBits$4(readFixed32_end$1(this.buf, this.pos += 4), readFixed32_end$1(this.buf, this.pos += 4));
  }

  /* eslint-enable no-invalid-this */

  /**
   * Reads fixed 64 bits.
   * @name Reader#fixed64
   * @function
   * @returns {Long} Value read
   */

  /**
   * Reads zig-zag encoded fixed 64 bits.
   * @name Reader#sfixed64
   * @function
   * @returns {Long} Value read
   */

  /**
   * Reads a float (32 bit) as a number.
   * @function
   * @returns {number} Value read
   */
  Reader$3.prototype.float = function read_float() {

      /* istanbul ignore if */
      if (this.pos + 4 > this.len)
          throw indexOutOfRange$1(this, 4);

      var value = util$9.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
  };

  /**
   * Reads a double (64 bit float) as a number.
   * @function
   * @returns {number} Value read
   */
  Reader$3.prototype.double = function read_double() {

      /* istanbul ignore if */
      if (this.pos + 8 > this.len)
          throw indexOutOfRange$1(this, 4);

      var value = util$9.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
  };

  /**
   * Reads a sequence of bytes preceeded by its length as a varint.
   * @returns {Uint8Array} Value read
   */
  Reader$3.prototype.bytes = function read_bytes() {
      var length = this.uint32(),
          start  = this.pos,
          end    = this.pos + length;

      /* istanbul ignore if */
      if (end > this.len)
          throw indexOutOfRange$1(this, length);

      this.pos += length;
      if (Array.isArray(this.buf)) // plain array
          return this.buf.slice(start, end);
      return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
          ? new this.buf.constructor(0)
          : this._slice.call(this.buf, start, end);
  };

  /**
   * Reads a string preceeded by its byte length as a varint.
   * @returns {string} Value read
   */
  Reader$3.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf8$3.read(bytes, 0, bytes.length);
  };

  /**
   * Skips the specified number of bytes if specified, otherwise skips a varint.
   * @param {number} [length] Length if known, otherwise a varint is assumed
   * @returns {Reader} `this`
   */
  Reader$3.prototype.skip = function skip(length) {
      if (typeof length === "number") {
          /* istanbul ignore if */
          if (this.pos + length > this.len)
              throw indexOutOfRange$1(this, length);
          this.pos += length;
      } else {
          do {
              /* istanbul ignore if */
              if (this.pos >= this.len)
                  throw indexOutOfRange$1(this);
          } while (this.buf[this.pos++] & 128);
      }
      return this;
  };

  /**
   * Skips the next element of the specified wire type.
   * @param {number} wireType Wire type received
   * @returns {Reader} `this`
   */
  Reader$3.prototype.skipType = function(wireType) {
      switch (wireType) {
          case 0:
              this.skip();
              break;
          case 1:
              this.skip(8);
              break;
          case 2:
              this.skip(this.uint32());
              break;
          case 3:
              while ((wireType = this.uint32() & 7) !== 4) {
                  this.skipType(wireType);
              }
              break;
          case 5:
              this.skip(4);
              break;

          /* istanbul ignore next */
          default:
              throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
  };

  Reader$3._configure = function(BufferReader_) {
      BufferReader$3 = BufferReader_;
      Reader$3.create = create$3();
      BufferReader$3._configure();

      var fn = util$9.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
      util$9.merge(Reader$3.prototype, {

          int64: function read_int64() {
              return readLongVarint$1.call(this)[fn](false);
          },

          uint64: function read_uint64() {
              return readLongVarint$1.call(this)[fn](true);
          },

          sint64: function read_sint64() {
              return readLongVarint$1.call(this).zzDecode()[fn](false);
          },

          fixed64: function read_fixed64() {
              return readFixed64$1.call(this)[fn](true);
          },

          sfixed64: function read_sfixed64() {
              return readFixed64$1.call(this)[fn](false);
          }

      });
  };

  var ReaderClass = /*@__PURE__*/getDefaultExportFromCjs(reader$3);

  var reader_buffer$1 = BufferReader$2;

  // extends Reader
  var Reader$2 = reader$3;
  (BufferReader$2.prototype = Object.create(Reader$2.prototype)).constructor = BufferReader$2;

  var util$8 = requireMinimal$1();

  /**
   * Constructs a new buffer reader instance.
   * @classdesc Wire format reader using node buffers.
   * @extends Reader
   * @constructor
   * @param {Buffer} buffer Buffer to read from
   */
  function BufferReader$2(buffer) {
      Reader$2.call(this, buffer);

      /**
       * Read buffer.
       * @name BufferReader#buf
       * @type {Buffer}
       */
  }

  BufferReader$2._configure = function () {
      /* istanbul ignore else */
      if (util$8.Buffer)
          BufferReader$2.prototype._slice = util$8.Buffer.prototype.slice;
  };


  /**
   * @override
   */
  BufferReader$2.prototype.string = function read_string_buffer() {
      var len = this.uint32(); // modifies pos
      return this.buf.utf8Slice
          ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
          : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
  };

  /**
   * Reads a sequence of bytes preceeded by its length as a varint.
   * @name BufferReader#bytes
   * @function
   * @returns {Buffer} Value read
   */

  BufferReader$2._configure();

  var ReaderBufferClass = /*@__PURE__*/getDefaultExportFromCjs(reader_buffer$1);

  var minimalExports = requireMinimal$1();
  var util$7 = /*@__PURE__*/getDefaultExportFromCjs(minimalExports);

  var writer$2 = Writer$3;

  var util$6      = requireMinimal$1();

  var BufferWriter$3; // cyclic

  var LongBits$3  = util$6.LongBits,
      base64$1    = util$6.base64,
      utf8$2      = util$6.utf8;

  /**
   * Constructs a new writer operation instance.
   * @classdesc Scheduled writer operation.
   * @constructor
   * @param {function(*, Uint8Array, number)} fn Function to call
   * @param {number} len Value byte length
   * @param {*} val Value to write
   * @ignore
   */
  function Op$1(fn, len, val) {

      /**
       * Function to call.
       * @type {function(Uint8Array, number, *)}
       */
      this.fn = fn;

      /**
       * Value byte length.
       * @type {number}
       */
      this.len = len;

      /**
       * Next operation.
       * @type {Writer.Op|undefined}
       */
      this.next = undefined;

      /**
       * Value to write.
       * @type {*}
       */
      this.val = val; // type varies
  }

  /* istanbul ignore next */
  function noop$2() {} // eslint-disable-line no-empty-function

  /**
   * Constructs a new writer state instance.
   * @classdesc Copied writer state.
   * @memberof Writer
   * @constructor
   * @param {Writer} writer Writer to copy state from
   * @ignore
   */
  function State$1(writer) {

      /**
       * Current head.
       * @type {Writer.Op}
       */
      this.head = writer.head;

      /**
       * Current tail.
       * @type {Writer.Op}
       */
      this.tail = writer.tail;

      /**
       * Current buffer length.
       * @type {number}
       */
      this.len = writer.len;

      /**
       * Next state.
       * @type {State|null}
       */
      this.next = writer.states;
  }

  /**
   * Constructs a new writer instance.
   * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
   * @constructor
   */
  function Writer$3() {

      /**
       * Current length.
       * @type {number}
       */
      this.len = 0;

      /**
       * Operations head.
       * @type {Object}
       */
      this.head = new Op$1(noop$2, 0, 0);

      /**
       * Operations tail
       * @type {Object}
       */
      this.tail = this.head;

      /**
       * Linked forked states.
       * @type {Object|null}
       */
      this.states = null;

      // When a value is written, the writer calculates its byte length and puts it into a linked
      // list of operations to perform when finish() is called. This both allows us to allocate
      // buffers of the exact required size and reduces the amount of work we have to do compared
      // to first calculating over objects and then encoding over objects. In our case, the encoding
      // part is just a linked list walk calling operations with already prepared values.
  }

  var create$2 = function create() {
      return util$6.Buffer
          ? function create_buffer_setup() {
              return (Writer$3.create = function create_buffer() {
                  return new BufferWriter$3();
              })();
          }
          /* istanbul ignore next */
          : function create_array() {
              return new Writer$3();
          };
  };

  /**
   * Creates a new writer.
   * @function
   * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
   */
  Writer$3.create = create$2();

  /**
   * Allocates a buffer of the specified size.
   * @param {number} size Buffer size
   * @returns {Uint8Array} Buffer
   */
  Writer$3.alloc = function alloc(size) {
      return new util$6.Array(size);
  };

  // Use Uint8Array buffer pool in the browser, just like node does with buffers
  /* istanbul ignore else */
  if (util$6.Array !== Array)
      Writer$3.alloc = util$6.pool(Writer$3.alloc, util$6.Array.prototype.subarray);

  /**
   * Pushes a new operation to the queue.
   * @param {function(Uint8Array, number, *)} fn Function to call
   * @param {number} len Value byte length
   * @param {number} val Value to write
   * @returns {Writer} `this`
   * @private
   */
  Writer$3.prototype._push = function push(fn, len, val) {
      this.tail = this.tail.next = new Op$1(fn, len, val);
      this.len += len;
      return this;
  };

  function writeByte$1(val, buf, pos) {
      buf[pos] = val & 255;
  }

  function writeVarint32$1(val, buf, pos) {
      while (val > 127) {
          buf[pos++] = val & 127 | 128;
          val >>>= 7;
      }
      buf[pos] = val;
  }

  /**
   * Constructs a new varint writer operation instance.
   * @classdesc Scheduled varint writer operation.
   * @extends Op
   * @constructor
   * @param {number} len Value byte length
   * @param {number} val Value to write
   * @ignore
   */
  function VarintOp$1(len, val) {
      this.len = len;
      this.next = undefined;
      this.val = val;
  }

  VarintOp$1.prototype = Object.create(Op$1.prototype);
  VarintOp$1.prototype.fn = writeVarint32$1;

  /**
   * Writes an unsigned 32 bit value as a varint.
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$3.prototype.uint32 = function write_uint32(value) {
      // here, the call to this.push has been inlined and a varint specific Op subclass is used.
      // uint32 is by far the most frequently used operation and benefits significantly from this.
      this.len += (this.tail = this.tail.next = new VarintOp$1(
          (value = value >>> 0)
                  < 128       ? 1
          : value < 16384     ? 2
          : value < 2097152   ? 3
          : value < 268435456 ? 4
          :                     5,
      value)).len;
      return this;
  };

  /**
   * Writes a signed 32 bit value as a varint.
   * @function
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$3.prototype.int32 = function write_int32(value) {
      return value < 0
          ? this._push(writeVarint64$1, 10, LongBits$3.fromNumber(value)) // 10 bytes per spec
          : this.uint32(value);
  };

  /**
   * Writes a 32 bit value as a varint, zig-zag encoded.
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$3.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
  };

  function writeVarint64$1(val, buf, pos) {
      while (val.hi) {
          buf[pos++] = val.lo & 127 | 128;
          val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
          val.hi >>>= 7;
      }
      while (val.lo > 127) {
          buf[pos++] = val.lo & 127 | 128;
          val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
  }

  /**
   * Writes an unsigned 64 bit value as a varint.
   * @param {Long|number|string} value Value to write
   * @returns {Writer} `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  Writer$3.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits$3.from(value);
      return this._push(writeVarint64$1, bits.length(), bits);
  };

  /**
   * Writes a signed 64 bit value as a varint.
   * @function
   * @param {Long|number|string} value Value to write
   * @returns {Writer} `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  Writer$3.prototype.int64 = Writer$3.prototype.uint64;

  /**
   * Writes a signed 64 bit value as a varint, zig-zag encoded.
   * @param {Long|number|string} value Value to write
   * @returns {Writer} `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  Writer$3.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits$3.from(value).zzEncode();
      return this._push(writeVarint64$1, bits.length(), bits);
  };

  /**
   * Writes a boolish value as a varint.
   * @param {boolean} value Value to write
   * @returns {Writer} `this`
   */
  Writer$3.prototype.bool = function write_bool(value) {
      return this._push(writeByte$1, 1, value ? 1 : 0);
  };

  function writeFixed32$1(val, buf, pos) {
      buf[pos    ] =  val         & 255;
      buf[pos + 1] =  val >>> 8   & 255;
      buf[pos + 2] =  val >>> 16  & 255;
      buf[pos + 3] =  val >>> 24;
  }

  /**
   * Writes an unsigned 32 bit value as fixed 32 bits.
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$3.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32$1, 4, value >>> 0);
  };

  /**
   * Writes a signed 32 bit value as fixed 32 bits.
   * @function
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$3.prototype.sfixed32 = Writer$3.prototype.fixed32;

  /**
   * Writes an unsigned 64 bit value as fixed 64 bits.
   * @param {Long|number|string} value Value to write
   * @returns {Writer} `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  Writer$3.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits$3.from(value);
      return this._push(writeFixed32$1, 4, bits.lo)._push(writeFixed32$1, 4, bits.hi);
  };

  /**
   * Writes a signed 64 bit value as fixed 64 bits.
   * @function
   * @param {Long|number|string} value Value to write
   * @returns {Writer} `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  Writer$3.prototype.sfixed64 = Writer$3.prototype.fixed64;

  /**
   * Writes a float (32 bit).
   * @function
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$3.prototype.float = function write_float(value) {
      return this._push(util$6.float.writeFloatLE, 4, value);
  };

  /**
   * Writes a double (64 bit float).
   * @function
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$3.prototype.double = function write_double(value) {
      return this._push(util$6.float.writeDoubleLE, 8, value);
  };

  var writeBytes$1 = util$6.Array.prototype.set
      ? function writeBytes_set(val, buf, pos) {
          buf.set(val, pos); // also works for plain array values
      }
      /* istanbul ignore next */
      : function writeBytes_for(val, buf, pos) {
          for (var i = 0; i < val.length; ++i)
              buf[pos + i] = val[i];
      };

  /**
   * Writes a sequence of bytes.
   * @param {Uint8Array|string} value Buffer or base64 encoded string to write
   * @returns {Writer} `this`
   */
  Writer$3.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
          return this._push(writeByte$1, 1, 0);
      if (util$6.isString(value)) {
          var buf = Writer$3.alloc(len = base64$1.length(value));
          base64$1.decode(value, buf, 0);
          value = buf;
      }
      return this.uint32(len)._push(writeBytes$1, len, value);
  };

  /**
   * Writes a string.
   * @param {string} value Value to write
   * @returns {Writer} `this`
   */
  Writer$3.prototype.string = function write_string(value) {
      var len = utf8$2.length(value);
      return len
          ? this.uint32(len)._push(utf8$2.write, len, value)
          : this._push(writeByte$1, 1, 0);
  };

  /**
   * Forks this writer's state by pushing it to a stack.
   * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
   * @returns {Writer} `this`
   */
  Writer$3.prototype.fork = function fork() {
      this.states = new State$1(this);
      this.head = this.tail = new Op$1(noop$2, 0, 0);
      this.len = 0;
      return this;
  };

  /**
   * Resets this instance to the last state.
   * @returns {Writer} `this`
   */
  Writer$3.prototype.reset = function reset() {
      if (this.states) {
          this.head   = this.states.head;
          this.tail   = this.states.tail;
          this.len    = this.states.len;
          this.states = this.states.next;
      } else {
          this.head = this.tail = new Op$1(noop$2, 0, 0);
          this.len  = 0;
      }
      return this;
  };

  /**
   * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
   * @returns {Writer} `this`
   */
  Writer$3.prototype.ldelim = function ldelim() {
      var head = this.head,
          tail = this.tail,
          len  = this.len;
      this.reset().uint32(len);
      if (len) {
          this.tail.next = head.next; // skip noop
          this.tail = tail;
          this.len += len;
      }
      return this;
  };

  /**
   * Finishes the write operation.
   * @returns {Uint8Array} Finished buffer
   */
  Writer$3.prototype.finish = function finish() {
      var head = this.head.next, // skip noop
          buf  = this.constructor.alloc(this.len),
          pos  = 0;
      while (head) {
          head.fn(head.val, buf, pos);
          pos += head.len;
          head = head.next;
      }
      // this.head = this.tail = null;
      return buf;
  };

  Writer$3._configure = function(BufferWriter_) {
      BufferWriter$3 = BufferWriter_;
      Writer$3.create = create$2();
      BufferWriter$3._configure();
  };

  var WriterClass = /*@__PURE__*/getDefaultExportFromCjs(writer$2);

  var writer_buffer$1 = BufferWriter$2;

  // extends Writer
  var Writer$2 = writer$2;
  (BufferWriter$2.prototype = Object.create(Writer$2.prototype)).constructor = BufferWriter$2;

  var util$5 = requireMinimal$1();

  /**
   * Constructs a new buffer writer instance.
   * @classdesc Wire format writer using node buffers.
   * @extends Writer
   * @constructor
   */
  function BufferWriter$2() {
      Writer$2.call(this);
  }

  BufferWriter$2._configure = function () {
      /**
       * Allocates a buffer of the specified size.
       * @function
       * @param {number} size Buffer size
       * @returns {Buffer} Buffer
       */
      BufferWriter$2.alloc = util$5._Buffer_allocUnsafe;

      BufferWriter$2.writeBytesBuffer = util$5.Buffer && util$5.Buffer.prototype instanceof Uint8Array && util$5.Buffer.prototype.set.name === "set"
          ? function writeBytesBuffer_set(val, buf, pos) {
            buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
            // also works for plain array values
          }
          /* istanbul ignore next */
          : function writeBytesBuffer_copy(val, buf, pos) {
            if (val.copy) // Buffer values
              val.copy(buf, pos, 0, val.length);
            else for (var i = 0; i < val.length;) // plain array values
              buf[pos++] = val[i++];
          };
  };


  /**
   * @override
   */
  BufferWriter$2.prototype.bytes = function write_bytes_buffer(value) {
      if (util$5.isString(value))
          value = util$5._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
          this._push(BufferWriter$2.writeBytesBuffer, len, value);
      return this;
  };

  function writeStringBuffer$1(val, buf, pos) {
      if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
          util$5.utf8.write(val, buf, pos);
      else if (buf.utf8Write)
          buf.utf8Write(val, pos);
      else
          buf.write(val, pos);
  }

  /**
   * @override
   */
  BufferWriter$2.prototype.string = function write_string_buffer(value) {
      var len = util$5.Buffer.byteLength(value);
      this.uint32(len);
      if (len)
          this._push(writeStringBuffer$1, len, value);
      return this;
  };


  /**
   * Finishes the write operation.
   * @name BufferWriter#finish
   * @function
   * @returns {Buffer} Finished buffer
   */

  BufferWriter$2._configure();

  var WriterBufferClass = /*@__PURE__*/getDefaultExportFromCjs(writer_buffer$1);

  // @ts-expect-error no types
  function configure() {
      util$7._configure();
      ReaderClass._configure(ReaderBufferClass);
      WriterClass._configure(WriterBufferClass);
  }
  // Set up buffer utility according to the environment
  configure();
  // monkey patch the reader to add native bigint support
  const methods = [
      'uint64', 'int64', 'sint64', 'fixed64', 'sfixed64'
  ];
  function patchReader(obj) {
      for (const method of methods) {
          if (obj[method] == null) {
              continue;
          }
          const original = obj[method];
          obj[method] = function () {
              return BigInt(original.call(this).toString());
          };
      }
      return obj;
  }
  function reader$2(buf) {
      return patchReader(new ReaderClass(buf));
  }
  function patchWriter(obj) {
      for (const method of methods) {
          if (obj[method] == null) {
              continue;
          }
          const original = obj[method];
          obj[method] = function (val) {
              return original.call(this, val.toString());
          };
      }
      return obj;
  }
  function writer$1() {
      return patchWriter(WriterClass.create());
  }

  function decodeMessage$1(buf, codec) {
      const r = reader$2(buf instanceof Uint8Array ? buf : buf.subarray());
      return codec.decode(r);
  }

  function encodeMessage(message, codec) {
      const w = writer$1();
      codec.encode(message, w, {
          lengthDelimited: false
      });
      return w.finish();
  }

  // https://developers.google.com/protocol-buffers/docs/encoding#structure
  var CODEC_TYPES;
  (function (CODEC_TYPES) {
      CODEC_TYPES[CODEC_TYPES["VARINT"] = 0] = "VARINT";
      CODEC_TYPES[CODEC_TYPES["BIT64"] = 1] = "BIT64";
      CODEC_TYPES[CODEC_TYPES["LENGTH_DELIMITED"] = 2] = "LENGTH_DELIMITED";
      CODEC_TYPES[CODEC_TYPES["START_GROUP"] = 3] = "START_GROUP";
      CODEC_TYPES[CODEC_TYPES["END_GROUP"] = 4] = "END_GROUP";
      CODEC_TYPES[CODEC_TYPES["BIT32"] = 5] = "BIT32";
  })(CODEC_TYPES || (CODEC_TYPES = {}));
  function createCodec(name, type, encode, decode) {
      return {
          name,
          type,
          encode,
          decode
      };
  }

  function enumeration(v) {
      function findValue(val) {
          // Use the reverse mapping to look up the enum key for the stored value
          // https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings
          if (v[val.toString()] == null) {
              throw new Error('Invalid enum value');
          }
          return v[val];
      }
      const encode = function enumEncode(val, writer) {
          const enumValue = findValue(val);
          writer.int32(enumValue);
      };
      const decode = function enumDecode(reader) {
          const val = reader.int32();
          return findValue(val);
      };
      // @ts-expect-error yeah yeah
      return createCodec('enum', CODEC_TYPES.VARINT, encode, decode);
  }

  function message(encode, decode) {
      return createCodec('message', CODEC_TYPES.LENGTH_DELIMITED, encode, decode);
  }

  /* eslint-disable import/export */
  /* eslint-disable complexity */
  /* eslint-disable @typescript-eslint/no-namespace */
  /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
  /* eslint-disable @typescript-eslint/no-empty-interface */
  var KeyType;
  (function (KeyType) {
      KeyType["RSA"] = "RSA";
      KeyType["Ed25519"] = "Ed25519";
      KeyType["Secp256k1"] = "Secp256k1";
  })(KeyType || (KeyType = {}));
  var __KeyTypeValues;
  (function (__KeyTypeValues) {
      __KeyTypeValues[__KeyTypeValues["RSA"] = 0] = "RSA";
      __KeyTypeValues[__KeyTypeValues["Ed25519"] = 1] = "Ed25519";
      __KeyTypeValues[__KeyTypeValues["Secp256k1"] = 2] = "Secp256k1";
  })(__KeyTypeValues || (__KeyTypeValues = {}));
  (function (KeyType) {
      KeyType.codec = () => {
          return enumeration(__KeyTypeValues);
      };
  })(KeyType || (KeyType = {}));
  var PublicKey;
  (function (PublicKey) {
      let _codec;
      PublicKey.codec = () => {
          if (_codec == null) {
              _codec = message((obj, w, opts = {}) => {
                  if (opts.lengthDelimited !== false) {
                      w.fork();
                  }
                  if (obj.Type != null) {
                      w.uint32(8);
                      KeyType.codec().encode(obj.Type, w);
                  }
                  if (obj.Data != null) {
                      w.uint32(18);
                      w.bytes(obj.Data);
                  }
                  if (opts.lengthDelimited !== false) {
                      w.ldelim();
                  }
              }, (reader, length) => {
                  const obj = {};
                  const end = length == null ? reader.len : reader.pos + length;
                  while (reader.pos < end) {
                      const tag = reader.uint32();
                      switch (tag >>> 3) {
                          case 1:
                              obj.Type = KeyType.codec().decode(reader);
                              break;
                          case 2:
                              obj.Data = reader.bytes();
                              break;
                          default:
                              reader.skipType(tag & 7);
                              break;
                      }
                  }
                  return obj;
              });
          }
          return _codec;
      };
      PublicKey.encode = (obj) => {
          return encodeMessage(obj, PublicKey.codec());
      };
      PublicKey.decode = (buf) => {
          return decodeMessage$1(buf, PublicKey.codec());
      };
  })(PublicKey || (PublicKey = {}));
  var PrivateKey;
  (function (PrivateKey) {
      let _codec;
      PrivateKey.codec = () => {
          if (_codec == null) {
              _codec = message((obj, w, opts = {}) => {
                  if (opts.lengthDelimited !== false) {
                      w.fork();
                  }
                  if (obj.Type != null) {
                      w.uint32(8);
                      KeyType.codec().encode(obj.Type, w);
                  }
                  if (obj.Data != null) {
                      w.uint32(18);
                      w.bytes(obj.Data);
                  }
                  if (opts.lengthDelimited !== false) {
                      w.ldelim();
                  }
              }, (reader, length) => {
                  const obj = {};
                  const end = length == null ? reader.len : reader.pos + length;
                  while (reader.pos < end) {
                      const tag = reader.uint32();
                      switch (tag >>> 3) {
                          case 1:
                              obj.Type = KeyType.codec().decode(reader);
                              break;
                          case 2:
                              obj.Data = reader.bytes();
                              break;
                          default:
                              reader.skipType(tag & 7);
                              break;
                      }
                  }
                  return obj;
              });
          }
          return _codec;
      };
      PrivateKey.encode = (obj) => {
          return encodeMessage(obj, PrivateKey.codec());
      };
      PrivateKey.decode = (buf) => {
          return decodeMessage$1(buf, PrivateKey.codec());
      };
  })(PrivateKey || (PrivateKey = {}));

  class Ed25519PublicKey {
      _key;
      constructor(key) {
          this._key = ensureKey(key, PUBLIC_KEY_BYTE_LENGTH);
      }
      async verify(data, sig) {
          return hashAndVerify$2(this._key, sig, data);
      }
      marshal() {
          return this._key;
      }
      get bytes() {
          return PublicKey.encode({
              Type: KeyType.Ed25519,
              Data: this.marshal()
          }).subarray();
      }
      equals(key) {
          return equals(this.bytes, key.bytes);
      }
      async hash() {
          const { bytes } = await sha256.digest(this.bytes);
          return bytes;
      }
  }
  class Ed25519PrivateKey {
      _key;
      _publicKey;
      // key       - 64 byte Uint8Array containing private key
      // publicKey - 32 byte Uint8Array containing public key
      constructor(key, publicKey) {
          this._key = ensureKey(key, PRIVATE_KEY_BYTE_LENGTH);
          this._publicKey = ensureKey(publicKey, PUBLIC_KEY_BYTE_LENGTH);
      }
      async sign(message) {
          return hashAndSign$2(this._key, message);
      }
      get public() {
          return new Ed25519PublicKey(this._publicKey);
      }
      marshal() {
          return this._key;
      }
      get bytes() {
          return PrivateKey.encode({
              Type: KeyType.Ed25519,
              Data: this.marshal()
          }).subarray();
      }
      equals(key) {
          return equals(this.bytes, key.bytes);
      }
      async hash() {
          const { bytes } = await sha256.digest(this.bytes);
          return bytes;
      }
      /**
       * Gets the ID of the key.
       *
       * The key id is the base58 encoding of the identity multihash containing its public key.
       * The public key is a protobuf encoding containing a type and the DER encoding
       * of the PKCS SubjectPublicKeyInfo.
       *
       * @returns {Promise<string>}
       */
      async id() {
          const encoding = identity.digest(this.public.bytes);
          return base58btc.encode(encoding.bytes).substring(1);
      }
      /**
       * Exports the key into a password protected `format`
       */
      async export(password, format = 'libp2p-key') {
          if (format === 'libp2p-key') {
              return exporter(this.bytes, password);
          }
          else {
              throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');
          }
      }
  }
  function unmarshalEd25519PrivateKey(bytes) {
      // Try the old, redundant public key version
      if (bytes.length > PRIVATE_KEY_BYTE_LENGTH) {
          bytes = ensureKey(bytes, PRIVATE_KEY_BYTE_LENGTH + PUBLIC_KEY_BYTE_LENGTH);
          const privateKeyBytes = bytes.subarray(0, PRIVATE_KEY_BYTE_LENGTH);
          const publicKeyBytes = bytes.subarray(PRIVATE_KEY_BYTE_LENGTH, bytes.length);
          return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);
      }
      bytes = ensureKey(bytes, PRIVATE_KEY_BYTE_LENGTH);
      const privateKeyBytes = bytes.subarray(0, PRIVATE_KEY_BYTE_LENGTH);
      const publicKeyBytes = bytes.subarray(PUBLIC_KEY_BYTE_LENGTH);
      return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);
  }
  function unmarshalEd25519PublicKey(bytes) {
      bytes = ensureKey(bytes, PUBLIC_KEY_BYTE_LENGTH);
      return new Ed25519PublicKey(bytes);
  }
  async function generateKeyPair$3() {
      const { privateKey, publicKey } = await generateKey$2();
      return new Ed25519PrivateKey(privateKey, publicKey);
  }
  async function generateKeyPairFromSeed(seed) {
      const { privateKey, publicKey } = await generateKeyFromSeed(seed);
      return new Ed25519PrivateKey(privateKey, publicKey);
  }
  function ensureKey(key, length) {
      key = Uint8Array.from(key ?? []);
      if (key.length !== length) {
          throw new CodeError(`Key must be a Uint8Array of length ${length}, got ${key.length}`, 'ERR_INVALID_KEY_TYPE');
      }
      return key;
  }

  var Ed25519 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Ed25519PrivateKey: Ed25519PrivateKey,
    Ed25519PublicKey: Ed25519PublicKey,
    generateKeyPair: generateKeyPair$3,
    generateKeyPairFromSeed: generateKeyPairFromSeed,
    unmarshalEd25519PrivateKey: unmarshalEd25519PrivateKey,
    unmarshalEd25519PublicKey: unmarshalEd25519PublicKey
  });

  /**
   * Turns a `Uint8Array` into a string.
   *
   * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.
   *
   * Also `ascii` which is similar to node's 'binary' encoding.
   */
  function toString$1(array, encoding = 'utf8') {
      const base = BASES[encoding];
      if (base == null) {
          throw new Error(`Unsupported encoding "${encoding}"`);
      }
      if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {
          return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');
      }
      // strip multibase prefix
      return base.encoder.encode(array).substring(1);
  }

  function bigIntegerToUintBase64url(num, len) {
      // Call `.abs()` to convert to unsigned
      let buf = Uint8Array.from(num.abs().toByteArray()); // toByteArray converts to big endian
      // toByteArray() gives us back a signed array, which will include a leading 0
      // byte if the most significant bit of the number is 1:
      // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer
      // Our number will always be positive so we should remove the leading padding.
      buf = buf[0] === 0 ? buf.subarray(1) : buf;
      if (len != null) {
          if (buf.length > len)
              throw new Error('byte array longer than desired length');
          buf = concat([new Uint8Array(len - buf.length), buf]);
      }
      return toString$1(buf, 'base64url');
  }
  // Convert a base64url encoded string to a BigInteger
  function base64urlToBigInteger(str) {
      const buf = base64urlToBuffer(str);
      return new forge$n.jsbn.BigInteger(toString$1(buf, 'base16'), 16);
  }
  function base64urlToBuffer(str, len) {
      let buf = fromString$1(str, 'base64urlpad');
      if (len != null) {
          if (buf.length > len)
              throw new Error('byte array longer than desired length');
          buf = concat([new Uint8Array(len - buf.length), buf]);
      }
      return buf;
  }

  const bits = {
      'P-256': 256,
      'P-384': 384,
      'P-521': 521
  };
  const curveTypes = Object.keys(bits);
  curveTypes.join(' / ');

  /**
   * Attempts to decrypt a base64 encoded PrivateKey string
   * with the given password. The privateKey must have been exported
   * using the same password and underlying cipher (aes-gcm)
   */
  async function importer(privateKey, password) {
      const encryptedKey = base64$3.decode(privateKey);
      const cipher = create$4();
      return cipher.decrypt(encryptedKey, password);
  }

  /**
   * Secure Hash Algorithm with a 1024-bit block size implementation.
   *
   * This includes: SHA-512, SHA-384, SHA-512/224, and SHA-512/256. For
   * SHA-256 (block size 512 bits), see sha256.js.
   *
   * See FIPS 180-4 for details.
   *
   * @author Dave Longley
   *
   * Copyright (c) 2014-2015 Digital Bazaar, Inc.
   */

  var forge = forge$m;



  var sha512 = forge.sha512 = forge.sha512 || {};

  // SHA-512
  forge.md.sha512 = forge.md.algorithms.sha512 = sha512;

  // SHA-384
  var sha384 = forge.sha384 = forge.sha512.sha384 = forge.sha512.sha384 || {};
  sha384.create = function() {
    return sha512.create('SHA-384');
  };
  forge.md.sha384 = forge.md.algorithms.sha384 = sha384;

  // SHA-512/256
  forge.sha512.sha256 = forge.sha512.sha256 || {
    create: function() {
      return sha512.create('SHA-512/256');
    }
  };
  forge.md['sha512/256'] = forge.md.algorithms['sha512/256'] =
    forge.sha512.sha256;

  // SHA-512/224
  forge.sha512.sha224 = forge.sha512.sha224 || {
    create: function() {
      return sha512.create('SHA-512/224');
    }
  };
  forge.md['sha512/224'] = forge.md.algorithms['sha512/224'] =
    forge.sha512.sha224;

  /**
   * Creates a SHA-2 message digest object.
   *
   * @param algorithm the algorithm to use (SHA-512, SHA-384, SHA-512/224,
   *          SHA-512/256).
   *
   * @return a message digest object.
   */
  sha512.create = function(algorithm) {
    // do initialization as necessary
    if(!_initialized) {
      _init();
    }

    if(typeof algorithm === 'undefined') {
      algorithm = 'SHA-512';
    }

    if(!(algorithm in _states)) {
      throw new Error('Invalid SHA-512 algorithm: ' + algorithm);
    }

    // SHA-512 state contains eight 64-bit integers (each as two 32-bit ints)
    var _state = _states[algorithm];
    var _h = null;

    // input buffer
    var _input = forge.util.createBuffer();

    // used for 64-bit word storage
    var _w = new Array(80);
    for(var wi = 0; wi < 80; ++wi) {
      _w[wi] = new Array(2);
    }

    // determine digest length by algorithm name (default)
    var digestLength = 64;
    switch(algorithm) {
      case 'SHA-384':
        digestLength = 48;
        break;
      case 'SHA-512/256':
        digestLength = 32;
        break;
      case 'SHA-512/224':
        digestLength = 28;
        break;
    }

    // message digest object
    var md = {
      // SHA-512 => sha512
      algorithm: algorithm.replace('-', '').toLowerCase(),
      blockLength: 128,
      digestLength: digestLength,
      // 56-bit length of message so far (does not including padding)
      messageLength: 0,
      // true message length
      fullMessageLength: null,
      // size of message length in bytes
      messageLengthSize: 16
    };

    /**
     * Starts the digest.
     *
     * @return this digest object.
     */
    md.start = function() {
      // up to 56-bit message length for convenience
      md.messageLength = 0;

      // full message length (set md.messageLength128 for backwards-compatibility)
      md.fullMessageLength = md.messageLength128 = [];
      var int32s = md.messageLengthSize / 4;
      for(var i = 0; i < int32s; ++i) {
        md.fullMessageLength.push(0);
      }
      _input = forge.util.createBuffer();
      _h = new Array(_state.length);
      for(var i = 0; i < _state.length; ++i) {
        _h[i] = _state[i].slice(0);
      }
      return md;
    };
    // start digest automatically for first time
    md.start();

    /**
     * Updates the digest with the given message input. The given input can
     * treated as raw input (no encoding will be applied) or an encoding of
     * 'utf8' maybe given to encode the input using UTF-8.
     *
     * @param msg the message input to update with.
     * @param encoding the encoding to use (default: 'raw', other: 'utf8').
     *
     * @return this digest object.
     */
    md.update = function(msg, encoding) {
      if(encoding === 'utf8') {
        msg = forge.util.encodeUtf8(msg);
      }

      // update message length
      var len = msg.length;
      md.messageLength += len;
      len = [(len / 0x100000000) >>> 0, len >>> 0];
      for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
        md.fullMessageLength[i] += len[1];
        len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
        md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
        len[0] = ((len[1] / 0x100000000) >>> 0);
      }

      // add bytes to input buffer
      _input.putBytes(msg);

      // process bytes
      _update(_h, _w, _input);

      // compact input buffer every 2K or if empty
      if(_input.read > 2048 || _input.length() === 0) {
        _input.compact();
      }

      return md;
    };

    /**
     * Produces the digest.
     *
     * @return a byte buffer containing the digest value.
     */
    md.digest = function() {
      /* Note: Here we copy the remaining bytes in the input buffer and
      add the appropriate SHA-512 padding. Then we do the final update
      on a copy of the state so that if the user wants to get
      intermediate digests they can do so. */

      /* Determine the number of bytes that must be added to the message
      to ensure its length is congruent to 896 mod 1024. In other words,
      the data to be digested must be a multiple of 1024 bits (or 128 bytes).
      This data includes the message, some padding, and the length of the
      message. Since the length of the message will be encoded as 16 bytes (128
      bits), that means that the last segment of the data must have 112 bytes
      (896 bits) of message and padding. Therefore, the length of the message
      plus the padding must be congruent to 896 mod 1024 because
      1024 - 128 = 896.

      In order to fill up the message length it must be filled with
      padding that begins with 1 bit followed by all 0 bits. Padding
      must *always* be present, so if the message length is already
      congruent to 896 mod 1024, then 1024 padding bits must be added. */

      var finalBlock = forge.util.createBuffer();
      finalBlock.putBytes(_input.bytes());

      // compute remaining size to be digested (include message length size)
      var remaining = (
        md.fullMessageLength[md.fullMessageLength.length - 1] +
        md.messageLengthSize);

      // add padding for overflow blockSize - overflow
      // _padding starts with 1 byte with first bit is set (byte value 128), then
      // there may be up to (blockSize - 1) other pad bytes
      var overflow = remaining & (md.blockLength - 1);
      finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

      // serialize message length in bits in big-endian order; since length
      // is stored in bytes we multiply by 8 and add carry from next int
      var next, carry;
      var bits = md.fullMessageLength[0] * 8;
      for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {
        next = md.fullMessageLength[i + 1] * 8;
        carry = (next / 0x100000000) >>> 0;
        bits += carry;
        finalBlock.putInt32(bits >>> 0);
        bits = next >>> 0;
      }
      finalBlock.putInt32(bits);

      var h = new Array(_h.length);
      for(var i = 0; i < _h.length; ++i) {
        h[i] = _h[i].slice(0);
      }
      _update(h, _w, finalBlock);
      var rval = forge.util.createBuffer();
      var hlen;
      if(algorithm === 'SHA-512') {
        hlen = h.length;
      } else if(algorithm === 'SHA-384') {
        hlen = h.length - 2;
      } else {
        hlen = h.length - 4;
      }
      for(var i = 0; i < hlen; ++i) {
        rval.putInt32(h[i][0]);
        if(i !== hlen - 1 || algorithm !== 'SHA-512/224') {
          rval.putInt32(h[i][1]);
        }
      }
      return rval;
    };

    return md;
  };

  // sha-512 padding bytes not initialized yet
  var _padding = null;
  var _initialized = false;

  // table of constants
  var _k = null;

  // initial hash states
  var _states = null;

  /**
   * Initializes the constant tables.
   */
  function _init() {
    // create padding
    _padding = String.fromCharCode(128);
    _padding += forge.util.fillString(String.fromCharCode(0x00), 128);

    // create K table for SHA-512
    _k = [
      [0x428a2f98, 0xd728ae22], [0x71374491, 0x23ef65cd],
      [0xb5c0fbcf, 0xec4d3b2f], [0xe9b5dba5, 0x8189dbbc],
      [0x3956c25b, 0xf348b538], [0x59f111f1, 0xb605d019],
      [0x923f82a4, 0xaf194f9b], [0xab1c5ed5, 0xda6d8118],
      [0xd807aa98, 0xa3030242], [0x12835b01, 0x45706fbe],
      [0x243185be, 0x4ee4b28c], [0x550c7dc3, 0xd5ffb4e2],
      [0x72be5d74, 0xf27b896f], [0x80deb1fe, 0x3b1696b1],
      [0x9bdc06a7, 0x25c71235], [0xc19bf174, 0xcf692694],
      [0xe49b69c1, 0x9ef14ad2], [0xefbe4786, 0x384f25e3],
      [0x0fc19dc6, 0x8b8cd5b5], [0x240ca1cc, 0x77ac9c65],
      [0x2de92c6f, 0x592b0275], [0x4a7484aa, 0x6ea6e483],
      [0x5cb0a9dc, 0xbd41fbd4], [0x76f988da, 0x831153b5],
      [0x983e5152, 0xee66dfab], [0xa831c66d, 0x2db43210],
      [0xb00327c8, 0x98fb213f], [0xbf597fc7, 0xbeef0ee4],
      [0xc6e00bf3, 0x3da88fc2], [0xd5a79147, 0x930aa725],
      [0x06ca6351, 0xe003826f], [0x14292967, 0x0a0e6e70],
      [0x27b70a85, 0x46d22ffc], [0x2e1b2138, 0x5c26c926],
      [0x4d2c6dfc, 0x5ac42aed], [0x53380d13, 0x9d95b3df],
      [0x650a7354, 0x8baf63de], [0x766a0abb, 0x3c77b2a8],
      [0x81c2c92e, 0x47edaee6], [0x92722c85, 0x1482353b],
      [0xa2bfe8a1, 0x4cf10364], [0xa81a664b, 0xbc423001],
      [0xc24b8b70, 0xd0f89791], [0xc76c51a3, 0x0654be30],
      [0xd192e819, 0xd6ef5218], [0xd6990624, 0x5565a910],
      [0xf40e3585, 0x5771202a], [0x106aa070, 0x32bbd1b8],
      [0x19a4c116, 0xb8d2d0c8], [0x1e376c08, 0x5141ab53],
      [0x2748774c, 0xdf8eeb99], [0x34b0bcb5, 0xe19b48a8],
      [0x391c0cb3, 0xc5c95a63], [0x4ed8aa4a, 0xe3418acb],
      [0x5b9cca4f, 0x7763e373], [0x682e6ff3, 0xd6b2b8a3],
      [0x748f82ee, 0x5defb2fc], [0x78a5636f, 0x43172f60],
      [0x84c87814, 0xa1f0ab72], [0x8cc70208, 0x1a6439ec],
      [0x90befffa, 0x23631e28], [0xa4506ceb, 0xde82bde9],
      [0xbef9a3f7, 0xb2c67915], [0xc67178f2, 0xe372532b],
      [0xca273ece, 0xea26619c], [0xd186b8c7, 0x21c0c207],
      [0xeada7dd6, 0xcde0eb1e], [0xf57d4f7f, 0xee6ed178],
      [0x06f067aa, 0x72176fba], [0x0a637dc5, 0xa2c898a6],
      [0x113f9804, 0xbef90dae], [0x1b710b35, 0x131c471b],
      [0x28db77f5, 0x23047d84], [0x32caab7b, 0x40c72493],
      [0x3c9ebe0a, 0x15c9bebc], [0x431d67c4, 0x9c100d4c],
      [0x4cc5d4be, 0xcb3e42b6], [0x597f299c, 0xfc657e2a],
      [0x5fcb6fab, 0x3ad6faec], [0x6c44198c, 0x4a475817]
    ];

    // initial hash states
    _states = {};
    _states['SHA-512'] = [
      [0x6a09e667, 0xf3bcc908],
      [0xbb67ae85, 0x84caa73b],
      [0x3c6ef372, 0xfe94f82b],
      [0xa54ff53a, 0x5f1d36f1],
      [0x510e527f, 0xade682d1],
      [0x9b05688c, 0x2b3e6c1f],
      [0x1f83d9ab, 0xfb41bd6b],
      [0x5be0cd19, 0x137e2179]
    ];
    _states['SHA-384'] = [
      [0xcbbb9d5d, 0xc1059ed8],
      [0x629a292a, 0x367cd507],
      [0x9159015a, 0x3070dd17],
      [0x152fecd8, 0xf70e5939],
      [0x67332667, 0xffc00b31],
      [0x8eb44a87, 0x68581511],
      [0xdb0c2e0d, 0x64f98fa7],
      [0x47b5481d, 0xbefa4fa4]
    ];
    _states['SHA-512/256'] = [
      [0x22312194, 0xFC2BF72C],
      [0x9F555FA3, 0xC84C64C2],
      [0x2393B86B, 0x6F53B151],
      [0x96387719, 0x5940EABD],
      [0x96283EE2, 0xA88EFFE3],
      [0xBE5E1E25, 0x53863992],
      [0x2B0199FC, 0x2C85B8AA],
      [0x0EB72DDC, 0x81C52CA2]
    ];
    _states['SHA-512/224'] = [
      [0x8C3D37C8, 0x19544DA2],
      [0x73E19966, 0x89DCD4D6],
      [0x1DFAB7AE, 0x32FF9C82],
      [0x679DD514, 0x582F9FCF],
      [0x0F6D2B69, 0x7BD44DA8],
      [0x77E36F73, 0x04C48942],
      [0x3F9D85A8, 0x6A1D36C8],
      [0x1112E6AD, 0x91D692A1]
    ];

    // now initialized
    _initialized = true;
  }

  /**
   * Updates a SHA-512 state with the given byte buffer.
   *
   * @param s the SHA-512 state to update.
   * @param w the array to use to store words.
   * @param bytes the byte buffer to update with.
   */
  function _update(s, w, bytes) {
    // consume 512 bit (128 byte) chunks
    var t1_hi, t1_lo;
    var t2_hi, t2_lo;
    var s0_hi, s0_lo;
    var s1_hi, s1_lo;
    var ch_hi, ch_lo;
    var maj_hi, maj_lo;
    var a_hi, a_lo;
    var b_hi, b_lo;
    var c_hi, c_lo;
    var d_hi, d_lo;
    var e_hi, e_lo;
    var f_hi, f_lo;
    var g_hi, g_lo;
    var h_hi, h_lo;
    var i, hi, lo, w2, w7, w15, w16;
    var len = bytes.length();
    while(len >= 128) {
      // the w array will be populated with sixteen 64-bit big-endian words
      // and then extended into 64 64-bit words according to SHA-512
      for(i = 0; i < 16; ++i) {
        w[i][0] = bytes.getInt32() >>> 0;
        w[i][1] = bytes.getInt32() >>> 0;
      }
      for(; i < 80; ++i) {
        // for word 2 words ago: ROTR 19(x) ^ ROTR 61(x) ^ SHR 6(x)
        w2 = w[i - 2];
        hi = w2[0];
        lo = w2[1];

        // high bits
        t1_hi = (
          ((hi >>> 19) | (lo << 13)) ^ // ROTR 19
          ((lo >>> 29) | (hi << 3)) ^ // ROTR 61/(swap + ROTR 29)
          (hi >>> 6)) >>> 0; // SHR 6
        // low bits
        t1_lo = (
          ((hi << 13) | (lo >>> 19)) ^ // ROTR 19
          ((lo << 3) | (hi >>> 29)) ^ // ROTR 61/(swap + ROTR 29)
          ((hi << 26) | (lo >>> 6))) >>> 0; // SHR 6

        // for word 15 words ago: ROTR 1(x) ^ ROTR 8(x) ^ SHR 7(x)
        w15 = w[i - 15];
        hi = w15[0];
        lo = w15[1];

        // high bits
        t2_hi = (
          ((hi >>> 1) | (lo << 31)) ^ // ROTR 1
          ((hi >>> 8) | (lo << 24)) ^ // ROTR 8
          (hi >>> 7)) >>> 0; // SHR 7
        // low bits
        t2_lo = (
          ((hi << 31) | (lo >>> 1)) ^ // ROTR 1
          ((hi << 24) | (lo >>> 8)) ^ // ROTR 8
          ((hi << 25) | (lo >>> 7))) >>> 0; // SHR 7

        // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^64 (carry lo overflow)
        w7 = w[i - 7];
        w16 = w[i - 16];
        lo = (t1_lo + w7[1] + t2_lo + w16[1]);
        w[i][0] = (t1_hi + w7[0] + t2_hi + w16[0] +
          ((lo / 0x100000000) >>> 0)) >>> 0;
        w[i][1] = lo >>> 0;
      }

      // initialize hash value for this chunk
      a_hi = s[0][0];
      a_lo = s[0][1];
      b_hi = s[1][0];
      b_lo = s[1][1];
      c_hi = s[2][0];
      c_lo = s[2][1];
      d_hi = s[3][0];
      d_lo = s[3][1];
      e_hi = s[4][0];
      e_lo = s[4][1];
      f_hi = s[5][0];
      f_lo = s[5][1];
      g_hi = s[6][0];
      g_lo = s[6][1];
      h_hi = s[7][0];
      h_lo = s[7][1];

      // round function
      for(i = 0; i < 80; ++i) {
        // Sum1(e) = ROTR 14(e) ^ ROTR 18(e) ^ ROTR 41(e)
        s1_hi = (
          ((e_hi >>> 14) | (e_lo << 18)) ^ // ROTR 14
          ((e_hi >>> 18) | (e_lo << 14)) ^ // ROTR 18
          ((e_lo >>> 9) | (e_hi << 23))) >>> 0; // ROTR 41/(swap + ROTR 9)
        s1_lo = (
          ((e_hi << 18) | (e_lo >>> 14)) ^ // ROTR 14
          ((e_hi << 14) | (e_lo >>> 18)) ^ // ROTR 18
          ((e_lo << 23) | (e_hi >>> 9))) >>> 0; // ROTR 41/(swap + ROTR 9)

        // Ch(e, f, g) (optimized the same way as SHA-1)
        ch_hi = (g_hi ^ (e_hi & (f_hi ^ g_hi))) >>> 0;
        ch_lo = (g_lo ^ (e_lo & (f_lo ^ g_lo))) >>> 0;

        // Sum0(a) = ROTR 28(a) ^ ROTR 34(a) ^ ROTR 39(a)
        s0_hi = (
          ((a_hi >>> 28) | (a_lo << 4)) ^ // ROTR 28
          ((a_lo >>> 2) | (a_hi << 30)) ^ // ROTR 34/(swap + ROTR 2)
          ((a_lo >>> 7) | (a_hi << 25))) >>> 0; // ROTR 39/(swap + ROTR 7)
        s0_lo = (
          ((a_hi << 4) | (a_lo >>> 28)) ^ // ROTR 28
          ((a_lo << 30) | (a_hi >>> 2)) ^ // ROTR 34/(swap + ROTR 2)
          ((a_lo << 25) | (a_hi >>> 7))) >>> 0; // ROTR 39/(swap + ROTR 7)

        // Maj(a, b, c) (optimized the same way as SHA-1)
        maj_hi = ((a_hi & b_hi) | (c_hi & (a_hi ^ b_hi))) >>> 0;
        maj_lo = ((a_lo & b_lo) | (c_lo & (a_lo ^ b_lo))) >>> 0;

        // main algorithm
        // t1 = (h + s1 + ch + _k[i] + _w[i]) modulo 2^64 (carry lo overflow)
        lo = (h_lo + s1_lo + ch_lo + _k[i][1] + w[i][1]);
        t1_hi = (h_hi + s1_hi + ch_hi + _k[i][0] + w[i][0] +
          ((lo / 0x100000000) >>> 0)) >>> 0;
        t1_lo = lo >>> 0;

        // t2 = s0 + maj modulo 2^64 (carry lo overflow)
        lo = s0_lo + maj_lo;
        t2_hi = (s0_hi + maj_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
        t2_lo = lo >>> 0;

        h_hi = g_hi;
        h_lo = g_lo;

        g_hi = f_hi;
        g_lo = f_lo;

        f_hi = e_hi;
        f_lo = e_lo;

        // e = (d + t1) modulo 2^64 (carry lo overflow)
        lo = d_lo + t1_lo;
        e_hi = (d_hi + t1_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
        e_lo = lo >>> 0;

        d_hi = c_hi;
        d_lo = c_lo;

        c_hi = b_hi;
        c_lo = b_lo;

        b_hi = a_hi;
        b_lo = a_lo;

        // a = (t1 + t2) modulo 2^64 (carry lo overflow)
        lo = t1_lo + t2_lo;
        a_hi = (t1_hi + t2_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
        a_lo = lo >>> 0;
      }

      // update hash state (additional modulo 2^64)
      lo = s[0][1] + a_lo;
      s[0][0] = (s[0][0] + a_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
      s[0][1] = lo >>> 0;

      lo = s[1][1] + b_lo;
      s[1][0] = (s[1][0] + b_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
      s[1][1] = lo >>> 0;

      lo = s[2][1] + c_lo;
      s[2][0] = (s[2][0] + c_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
      s[2][1] = lo >>> 0;

      lo = s[3][1] + d_lo;
      s[3][0] = (s[3][0] + d_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
      s[3][1] = lo >>> 0;

      lo = s[4][1] + e_lo;
      s[4][0] = (s[4][0] + e_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
      s[4][1] = lo >>> 0;

      lo = s[5][1] + f_lo;
      s[5][0] = (s[5][0] + f_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
      s[5][1] = lo >>> 0;

      lo = s[6][1] + g_lo;
      s[6][0] = (s[6][0] + g_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
      s[6][1] = lo >>> 0;

      lo = s[7][1] + h_lo;
      s[7][0] = (s[7][0] + h_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
      s[7][1] = lo >>> 0;

      len -= 128;
    }
  }

  /*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */
  const _0n = BigInt(0);
  const _1n = BigInt(1);
  const _2n = BigInt(2);
  const _3n = BigInt(3);
  const _8n = BigInt(8);
  const CURVE = Object.freeze({
      a: _0n,
      b: BigInt(7),
      P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),
      n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),
      h: _1n,
      Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
      Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
  });
  const divNearest = (a, b) => (a + b / _2n) / b;
  const endo = {
      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
      splitScalar(k) {
          const { n } = CURVE;
          const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
          const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
          const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
          const b2 = a1;
          const POW_2_128 = BigInt('0x100000000000000000000000000000000');
          const c1 = divNearest(b2 * k, n);
          const c2 = divNearest(-b1 * k, n);
          let k1 = mod(k - c1 * a1 - c2 * a2, n);
          let k2 = mod(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
              k1 = n - k1;
          if (k2neg)
              k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
              throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);
          }
          return { k1neg, k1, k2neg, k2 };
      },
  };
  const fieldLen = 32;
  const groupLen = 32;
  const hashLen = 32;
  const compressedLen = fieldLen + 1;
  const uncompressedLen = 2 * fieldLen + 1;
  function weierstrass(x) {
      const { a, b } = CURVE;
      const x2 = mod(x * x);
      const x3 = mod(x2 * x);
      return mod(x3 + a * x + b);
  }
  const USE_ENDOMORPHISM = CURVE.a === _0n;
  class ShaError extends Error {
      constructor(message) {
          super(message);
      }
  }
  function assertJacPoint(other) {
      if (!(other instanceof JacobianPoint))
          throw new TypeError('JacobianPoint expected');
  }
  class JacobianPoint {
      constructor(x, y, z) {
          this.x = x;
          this.y = y;
          this.z = z;
      }
      static fromAffine(p) {
          if (!(p instanceof Point)) {
              throw new TypeError('JacobianPoint#fromAffine: expected Point');
          }
          if (p.equals(Point.ZERO))
              return JacobianPoint.ZERO;
          return new JacobianPoint(p.x, p.y, _1n);
      }
      static toAffineBatch(points) {
          const toInv = invertBatch(points.map((p) => p.z));
          return points.map((p, i) => p.toAffine(toInv[i]));
      }
      static normalizeZ(points) {
          return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);
      }
      equals(other) {
          assertJacPoint(other);
          const { x: X1, y: Y1, z: Z1 } = this;
          const { x: X2, y: Y2, z: Z2 } = other;
          const Z1Z1 = mod(Z1 * Z1);
          const Z2Z2 = mod(Z2 * Z2);
          const U1 = mod(X1 * Z2Z2);
          const U2 = mod(X2 * Z1Z1);
          const S1 = mod(mod(Y1 * Z2) * Z2Z2);
          const S2 = mod(mod(Y2 * Z1) * Z1Z1);
          return U1 === U2 && S1 === S2;
      }
      negate() {
          return new JacobianPoint(this.x, mod(-this.y), this.z);
      }
      double() {
          const { x: X1, y: Y1, z: Z1 } = this;
          const A = mod(X1 * X1);
          const B = mod(Y1 * Y1);
          const C = mod(B * B);
          const x1b = X1 + B;
          const D = mod(_2n * (mod(x1b * x1b) - A - C));
          const E = mod(_3n * A);
          const F = mod(E * E);
          const X3 = mod(F - _2n * D);
          const Y3 = mod(E * (D - X3) - _8n * C);
          const Z3 = mod(_2n * Y1 * Z1);
          return new JacobianPoint(X3, Y3, Z3);
      }
      add(other) {
          assertJacPoint(other);
          const { x: X1, y: Y1, z: Z1 } = this;
          const { x: X2, y: Y2, z: Z2 } = other;
          if (X2 === _0n || Y2 === _0n)
              return this;
          if (X1 === _0n || Y1 === _0n)
              return other;
          const Z1Z1 = mod(Z1 * Z1);
          const Z2Z2 = mod(Z2 * Z2);
          const U1 = mod(X1 * Z2Z2);
          const U2 = mod(X2 * Z1Z1);
          const S1 = mod(mod(Y1 * Z2) * Z2Z2);
          const S2 = mod(mod(Y2 * Z1) * Z1Z1);
          const H = mod(U2 - U1);
          const r = mod(S2 - S1);
          if (H === _0n) {
              if (r === _0n) {
                  return this.double();
              }
              else {
                  return JacobianPoint.ZERO;
              }
          }
          const HH = mod(H * H);
          const HHH = mod(H * HH);
          const V = mod(U1 * HH);
          const X3 = mod(r * r - HHH - _2n * V);
          const Y3 = mod(r * (V - X3) - S1 * HHH);
          const Z3 = mod(Z1 * Z2 * H);
          return new JacobianPoint(X3, Y3, Z3);
      }
      subtract(other) {
          return this.add(other.negate());
      }
      multiplyUnsafe(scalar) {
          const P0 = JacobianPoint.ZERO;
          if (typeof scalar === 'bigint' && scalar === _0n)
              return P0;
          let n = normalizeScalar(scalar);
          if (n === _1n)
              return this;
          if (!USE_ENDOMORPHISM) {
              let p = P0;
              let d = this;
              while (n > _0n) {
                  if (n & _1n)
                      p = p.add(d);
                  d = d.double();
                  n >>= _1n;
              }
              return p;
          }
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let k1p = P0;
          let k2p = P0;
          let d = this;
          while (k1 > _0n || k2 > _0n) {
              if (k1 & _1n)
                  k1p = k1p.add(d);
              if (k2 & _1n)
                  k2p = k2p.add(d);
              d = d.double();
              k1 >>= _1n;
              k2 >>= _1n;
          }
          if (k1neg)
              k1p = k1p.negate();
          if (k2neg)
              k2p = k2p.negate();
          k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);
          return k1p.add(k2p);
      }
      precomputeWindow(W) {
          const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;
          const points = [];
          let p = this;
          let base = p;
          for (let window = 0; window < windows; window++) {
              base = p;
              points.push(base);
              for (let i = 1; i < 2 ** (W - 1); i++) {
                  base = base.add(p);
                  points.push(base);
              }
              p = base.double();
          }
          return points;
      }
      wNAF(n, affinePoint) {
          if (!affinePoint && this.equals(JacobianPoint.BASE))
              affinePoint = Point.BASE;
          const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;
          if (256 % W) {
              throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');
          }
          let precomputes = affinePoint && pointPrecomputes.get(affinePoint);
          if (!precomputes) {
              precomputes = this.precomputeWindow(W);
              if (affinePoint && W !== 1) {
                  precomputes = JacobianPoint.normalizeZ(precomputes);
                  pointPrecomputes.set(affinePoint, precomputes);
              }
          }
          let p = JacobianPoint.ZERO;
          let f = JacobianPoint.BASE;
          const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);
          const windowSize = 2 ** (W - 1);
          const mask = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window = 0; window < windows; window++) {
              const offset = window * windowSize;
              let wbits = Number(n & mask);
              n >>= shiftBy;
              if (wbits > windowSize) {
                  wbits -= maxNumber;
                  n += _1n;
              }
              const offset1 = offset;
              const offset2 = offset + Math.abs(wbits) - 1;
              const cond1 = window % 2 !== 0;
              const cond2 = wbits < 0;
              if (wbits === 0) {
                  f = f.add(constTimeNegate(cond1, precomputes[offset1]));
              }
              else {
                  p = p.add(constTimeNegate(cond2, precomputes[offset2]));
              }
          }
          return { p, f };
      }
      multiply(scalar, affinePoint) {
          let n = normalizeScalar(scalar);
          let point;
          let fake;
          if (USE_ENDOMORPHISM) {
              const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
              let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);
              let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);
              k1p = constTimeNegate(k1neg, k1p);
              k2p = constTimeNegate(k2neg, k2p);
              k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);
              point = k1p.add(k2p);
              fake = f1p.add(f2p);
          }
          else {
              const { p, f } = this.wNAF(n, affinePoint);
              point = p;
              fake = f;
          }
          return JacobianPoint.normalizeZ([point, fake])[0];
      }
      toAffine(invZ) {
          const { x, y, z } = this;
          const is0 = this.equals(JacobianPoint.ZERO);
          if (invZ == null)
              invZ = is0 ? _8n : invert(z);
          const iz1 = invZ;
          const iz2 = mod(iz1 * iz1);
          const iz3 = mod(iz2 * iz1);
          const ax = mod(x * iz2);
          const ay = mod(y * iz3);
          const zz = mod(z * iz1);
          if (is0)
              return Point.ZERO;
          if (zz !== _1n)
              throw new Error('invZ was invalid');
          return new Point(ax, ay);
      }
  }
  JacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);
  JacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);
  function constTimeNegate(condition, item) {
      const neg = item.negate();
      return condition ? neg : item;
  }
  const pointPrecomputes = new WeakMap();
  class Point {
      constructor(x, y) {
          this.x = x;
          this.y = y;
      }
      _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
      }
      hasEvenY() {
          return this.y % _2n === _0n;
      }
      static fromCompressedHex(bytes) {
          const isShort = bytes.length === 32;
          const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));
          if (!isValidFieldElement(x))
              throw new Error('Point is not on curve');
          const y2 = weierstrass(x);
          let y = sqrtMod(y2);
          const isYOdd = (y & _1n) === _1n;
          if (isShort) {
              if (isYOdd)
                  y = mod(-y);
          }
          else {
              const isFirstByteOdd = (bytes[0] & 1) === 1;
              if (isFirstByteOdd !== isYOdd)
                  y = mod(-y);
          }
          const point = new Point(x, y);
          point.assertValidity();
          return point;
      }
      static fromUncompressedHex(bytes) {
          const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));
          const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));
          const point = new Point(x, y);
          point.assertValidity();
          return point;
      }
      static fromHex(hex) {
          const bytes = ensureBytes(hex);
          const len = bytes.length;
          const header = bytes[0];
          if (len === fieldLen)
              return this.fromCompressedHex(bytes);
          if (len === compressedLen && (header === 0x02 || header === 0x03)) {
              return this.fromCompressedHex(bytes);
          }
          if (len === uncompressedLen && header === 0x04)
              return this.fromUncompressedHex(bytes);
          throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);
      }
      static fromPrivateKey(privateKey) {
          return Point.BASE.multiply(normalizePrivateKey(privateKey));
      }
      static fromSignature(msgHash, signature, recovery) {
          const { r, s } = normalizeSignature(signature);
          if (![0, 1, 2, 3].includes(recovery))
              throw new Error('Cannot recover: invalid recovery bit');
          const h = truncateHash(ensureBytes(msgHash));
          const { n } = CURVE;
          const radj = recovery === 2 || recovery === 3 ? r + n : r;
          const rinv = invert(radj, n);
          const u1 = mod(-h * rinv, n);
          const u2 = mod(s * rinv, n);
          const prefix = recovery & 1 ? '03' : '02';
          const R = Point.fromHex(prefix + numTo32bStr(radj));
          const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q)
              throw new Error('Cannot recover signature: point at infinify');
          Q.assertValidity();
          return Q;
      }
      toRawBytes(isCompressed = false) {
          return hexToBytes(this.toHex(isCompressed));
      }
      toHex(isCompressed = false) {
          const x = numTo32bStr(this.x);
          if (isCompressed) {
              const prefix = this.hasEvenY() ? '02' : '03';
              return `${prefix}${x}`;
          }
          else {
              return `04${x}${numTo32bStr(this.y)}`;
          }
      }
      toHexX() {
          return this.toHex(true).slice(2);
      }
      toRawX() {
          return this.toRawBytes(true).slice(1);
      }
      assertValidity() {
          const msg = 'Point is not on elliptic curve';
          const { x, y } = this;
          if (!isValidFieldElement(x) || !isValidFieldElement(y))
              throw new Error(msg);
          const left = mod(y * y);
          const right = weierstrass(x);
          if (mod(left - right) !== _0n)
              throw new Error(msg);
      }
      equals(other) {
          return this.x === other.x && this.y === other.y;
      }
      negate() {
          return new Point(this.x, mod(-this.y));
      }
      double() {
          return JacobianPoint.fromAffine(this).double().toAffine();
      }
      add(other) {
          return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();
      }
      subtract(other) {
          return this.add(other.negate());
      }
      multiply(scalar) {
          return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();
      }
      multiplyAndAddUnsafe(Q, a, b) {
          const P = JacobianPoint.fromAffine(this);
          const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);
          const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);
          const sum = aP.add(bQ);
          return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();
      }
  }
  Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
  Point.ZERO = new Point(_0n, _0n);
  function sliceDER(s) {
      return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;
  }
  function parseDERInt(data) {
      if (data.length < 2 || data[0] !== 0x02) {
          throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);
      }
      const len = data[1];
      const res = data.subarray(2, len + 2);
      if (!len || res.length !== len) {
          throw new Error(`Invalid signature integer: wrong length`);
      }
      if (res[0] === 0x00 && res[1] <= 0x7f) {
          throw new Error('Invalid signature integer: trailing length');
      }
      return { data: bytesToNumber(res), left: data.subarray(len + 2) };
  }
  function parseDERSignature(data) {
      if (data.length < 2 || data[0] != 0x30) {
          throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);
      }
      if (data[1] !== data.length - 2) {
          throw new Error('Invalid signature: incorrect length');
      }
      const { data: r, left: sBytes } = parseDERInt(data.subarray(2));
      const { data: s, left: rBytesLeft } = parseDERInt(sBytes);
      if (rBytesLeft.length) {
          throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);
      }
      return { r, s };
  }
  class Signature {
      constructor(r, s) {
          this.r = r;
          this.s = s;
          this.assertValidity();
      }
      static fromCompact(hex) {
          const arr = hex instanceof Uint8Array;
          const name = 'Signature.fromCompact';
          if (typeof hex !== 'string' && !arr)
              throw new TypeError(`${name}: Expected string or Uint8Array`);
          const str = arr ? bytesToHex(hex) : hex;
          if (str.length !== 128)
              throw new Error(`${name}: Expected 64-byte hex`);
          return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));
      }
      static fromDER(hex) {
          const arr = hex instanceof Uint8Array;
          if (typeof hex !== 'string' && !arr)
              throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);
          const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));
          return new Signature(r, s);
      }
      static fromHex(hex) {
          return this.fromDER(hex);
      }
      assertValidity() {
          const { r, s } = this;
          if (!isWithinCurveOrder(r))
              throw new Error('Invalid Signature: r must be 0 < r < n');
          if (!isWithinCurveOrder(s))
              throw new Error('Invalid Signature: s must be 0 < s < n');
      }
      hasHighS() {
          const HALF = CURVE.n >> _1n;
          return this.s > HALF;
      }
      normalizeS() {
          return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;
      }
      toDERRawBytes() {
          return hexToBytes(this.toDERHex());
      }
      toDERHex() {
          const sHex = sliceDER(numberToHexUnpadded(this.s));
          const rHex = sliceDER(numberToHexUnpadded(this.r));
          const sHexL = sHex.length / 2;
          const rHexL = rHex.length / 2;
          const sLen = numberToHexUnpadded(sHexL);
          const rLen = numberToHexUnpadded(rHexL);
          const length = numberToHexUnpadded(rHexL + sHexL + 4);
          return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;
      }
      toRawBytes() {
          return this.toDERRawBytes();
      }
      toHex() {
          return this.toDERHex();
      }
      toCompactRawBytes() {
          return hexToBytes(this.toCompactHex());
      }
      toCompactHex() {
          return numTo32bStr(this.r) + numTo32bStr(this.s);
      }
  }
  function concatBytes(...arrays) {
      if (!arrays.every((b) => b instanceof Uint8Array))
          throw new Error('Uint8Array list expected');
      if (arrays.length === 1)
          return arrays[0];
      const length = arrays.reduce((a, arr) => a + arr.length, 0);
      const result = new Uint8Array(length);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
          const arr = arrays[i];
          result.set(arr, pad);
          pad += arr.length;
      }
      return result;
  }
  const hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
  function bytesToHex(uint8a) {
      if (!(uint8a instanceof Uint8Array))
          throw new Error('Expected Uint8Array');
      let hex = '';
      for (let i = 0; i < uint8a.length; i++) {
          hex += hexes[uint8a[i]];
      }
      return hex;
  }
  const POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');
  function numTo32bStr(num) {
      if (typeof num !== 'bigint')
          throw new Error('Expected bigint');
      if (!(_0n <= num && num < POW_2_256))
          throw new Error('Expected number 0 <= n < 2^256');
      return num.toString(16).padStart(64, '0');
  }
  function numTo32b(num) {
      const b = hexToBytes(numTo32bStr(num));
      if (b.length !== 32)
          throw new Error('Error: expected 32 bytes');
      return b;
  }
  function numberToHexUnpadded(num) {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
  }
  function hexToNumber(hex) {
      if (typeof hex !== 'string') {
          throw new TypeError('hexToNumber: expected string, got ' + typeof hex);
      }
      return BigInt(`0x${hex}`);
  }
  function hexToBytes(hex) {
      if (typeof hex !== 'string') {
          throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
      }
      if (hex.length % 2)
          throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);
      const array = new Uint8Array(hex.length / 2);
      for (let i = 0; i < array.length; i++) {
          const j = i * 2;
          const hexByte = hex.slice(j, j + 2);
          const byte = Number.parseInt(hexByte, 16);
          if (Number.isNaN(byte) || byte < 0)
              throw new Error('Invalid byte sequence');
          array[i] = byte;
      }
      return array;
  }
  function bytesToNumber(bytes) {
      return hexToNumber(bytesToHex(bytes));
  }
  function ensureBytes(hex) {
      return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);
  }
  function normalizeScalar(num) {
      if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)
          return BigInt(num);
      if (typeof num === 'bigint' && isWithinCurveOrder(num))
          return num;
      throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');
  }
  function mod(a, b = CURVE.P) {
      const result = a % b;
      return result >= _0n ? result : b + result;
  }
  function pow2(x, power) {
      const { P } = CURVE;
      let res = x;
      while (power-- > _0n) {
          res *= res;
          res %= P;
      }
      return res;
  }
  function sqrtMod(x) {
      const { P } = CURVE;
      const _6n = BigInt(6);
      const _11n = BigInt(11);
      const _22n = BigInt(22);
      const _23n = BigInt(23);
      const _44n = BigInt(44);
      const _88n = BigInt(88);
      const b2 = (x * x * x) % P;
      const b3 = (b2 * b2 * x) % P;
      const b6 = (pow2(b3, _3n) * b3) % P;
      const b9 = (pow2(b6, _3n) * b3) % P;
      const b11 = (pow2(b9, _2n) * b2) % P;
      const b22 = (pow2(b11, _11n) * b11) % P;
      const b44 = (pow2(b22, _22n) * b22) % P;
      const b88 = (pow2(b44, _44n) * b44) % P;
      const b176 = (pow2(b88, _88n) * b88) % P;
      const b220 = (pow2(b176, _44n) * b44) % P;
      const b223 = (pow2(b220, _3n) * b3) % P;
      const t1 = (pow2(b223, _23n) * b22) % P;
      const t2 = (pow2(t1, _6n) * b2) % P;
      const rt = pow2(t2, _2n);
      const xc = (rt * rt) % P;
      if (xc !== x)
          throw new Error('Cannot find square root');
      return rt;
  }
  function invert(number, modulo = CURVE.P) {
      if (number === _0n || modulo <= _0n) {
          throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
      }
      let a = mod(number, modulo);
      let b = modulo;
      let x = _0n, u = _1n;
      while (a !== _0n) {
          const q = b / a;
          const r = b % a;
          const m = x - u * q;
          b = a, a = r, x = u, u = m;
      }
      const gcd = b;
      if (gcd !== _1n)
          throw new Error('invert: does not exist');
      return mod(x, modulo);
  }
  function invertBatch(nums, p = CURVE.P) {
      const scratch = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num, i) => {
          if (num === _0n)
              return acc;
          scratch[i] = acc;
          return mod(acc * num, p);
      }, _1n);
      const inverted = invert(lastMultiplied, p);
      nums.reduceRight((acc, num, i) => {
          if (num === _0n)
              return acc;
          scratch[i] = mod(acc * scratch[i], p);
          return mod(acc * num, p);
      }, inverted);
      return scratch;
  }
  function bits2int_2(bytes) {
      const delta = bytes.length * 8 - groupLen * 8;
      const num = bytesToNumber(bytes);
      return delta > 0 ? num >> BigInt(delta) : num;
  }
  function truncateHash(hash, truncateOnly = false) {
      const h = bits2int_2(hash);
      if (truncateOnly)
          return h;
      const { n } = CURVE;
      return h >= n ? h - n : h;
  }
  let _sha256Sync;
  let _hmacSha256Sync;
  class HmacDrbg {
      constructor(hashLen, qByteLen) {
          this.hashLen = hashLen;
          this.qByteLen = qByteLen;
          if (typeof hashLen !== 'number' || hashLen < 2)
              throw new Error('hashLen must be a number');
          if (typeof qByteLen !== 'number' || qByteLen < 2)
              throw new Error('qByteLen must be a number');
          this.v = new Uint8Array(hashLen).fill(1);
          this.k = new Uint8Array(hashLen).fill(0);
          this.counter = 0;
      }
      hmac(...values) {
          return utils.hmacSha256(this.k, ...values);
      }
      hmacSync(...values) {
          return _hmacSha256Sync(this.k, ...values);
      }
      checkSync() {
          if (typeof _hmacSha256Sync !== 'function')
              throw new ShaError('hmacSha256Sync needs to be set');
      }
      incr() {
          if (this.counter >= 1000)
              throw new Error('Tried 1,000 k values for sign(), all were invalid');
          this.counter += 1;
      }
      async reseed(seed = new Uint8Array()) {
          this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);
          this.v = await this.hmac(this.v);
          if (seed.length === 0)
              return;
          this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);
          this.v = await this.hmac(this.v);
      }
      reseedSync(seed = new Uint8Array()) {
          this.checkSync();
          this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);
          this.v = this.hmacSync(this.v);
          if (seed.length === 0)
              return;
          this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);
          this.v = this.hmacSync(this.v);
      }
      async generate() {
          this.incr();
          let len = 0;
          const out = [];
          while (len < this.qByteLen) {
              this.v = await this.hmac(this.v);
              const sl = this.v.slice();
              out.push(sl);
              len += this.v.length;
          }
          return concatBytes(...out);
      }
      generateSync() {
          this.checkSync();
          this.incr();
          let len = 0;
          const out = [];
          while (len < this.qByteLen) {
              this.v = this.hmacSync(this.v);
              const sl = this.v.slice();
              out.push(sl);
              len += this.v.length;
          }
          return concatBytes(...out);
      }
  }
  function isWithinCurveOrder(num) {
      return _0n < num && num < CURVE.n;
  }
  function isValidFieldElement(num) {
      return _0n < num && num < CURVE.P;
  }
  function kmdToSig(kBytes, m, d, lowS = true) {
      const { n } = CURVE;
      const k = truncateHash(kBytes, true);
      if (!isWithinCurveOrder(k))
          return;
      const kinv = invert(k, n);
      const q = Point.BASE.multiply(k);
      const r = mod(q.x, n);
      if (r === _0n)
          return;
      const s = mod(kinv * mod(m + d * r, n), n);
      if (s === _0n)
          return;
      let sig = new Signature(r, s);
      let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);
      if (lowS && sig.hasHighS()) {
          sig = sig.normalizeS();
          recovery ^= 1;
      }
      return { sig, recovery };
  }
  function normalizePrivateKey(key) {
      let num;
      if (typeof key === 'bigint') {
          num = key;
      }
      else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {
          num = BigInt(key);
      }
      else if (typeof key === 'string') {
          if (key.length !== 2 * groupLen)
              throw new Error('Expected 32 bytes of private key');
          num = hexToNumber(key);
      }
      else if (key instanceof Uint8Array) {
          if (key.length !== groupLen)
              throw new Error('Expected 32 bytes of private key');
          num = bytesToNumber(key);
      }
      else {
          throw new TypeError('Expected valid private key');
      }
      if (!isWithinCurveOrder(num))
          throw new Error('Expected private key: 0 < key < n');
      return num;
  }
  function normalizePublicKey(publicKey) {
      if (publicKey instanceof Point) {
          publicKey.assertValidity();
          return publicKey;
      }
      else {
          return Point.fromHex(publicKey);
      }
  }
  function normalizeSignature(signature) {
      if (signature instanceof Signature) {
          signature.assertValidity();
          return signature;
      }
      try {
          return Signature.fromDER(signature);
      }
      catch (error) {
          return Signature.fromCompact(signature);
      }
  }
  function getPublicKey(privateKey, isCompressed = false) {
      return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function bits2int(bytes) {
      const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;
      return bytesToNumber(slice);
  }
  function bits2octets(bytes) {
      const z1 = bits2int(bytes);
      const z2 = mod(z1, CURVE.n);
      return int2octets(z2 < _0n ? z1 : z2);
  }
  function int2octets(num) {
      return numTo32b(num);
  }
  function initSigArgs(msgHash, privateKey, extraEntropy) {
      if (msgHash == null)
          throw new Error(`sign: expected valid message hash, not "${msgHash}"`);
      const h1 = ensureBytes(msgHash);
      const d = normalizePrivateKey(privateKey);
      const seedArgs = [int2octets(d), bits2octets(h1)];
      if (extraEntropy != null) {
          if (extraEntropy === true)
              extraEntropy = utils.randomBytes(fieldLen);
          const e = ensureBytes(extraEntropy);
          if (e.length !== fieldLen)
              throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);
          seedArgs.push(e);
      }
      const seed = concatBytes(...seedArgs);
      const m = bits2int(h1);
      return { seed, m, d };
  }
  function finalizeSig(recSig, opts) {
      const { sig, recovery } = recSig;
      const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);
      const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();
      return recovered ? [hashed, recovery] : hashed;
  }
  async function sign(msgHash, privKey, opts = {}) {
      const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);
      const drbg = new HmacDrbg(hashLen, groupLen);
      await drbg.reseed(seed);
      let sig;
      while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))
          await drbg.reseed();
      return finalizeSig(sig, opts);
  }
  const vopts = { strict: true };
  function verify(signature, msgHash, publicKey, opts = vopts) {
      let sig;
      try {
          sig = normalizeSignature(signature);
          msgHash = ensureBytes(msgHash);
      }
      catch (error) {
          return false;
      }
      const { r, s } = sig;
      if (opts.strict && sig.hasHighS())
          return false;
      const h = truncateHash(msgHash);
      let P;
      try {
          P = normalizePublicKey(publicKey);
      }
      catch (error) {
          return false;
      }
      const { n } = CURVE;
      const sinv = invert(s, n);
      const u1 = mod(h * sinv, n);
      const u2 = mod(r * sinv, n);
      const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);
      if (!R)
          return false;
      const v = mod(R.x, n);
      return v === r;
  }
  Point.BASE._setWindowSize(8);
  const crypto$2 = {
      node: nodeCrypto,
      web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,
  };
  const TAGGED_HASH_PREFIXES = {};
  const utils = {
      bytesToHex,
      hexToBytes,
      concatBytes,
      mod,
      invert,
      isValidPrivateKey(privateKey) {
          try {
              normalizePrivateKey(privateKey);
              return true;
          }
          catch (error) {
              return false;
          }
      },
      _bigintTo32Bytes: numTo32b,
      _normalizePrivateKey: normalizePrivateKey,
      hashToPrivateKey: (hash) => {
          hash = ensureBytes(hash);
          const minLen = groupLen + 8;
          if (hash.length < minLen || hash.length > 1024) {
              throw new Error(`Expected valid bytes of private key as per FIPS 186`);
          }
          const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;
          return numTo32b(num);
      },
      randomBytes: (bytesLength = 32) => {
          if (crypto$2.web) {
              return crypto$2.web.getRandomValues(new Uint8Array(bytesLength));
          }
          else if (crypto$2.node) {
              const { randomBytes } = crypto$2.node;
              return Uint8Array.from(randomBytes(bytesLength));
          }
          else {
              throw new Error("The environment doesn't have randomBytes function");
          }
      },
      randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),
      precompute(windowSize = 8, point = Point.BASE) {
          const cached = point === Point.BASE ? point : new Point(point.x, point.y);
          cached._setWindowSize(windowSize);
          cached.multiply(_3n);
          return cached;
      },
      sha256: async (...messages) => {
          if (crypto$2.web) {
              const buffer = await crypto$2.web.subtle.digest('SHA-256', concatBytes(...messages));
              return new Uint8Array(buffer);
          }
          else if (crypto$2.node) {
              const { createHash } = crypto$2.node;
              const hash = createHash('sha256');
              messages.forEach((m) => hash.update(m));
              return Uint8Array.from(hash.digest());
          }
          else {
              throw new Error("The environment doesn't have sha256 function");
          }
      },
      hmacSha256: async (key, ...messages) => {
          if (crypto$2.web) {
              const ckey = await crypto$2.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);
              const message = concatBytes(...messages);
              const buffer = await crypto$2.web.subtle.sign('HMAC', ckey, message);
              return new Uint8Array(buffer);
          }
          else if (crypto$2.node) {
              const { createHmac } = crypto$2.node;
              const hash = createHmac('sha256', key);
              messages.forEach((m) => hash.update(m));
              return Uint8Array.from(hash.digest());
          }
          else {
              throw new Error("The environment doesn't have hmac-sha256 function");
          }
      },
      sha256Sync: undefined,
      hmacSha256Sync: undefined,
      taggedHash: async (tag, ...messages) => {
          let tagP = TAGGED_HASH_PREFIXES[tag];
          if (tagP === undefined) {
              const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
              tagP = concatBytes(tagH, tagH);
              TAGGED_HASH_PREFIXES[tag] = tagP;
          }
          return utils.sha256(tagP, ...messages);
      },
      taggedHashSync: (tag, ...messages) => {
          if (typeof _sha256Sync !== 'function')
              throw new ShaError('sha256Sync is undefined, you need to set it');
          let tagP = TAGGED_HASH_PREFIXES[tag];
          if (tagP === undefined) {
              const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
              tagP = concatBytes(tagH, tagH);
              TAGGED_HASH_PREFIXES[tag] = tagP;
          }
          return _sha256Sync(tagP, ...messages);
      },
      _JacobianPoint: JacobianPoint,
  };
  Object.defineProperties(utils, {
      sha256Sync: {
          configurable: false,
          get() {
              return _sha256Sync;
          },
          set(val) {
              if (!_sha256Sync)
                  _sha256Sync = val;
          },
      },
      hmacSha256Sync: {
          configurable: false,
          get() {
              return _hmacSha256Sync;
          },
          set(val) {
              if (!_hmacSha256Sync)
                  _hmacSha256Sync = val;
          },
      },
  });

  function randomBytes(length) {
      if (isNaN(length) || length <= 0) {
          throw new CodeError('random bytes length must be a Number bigger than 0', 'ERR_INVALID_LENGTH');
      }
      return utils.randomBytes(length);
  }

  function convert(key, types) {
      return types.map(t => base64urlToBigInteger(key[t]));
  }
  function jwk2priv(key) {
      return forge$n.pki.setRsaPrivateKey(...convert(key, ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi']));
  }
  function jwk2pub(key) {
      return forge$n.pki.setRsaPublicKey(...convert(key, ['n', 'e']));
  }

  // Convert a PKCS#1 in ASN1 DER format to a JWK key
  function pkcs1ToJwk(bytes) {
      const asn1 = forge$n.asn1.fromDer(toString$1(bytes, 'ascii'));
      const privateKey = forge$n.pki.privateKeyFromAsn1(asn1);
      // https://tools.ietf.org/html/rfc7518#section-6.3.1
      return {
          kty: 'RSA',
          n: bigIntegerToUintBase64url(privateKey.n),
          e: bigIntegerToUintBase64url(privateKey.e),
          d: bigIntegerToUintBase64url(privateKey.d),
          p: bigIntegerToUintBase64url(privateKey.p),
          q: bigIntegerToUintBase64url(privateKey.q),
          dp: bigIntegerToUintBase64url(privateKey.dP),
          dq: bigIntegerToUintBase64url(privateKey.dQ),
          qi: bigIntegerToUintBase64url(privateKey.qInv),
          alg: 'RS256'
      };
  }
  // Convert a JWK key into PKCS#1 in ASN1 DER format
  function jwkToPkcs1(jwk) {
      if (jwk.n == null || jwk.e == null || jwk.d == null || jwk.p == null || jwk.q == null || jwk.dp == null || jwk.dq == null || jwk.qi == null) {
          throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');
      }
      const asn1 = forge$n.pki.privateKeyToAsn1({
          n: base64urlToBigInteger(jwk.n),
          e: base64urlToBigInteger(jwk.e),
          d: base64urlToBigInteger(jwk.d),
          p: base64urlToBigInteger(jwk.p),
          q: base64urlToBigInteger(jwk.q),
          dP: base64urlToBigInteger(jwk.dp),
          dQ: base64urlToBigInteger(jwk.dq),
          qInv: base64urlToBigInteger(jwk.qi)
      });
      return fromString$1(forge$n.asn1.toDer(asn1).getBytes(), 'ascii');
  }
  // Convert a PKCIX in ASN1 DER format to a JWK key
  function pkixToJwk(bytes) {
      const asn1 = forge$n.asn1.fromDer(toString$1(bytes, 'ascii'));
      const publicKey = forge$n.pki.publicKeyFromAsn1(asn1);
      return {
          kty: 'RSA',
          n: bigIntegerToUintBase64url(publicKey.n),
          e: bigIntegerToUintBase64url(publicKey.e)
      };
  }
  // Convert a JWK key to PKCIX in ASN1 DER format
  function jwkToPkix(jwk) {
      if (jwk.n == null || jwk.e == null) {
          throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');
      }
      const asn1 = forge$n.pki.publicKeyToAsn1({
          n: base64urlToBigInteger(jwk.n),
          e: base64urlToBigInteger(jwk.e)
      });
      return fromString$1(forge$n.asn1.toDer(asn1).getBytes(), 'ascii');
  }

  async function generateKey$1(bits) {
      const pair = await webcrypto.get().subtle.generateKey({
          name: 'RSASSA-PKCS1-v1_5',
          modulusLength: bits,
          publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
          hash: { name: 'SHA-256' }
      }, true, ['sign', 'verify']);
      const keys = await exportKey(pair);
      return {
          privateKey: keys[0],
          publicKey: keys[1]
      };
  }
  // Takes a jwk key
  async function unmarshalPrivateKey$1(key) {
      const privateKey = await webcrypto.get().subtle.importKey('jwk', key, {
          name: 'RSASSA-PKCS1-v1_5',
          hash: { name: 'SHA-256' }
      }, true, ['sign']);
      const pair = [
          privateKey,
          await derivePublicFromPrivate(key)
      ];
      const keys = await exportKey({
          privateKey: pair[0],
          publicKey: pair[1]
      });
      return {
          privateKey: keys[0],
          publicKey: keys[1]
      };
  }
  async function hashAndSign$1(key, msg) {
      const privateKey = await webcrypto.get().subtle.importKey('jwk', key, {
          name: 'RSASSA-PKCS1-v1_5',
          hash: { name: 'SHA-256' }
      }, false, ['sign']);
      const sig = await webcrypto.get().subtle.sign({ name: 'RSASSA-PKCS1-v1_5' }, privateKey, Uint8Array.from(msg));
      return new Uint8Array(sig, 0, sig.byteLength);
  }
  async function hashAndVerify$1(key, sig, msg) {
      const publicKey = await webcrypto.get().subtle.importKey('jwk', key, {
          name: 'RSASSA-PKCS1-v1_5',
          hash: { name: 'SHA-256' }
      }, false, ['verify']);
      return webcrypto.get().subtle.verify({ name: 'RSASSA-PKCS1-v1_5' }, publicKey, sig, msg);
  }
  async function exportKey(pair) {
      if (pair.privateKey == null || pair.publicKey == null) {
          throw new CodeError('Private and public key are required', 'ERR_INVALID_PARAMETERS');
      }
      return Promise.all([
          webcrypto.get().subtle.exportKey('jwk', pair.privateKey),
          webcrypto.get().subtle.exportKey('jwk', pair.publicKey)
      ]);
  }
  async function derivePublicFromPrivate(jwKey) {
      return webcrypto.get().subtle.importKey('jwk', {
          kty: jwKey.kty,
          n: jwKey.n,
          e: jwKey.e
      }, {
          name: 'RSASSA-PKCS1-v1_5',
          hash: { name: 'SHA-256' }
      }, true, ['verify']);
  }
  /*

  RSA encryption/decryption for the browser with webcrypto workaround
  "bloody dark magic. webcrypto's why."

  Explanation:
    - Convert JWK to nodeForge
    - Convert msg Uint8Array to nodeForge buffer: ByteBuffer is a "binary-string backed buffer", so let's make our Uint8Array a binary string
    - Convert resulting nodeForge buffer to Uint8Array: it returns a binary string, turn that into a Uint8Array

  */
  function convertKey(key, pub, msg, handle) {
      const fkey = pub ? jwk2pub(key) : jwk2priv(key);
      const fmsg = toString$1(Uint8Array.from(msg), 'ascii');
      const fomsg = handle(fmsg, fkey);
      return fromString$1(fomsg, 'ascii');
  }
  function encrypt(key, msg) {
      return convertKey(key, true, msg, (msg, key) => key.encrypt(msg));
  }
  function decrypt(key, msg) {
      return convertKey(key, false, msg, (msg, key) => key.decrypt(msg));
  }

  class RsaPublicKey {
      _key;
      constructor(key) {
          this._key = key;
      }
      async verify(data, sig) {
          return hashAndVerify$1(this._key, sig, data);
      }
      marshal() {
          return jwkToPkix(this._key);
      }
      get bytes() {
          return PublicKey.encode({
              Type: KeyType.RSA,
              Data: this.marshal()
          }).subarray();
      }
      encrypt(bytes) {
          return encrypt(this._key, bytes);
      }
      equals(key) {
          return equals(this.bytes, key.bytes);
      }
      async hash() {
          const { bytes } = await sha256.digest(this.bytes);
          return bytes;
      }
  }
  class RsaPrivateKey {
      _key;
      _publicKey;
      constructor(key, publicKey) {
          this._key = key;
          this._publicKey = publicKey;
      }
      genSecret() {
          return randomBytes(16);
      }
      async sign(message) {
          return hashAndSign$1(this._key, message);
      }
      get public() {
          if (this._publicKey == null) {
              throw new CodeError('public key not provided', 'ERR_PUBKEY_NOT_PROVIDED');
          }
          return new RsaPublicKey(this._publicKey);
      }
      decrypt(bytes) {
          return decrypt(this._key, bytes);
      }
      marshal() {
          return jwkToPkcs1(this._key);
      }
      get bytes() {
          return PrivateKey.encode({
              Type: KeyType.RSA,
              Data: this.marshal()
          }).subarray();
      }
      equals(key) {
          return equals(this.bytes, key.bytes);
      }
      async hash() {
          const { bytes } = await sha256.digest(this.bytes);
          return bytes;
      }
      /**
       * Gets the ID of the key.
       *
       * The key id is the base58 encoding of the SHA-256 multihash of its public key.
       * The public key is a protobuf encoding containing a type and the DER encoding
       * of the PKCS SubjectPublicKeyInfo.
       */
      async id() {
          const hash = await this.public.hash();
          return toString$1(hash, 'base58btc');
      }
      /**
       * Exports the key into a password protected PEM format
       */
      async export(password, format = 'pkcs-8') {
          if (format === 'pkcs-8') {
              const buffer = new forge$n.util.ByteBuffer(this.marshal());
              const asn1 = forge$n.asn1.fromDer(buffer);
              const privateKey = forge$n.pki.privateKeyFromAsn1(asn1);
              const options = {
                  algorithm: 'aes256',
                  count: 10000,
                  saltSize: 128 / 8,
                  prfAlgorithm: 'sha512'
              };
              return forge$n.pki.encryptRsaPrivateKey(privateKey, password, options);
          }
          else if (format === 'libp2p-key') {
              return exporter(this.bytes, password);
          }
          else {
              throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');
          }
      }
  }
  async function unmarshalRsaPrivateKey(bytes) {
      const jwk = pkcs1ToJwk(bytes);
      const keys = await unmarshalPrivateKey$1(jwk);
      return new RsaPrivateKey(keys.privateKey, keys.publicKey);
  }
  function unmarshalRsaPublicKey(bytes) {
      const jwk = pkixToJwk(bytes);
      return new RsaPublicKey(jwk);
  }
  async function fromJwk(jwk) {
      const keys = await unmarshalPrivateKey$1(jwk);
      return new RsaPrivateKey(keys.privateKey, keys.publicKey);
  }
  async function generateKeyPair$2(bits) {
      const keys = await generateKey$1(bits);
      return new RsaPrivateKey(keys.privateKey, keys.publicKey);
  }

  var RSA = /*#__PURE__*/Object.freeze({
    __proto__: null,
    RsaPrivateKey: RsaPrivateKey,
    RsaPublicKey: RsaPublicKey,
    fromJwk: fromJwk,
    generateKeyPair: generateKeyPair$2,
    unmarshalRsaPrivateKey: unmarshalRsaPrivateKey,
    unmarshalRsaPublicKey: unmarshalRsaPublicKey
  });

  function generateKey() {
      return utils.randomPrivateKey();
  }
  /**
   * Hash and sign message with private key
   */
  async function hashAndSign(key, msg) {
      const { digest } = await sha256.digest(msg);
      try {
          return await sign(digest, key);
      }
      catch (err) {
          throw new CodeError(String(err), 'ERR_INVALID_INPUT');
      }
  }
  /**
   * Hash message and verify signature with public key
   */
  async function hashAndVerify(key, sig, msg) {
      try {
          const { digest } = await sha256.digest(msg);
          return verify(sig, digest, key);
      }
      catch (err) {
          throw new CodeError(String(err), 'ERR_INVALID_INPUT');
      }
  }
  function compressPublicKey(key) {
      const point = Point.fromHex(key).toRawBytes(true);
      return point;
  }
  function validatePrivateKey(key) {
      try {
          getPublicKey(key, true);
      }
      catch (err) {
          throw new CodeError(String(err), 'ERR_INVALID_PRIVATE_KEY');
      }
  }
  function validatePublicKey(key) {
      try {
          Point.fromHex(key);
      }
      catch (err) {
          throw new CodeError(String(err), 'ERR_INVALID_PUBLIC_KEY');
      }
  }
  function computePublicKey(privateKey) {
      try {
          return getPublicKey(privateKey, true);
      }
      catch (err) {
          throw new CodeError(String(err), 'ERR_INVALID_PRIVATE_KEY');
      }
  }

  class Secp256k1PublicKey {
      _key;
      constructor(key) {
          validatePublicKey(key);
          this._key = key;
      }
      async verify(data, sig) {
          return hashAndVerify(this._key, sig, data);
      }
      marshal() {
          return compressPublicKey(this._key);
      }
      get bytes() {
          return PublicKey.encode({
              Type: KeyType.Secp256k1,
              Data: this.marshal()
          }).subarray();
      }
      equals(key) {
          return equals(this.bytes, key.bytes);
      }
      async hash() {
          const { bytes } = await sha256.digest(this.bytes);
          return bytes;
      }
  }
  class Secp256k1PrivateKey {
      _key;
      _publicKey;
      constructor(key, publicKey) {
          this._key = key;
          this._publicKey = publicKey ?? computePublicKey(key);
          validatePrivateKey(this._key);
          validatePublicKey(this._publicKey);
      }
      async sign(message) {
          return hashAndSign(this._key, message);
      }
      get public() {
          return new Secp256k1PublicKey(this._publicKey);
      }
      marshal() {
          return this._key;
      }
      get bytes() {
          return PrivateKey.encode({
              Type: KeyType.Secp256k1,
              Data: this.marshal()
          }).subarray();
      }
      equals(key) {
          return equals(this.bytes, key.bytes);
      }
      async hash() {
          const { bytes } = await sha256.digest(this.bytes);
          return bytes;
      }
      /**
       * Gets the ID of the key.
       *
       * The key id is the base58 encoding of the SHA-256 multihash of its public key.
       * The public key is a protobuf encoding containing a type and the DER encoding
       * of the PKCS SubjectPublicKeyInfo.
       */
      async id() {
          const hash = await this.public.hash();
          return toString$1(hash, 'base58btc');
      }
      /**
       * Exports the key into a password protected `format`
       */
      async export(password, format = 'libp2p-key') {
          if (format === 'libp2p-key') {
              return exporter(this.bytes, password);
          }
          else {
              throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');
          }
      }
  }
  function unmarshalSecp256k1PrivateKey(bytes) {
      return new Secp256k1PrivateKey(bytes);
  }
  function unmarshalSecp256k1PublicKey(bytes) {
      return new Secp256k1PublicKey(bytes);
  }
  async function generateKeyPair$1() {
      const privateKeyBytes = generateKey();
      return new Secp256k1PrivateKey(privateKeyBytes);
  }

  var Secp256k1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Secp256k1PrivateKey: Secp256k1PrivateKey,
    Secp256k1PublicKey: Secp256k1PublicKey,
    generateKeyPair: generateKeyPair$1,
    unmarshalSecp256k1PrivateKey: unmarshalSecp256k1PrivateKey,
    unmarshalSecp256k1PublicKey: unmarshalSecp256k1PublicKey
  });

  const supportedKeys = {
      rsa: RSA,
      ed25519: Ed25519,
      secp256k1: Secp256k1
  };
  function unsupportedKey(type) {
      const supported = Object.keys(supportedKeys).join(' / ');
      return new CodeError(`invalid or unsupported key type ${type}. Must be ${supported}`, 'ERR_UNSUPPORTED_KEY_TYPE');
  }
  function typeToKey(type) {
      type = type.toLowerCase();
      if (type === 'rsa' || type === 'ed25519' || type === 'secp256k1') {
          return supportedKeys[type];
      }
      throw unsupportedKey(type);
  }
  // Generates a keypair of the given type and bitsize
  async function generateKeyPair(type, bits) {
      return typeToKey(type).generateKeyPair(bits ?? 2048);
  }
  // Converts a protobuf serialized public key into its
  // representative object
  function unmarshalPublicKey(buf) {
      const decoded = PublicKey.decode(buf);
      const data = decoded.Data ?? new Uint8Array();
      switch (decoded.Type) {
          case KeyType.RSA:
              return supportedKeys.rsa.unmarshalRsaPublicKey(data);
          case KeyType.Ed25519:
              return supportedKeys.ed25519.unmarshalEd25519PublicKey(data);
          case KeyType.Secp256k1:
              return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data);
          default:
              throw unsupportedKey(decoded.Type ?? 'RSA');
      }
  }
  // Converts a public key object into a protobuf serialized public key
  function marshalPublicKey(key, type) {
      type = (type ?? 'rsa').toLowerCase();
      typeToKey(type); // check type
      return key.bytes;
  }
  // Converts a protobuf serialized private key into its
  // representative object
  async function unmarshalPrivateKey(buf) {
      const decoded = PrivateKey.decode(buf);
      const data = decoded.Data ?? new Uint8Array();
      switch (decoded.Type) {
          case KeyType.RSA:
              return supportedKeys.rsa.unmarshalRsaPrivateKey(data);
          case KeyType.Ed25519:
              return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data);
          case KeyType.Secp256k1:
              return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data);
          default:
              throw unsupportedKey(decoded.Type ?? 'RSA');
      }
  }
  // Converts a private key object into a protobuf serialized private key
  function marshalPrivateKey(key, type) {
      type = (type ?? 'rsa').toLowerCase();
      typeToKey(type); // check type
      return key.bytes;
  }
  /**
   *
   * @param {string} encryptedKey
   * @param {string} password
   */
  async function importKey(encryptedKey, password) {
      try {
          const key = await importer(encryptedKey, password);
          return await unmarshalPrivateKey(key);
      }
      catch (_) {
          // Ignore and try the old pem decrypt
      }
      // Only rsa supports pem right now
      const key = forge$n.pki.decryptRsaPrivateKey(encryptedKey, password);
      if (key === null) {
          throw new CodeError('Cannot read the key, most likely the password is wrong or not a RSA key', 'ERR_CANNOT_DECRYPT_PEM');
      }
      let der = forge$n.asn1.toDer(forge$n.pki.privateKeyToAsn1(key));
      der = fromString$1(der.getBytes(), 'ascii');
      return supportedKeys.rsa.unmarshalRsaPrivateKey(der);
  }

  /**
   * Any object that implements this Symbol as a property should return a
   * ContentRouting instance as the property value, similar to how
   * `Symbol.Iterable` can be used to return an `Iterable` from an `Iterator`.
   *
   * @example
   *
   * ```js
   * import { contentRouting, ContentRouting } from '@libp2p/content-routing'
   *
   * class MyContentRouter implements ContentRouting {
   *   get [contentRouting] () {
   *     return this
   *   }
   *
   *   // ...other methods
   * }
   * ```
   */
  const contentRouting = Symbol.for('@libp2p/content-routing');

  /**
   * Any object that implements this Symbol as a property should return a
   * PeerDiscovery instance as the property value, similar to how
   * `Symbol.Iterable` can be used to return an `Iterable` from an `Iterator`.
   *
   * @example
   *
   * ```js
   * import { peerDiscovery, PeerDiscovery } from '@libp2p/peer-discovery'
   *
   * class MyPeerDiscoverer implements PeerDiscovery {
   *   get [peerDiscovery] () {
   *     return this
   *   }
   *
   *   // ...other methods
   * }
   * ```
   */
  const peerDiscovery = Symbol.for('@libp2p/peer-discovery');

  /**
   * Any object that implements this Symbol as a property should return a
   * PeerRouting instance as the property value, similar to how
   * `Symbol.Iterable` can be used to return an `Iterable` from an `Iterator`.
   *
   * @example
   *
   * ```js
   * import { peerRouting, PeerRouting } from '@libp2p/peer-routing'
   *
   * class MyPeerRouter implements PeerRouting {
   *   get [peerRouting] () {
   *     return this
   *   }
   *
   *   // ...other methods
   * }
   * ```
   */
  const peerRouting = Symbol.for('@libp2p/peer-routing');

  /**
   * Adds types to the EventTarget class. Hopefully this won't be necessary forever.
   *
   * https://github.com/microsoft/TypeScript/issues/28357
   * https://github.com/microsoft/TypeScript/issues/43477
   * https://github.com/microsoft/TypeScript/issues/299
   * etc
   */
  let EventEmitter$1 = class EventEmitter extends EventTarget {
      #listeners = new Map();
      listenerCount(type) {
          const listeners = this.#listeners.get(type);
          if (listeners == null) {
              return 0;
          }
          return listeners.length;
      }
      addEventListener(type, listener, options) {
          super.addEventListener(type, listener, options);
          let list = this.#listeners.get(type);
          if (list == null) {
              list = [];
              this.#listeners.set(type, list);
          }
          list.push({
              callback: listener,
              once: (options !== true && options !== false && options?.once) ?? false
          });
      }
      removeEventListener(type, listener, options) {
          super.removeEventListener(type.toString(), listener ?? null, options);
          let list = this.#listeners.get(type);
          if (list == null) {
              return;
          }
          list = list.filter(({ callback }) => callback !== listener);
          this.#listeners.set(type, list);
      }
      dispatchEvent(event) {
          const result = super.dispatchEvent(event);
          let list = this.#listeners.get(event.type);
          if (list == null) {
              return result;
          }
          list = list.filter(({ once }) => !once);
          this.#listeners.set(event.type, list);
          return result;
      }
      safeDispatchEvent(type, detail) {
          return this.dispatchEvent(new CustomEvent(type, detail));
      }
  };
  /**
   * CustomEvent is a standard event but it's not supported by node.
   *
   * Remove this when https://github.com/nodejs/node/issues/40678 is closed.
   *
   * Ref: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent
   */
  class CustomEventPolyfill extends Event {
      /** Returns any custom data event was created with. Typically used for synthetic events. */
      detail;
      constructor(message, data) {
          super(message, data);
          // @ts-expect-error could be undefined
          this.detail = data?.detail;
      }
  }
  const CustomEvent = globalThis.CustomEvent ?? CustomEventPolyfill;

  /**
   * Maps an IPFS hash name to its node-forge equivalent.
   *
   * See https://github.com/multiformats/multihash/blob/master/hashtable.csv
   *
   * @private
   */
  const hashName = {
      sha1: 'sha1',
      'sha2-256': 'sha256',
      'sha2-512': 'sha512'
  };
  /**
   * Computes the Password-Based Key Derivation Function 2.
   */
  function pbkdf2(password, salt, iterations, keySize, hash) {
      if (hash !== 'sha1' && hash !== 'sha2-256' && hash !== 'sha2-512') {
          const types = Object.keys(hashName).join(' / ');
          throw new CodeError(`Hash '${hash}' is unknown or not supported. Must be ${types}`, 'ERR_UNSUPPORTED_HASH_TYPE');
      }
      const hasher = hashName[hash];
      const dek = forgePbkdf2(password, salt, iterations, keySize, hasher);
      return forgeUtil.encode64(dek, null);
  }

  var browser$2 = {exports: {}};

  /**
   * Helpers.
   */

  var ms;
  var hasRequiredMs;

  function requireMs () {
  	if (hasRequiredMs) return ms;
  	hasRequiredMs = 1;
  	var s = 1000;
  	var m = s * 60;
  	var h = m * 60;
  	var d = h * 24;
  	var w = d * 7;
  	var y = d * 365.25;

  	/**
  	 * Parse or format the given `val`.
  	 *
  	 * Options:
  	 *
  	 *  - `long` verbose formatting [false]
  	 *
  	 * @param {String|Number} val
  	 * @param {Object} [options]
  	 * @throws {Error} throw an error if val is not a non-empty string or a number
  	 * @return {String|Number}
  	 * @api public
  	 */

  	ms = function(val, options) {
  	  options = options || {};
  	  var type = typeof val;
  	  if (type === 'string' && val.length > 0) {
  	    return parse(val);
  	  } else if (type === 'number' && isFinite(val)) {
  	    return options.long ? fmtLong(val) : fmtShort(val);
  	  }
  	  throw new Error(
  	    'val is not a non-empty string or a valid number. val=' +
  	      JSON.stringify(val)
  	  );
  	};

  	/**
  	 * Parse the given `str` and return milliseconds.
  	 *
  	 * @param {String} str
  	 * @return {Number}
  	 * @api private
  	 */

  	function parse(str) {
  	  str = String(str);
  	  if (str.length > 100) {
  	    return;
  	  }
  	  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
  	    str
  	  );
  	  if (!match) {
  	    return;
  	  }
  	  var n = parseFloat(match[1]);
  	  var type = (match[2] || 'ms').toLowerCase();
  	  switch (type) {
  	    case 'years':
  	    case 'year':
  	    case 'yrs':
  	    case 'yr':
  	    case 'y':
  	      return n * y;
  	    case 'weeks':
  	    case 'week':
  	    case 'w':
  	      return n * w;
  	    case 'days':
  	    case 'day':
  	    case 'd':
  	      return n * d;
  	    case 'hours':
  	    case 'hour':
  	    case 'hrs':
  	    case 'hr':
  	    case 'h':
  	      return n * h;
  	    case 'minutes':
  	    case 'minute':
  	    case 'mins':
  	    case 'min':
  	    case 'm':
  	      return n * m;
  	    case 'seconds':
  	    case 'second':
  	    case 'secs':
  	    case 'sec':
  	    case 's':
  	      return n * s;
  	    case 'milliseconds':
  	    case 'millisecond':
  	    case 'msecs':
  	    case 'msec':
  	    case 'ms':
  	      return n;
  	    default:
  	      return undefined;
  	  }
  	}

  	/**
  	 * Short format for `ms`.
  	 *
  	 * @param {Number} ms
  	 * @return {String}
  	 * @api private
  	 */

  	function fmtShort(ms) {
  	  var msAbs = Math.abs(ms);
  	  if (msAbs >= d) {
  	    return Math.round(ms / d) + 'd';
  	  }
  	  if (msAbs >= h) {
  	    return Math.round(ms / h) + 'h';
  	  }
  	  if (msAbs >= m) {
  	    return Math.round(ms / m) + 'm';
  	  }
  	  if (msAbs >= s) {
  	    return Math.round(ms / s) + 's';
  	  }
  	  return ms + 'ms';
  	}

  	/**
  	 * Long format for `ms`.
  	 *
  	 * @param {Number} ms
  	 * @return {String}
  	 * @api private
  	 */

  	function fmtLong(ms) {
  	  var msAbs = Math.abs(ms);
  	  if (msAbs >= d) {
  	    return plural(ms, msAbs, d, 'day');
  	  }
  	  if (msAbs >= h) {
  	    return plural(ms, msAbs, h, 'hour');
  	  }
  	  if (msAbs >= m) {
  	    return plural(ms, msAbs, m, 'minute');
  	  }
  	  if (msAbs >= s) {
  	    return plural(ms, msAbs, s, 'second');
  	  }
  	  return ms + ' ms';
  	}

  	/**
  	 * Pluralization helper.
  	 */

  	function plural(ms, msAbs, n, name) {
  	  var isPlural = msAbs >= n * 1.5;
  	  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
  	}
  	return ms;
  }

  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   */

  function setup(env) {
  	createDebug.debug = createDebug;
  	createDebug.default = createDebug;
  	createDebug.coerce = coerce;
  	createDebug.disable = disable;
  	createDebug.enable = enable;
  	createDebug.enabled = enabled;
  	createDebug.humanize = requireMs();
  	createDebug.destroy = destroy;

  	Object.keys(env).forEach(key => {
  		createDebug[key] = env[key];
  	});

  	/**
  	* The currently active debug mode names, and names to skip.
  	*/

  	createDebug.names = [];
  	createDebug.skips = [];

  	/**
  	* Map of special "%n" handling functions, for the debug "format" argument.
  	*
  	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  	*/
  	createDebug.formatters = {};

  	/**
  	* Selects a color for a debug namespace
  	* @param {String} namespace The namespace string for the debug instance to be colored
  	* @return {Number|String} An ANSI color code for the given namespace
  	* @api private
  	*/
  	function selectColor(namespace) {
  		let hash = 0;

  		for (let i = 0; i < namespace.length; i++) {
  			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
  			hash |= 0; // Convert to 32bit integer
  		}

  		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  	}
  	createDebug.selectColor = selectColor;

  	/**
  	* Create a debugger with the given `namespace`.
  	*
  	* @param {String} namespace
  	* @return {Function}
  	* @api public
  	*/
  	function createDebug(namespace) {
  		let prevTime;
  		let enableOverride = null;
  		let namespacesCache;
  		let enabledCache;

  		function debug(...args) {
  			// Disabled?
  			if (!debug.enabled) {
  				return;
  			}

  			const self = debug;

  			// Set `diff` timestamp
  			const curr = Number(new Date());
  			const ms = curr - (prevTime || curr);
  			self.diff = ms;
  			self.prev = prevTime;
  			self.curr = curr;
  			prevTime = curr;

  			args[0] = createDebug.coerce(args[0]);

  			if (typeof args[0] !== 'string') {
  				// Anything else let's inspect with %O
  				args.unshift('%O');
  			}

  			// Apply any `formatters` transformations
  			let index = 0;
  			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
  				// If we encounter an escaped % then don't increase the array index
  				if (match === '%%') {
  					return '%';
  				}
  				index++;
  				const formatter = createDebug.formatters[format];
  				if (typeof formatter === 'function') {
  					const val = args[index];
  					match = formatter.call(self, val);

  					// Now we need to remove `args[index]` since it's inlined in the `format`
  					args.splice(index, 1);
  					index--;
  				}
  				return match;
  			});

  			// Apply env-specific formatting (colors, etc.)
  			createDebug.formatArgs.call(self, args);

  			const logFn = self.log || createDebug.log;
  			logFn.apply(self, args);
  		}

  		debug.namespace = namespace;
  		debug.useColors = createDebug.useColors();
  		debug.color = createDebug.selectColor(namespace);
  		debug.extend = extend;
  		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

  		Object.defineProperty(debug, 'enabled', {
  			enumerable: true,
  			configurable: false,
  			get: () => {
  				if (enableOverride !== null) {
  					return enableOverride;
  				}
  				if (namespacesCache !== createDebug.namespaces) {
  					namespacesCache = createDebug.namespaces;
  					enabledCache = createDebug.enabled(namespace);
  				}

  				return enabledCache;
  			},
  			set: v => {
  				enableOverride = v;
  			}
  		});

  		// Env-specific initialization logic for debug instances
  		if (typeof createDebug.init === 'function') {
  			createDebug.init(debug);
  		}

  		return debug;
  	}

  	function extend(namespace, delimiter) {
  		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
  		newDebug.log = this.log;
  		return newDebug;
  	}

  	/**
  	* Enables a debug mode by namespaces. This can include modes
  	* separated by a colon and wildcards.
  	*
  	* @param {String} namespaces
  	* @api public
  	*/
  	function enable(namespaces) {
  		createDebug.save(namespaces);
  		createDebug.namespaces = namespaces;

  		createDebug.names = [];
  		createDebug.skips = [];

  		let i;
  		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  		const len = split.length;

  		for (i = 0; i < len; i++) {
  			if (!split[i]) {
  				// ignore empty strings
  				continue;
  			}

  			namespaces = split[i].replace(/\*/g, '.*?');

  			if (namespaces[0] === '-') {
  				createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
  			} else {
  				createDebug.names.push(new RegExp('^' + namespaces + '$'));
  			}
  		}
  	}

  	/**
  	* Disable debug output.
  	*
  	* @return {String} namespaces
  	* @api public
  	*/
  	function disable() {
  		const namespaces = [
  			...createDebug.names.map(toNamespace),
  			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
  		].join(',');
  		createDebug.enable('');
  		return namespaces;
  	}

  	/**
  	* Returns true if the given mode name is enabled, false otherwise.
  	*
  	* @param {String} name
  	* @return {Boolean}
  	* @api public
  	*/
  	function enabled(name) {
  		if (name[name.length - 1] === '*') {
  			return true;
  		}

  		let i;
  		let len;

  		for (i = 0, len = createDebug.skips.length; i < len; i++) {
  			if (createDebug.skips[i].test(name)) {
  				return false;
  			}
  		}

  		for (i = 0, len = createDebug.names.length; i < len; i++) {
  			if (createDebug.names[i].test(name)) {
  				return true;
  			}
  		}

  		return false;
  	}

  	/**
  	* Convert regexp to namespace
  	*
  	* @param {RegExp} regxep
  	* @return {String} namespace
  	* @api private
  	*/
  	function toNamespace(regexp) {
  		return regexp.toString()
  			.substring(2, regexp.toString().length - 2)
  			.replace(/\.\*\?$/, '*');
  	}

  	/**
  	* Coerce `val`.
  	*
  	* @param {Mixed} val
  	* @return {Mixed}
  	* @api private
  	*/
  	function coerce(val) {
  		if (val instanceof Error) {
  			return val.stack || val.message;
  		}
  		return val;
  	}

  	/**
  	* XXX DO NOT USE. This is a temporary stub function.
  	* XXX It WILL be removed in the next major release.
  	*/
  	function destroy() {
  		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
  	}

  	createDebug.enable(createDebug.load());

  	return createDebug;
  }

  var common = setup;

  /* eslint-env browser */

  (function (module, exports) {
  	/**
  	 * This is the web browser implementation of `debug()`.
  	 */

  	exports.formatArgs = formatArgs;
  	exports.save = save;
  	exports.load = load;
  	exports.useColors = useColors;
  	exports.storage = localstorage();
  	exports.destroy = (() => {
  		let warned = false;

  		return () => {
  			if (!warned) {
  				warned = true;
  				console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
  			}
  		};
  	})();

  	/**
  	 * Colors.
  	 */

  	exports.colors = [
  		'#0000CC',
  		'#0000FF',
  		'#0033CC',
  		'#0033FF',
  		'#0066CC',
  		'#0066FF',
  		'#0099CC',
  		'#0099FF',
  		'#00CC00',
  		'#00CC33',
  		'#00CC66',
  		'#00CC99',
  		'#00CCCC',
  		'#00CCFF',
  		'#3300CC',
  		'#3300FF',
  		'#3333CC',
  		'#3333FF',
  		'#3366CC',
  		'#3366FF',
  		'#3399CC',
  		'#3399FF',
  		'#33CC00',
  		'#33CC33',
  		'#33CC66',
  		'#33CC99',
  		'#33CCCC',
  		'#33CCFF',
  		'#6600CC',
  		'#6600FF',
  		'#6633CC',
  		'#6633FF',
  		'#66CC00',
  		'#66CC33',
  		'#9900CC',
  		'#9900FF',
  		'#9933CC',
  		'#9933FF',
  		'#99CC00',
  		'#99CC33',
  		'#CC0000',
  		'#CC0033',
  		'#CC0066',
  		'#CC0099',
  		'#CC00CC',
  		'#CC00FF',
  		'#CC3300',
  		'#CC3333',
  		'#CC3366',
  		'#CC3399',
  		'#CC33CC',
  		'#CC33FF',
  		'#CC6600',
  		'#CC6633',
  		'#CC9900',
  		'#CC9933',
  		'#CCCC00',
  		'#CCCC33',
  		'#FF0000',
  		'#FF0033',
  		'#FF0066',
  		'#FF0099',
  		'#FF00CC',
  		'#FF00FF',
  		'#FF3300',
  		'#FF3333',
  		'#FF3366',
  		'#FF3399',
  		'#FF33CC',
  		'#FF33FF',
  		'#FF6600',
  		'#FF6633',
  		'#FF9900',
  		'#FF9933',
  		'#FFCC00',
  		'#FFCC33'
  	];

  	/**
  	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
  	 * and the Firebug extension (any Firefox version) are known
  	 * to support "%c" CSS customizations.
  	 *
  	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
  	 */

  	// eslint-disable-next-line complexity
  	function useColors() {
  		// NB: In an Electron preload script, document will be defined but not fully
  		// initialized. Since we know we're in Chrome, we'll just detect this case
  		// explicitly
  		if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
  			return true;
  		}

  		// Internet Explorer and Edge do not support colors.
  		if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
  			return false;
  		}

  		// Is webkit? http://stackoverflow.com/a/16459606/376773
  		// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  		return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
  			// Is firebug? http://stackoverflow.com/a/398120/376773
  			(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
  			// Is firefox >= v31?
  			// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
  			// Double check webkit in userAgent just in case we are in a worker
  			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
  	}

  	/**
  	 * Colorize log arguments if enabled.
  	 *
  	 * @api public
  	 */

  	function formatArgs(args) {
  		args[0] = (this.useColors ? '%c' : '') +
  			this.namespace +
  			(this.useColors ? ' %c' : ' ') +
  			args[0] +
  			(this.useColors ? '%c ' : ' ') +
  			'+' + module.exports.humanize(this.diff);

  		if (!this.useColors) {
  			return;
  		}

  		const c = 'color: ' + this.color;
  		args.splice(1, 0, c, 'color: inherit');

  		// The final "%c" is somewhat tricky, because there could be other
  		// arguments passed either before or after the %c, so we need to
  		// figure out the correct index to insert the CSS into
  		let index = 0;
  		let lastC = 0;
  		args[0].replace(/%[a-zA-Z%]/g, match => {
  			if (match === '%%') {
  				return;
  			}
  			index++;
  			if (match === '%c') {
  				// We only are interested in the *last* %c
  				// (the user may have provided their own)
  				lastC = index;
  			}
  		});

  		args.splice(lastC, 0, c);
  	}

  	/**
  	 * Invokes `console.debug()` when available.
  	 * No-op when `console.debug` is not a "function".
  	 * If `console.debug` is not available, falls back
  	 * to `console.log`.
  	 *
  	 * @api public
  	 */
  	exports.log = console.debug || console.log || (() => {});

  	/**
  	 * Save `namespaces`.
  	 *
  	 * @param {String} namespaces
  	 * @api private
  	 */
  	function save(namespaces) {
  		try {
  			if (namespaces) {
  				exports.storage.setItem('debug', namespaces);
  			} else {
  				exports.storage.removeItem('debug');
  			}
  		} catch (error) {
  			// Swallow
  			// XXX (@Qix-) should we be logging these?
  		}
  	}

  	/**
  	 * Load `namespaces`.
  	 *
  	 * @return {String} returns the previously persisted debug modes
  	 * @api private
  	 */
  	function load() {
  		let r;
  		try {
  			r = exports.storage.getItem('debug');
  		} catch (error) {
  			// Swallow
  			// XXX (@Qix-) should we be logging these?
  		}

  		// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  		if (!r && typeof process !== 'undefined' && 'env' in process) {
  			r = process.env.DEBUG;
  		}

  		return r;
  	}

  	/**
  	 * Localstorage attempts to return the localstorage.
  	 *
  	 * This is necessary because safari throws
  	 * when a user disables cookies/localstorage
  	 * and you attempt to access it.
  	 *
  	 * @return {LocalStorage}
  	 * @api private
  	 */

  	function localstorage() {
  		try {
  			// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
  			// The Browser also has localStorage in the global context.
  			return localStorage;
  		} catch (error) {
  			// Swallow
  			// XXX (@Qix-) should we be logging these?
  		}
  	}

  	module.exports = common(exports);

  	const {formatters} = module.exports;

  	/**
  	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
  	 */

  	formatters.j = function (v) {
  		try {
  			return JSON.stringify(v);
  		} catch (error) {
  			return '[UnexpectedJSONParseError]: ' + error.message;
  		}
  	}; 
  } (browser$2, browser$2.exports));

  var browserExports = browser$2.exports;
  var debug = /*@__PURE__*/getDefaultExportFromCjs(browserExports);

  // Add a formatter for converting to a base58 string
  debug.formatters.b = (v) => {
      return v == null ? 'undefined' : base58btc.baseEncode(v);
  };
  // Add a formatter for converting to a base32 string
  debug.formatters.t = (v) => {
      return v == null ? 'undefined' : base32.baseEncode(v);
  };
  // Add a formatter for converting to a base64 string
  debug.formatters.m = (v) => {
      return v == null ? 'undefined' : base64$3.baseEncode(v);
  };
  // Add a formatter for stringifying peer ids
  debug.formatters.p = (v) => {
      return v == null ? 'undefined' : v.toString();
  };
  // Add a formatter for stringifying CIDs
  debug.formatters.c = (v) => {
      return v == null ? 'undefined' : v.toString();
  };
  // Add a formatter for stringifying Datastore keys
  debug.formatters.k = (v) => {
      return v == null ? 'undefined' : v.toString();
  };
  // Add a formatter for stringifying Multiaddrs
  debug.formatters.a = (v) => {
      return v == null ? 'undefined' : v.toString();
  };
  function createDisabledLogger(namespace) {
      const logger = () => { };
      logger.enabled = false;
      logger.color = '';
      logger.diff = 0;
      logger.log = () => { };
      logger.namespace = namespace;
      logger.destroy = () => true;
      logger.extend = () => logger;
      return logger;
  }
  function logger(name) {
      // trace logging is a no-op by default
      let trace = createDisabledLogger(`${name}:trace`);
      // look at all the debug names and see if trace logging has explicitly been enabled
      if (debug.enabled(`${name}:trace`) && debug.names.map(r => r.toString()).find(n => n.includes(':trace')) != null) {
          trace = debug(`${name}:trace`);
      }
      return Object.assign(debug(name), {
          error: debug(`${name}:error`),
          trace
      });
  }

  const symbol$3 = Symbol.for('@libp2p/peer-id');
  function isPeerId(other) {
      return other != null && Boolean(other[symbol$3]);
  }

  const inspect$1 = Symbol.for('nodejs.util.inspect.custom');
  const baseDecoder = Object
      .values(bases)
      .map(codec => codec.decoder)
      // @ts-expect-error https://github.com/multiformats/js-multiformats/issues/141
      .reduce((acc, curr) => acc.or(curr), bases.identity.decoder);
  // these values are from https://github.com/multiformats/multicodec/blob/master/table.csv
  const LIBP2P_KEY_CODE = 0x72;
  const MARSHALLED_ED225519_PUBLIC_KEY_LENGTH = 36;
  const MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH = 37;
  class PeerIdImpl {
      type;
      multihash;
      privateKey;
      publicKey;
      string;
      constructor(init) {
          this.type = init.type;
          this.multihash = init.multihash;
          this.privateKey = init.privateKey;
          // mark string cache as non-enumerable
          Object.defineProperty(this, 'string', {
              enumerable: false,
              writable: true
          });
      }
      get [Symbol.toStringTag]() {
          return `PeerId(${this.toString()})`;
      }
      [symbol$3] = true;
      toString() {
          if (this.string == null) {
              this.string = base58btc.encode(this.multihash.bytes).slice(1);
          }
          return this.string;
      }
      // return self-describing String representation
      // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209
      toCID() {
          return CID.createV1(LIBP2P_KEY_CODE, this.multihash);
      }
      toBytes() {
          return this.multihash.bytes;
      }
      /**
       * Returns Multiaddr as a JSON string
       */
      toJSON() {
          return this.toString();
      }
      /**
       * Checks the equality of `this` peer against a given PeerId
       */
      equals(id) {
          if (id instanceof Uint8Array) {
              return equals(this.multihash.bytes, id);
          }
          else if (typeof id === 'string') {
              return peerIdFromString(id).equals(this);
          }
          else if (id?.multihash?.bytes != null) {
              return equals(this.multihash.bytes, id.multihash.bytes);
          }
          else {
              throw new Error('not valid Id');
          }
      }
      /**
       * Returns PeerId as a human-readable string
       * https://nodejs.org/api/util.html#utilinspectcustom
       *
       * @example
       * ```js
       * import { peerIdFromString } from '@libp2p/peer-id'
       *
       * console.info(peerIdFromString('QmFoo'))
       * // 'PeerId(QmFoo)'
       * ```
       */
      [inspect$1]() {
          return `PeerId(${this.toString()})`;
      }
  }
  class RSAPeerIdImpl extends PeerIdImpl {
      type = 'RSA';
      publicKey;
      constructor(init) {
          super({ ...init, type: 'RSA' });
          this.publicKey = init.publicKey;
      }
  }
  class Ed25519PeerIdImpl extends PeerIdImpl {
      type = 'Ed25519';
      publicKey;
      constructor(init) {
          super({ ...init, type: 'Ed25519' });
          this.publicKey = init.multihash.digest;
      }
  }
  class Secp256k1PeerIdImpl extends PeerIdImpl {
      type = 'secp256k1';
      publicKey;
      constructor(init) {
          super({ ...init, type: 'secp256k1' });
          this.publicKey = init.multihash.digest;
      }
  }
  function peerIdFromPeerId(other) {
      if (other.type === 'RSA') {
          return new RSAPeerIdImpl(other);
      }
      if (other.type === 'Ed25519') {
          return new Ed25519PeerIdImpl(other);
      }
      if (other.type === 'secp256k1') {
          return new Secp256k1PeerIdImpl(other);
      }
      throw new CodeError('Not a PeerId', 'ERR_INVALID_PARAMETERS');
  }
  function peerIdFromString(str, decoder) {
      if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {
          // identity hash ed25519/secp256k1 key or sha2-256 hash of
          // rsa public key - base58btc encoded either way
          const multihash = decode$2(base58btc.decode(`z${str}`));
          if (str.startsWith('12D')) {
              return new Ed25519PeerIdImpl({ multihash });
          }
          else if (str.startsWith('16U')) {
              return new Secp256k1PeerIdImpl({ multihash });
          }
          else {
              return new RSAPeerIdImpl({ multihash });
          }
      }
      return peerIdFromBytes(baseDecoder.decode(str));
  }
  function peerIdFromBytes(buf) {
      try {
          const multihash = decode$2(buf);
          if (multihash.code === identity.code) {
              if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {
                  return new Ed25519PeerIdImpl({ multihash });
              }
              else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {
                  return new Secp256k1PeerIdImpl({ multihash });
              }
          }
          if (multihash.code === sha256.code) {
              return new RSAPeerIdImpl({ multihash });
          }
      }
      catch {
          return peerIdFromCID(CID.decode(buf));
      }
      throw new Error('Supplied PeerID CID is invalid');
  }
  function peerIdFromCID(cid) {
      if (cid == null || cid.multihash == null || cid.version == null || (cid.version === 1 && cid.code !== LIBP2P_KEY_CODE)) {
          throw new Error('Supplied PeerID CID is invalid');
      }
      const multihash = cid.multihash;
      if (multihash.code === sha256.code) {
          return new RSAPeerIdImpl({ multihash: cid.multihash });
      }
      else if (multihash.code === identity.code) {
          if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {
              return new Ed25519PeerIdImpl({ multihash: cid.multihash });
          }
          else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {
              return new Secp256k1PeerIdImpl({ multihash: cid.multihash });
          }
      }
      throw new Error('Supplied PeerID CID is invalid');
  }
  /**
   * @param publicKey - A marshalled public key
   * @param privateKey - A marshalled private key
   */
  async function peerIdFromKeys(publicKey, privateKey) {
      if (publicKey.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {
          return new Ed25519PeerIdImpl({ multihash: create$5(identity.code, publicKey), privateKey });
      }
      if (publicKey.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {
          return new Secp256k1PeerIdImpl({ multihash: create$5(identity.code, publicKey), privateKey });
      }
      return new RSAPeerIdImpl({ multihash: await sha256.digest(publicKey), publicKey, privateKey });
  }

  let nanoid = (size = 21) =>
    crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
      byte &= 63;
      if (byte < 36) {
        id += byte.toString(36);
      } else if (byte < 62) {
        id += (byte - 26).toString(36).toUpperCase();
      } else if (byte > 62) {
        id += '-';
      } else {
        id += '_';
      }
      return id
    }, '');

  const pathSepS = '/';
  const pathSepB = new TextEncoder().encode(pathSepS);
  const pathSep = pathSepB[0];
  /**
   * A Key represents the unique identifier of an object.
   * Our Key scheme is inspired by file systems and Google App Engine key model.
   * Keys are meant to be unique across a system. Keys are hierarchical,
   * incorporating more and more specific namespaces. Thus keys can be deemed
   * 'children' or 'ancestors' of other keys:
   * - `new Key('/Comedy')`
   * - `new Key('/Comedy/MontyPython')`
   * Also, every namespace can be parametrized to embed relevant object
   * information. For example, the Key `name` (most specific namespace) could
   * include the object type:
   * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`
   * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`
   * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`
   *
   */
  class Key {
      _buf;
      /**
       * @param {string | Uint8Array} s
       * @param {boolean} [clean]
       */
      constructor(s, clean) {
          if (typeof s === 'string') {
              this._buf = fromString$1(s);
          }
          else if (s instanceof Uint8Array) {
              this._buf = s;
          }
          else {
              throw new Error('Invalid key, should be String of Uint8Array');
          }
          if (clean == null) {
              clean = true;
          }
          if (clean) {
              this.clean();
          }
          if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {
              throw new Error('Invalid key');
          }
      }
      /**
       * Convert to the string representation
       *
       * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding='utf8'] - The encoding to use.
       * @returns {string}
       */
      toString(encoding = 'utf8') {
          return toString$1(this._buf, encoding);
      }
      /**
       * Return the Uint8Array representation of the key
       *
       * @returns {Uint8Array}
       */
      uint8Array() {
          return this._buf;
      }
      /**
       * Return string representation of the key
       *
       * @returns {string}
       */
      get [Symbol.toStringTag]() {
          return `Key(${this.toString()})`;
      }
      /**
       * Constructs a key out of a namespace array.
       *
       * @param {Array<string>} list - The array of namespaces
       * @returns {Key}
       *
       * @example
       * ```js
       * Key.withNamespaces(['one', 'two'])
       * // => Key('/one/two')
       * ```
       */
      static withNamespaces(list) {
          return new Key(list.join(pathSepS));
      }
      /**
       * Returns a randomly (uuid) generated key.
       *
       * @returns {Key}
       *
       * @example
       * ```js
       * Key.random()
       * // => Key('/f98719ea086343f7b71f32ea9d9d521d')
       * ```
       */
      static random() {
          return new Key(nanoid().replace(/-/g, ''));
      }
      /**
       * @param {*} other
       */
      static asKey(other) {
          if (other instanceof Uint8Array || typeof other === 'string') {
              // we can create a key from this
              return new Key(other);
          }
          if (typeof other.uint8Array === 'function') {
              // this is an older version or may have crossed the esm/cjs boundary
              return new Key(other.uint8Array());
          }
          return null;
      }
      /**
       * Cleanup the current key
       *
       * @returns {void}
       */
      clean() {
          if (this._buf == null || this._buf.byteLength === 0) {
              this._buf = pathSepB;
          }
          if (this._buf[0] !== pathSep) {
              const bytes = new Uint8Array(this._buf.byteLength + 1);
              bytes.fill(pathSep, 0, 1);
              bytes.set(this._buf, 1);
              this._buf = bytes;
          }
          // normalize does not remove trailing slashes
          while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {
              this._buf = this._buf.subarray(0, -1);
          }
      }
      /**
       * Check if the given key is sorted lower than ourself.
       *
       * @param {Key} key - The other Key to check against
       * @returns {boolean}
       */
      less(key) {
          const list1 = this.list();
          const list2 = key.list();
          for (let i = 0; i < list1.length; i++) {
              if (list2.length < i + 1) {
                  return false;
              }
              const c1 = list1[i];
              const c2 = list2[i];
              if (c1 < c2) {
                  return true;
              }
              else if (c1 > c2) {
                  return false;
              }
          }
          return list1.length < list2.length;
      }
      /**
       * Returns the key with all parts in reversed order.
       *
       * @returns {Key}
       *
       * @example
       * ```js
       * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()
       * // => Key('/Actor:JohnCleese/MontyPython/Comedy')
       * ```
       */
      reverse() {
          return Key.withNamespaces(this.list().slice().reverse());
      }
      /**
       * Returns the `namespaces` making up this Key.
       *
       * @returns {Array<string>}
       */
      namespaces() {
          return this.list();
      }
      /** Returns the "base" namespace of this key.
       *
       * @returns {string}
       *
       * @example
       * ```js
       * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()
       * // => 'Actor:JohnCleese'
       * ```
       */
      baseNamespace() {
          const ns = this.namespaces();
          return ns[ns.length - 1];
      }
      /**
       * Returns the `list` representation of this key.
       *
       * @returns {Array<string>}
       *
       * @example
       * ```js
       * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()
       * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']
       * ```
       */
      list() {
          return this.toString().split(pathSepS).slice(1);
      }
      /**
       * Returns the "type" of this key (value of last namespace).
       *
       * @returns {string}
       *
       * @example
       * ```js
       * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()
       * // => 'Actor'
       * ```
       */
      type() {
          return namespaceType(this.baseNamespace());
      }
      /**
       * Returns the "name" of this key (field of last namespace).
       *
       * @returns {string}
       *
       * @example
       * ```js
       * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()
       * // => 'JohnCleese'
       * ```
       */
      name() {
          return namespaceValue(this.baseNamespace());
      }
      /**
       * Returns an "instance" of this type key (appends value to namespace).
       *
       * @param {string} s - The string to append.
       * @returns {Key}
       *
       * @example
       * ```js
       * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')
       * // => Key('/Comedy/MontyPython/Actor:JohnCleese')
       * ```
       */
      instance(s) {
          return new Key(this.toString() + ':' + s);
      }
      /**
       * Returns the "path" of this key (parent + type).
       *
       * @returns {Key}
       *
       * @example
       * ```js
       * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()
       * // => Key('/Comedy/MontyPython/Actor')
       * ```
       */
      path() {
          let p = this.parent().toString();
          if (!p.endsWith(pathSepS)) {
              p += pathSepS;
          }
          p += this.type();
          return new Key(p);
      }
      /**
       * Returns the `parent` Key of this Key.
       *
       * @returns {Key}
       *
       * @example
       * ```js
       * new Key("/Comedy/MontyPython/Actor:JohnCleese").parent()
       * // => Key("/Comedy/MontyPython")
       * ```
       */
      parent() {
          const list = this.list();
          if (list.length === 1) {
              return new Key(pathSepS);
          }
          return new Key(list.slice(0, -1).join(pathSepS));
      }
      /**
       * Returns the `child` Key of this Key.
       *
       * @param {Key} key - The child Key to add
       * @returns {Key}
       *
       * @example
       * ```js
       * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))
       * // => Key('/Comedy/MontyPython/Actor:JohnCleese')
       * ```
       */
      child(key) {
          if (this.toString() === pathSepS) {
              return key;
          }
          else if (key.toString() === pathSepS) {
              return this;
          }
          return new Key(this.toString() + key.toString(), false);
      }
      /**
       * Returns whether this key is a prefix of `other`
       *
       * @param {Key} other - The other key to test against
       * @returns {boolean}
       *
       * @example
       * ```js
       * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')
       * // => true
       * ```
       */
      isAncestorOf(other) {
          if (other.toString() === this.toString()) {
              return false;
          }
          return other.toString().startsWith(this.toString());
      }
      /**
       * Returns whether this key is a contains another as prefix.
       *
       * @param {Key} other - The other Key to test against
       * @returns {boolean}
       *
       * @example
       * ```js
       * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')
       * // => true
       * ```
       */
      isDecendantOf(other) {
          if (other.toString() === this.toString()) {
              return false;
          }
          return this.toString().startsWith(other.toString());
      }
      /**
       * Checks if this key has only one namespace.
       *
       * @returns {boolean}
       */
      isTopLevel() {
          return this.list().length === 1;
      }
      /**
       * Concats one or more Keys into one new Key.
       *
       * @param {Array<Key>} keys - The array of keys to concatenate
       * @returns {Key}
       */
      concat(...keys) {
          return Key.withNamespaces([...this.namespaces(), ...flatten(keys.map(key => key.namespaces()))]);
      }
  }
  /**
   * The first component of a namespace. `foo` in `foo:bar`
   *
   * @param {string} ns
   * @returns {string}
   */
  function namespaceType(ns) {
      const parts = ns.split(':');
      if (parts.length < 2) {
          return '';
      }
      return parts.slice(0, -1).join(':');
  }
  /**
   * The last component of a namespace, `baz` in `foo:bar:baz`.
   *
   * @param {string} ns
   * @returns {string}
   */
  function namespaceValue(ns) {
      const parts = ns.split(':');
      return parts[parts.length - 1];
  }
  /**
   * Flatten array of arrays (only one level)
   *
   * @template T
   * @param {Array<any>} arr
   * @returns {T[]}
   */
  function flatten(arr) {
      return ([]).concat(...arr);
  }

  var isPlainObj = value => {
  	if (Object.prototype.toString.call(value) !== '[object Object]') {
  		return false;
  	}

  	const prototype = Object.getPrototypeOf(value);
  	return prototype === null || prototype === Object.prototype;
  };

  const isOptionObject = isPlainObj;

  const {hasOwnProperty} = Object.prototype;
  const {propertyIsEnumerable} = Object;
  const defineProperty = (object, name, value) => Object.defineProperty(object, name, {
  	value,
  	writable: true,
  	enumerable: true,
  	configurable: true
  });

  const globalThis$1 = commonjsGlobal;
  const defaultMergeOptions = {
  	concatArrays: false,
  	ignoreUndefined: false
  };

  const getEnumerableOwnPropertyKeys = value => {
  	const keys = [];

  	for (const key in value) {
  		if (hasOwnProperty.call(value, key)) {
  			keys.push(key);
  		}
  	}

  	/* istanbul ignore else  */
  	if (Object.getOwnPropertySymbols) {
  		const symbols = Object.getOwnPropertySymbols(value);

  		for (const symbol of symbols) {
  			if (propertyIsEnumerable.call(value, symbol)) {
  				keys.push(symbol);
  			}
  		}
  	}

  	return keys;
  };

  function clone(value) {
  	if (Array.isArray(value)) {
  		return cloneArray(value);
  	}

  	if (isOptionObject(value)) {
  		return cloneOptionObject(value);
  	}

  	return value;
  }

  function cloneArray(array) {
  	const result = array.slice(0, 0);

  	getEnumerableOwnPropertyKeys(array).forEach(key => {
  		defineProperty(result, key, clone(array[key]));
  	});

  	return result;
  }

  function cloneOptionObject(object) {
  	const result = Object.getPrototypeOf(object) === null ? Object.create(null) : {};

  	getEnumerableOwnPropertyKeys(object).forEach(key => {
  		defineProperty(result, key, clone(object[key]));
  	});

  	return result;
  }

  /**
   * @param {*} merged already cloned
   * @param {*} source something to merge
   * @param {string[]} keys keys to merge
   * @param {Object} config Config Object
   * @returns {*} cloned Object
   */
  const mergeKeys = (merged, source, keys, config) => {
  	keys.forEach(key => {
  		if (typeof source[key] === 'undefined' && config.ignoreUndefined) {
  			return;
  		}

  		// Do not recurse into prototype chain of merged
  		if (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {
  			defineProperty(merged, key, merge$1(merged[key], source[key], config));
  		} else {
  			defineProperty(merged, key, clone(source[key]));
  		}
  	});

  	return merged;
  };

  /**
   * @param {*} merged already cloned
   * @param {*} source something to merge
   * @param {Object} config Config Object
   * @returns {*} cloned Object
   *
   * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)
   */
  const concatArrays = (merged, source, config) => {
  	let result = merged.slice(0, 0);
  	let resultIndex = 0;

  	[merged, source].forEach(array => {
  		const indices = [];

  		// `result.concat(array)` with cloning
  		for (let k = 0; k < array.length; k++) {
  			if (!hasOwnProperty.call(array, k)) {
  				continue;
  			}

  			indices.push(String(k));

  			if (array === merged) {
  				// Already cloned
  				defineProperty(result, resultIndex++, array[k]);
  			} else {
  				defineProperty(result, resultIndex++, clone(array[k]));
  			}
  		}

  		// Merge non-index keys
  		result = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(key => !indices.includes(key)), config);
  	});

  	return result;
  };

  /**
   * @param {*} merged already cloned
   * @param {*} source something to merge
   * @param {Object} config Config Object
   * @returns {*} cloned Object
   */
  function merge$1(merged, source, config) {
  	if (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {
  		return concatArrays(merged, source, config);
  	}

  	if (!isOptionObject(source) || !isOptionObject(merged)) {
  		return clone(source);
  	}

  	return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);
  }

  var mergeOptions = function (...options) {
  	const config = merge$1(clone(defaultMergeOptions), (this !== globalThis$1 && this) || {}, defaultMergeOptions);
  	let merged = {_: {}};

  	for (const option of options) {
  		if (option === undefined) {
  			continue;
  		}

  		if (!isOptionObject(option)) {
  			throw new TypeError('`' + option + '` is not an Option Object');
  		}

  		merged = merge$1(merged, {_: option}, config);
  	}

  	return merged._;
  };

  var mergeOptions$1 = /*@__PURE__*/getDefaultExportFromCjs(mergeOptions);

  function isHighSurrogate$1(codePoint) {
    return codePoint >= 0xd800 && codePoint <= 0xdbff;
  }

  function isLowSurrogate$1(codePoint) {
    return codePoint >= 0xdc00 && codePoint <= 0xdfff;
  }

  // Truncate string by size in bytes
  var truncate$2 = function truncate(getLength, string, byteLength) {
    if (typeof string !== "string") {
      throw new Error("Input must be string");
    }

    var charLength = string.length;
    var curByteLength = 0;
    var codePoint;
    var segment;

    for (var i = 0; i < charLength; i += 1) {
      codePoint = string.charCodeAt(i);
      segment = string[i];

      if (isHighSurrogate$1(codePoint) && isLowSurrogate$1(string.charCodeAt(i + 1))) {
        i += 1;
        segment += string[i];
      }

      curByteLength += getLength(segment);

      if (curByteLength === byteLength) {
        return string.slice(0, i + 1);
      }
      else if (curByteLength > byteLength) {
        return string.slice(0, i - segment.length + 1);
      }
    }

    return string;
  };

  function isHighSurrogate(codePoint) {
    return codePoint >= 0xd800 && codePoint <= 0xdbff;
  }

  function isLowSurrogate(codePoint) {
    return codePoint >= 0xdc00 && codePoint <= 0xdfff;
  }

  // Truncate string by size in bytes
  var browser$1 = function getByteLength(string) {
    if (typeof string !== "string") {
      throw new Error("Input must be string");
    }

    var charLength = string.length;
    var byteLength = 0;
    var codePoint = null;
    var prevCodePoint = null;
    for (var i = 0; i < charLength; i++) {
      codePoint = string.charCodeAt(i);
      // handle 4-byte non-BMP chars
      // low surrogate
      if (isLowSurrogate(codePoint)) {
        // when parsing previous hi-surrogate, 3 is added to byteLength
        if (prevCodePoint != null && isHighSurrogate(prevCodePoint)) {
          byteLength += 1;
        }
        else {
          byteLength += 3;
        }
      }
      else if (codePoint <= 0x7f ) {
        byteLength += 1;
      }
      else if (codePoint >= 0x80 && codePoint <= 0x7ff) {
        byteLength += 2;
      }
      else if (codePoint >= 0x800 && codePoint <= 0xffff) {
        byteLength += 3;
      }
      prevCodePoint = codePoint;
    }

    return byteLength;
  };

  var truncate$1 = truncate$2;
  var getLength = browser$1;
  var browser = truncate$1.bind(null, getLength);

  /*jshint node:true*/

  /**
   * Replaces characters in strings that are illegal/unsafe for filenames.
   * Unsafe characters are either removed or replaced by a substitute set
   * in the optional `options` object.
   *
   * Illegal Characters on Various Operating Systems
   * / ? < > \ : * | "
   * https://kb.acronis.com/content/39790
   *
   * Unicode Control codes
   * C0 0x00-0x1f & C1 (0x80-0x9f)
   * http://en.wikipedia.org/wiki/C0_and_C1_control_codes
   *
   * Reserved filenames on Unix-based systems (".", "..")
   * Reserved filenames in Windows ("CON", "PRN", "AUX", "NUL", "COM1",
   * "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9",
   * "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", and
   * "LPT9") case-insesitively and with or without filename extensions.
   *
   * Capped at 255 characters in length.
   * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs
   *
   * @param  {String} input   Original filename
   * @param  {Object} options {replacement: String | Function }
   * @return {String}         Sanitized filename
   */

  var truncate = browser;

  var illegalRe = /[\/\?<>\\:\*\|"]/g;
  var controlRe = /[\x00-\x1f\x80-\x9f]/g;
  var reservedRe = /^\.+$/;
  var windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i;
  var windowsTrailingRe = /[\. ]+$/;

  function sanitize(input, replacement) {
    if (typeof input !== 'string') {
      throw new Error('Input must be string');
    }
    var sanitized = input
      .replace(illegalRe, replacement)
      .replace(controlRe, replacement)
      .replace(reservedRe, replacement)
      .replace(windowsReservedRe, replacement)
      .replace(windowsTrailingRe, replacement);
    return truncate(sanitized, 255);
  }

  var sanitizeFilename = function (input, options) {
    var replacement = (options && options.replacement) || '';
    var output = sanitize(input, replacement);
    if (replacement === '') {
      return output;
    }
    return sanitize(output, '');
  };

  var sanitize$1 = /*@__PURE__*/getDefaultExportFromCjs(sanitizeFilename);

  var codes$4;
  (function (codes) {
      codes["ERR_INVALID_PARAMETERS"] = "ERR_INVALID_PARAMETERS";
      codes["ERR_INVALID_KEY_NAME"] = "ERR_INVALID_KEY_NAME";
      codes["ERR_INVALID_KEY_TYPE"] = "ERR_INVALID_KEY_TYPE";
      codes["ERR_KEY_ALREADY_EXISTS"] = "ERR_KEY_ALREADY_EXISTS";
      codes["ERR_INVALID_KEY_SIZE"] = "ERR_INVALID_KEY_SIZE";
      codes["ERR_KEY_NOT_FOUND"] = "ERR_KEY_NOT_FOUND";
      codes["ERR_OLD_KEY_NAME_INVALID"] = "ERR_OLD_KEY_NAME_INVALID";
      codes["ERR_NEW_KEY_NAME_INVALID"] = "ERR_NEW_KEY_NAME_INVALID";
      codes["ERR_PASSWORD_REQUIRED"] = "ERR_PASSWORD_REQUIRED";
      codes["ERR_PEM_REQUIRED"] = "ERR_PEM_REQUIRED";
      codes["ERR_CANNOT_READ_KEY"] = "ERR_CANNOT_READ_KEY";
      codes["ERR_MISSING_PRIVATE_KEY"] = "ERR_MISSING_PRIVATE_KEY";
      codes["ERR_INVALID_OLD_PASS_TYPE"] = "ERR_INVALID_OLD_PASS_TYPE";
      codes["ERR_INVALID_NEW_PASS_TYPE"] = "ERR_INVALID_NEW_PASS_TYPE";
      codes["ERR_INVALID_PASS_LENGTH"] = "ERR_INVALID_PASS_LENGTH";
  })(codes$4 || (codes$4 = {}));

  /* eslint max-nested-callbacks: ["error", 5] */
  const log$j = logger('libp2p:keychain');
  const keyPrefix = '/pkcs8/';
  const infoPrefix = '/info/';
  const privates = new WeakMap();
  // NIST SP 800-132
  const NIST = {
      minKeyLength: 112 / 8,
      minSaltLength: 128 / 8,
      minIterationCount: 1000
  };
  const defaultOptions$6 = {
      // See https://cryptosense.com/parametesr-choice-for-pbkdf2/
      dek: {
          keyLength: 512 / 8,
          iterationCount: 10000,
          salt: 'you should override this value with a crypto secure random number',
          hash: 'sha2-512'
      }
  };
  function validateKeyName(name) {
      if (name == null) {
          return false;
      }
      if (typeof name !== 'string') {
          return false;
      }
      return name === sanitize$1(name.trim()) && name.length > 0;
  }
  /**
   * Throws an error after a delay
   *
   * This assumes than an error indicates that the keychain is under attack. Delay returning an
   * error to make brute force attacks harder.
   */
  async function randomDelay() {
      const min = 200;
      const max = 1000;
      const delay = Math.random() * (max - min) + min;
      await new Promise(resolve => setTimeout(resolve, delay));
  }
  /**
   * Converts a key name into a datastore name
   */
  function DsName(name) {
      return new Key(keyPrefix + name);
  }
  /**
   * Converts a key name into a datastore info name
   */
  function DsInfoName(name) {
      return new Key(infoPrefix + name);
  }
  /**
   * Manages the lifecycle of a key. Keys are encrypted at rest using PKCS #8.
   *
   * A key in the store has two entries
   * - '/info/*key-name*', contains the KeyInfo for the key
   * - '/pkcs8/*key-name*', contains the PKCS #8 for the key
   *
   */
  class DefaultKeyChain {
      components;
      init;
      /**
       * Creates a new instance of a key chain
       */
      constructor(components, init) {
          this.components = components;
          this.init = mergeOptions$1(defaultOptions$6, init);
          // Enforce NIST SP 800-132
          if (this.init.pass != null && this.init.pass?.length < 20) {
              throw new Error('pass must be least 20 characters');
          }
          if (this.init.dek?.keyLength != null && this.init.dek.keyLength < NIST.minKeyLength) {
              throw new Error(`dek.keyLength must be least ${NIST.minKeyLength} bytes`);
          }
          if (this.init.dek?.salt?.length != null && this.init.dek.salt.length < NIST.minSaltLength) {
              throw new Error(`dek.saltLength must be least ${NIST.minSaltLength} bytes`);
          }
          if (this.init.dek?.iterationCount != null && this.init.dek.iterationCount < NIST.minIterationCount) {
              throw new Error(`dek.iterationCount must be least ${NIST.minIterationCount}`);
          }
          const dek = this.init.pass != null && this.init.dek?.salt != null
              ? pbkdf2(this.init.pass, this.init.dek?.salt, this.init.dek?.iterationCount, this.init.dek?.keyLength, this.init.dek?.hash)
              : '';
          privates.set(this, { dek });
      }
      /**
       * Generates the options for a keychain.  A random salt is produced.
       *
       * @returns {object}
       */
      static generateOptions() {
          const options = Object.assign({}, defaultOptions$6);
          const saltLength = Math.ceil(NIST.minSaltLength / 3) * 3; // no base64 padding
          options.dek.salt = toString$1(randomBytes(saltLength), 'base64');
          return options;
      }
      /**
       * Gets an object that can encrypt/decrypt protected data.
       * The default options for a keychain.
       *
       * @returns {object}
       */
      static get options() {
          return defaultOptions$6;
      }
      /**
       * Create a new key.
       *
       * @param {string} name - The local key name; cannot already exist.
       * @param {string} type - One of the key types; 'rsa'.
       * @param {number} [size = 2048] - The key size in bits. Used for rsa keys only
       */
      async createKey(name, type, size = 2048) {
          if (!validateKeyName(name) || name === 'self') {
              await randomDelay();
              throw new CodeError('Invalid key name', codes$4.ERR_INVALID_KEY_NAME);
          }
          if (typeof type !== 'string') {
              await randomDelay();
              throw new CodeError('Invalid key type', codes$4.ERR_INVALID_KEY_TYPE);
          }
          const dsname = DsName(name);
          const exists = await this.components.datastore.has(dsname);
          if (exists) {
              await randomDelay();
              throw new CodeError('Key name already exists', codes$4.ERR_KEY_ALREADY_EXISTS);
          }
          switch (type.toLowerCase()) {
              case 'rsa':
                  if (!Number.isSafeInteger(size) || size < 2048) {
                      await randomDelay();
                      throw new CodeError('Invalid RSA key size', codes$4.ERR_INVALID_KEY_SIZE);
                  }
                  break;
          }
          let keyInfo;
          try {
              const keypair = await generateKeyPair(type, size);
              const kid = await keypair.id();
              const cached = privates.get(this);
              if (cached == null) {
                  throw new CodeError('dek missing', codes$4.ERR_INVALID_PARAMETERS);
              }
              const dek = cached.dek;
              const pem = await keypair.export(dek);
              keyInfo = {
                  name,
                  id: kid
              };
              const batch = this.components.datastore.batch();
              batch.put(dsname, fromString$1(pem));
              batch.put(DsInfoName(name), fromString$1(JSON.stringify(keyInfo)));
              await batch.commit();
          }
          catch (err) {
              await randomDelay();
              throw err;
          }
          return keyInfo;
      }
      /**
       * List all the keys.
       *
       * @returns {Promise<KeyInfo[]>}
       */
      async listKeys() {
          const query = {
              prefix: infoPrefix
          };
          const info = [];
          for await (const value of this.components.datastore.query(query)) {
              info.push(JSON.parse(toString$1(value.value)));
          }
          return info;
      }
      /**
       * Find a key by it's id
       */
      async findKeyById(id) {
          try {
              const keys = await this.listKeys();
              const key = keys.find((k) => k.id === id);
              if (key == null) {
                  throw new CodeError(`Key with id '${id}' does not exist.`, codes$4.ERR_KEY_NOT_FOUND);
              }
              return key;
          }
          catch (err) {
              await randomDelay();
              throw err;
          }
      }
      /**
       * Find a key by it's name.
       *
       * @param {string} name - The local key name.
       * @returns {Promise<KeyInfo>}
       */
      async findKeyByName(name) {
          if (!validateKeyName(name)) {
              await randomDelay();
              throw new CodeError(`Invalid key name '${name}'`, codes$4.ERR_INVALID_KEY_NAME);
          }
          const dsname = DsInfoName(name);
          try {
              const res = await this.components.datastore.get(dsname);
              return JSON.parse(toString$1(res));
          }
          catch (err) {
              await randomDelay();
              log$j.error(err);
              throw new CodeError(`Key '${name}' does not exist.`, codes$4.ERR_KEY_NOT_FOUND);
          }
      }
      /**
       * Remove an existing key.
       *
       * @param {string} name - The local key name; must already exist.
       * @returns {Promise<KeyInfo>}
       */
      async removeKey(name) {
          if (!validateKeyName(name) || name === 'self') {
              await randomDelay();
              throw new CodeError(`Invalid key name '${name}'`, codes$4.ERR_INVALID_KEY_NAME);
          }
          const dsname = DsName(name);
          const keyInfo = await this.findKeyByName(name);
          const batch = this.components.datastore.batch();
          batch.delete(dsname);
          batch.delete(DsInfoName(name));
          await batch.commit();
          return keyInfo;
      }
      /**
       * Rename a key
       *
       * @param {string} oldName - The old local key name; must already exist.
       * @param {string} newName - The new local key name; must not already exist.
       * @returns {Promise<KeyInfo>}
       */
      async renameKey(oldName, newName) {
          if (!validateKeyName(oldName) || oldName === 'self') {
              await randomDelay();
              throw new CodeError(`Invalid old key name '${oldName}'`, codes$4.ERR_OLD_KEY_NAME_INVALID);
          }
          if (!validateKeyName(newName) || newName === 'self') {
              await randomDelay();
              throw new CodeError(`Invalid new key name '${newName}'`, codes$4.ERR_NEW_KEY_NAME_INVALID);
          }
          const oldDsname = DsName(oldName);
          const newDsname = DsName(newName);
          const oldInfoName = DsInfoName(oldName);
          const newInfoName = DsInfoName(newName);
          const exists = await this.components.datastore.has(newDsname);
          if (exists) {
              await randomDelay();
              throw new CodeError(`Key '${newName}' already exists`, codes$4.ERR_KEY_ALREADY_EXISTS);
          }
          try {
              const pem = await this.components.datastore.get(oldDsname);
              const res = await this.components.datastore.get(oldInfoName);
              const keyInfo = JSON.parse(toString$1(res));
              keyInfo.name = newName;
              const batch = this.components.datastore.batch();
              batch.put(newDsname, pem);
              batch.put(newInfoName, fromString$1(JSON.stringify(keyInfo)));
              batch.delete(oldDsname);
              batch.delete(oldInfoName);
              await batch.commit();
              return keyInfo;
          }
          catch (err) {
              await randomDelay();
              throw err;
          }
      }
      /**
       * Export an existing key as a PEM encrypted PKCS #8 string
       */
      async exportKey(name, password) {
          if (!validateKeyName(name)) {
              await randomDelay();
              throw new CodeError(`Invalid key name '${name}'`, codes$4.ERR_INVALID_KEY_NAME);
          }
          if (password == null) {
              await randomDelay();
              throw new CodeError('Password is required', codes$4.ERR_PASSWORD_REQUIRED);
          }
          const dsname = DsName(name);
          try {
              const res = await this.components.datastore.get(dsname);
              const pem = toString$1(res);
              const cached = privates.get(this);
              if (cached == null) {
                  throw new CodeError('dek missing', codes$4.ERR_INVALID_PARAMETERS);
              }
              const dek = cached.dek;
              const privateKey = await importKey(pem, dek);
              return await privateKey.export(password);
          }
          catch (err) {
              await randomDelay();
              throw err;
          }
      }
      /**
       * Export an existing key as a PeerId
       */
      async exportPeerId(name) {
          const password = 'temporary-password';
          const pem = await this.exportKey(name, password);
          const privateKey = await importKey(pem, password);
          return peerIdFromKeys(privateKey.public.bytes, privateKey.bytes);
      }
      /**
       * Import a new key from a PEM encoded PKCS #8 string
       *
       * @param {string} name - The local key name; must not already exist.
       * @param {string} pem - The PEM encoded PKCS #8 string
       * @param {string} password - The password.
       * @returns {Promise<KeyInfo>}
       */
      async importKey(name, pem, password) {
          if (!validateKeyName(name) || name === 'self') {
              await randomDelay();
              throw new CodeError(`Invalid key name '${name}'`, codes$4.ERR_INVALID_KEY_NAME);
          }
          if (pem == null) {
              await randomDelay();
              throw new CodeError('PEM encoded key is required', codes$4.ERR_PEM_REQUIRED);
          }
          const dsname = DsName(name);
          const exists = await this.components.datastore.has(dsname);
          if (exists) {
              await randomDelay();
              throw new CodeError(`Key '${name}' already exists`, codes$4.ERR_KEY_ALREADY_EXISTS);
          }
          let privateKey;
          try {
              privateKey = await importKey(pem, password);
          }
          catch (err) {
              await randomDelay();
              throw new CodeError('Cannot read the key, most likely the password is wrong', codes$4.ERR_CANNOT_READ_KEY);
          }
          let kid;
          try {
              kid = await privateKey.id();
              const cached = privates.get(this);
              if (cached == null) {
                  throw new CodeError('dek missing', codes$4.ERR_INVALID_PARAMETERS);
              }
              const dek = cached.dek;
              pem = await privateKey.export(dek);
          }
          catch (err) {
              await randomDelay();
              throw err;
          }
          const keyInfo = {
              name,
              id: kid
          };
          const batch = this.components.datastore.batch();
          batch.put(dsname, fromString$1(pem));
          batch.put(DsInfoName(name), fromString$1(JSON.stringify(keyInfo)));
          await batch.commit();
          return keyInfo;
      }
      /**
       * Import a peer key
       */
      async importPeer(name, peer) {
          try {
              if (!validateKeyName(name)) {
                  throw new CodeError(`Invalid key name '${name}'`, codes$4.ERR_INVALID_KEY_NAME);
              }
              if (peer == null) {
                  throw new CodeError('PeerId is required', codes$4.ERR_MISSING_PRIVATE_KEY);
              }
              if (peer.privateKey == null) {
                  throw new CodeError('PeerId.privKey is required', codes$4.ERR_MISSING_PRIVATE_KEY);
              }
              const privateKey = await unmarshalPrivateKey(peer.privateKey);
              const dsname = DsName(name);
              const exists = await this.components.datastore.has(dsname);
              if (exists) {
                  await randomDelay();
                  throw new CodeError(`Key '${name}' already exists`, codes$4.ERR_KEY_ALREADY_EXISTS);
              }
              const cached = privates.get(this);
              if (cached == null) {
                  throw new CodeError('dek missing', codes$4.ERR_INVALID_PARAMETERS);
              }
              const dek = cached.dek;
              const pem = await privateKey.export(dek);
              const keyInfo = {
                  name,
                  id: peer.toString()
              };
              const batch = this.components.datastore.batch();
              batch.put(dsname, fromString$1(pem));
              batch.put(DsInfoName(name), fromString$1(JSON.stringify(keyInfo)));
              await batch.commit();
              return keyInfo;
          }
          catch (err) {
              await randomDelay();
              throw err;
          }
      }
      /**
       * Gets the private key as PEM encoded PKCS #8 string
       */
      async getPrivateKey(name) {
          if (!validateKeyName(name)) {
              await randomDelay();
              throw new CodeError(`Invalid key name '${name}'`, codes$4.ERR_INVALID_KEY_NAME);
          }
          try {
              const dsname = DsName(name);
              const res = await this.components.datastore.get(dsname);
              return toString$1(res);
          }
          catch (err) {
              await randomDelay();
              log$j.error(err);
              throw new CodeError(`Key '${name}' does not exist.`, codes$4.ERR_KEY_NOT_FOUND);
          }
      }
      /**
       * Rotate keychain password and re-encrypt all associated keys
       */
      async rotateKeychainPass(oldPass, newPass) {
          if (typeof oldPass !== 'string') {
              await randomDelay();
              throw new CodeError(`Invalid old pass type '${typeof oldPass}'`, codes$4.ERR_INVALID_OLD_PASS_TYPE);
          }
          if (typeof newPass !== 'string') {
              await randomDelay();
              throw new CodeError(`Invalid new pass type '${typeof newPass}'`, codes$4.ERR_INVALID_NEW_PASS_TYPE);
          }
          if (newPass.length < 20) {
              await randomDelay();
              throw new CodeError(`Invalid pass length ${newPass.length}`, codes$4.ERR_INVALID_PASS_LENGTH);
          }
          log$j('recreating keychain');
          const cached = privates.get(this);
          if (cached == null) {
              throw new CodeError('dek missing', codes$4.ERR_INVALID_PARAMETERS);
          }
          const oldDek = cached.dek;
          this.init.pass = newPass;
          const newDek = newPass != null && this.init.dek?.salt != null
              ? pbkdf2(newPass, this.init.dek.salt, this.init.dek?.iterationCount, this.init.dek?.keyLength, this.init.dek?.hash)
              : '';
          privates.set(this, { dek: newDek });
          const keys = await this.listKeys();
          for (const key of keys) {
              const res = await this.components.datastore.get(DsName(key.name));
              const pem = toString$1(res);
              const privateKey = await importKey(pem, oldDek);
              const password = newDek.toString();
              const keyAsPEM = await privateKey.export(password);
              // Update stored key
              const batch = this.components.datastore.batch();
              const keyInfo = {
                  name: key.name,
                  id: key.id
              };
              batch.put(DsName(key.name), fromString$1(keyAsPEM));
              batch.put(DsInfoName(key.name), fromString$1(JSON.stringify(keyInfo)));
              await batch.commit();
          }
          log$j('keychain reconstructed');
      }
  }

  /**
   * Calls the passed map function on every entry of the passed iterable iterator
   */
  function mapIterable(iter, map) {
      const iterator = {
          [Symbol.iterator]: () => {
              return iterator;
          },
          next: () => {
              const next = iter.next();
              const val = next.value;
              if (next.done === true || val == null) {
                  const result = {
                      done: true,
                      value: undefined
                  };
                  return result;
              }
              return {
                  done: false,
                  value: map(val)
              };
          }
      };
      return iterator;
  }

  /**
   * We can't use PeerIds as map keys because map keys are
   * compared using same-value-zero equality, so this is just
   * a map that stringifies the PeerIds before storing them.
   *
   * PeerIds cache stringified versions of themselves so this
   * should be a cheap operation.
   *
   * @example
   *
   * ```JavaScript
   * import { peerMap } from '@libp2p/peer-collections'
   *
   * const map = peerMap<string>()
   * map.set(peerId, 'value')
   * ```
   */
  class PeerMap {
      map;
      constructor(map) {
          this.map = new Map();
          if (map != null) {
              for (const [key, value] of map.entries()) {
                  this.map.set(key.toString(), value);
              }
          }
      }
      [Symbol.iterator]() {
          return this.entries();
      }
      clear() {
          this.map.clear();
      }
      delete(peer) {
          this.map.delete(peer.toString());
      }
      entries() {
          return mapIterable(this.map.entries(), (val) => {
              return [peerIdFromString(val[0]), val[1]];
          });
      }
      forEach(fn) {
          this.map.forEach((value, key) => {
              fn(value, peerIdFromString(key), this);
          });
      }
      get(peer) {
          return this.map.get(peer.toString());
      }
      has(peer) {
          return this.map.has(peer.toString());
      }
      set(peer, value) {
          this.map.set(peer.toString(), value);
      }
      keys() {
          return mapIterable(this.map.keys(), (val) => {
              return peerIdFromString(val);
          });
      }
      values() {
          return this.map.values();
      }
      get size() {
          return this.map.size;
      }
  }

  /**
   * We can't use PeerIds as set entries because set entries are
   * compared using same-value-zero equality, so this is just
   * a map that stringifies the PeerIds before storing them.
   *
   * PeerIds cache stringified versions of themselves so this
   * should be a cheap operation.
   *
   * @example
   *
   * ```JavaScript
   * import { peerSet } from '@libp2p/peer-collections'
   *
   * const set = peerSet()
   * set.add(peerId)
   * ```
   */
  class PeerSet {
      set;
      constructor(set) {
          this.set = new Set();
          if (set != null) {
              for (const key of set) {
                  this.set.add(key.toString());
              }
          }
      }
      get size() {
          return this.set.size;
      }
      [Symbol.iterator]() {
          return this.values();
      }
      add(peer) {
          this.set.add(peer.toString());
      }
      clear() {
          this.set.clear();
      }
      delete(peer) {
          this.set.delete(peer.toString());
      }
      entries() {
          return mapIterable(this.set.entries(), (val) => {
              const peerId = peerIdFromString(val[0]);
              return [peerId, peerId];
          });
      }
      forEach(predicate) {
          this.set.forEach((str) => {
              const id = peerIdFromString(str);
              predicate(id, id, this);
          });
      }
      has(peer) {
          return this.set.has(peer.toString());
      }
      values() {
          return mapIterable(this.set.values(), (val) => {
              return peerIdFromString(val);
          });
      }
      intersection(other) {
          const output = new PeerSet();
          for (const peerId of other) {
              if (this.has(peerId)) {
                  output.add(peerId);
              }
          }
          return output;
      }
      difference(other) {
          const output = new PeerSet();
          for (const peerId of this) {
              if (!other.has(peerId)) {
                  output.add(peerId);
              }
          }
          return output;
      }
      union(other) {
          const output = new PeerSet();
          for (const peerId of other) {
              output.add(peerId);
          }
          for (const peerId of this) {
              output.add(peerId);
          }
          return output;
      }
  }

  /* eslint-disable import/export */
  /* eslint-disable complexity */
  /* eslint-disable @typescript-eslint/no-namespace */
  /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
  /* eslint-disable @typescript-eslint/no-empty-interface */
  var PeerIdProto;
  (function (PeerIdProto) {
      let _codec;
      PeerIdProto.codec = () => {
          if (_codec == null) {
              _codec = message((obj, w, opts = {}) => {
                  if (opts.lengthDelimited !== false) {
                      w.fork();
                  }
                  if (obj.id != null) {
                      w.uint32(10);
                      w.bytes(obj.id);
                  }
                  if (obj.pubKey != null) {
                      w.uint32(18);
                      w.bytes(obj.pubKey);
                  }
                  if (obj.privKey != null) {
                      w.uint32(26);
                      w.bytes(obj.privKey);
                  }
                  if (opts.lengthDelimited !== false) {
                      w.ldelim();
                  }
              }, (reader, length) => {
                  const obj = {};
                  const end = length == null ? reader.len : reader.pos + length;
                  while (reader.pos < end) {
                      const tag = reader.uint32();
                      switch (tag >>> 3) {
                          case 1:
                              obj.id = reader.bytes();
                              break;
                          case 2:
                              obj.pubKey = reader.bytes();
                              break;
                          case 3:
                              obj.privKey = reader.bytes();
                              break;
                          default:
                              reader.skipType(tag & 7);
                              break;
                      }
                  }
                  return obj;
              });
          }
          return _codec;
      };
      PeerIdProto.encode = (obj) => {
          return encodeMessage(obj, PeerIdProto.codec());
      };
      PeerIdProto.decode = (buf) => {
          return decodeMessage$1(buf, PeerIdProto.codec());
      };
  })(PeerIdProto || (PeerIdProto = {}));

  const createEd25519PeerId = async () => {
      const key = await generateKeyPair('Ed25519');
      const id = await createFromPrivKey(key);
      if (id.type === 'Ed25519') {
          return id;
      }
      throw new Error(`Generated unexpected PeerId type "${id.type}"`);
  };
  async function createFromPrivKey(privateKey) {
      return peerIdFromKeys(marshalPublicKey(privateKey.public), marshalPrivateKey(privateKey));
  }

  function accessor(buf) {
      if (buf instanceof Uint8Array) {
          return {
              get(index) {
                  return buf[index];
              },
              set(index, value) {
                  buf[index] = value;
              }
          };
      }
      return {
          get(index) {
              return buf.get(index);
          },
          set(index, value) {
              buf.set(index, value);
          }
      };
  }

  const TWO_32 = 4294967296;
  let LongBits$2 = class LongBits {
      constructor(hi = 0, lo = 0) {
          this.hi = hi;
          this.lo = lo;
      }
      /**
       * Returns these hi/lo bits as a BigInt
       */
      toBigInt(unsigned) {
          if (unsigned === true) {
              return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n);
          }
          if ((this.hi >>> 31) !== 0) {
              const lo = ~this.lo + 1 >>> 0;
              let hi = ~this.hi >>> 0;
              if (lo === 0) {
                  hi = hi + 1 >>> 0;
              }
              return -(BigInt(lo) + (BigInt(hi) << 32n));
          }
          return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n);
      }
      /**
       * Returns these hi/lo bits as a Number - this may overflow, toBigInt
       * should be preferred
       */
      toNumber(unsigned) {
          return Number(this.toBigInt(unsigned));
      }
      /**
       * ZigZag decode a LongBits object
       */
      zzDecode() {
          const mask = -(this.lo & 1);
          const lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
          const hi = (this.hi >>> 1 ^ mask) >>> 0;
          return new LongBits(hi, lo);
      }
      /**
       * ZigZag encode a LongBits object
       */
      zzEncode() {
          const mask = this.hi >> 31;
          const hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
          const lo = (this.lo << 1 ^ mask) >>> 0;
          return new LongBits(hi, lo);
      }
      /**
       * Encode a LongBits object as a varint byte array
       */
      toBytes(buf, offset = 0) {
          const access = accessor(buf);
          while (this.hi > 0) {
              access.set(offset++, this.lo & 127 | 128);
              this.lo = (this.lo >>> 7 | this.hi << 25) >>> 0;
              this.hi >>>= 7;
          }
          while (this.lo > 127) {
              access.set(offset++, this.lo & 127 | 128);
              this.lo = this.lo >>> 7;
          }
          access.set(offset++, this.lo);
      }
      /**
       * Parse a LongBits object from a BigInt
       */
      static fromBigInt(value) {
          if (value === 0n) {
              return new LongBits();
          }
          const negative = value < 0;
          if (negative) {
              value = -value;
          }
          let hi = Number(value >> 32n) | 0;
          let lo = Number(value - (BigInt(hi) << 32n)) | 0;
          if (negative) {
              hi = ~hi >>> 0;
              lo = ~lo >>> 0;
              if (++lo > TWO_32) {
                  lo = 0;
                  if (++hi > TWO_32) {
                      hi = 0;
                  }
              }
          }
          return new LongBits(hi, lo);
      }
      /**
       * Parse a LongBits object from a Number
       */
      static fromNumber(value) {
          if (value === 0) {
              return new LongBits();
          }
          const sign = value < 0;
          if (sign) {
              value = -value;
          }
          let lo = value >>> 0;
          let hi = (value - lo) / 4294967296 >>> 0;
          if (sign) {
              hi = ~hi >>> 0;
              lo = ~lo >>> 0;
              if (++lo > 4294967295) {
                  lo = 0;
                  if (++hi > 4294967295) {
                      hi = 0;
                  }
              }
          }
          return new LongBits(hi, lo);
      }
      /**
       * Parse a LongBits object from a varint byte array
       */
      static fromBytes(buf, offset = 0) {
          const access = accessor(buf);
          // tends to deopt with local vars for octet etc.
          const bits = new LongBits();
          let i = 0;
          if (buf.length - offset > 4) { // fast route (lo)
              for (; i < 4; ++i) {
                  // 1st..4th
                  bits.lo = (bits.lo | (access.get(offset) & 127) << i * 7) >>> 0;
                  if (access.get(offset++) < 128) {
                      return bits;
                  }
              }
              // 5th
              bits.lo = (bits.lo | (access.get(offset) & 127) << 28) >>> 0;
              bits.hi = (bits.hi | (access.get(offset) & 127) >> 4) >>> 0;
              if (access.get(offset++) < 128) {
                  return bits;
              }
              i = 0;
          }
          else {
              for (; i < 4; ++i) {
                  /* istanbul ignore if */
                  if (offset >= buf.length) {
                      throw RangeError(`index out of range: ${offset} > ${buf.length}`);
                  }
                  // 1st..4th
                  bits.lo = (bits.lo | (access.get(offset) & 127) << i * 7) >>> 0;
                  if (access.get(offset++) < 128) {
                      return bits;
                  }
              }
          }
          if (buf.length - offset > 4) { // fast route (hi)
              for (; i < 5; ++i) {
                  // 6th..10th
                  bits.hi = (bits.hi | (access.get(offset) & 127) << i * 7 + 3) >>> 0;
                  if (access.get(offset++) < 128) {
                      return bits;
                  }
              }
          }
          else if (offset < buf.byteLength) {
              for (; i < 5; ++i) {
                  /* istanbul ignore if */
                  if (offset >= buf.length) {
                      throw RangeError(`index out of range: ${offset} > ${buf.length}`);
                  }
                  // 6th..10th
                  bits.hi = (bits.hi | (access.get(offset) & 127) << i * 7 + 3) >>> 0;
                  if (access.get(offset++) < 128) {
                      return bits;
                  }
              }
          }
          /* istanbul ignore next */
          throw RangeError('invalid varint encoding');
      }
  };

  const N1$1 = Math.pow(2, 7);
  const N2$1 = Math.pow(2, 14);
  const N3$1 = Math.pow(2, 21);
  const N4$1 = Math.pow(2, 28);
  const N5$1 = Math.pow(2, 35);
  const N6$1 = Math.pow(2, 42);
  const N7$1 = Math.pow(2, 49);
  const N8$1 = Math.pow(2, 56);
  const N9$1 = Math.pow(2, 63);
  const unsigned = {
      encodingLength(value) {
          if (value < N1$1) {
              return 1;
          }
          if (value < N2$1) {
              return 2;
          }
          if (value < N3$1) {
              return 3;
          }
          if (value < N4$1) {
              return 4;
          }
          if (value < N5$1) {
              return 5;
          }
          if (value < N6$1) {
              return 6;
          }
          if (value < N7$1) {
              return 7;
          }
          if (value < N8$1) {
              return 8;
          }
          if (value < N9$1) {
              return 9;
          }
          return 10;
      },
      encode(value, buf, offset = 0) {
          if (Number.MAX_SAFE_INTEGER != null && value > Number.MAX_SAFE_INTEGER) {
              throw new RangeError('Could not encode varint');
          }
          if (buf == null) {
              buf = allocUnsafe(unsigned.encodingLength(value));
          }
          LongBits$2.fromNumber(value).toBytes(buf, offset);
          return buf;
      },
      decode(buf, offset = 0) {
          return LongBits$2.fromBytes(buf, offset).toNumber(true);
      }
  };

  const symbol$2 = Symbol.for('@achingbrain/uint8arraylist');
  function findBufAndOffset(bufs, index) {
      if (index == null || index < 0) {
          throw new RangeError('index is out of bounds');
      }
      let offset = 0;
      for (const buf of bufs) {
          const bufEnd = offset + buf.byteLength;
          if (index < bufEnd) {
              return {
                  buf,
                  index: index - offset
              };
          }
          offset = bufEnd;
      }
      throw new RangeError('index is out of bounds');
  }
  /**
   * Check if object is a CID instance
   *
   * @example
   *
   * ```js
   * import { isUint8ArrayList, Uint8ArrayList } from 'uint8arraylist'
   *
   * isUint8ArrayList(true) // false
   * isUint8ArrayList([]) // false
   * isUint8ArrayList(new Uint8ArrayList()) // true
   * ```
   */
  function isUint8ArrayList(value) {
      return Boolean(value?.[symbol$2]);
  }
  class Uint8ArrayList {
      constructor(...data) {
          // Define symbol
          Object.defineProperty(this, symbol$2, { value: true });
          this.bufs = [];
          this.length = 0;
          if (data.length > 0) {
              this.appendAll(data);
          }
      }
      *[Symbol.iterator]() {
          yield* this.bufs;
      }
      get byteLength() {
          return this.length;
      }
      /**
       * Add one or more `bufs` to the end of this Uint8ArrayList
       */
      append(...bufs) {
          this.appendAll(bufs);
      }
      /**
       * Add all `bufs` to the end of this Uint8ArrayList
       */
      appendAll(bufs) {
          let length = 0;
          for (const buf of bufs) {
              if (buf instanceof Uint8Array) {
                  length += buf.byteLength;
                  this.bufs.push(buf);
              }
              else if (isUint8ArrayList(buf)) {
                  length += buf.byteLength;
                  this.bufs.push(...buf.bufs);
              }
              else {
                  throw new Error('Could not append value, must be an Uint8Array or a Uint8ArrayList');
              }
          }
          this.length += length;
      }
      /**
       * Add one or more `bufs` to the start of this Uint8ArrayList
       */
      prepend(...bufs) {
          this.prependAll(bufs);
      }
      /**
       * Add all `bufs` to the start of this Uint8ArrayList
       */
      prependAll(bufs) {
          let length = 0;
          for (const buf of bufs.reverse()) {
              if (buf instanceof Uint8Array) {
                  length += buf.byteLength;
                  this.bufs.unshift(buf);
              }
              else if (isUint8ArrayList(buf)) {
                  length += buf.byteLength;
                  this.bufs.unshift(...buf.bufs);
              }
              else {
                  throw new Error('Could not prepend value, must be an Uint8Array or a Uint8ArrayList');
              }
          }
          this.length += length;
      }
      /**
       * Read the value at `index`
       */
      get(index) {
          const res = findBufAndOffset(this.bufs, index);
          return res.buf[res.index];
      }
      /**
       * Set the value at `index` to `value`
       */
      set(index, value) {
          const res = findBufAndOffset(this.bufs, index);
          res.buf[res.index] = value;
      }
      /**
       * Copy bytes from `buf` to the index specified by `offset`
       */
      write(buf, offset = 0) {
          if (buf instanceof Uint8Array) {
              for (let i = 0; i < buf.length; i++) {
                  this.set(offset + i, buf[i]);
              }
          }
          else if (isUint8ArrayList(buf)) {
              for (let i = 0; i < buf.length; i++) {
                  this.set(offset + i, buf.get(i));
              }
          }
          else {
              throw new Error('Could not write value, must be an Uint8Array or a Uint8ArrayList');
          }
      }
      /**
       * Remove bytes from the front of the pool
       */
      consume(bytes) {
          // first, normalize the argument, in accordance with how Buffer does it
          bytes = Math.trunc(bytes);
          // do nothing if not a positive number
          if (Number.isNaN(bytes) || bytes <= 0) {
              return;
          }
          // if consuming all bytes, skip iterating
          if (bytes === this.byteLength) {
              this.bufs = [];
              this.length = 0;
              return;
          }
          while (this.bufs.length > 0) {
              if (bytes >= this.bufs[0].byteLength) {
                  bytes -= this.bufs[0].byteLength;
                  this.length -= this.bufs[0].byteLength;
                  this.bufs.shift();
              }
              else {
                  this.bufs[0] = this.bufs[0].subarray(bytes);
                  this.length -= bytes;
                  break;
              }
          }
      }
      /**
       * Extracts a section of an array and returns a new array.
       *
       * This is a copy operation as it is with Uint8Arrays and Arrays
       * - note this is different to the behaviour of Node Buffers.
       */
      slice(beginInclusive, endExclusive) {
          const { bufs, length } = this._subList(beginInclusive, endExclusive);
          return concat(bufs, length);
      }
      /**
       * Returns a alloc from the given start and end element index.
       *
       * In the best case where the data extracted comes from a single Uint8Array
       * internally this is a no-copy operation otherwise it is a copy operation.
       */
      subarray(beginInclusive, endExclusive) {
          const { bufs, length } = this._subList(beginInclusive, endExclusive);
          if (bufs.length === 1) {
              return bufs[0];
          }
          return concat(bufs, length);
      }
      /**
       * Returns a allocList from the given start and end element index.
       *
       * This is a no-copy operation.
       */
      sublist(beginInclusive, endExclusive) {
          const { bufs, length } = this._subList(beginInclusive, endExclusive);
          const list = new Uint8ArrayList();
          list.length = length;
          // don't loop, just set the bufs
          list.bufs = bufs;
          return list;
      }
      _subList(beginInclusive, endExclusive) {
          beginInclusive = beginInclusive ?? 0;
          endExclusive = endExclusive ?? this.length;
          if (beginInclusive < 0) {
              beginInclusive = this.length + beginInclusive;
          }
          if (endExclusive < 0) {
              endExclusive = this.length + endExclusive;
          }
          if (beginInclusive < 0 || endExclusive > this.length) {
              throw new RangeError('index is out of bounds');
          }
          if (beginInclusive === endExclusive) {
              return { bufs: [], length: 0 };
          }
          if (beginInclusive === 0 && endExclusive === this.length) {
              return { bufs: [...this.bufs], length: this.length };
          }
          const bufs = [];
          let offset = 0;
          for (let i = 0; i < this.bufs.length; i++) {
              const buf = this.bufs[i];
              const bufStart = offset;
              const bufEnd = bufStart + buf.byteLength;
              // for next loop
              offset = bufEnd;
              if (beginInclusive >= bufEnd) {
                  // start after this buf
                  continue;
              }
              const sliceStartInBuf = beginInclusive >= bufStart && beginInclusive < bufEnd;
              const sliceEndsInBuf = endExclusive > bufStart && endExclusive <= bufEnd;
              if (sliceStartInBuf && sliceEndsInBuf) {
                  // slice is wholly contained within this buffer
                  if (beginInclusive === bufStart && endExclusive === bufEnd) {
                      // requested whole buffer
                      bufs.push(buf);
                      break;
                  }
                  // requested part of buffer
                  const start = beginInclusive - bufStart;
                  bufs.push(buf.subarray(start, start + (endExclusive - beginInclusive)));
                  break;
              }
              if (sliceStartInBuf) {
                  // slice starts in this buffer
                  if (beginInclusive === 0) {
                      // requested whole buffer
                      bufs.push(buf);
                      continue;
                  }
                  // requested part of buffer
                  bufs.push(buf.subarray(beginInclusive - bufStart));
                  continue;
              }
              if (sliceEndsInBuf) {
                  if (endExclusive === bufEnd) {
                      // requested whole buffer
                      bufs.push(buf);
                      break;
                  }
                  // requested part of buffer
                  bufs.push(buf.subarray(0, endExclusive - bufStart));
                  break;
              }
              // slice started before this buffer and ends after it
              bufs.push(buf);
          }
          return { bufs, length: endExclusive - beginInclusive };
      }
      indexOf(search, offset = 0) {
          if (!isUint8ArrayList(search) && !(search instanceof Uint8Array)) {
              throw new TypeError('The "value" argument must be a Uint8ArrayList or Uint8Array');
          }
          const needle = search instanceof Uint8Array ? search : search.subarray();
          offset = Number(offset ?? 0);
          if (isNaN(offset)) {
              offset = 0;
          }
          if (offset < 0) {
              offset = this.length + offset;
          }
          if (offset < 0) {
              offset = 0;
          }
          if (search.length === 0) {
              return offset > this.length ? this.length : offset;
          }
          // https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm
          const M = needle.byteLength;
          if (M === 0) {
              throw new TypeError('search must be at least 1 byte long');
          }
          // radix
          const radix = 256;
          const rightmostPositions = new Int32Array(radix);
          // position of the rightmost occurrence of the byte c in the pattern
          for (let c = 0; c < radix; c++) {
              // -1 for bytes not in pattern
              rightmostPositions[c] = -1;
          }
          for (let j = 0; j < M; j++) {
              // rightmost position for bytes in pattern
              rightmostPositions[needle[j]] = j;
          }
          // Return offset of first match, -1 if no match
          const right = rightmostPositions;
          const lastIndex = this.byteLength - needle.byteLength;
          const lastPatIndex = needle.byteLength - 1;
          let skip;
          for (let i = offset; i <= lastIndex; i += skip) {
              skip = 0;
              for (let j = lastPatIndex; j >= 0; j--) {
                  const char = this.get(i + j);
                  if (needle[j] !== char) {
                      skip = Math.max(1, j - right[char]);
                      break;
                  }
              }
              if (skip === 0) {
                  return i;
              }
          }
          return -1;
      }
      getInt8(byteOffset) {
          const buf = this.subarray(byteOffset, byteOffset + 1);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          return view.getInt8(0);
      }
      setInt8(byteOffset, value) {
          const buf = allocUnsafe(1);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          view.setInt8(0, value);
          this.write(buf, byteOffset);
      }
      getInt16(byteOffset, littleEndian) {
          const buf = this.subarray(byteOffset, byteOffset + 2);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          return view.getInt16(0, littleEndian);
      }
      setInt16(byteOffset, value, littleEndian) {
          const buf = alloc(2);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          view.setInt16(0, value, littleEndian);
          this.write(buf, byteOffset);
      }
      getInt32(byteOffset, littleEndian) {
          const buf = this.subarray(byteOffset, byteOffset + 4);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          return view.getInt32(0, littleEndian);
      }
      setInt32(byteOffset, value, littleEndian) {
          const buf = alloc(4);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          view.setInt32(0, value, littleEndian);
          this.write(buf, byteOffset);
      }
      getBigInt64(byteOffset, littleEndian) {
          const buf = this.subarray(byteOffset, byteOffset + 8);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          return view.getBigInt64(0, littleEndian);
      }
      setBigInt64(byteOffset, value, littleEndian) {
          const buf = alloc(8);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          view.setBigInt64(0, value, littleEndian);
          this.write(buf, byteOffset);
      }
      getUint8(byteOffset) {
          const buf = this.subarray(byteOffset, byteOffset + 1);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          return view.getUint8(0);
      }
      setUint8(byteOffset, value) {
          const buf = allocUnsafe(1);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          view.setUint8(0, value);
          this.write(buf, byteOffset);
      }
      getUint16(byteOffset, littleEndian) {
          const buf = this.subarray(byteOffset, byteOffset + 2);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          return view.getUint16(0, littleEndian);
      }
      setUint16(byteOffset, value, littleEndian) {
          const buf = alloc(2);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          view.setUint16(0, value, littleEndian);
          this.write(buf, byteOffset);
      }
      getUint32(byteOffset, littleEndian) {
          const buf = this.subarray(byteOffset, byteOffset + 4);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          return view.getUint32(0, littleEndian);
      }
      setUint32(byteOffset, value, littleEndian) {
          const buf = alloc(4);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          view.setUint32(0, value, littleEndian);
          this.write(buf, byteOffset);
      }
      getBigUint64(byteOffset, littleEndian) {
          const buf = this.subarray(byteOffset, byteOffset + 8);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          return view.getBigUint64(0, littleEndian);
      }
      setBigUint64(byteOffset, value, littleEndian) {
          const buf = alloc(8);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          view.setBigUint64(0, value, littleEndian);
          this.write(buf, byteOffset);
      }
      getFloat32(byteOffset, littleEndian) {
          const buf = this.subarray(byteOffset, byteOffset + 4);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          return view.getFloat32(0, littleEndian);
      }
      setFloat32(byteOffset, value, littleEndian) {
          const buf = alloc(4);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          view.setFloat32(0, value, littleEndian);
          this.write(buf, byteOffset);
      }
      getFloat64(byteOffset, littleEndian) {
          const buf = this.subarray(byteOffset, byteOffset + 8);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          return view.getFloat64(0, littleEndian);
      }
      setFloat64(byteOffset, value, littleEndian) {
          const buf = alloc(8);
          const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
          view.setFloat64(0, value, littleEndian);
          this.write(buf, byteOffset);
      }
      equals(other) {
          if (other == null) {
              return false;
          }
          if (!(other instanceof Uint8ArrayList)) {
              return false;
          }
          if (other.bufs.length !== this.bufs.length) {
              return false;
          }
          for (let i = 0; i < this.bufs.length; i++) {
              if (!equals(this.bufs[i], other.bufs[i])) {
                  return false;
              }
          }
          return true;
      }
      /**
       * Create a Uint8ArrayList from a pre-existing list of Uint8Arrays.  Use this
       * method if you know the total size of all the Uint8Arrays ahead of time.
       */
      static fromUint8Arrays(bufs, length) {
          const list = new Uint8ArrayList();
          list.bufs = bufs;
          if (length == null) {
              length = bufs.reduce((acc, curr) => acc + curr.byteLength, 0);
          }
          list.length = length;
          return list;
      }
  }
  /*
  function indexOf (needle: Uint8Array, haystack: Uint8Array, offset = 0) {
    for (let i = offset; i < haystack.byteLength; i++) {
      for (let j = 0; j < needle.length; j++) {
        if (haystack[i + j] !== needle[j]) {
          break
        }

        if (j === needle.byteLength -1) {
          return i
        }
      }

      if (haystack.byteLength - i < needle.byteLength) {
        break
      }
    }

    return -1
  }
  */

  const codes$3 = {
      ERR_SIGNATURE_NOT_VALID: 'ERR_SIGNATURE_NOT_VALID'
  };

  /* eslint-disable import/export */
  /* eslint-disable complexity */
  /* eslint-disable @typescript-eslint/no-namespace */
  /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
  /* eslint-disable @typescript-eslint/no-empty-interface */
  var Envelope;
  (function (Envelope) {
      let _codec;
      Envelope.codec = () => {
          if (_codec == null) {
              _codec = message((obj, w, opts = {}) => {
                  if (opts.lengthDelimited !== false) {
                      w.fork();
                  }
                  if ((obj.publicKey != null && obj.publicKey.byteLength > 0)) {
                      w.uint32(10);
                      w.bytes(obj.publicKey);
                  }
                  if ((obj.payloadType != null && obj.payloadType.byteLength > 0)) {
                      w.uint32(18);
                      w.bytes(obj.payloadType);
                  }
                  if ((obj.payload != null && obj.payload.byteLength > 0)) {
                      w.uint32(26);
                      w.bytes(obj.payload);
                  }
                  if ((obj.signature != null && obj.signature.byteLength > 0)) {
                      w.uint32(42);
                      w.bytes(obj.signature);
                  }
                  if (opts.lengthDelimited !== false) {
                      w.ldelim();
                  }
              }, (reader, length) => {
                  const obj = {
                      publicKey: new Uint8Array(0),
                      payloadType: new Uint8Array(0),
                      payload: new Uint8Array(0),
                      signature: new Uint8Array(0)
                  };
                  const end = length == null ? reader.len : reader.pos + length;
                  while (reader.pos < end) {
                      const tag = reader.uint32();
                      switch (tag >>> 3) {
                          case 1:
                              obj.publicKey = reader.bytes();
                              break;
                          case 2:
                              obj.payloadType = reader.bytes();
                              break;
                          case 3:
                              obj.payload = reader.bytes();
                              break;
                          case 5:
                              obj.signature = reader.bytes();
                              break;
                          default:
                              reader.skipType(tag & 7);
                              break;
                      }
                  }
                  return obj;
              });
          }
          return _codec;
      };
      Envelope.encode = (obj) => {
          return encodeMessage(obj, Envelope.codec());
      };
      Envelope.decode = (buf) => {
          return decodeMessage$1(buf, Envelope.codec());
      };
  })(Envelope || (Envelope = {}));

  class RecordEnvelope {
      /**
       * Unmarshal a serialized Envelope protobuf message
       */
      static createFromProtobuf = async (data) => {
          const envelopeData = Envelope.decode(data);
          const peerId = await peerIdFromKeys(envelopeData.publicKey);
          return new RecordEnvelope({
              peerId,
              payloadType: envelopeData.payloadType,
              payload: envelopeData.payload,
              signature: envelopeData.signature
          });
      };
      /**
       * Seal marshals the given Record, places the marshaled bytes inside an Envelope
       * and signs it with the given peerId's private key
       */
      static seal = async (record, peerId) => {
          if (peerId.privateKey == null) {
              throw new Error('Missing private key');
          }
          const domain = record.domain;
          const payloadType = record.codec;
          const payload = record.marshal();
          const signData = formatSignaturePayload(domain, payloadType, payload);
          const key = await unmarshalPrivateKey(peerId.privateKey);
          const signature = await key.sign(signData.subarray());
          return new RecordEnvelope({
              peerId,
              payloadType,
              payload,
              signature
          });
      };
      /**
       * Open and certify a given marshalled envelope.
       * Data is unmarshalled and the signature validated for the given domain.
       */
      static openAndCertify = async (data, domain) => {
          const envelope = await RecordEnvelope.createFromProtobuf(data);
          const valid = await envelope.validate(domain);
          if (!valid) {
              throw new CodeError('envelope signature is not valid for the given domain', codes$3.ERR_SIGNATURE_NOT_VALID);
          }
          return envelope;
      };
      peerId;
      payloadType;
      payload;
      signature;
      marshaled;
      /**
       * The Envelope is responsible for keeping an arbitrary signed record
       * by a libp2p peer.
       */
      constructor(init) {
          const { peerId, payloadType, payload, signature } = init;
          this.peerId = peerId;
          this.payloadType = payloadType;
          this.payload = payload;
          this.signature = signature;
      }
      /**
       * Marshal the envelope content
       */
      marshal() {
          if (this.peerId.publicKey == null) {
              throw new Error('Missing public key');
          }
          if (this.marshaled == null) {
              this.marshaled = Envelope.encode({
                  publicKey: this.peerId.publicKey,
                  payloadType: this.payloadType,
                  payload: this.payload.subarray(),
                  signature: this.signature
              });
          }
          return this.marshaled;
      }
      /**
       * Verifies if the other Envelope is identical to this one
       */
      equals(other) {
          return equals(this.marshal(), other.marshal());
      }
      /**
       * Validate envelope data signature for the given domain
       */
      async validate(domain) {
          const signData = formatSignaturePayload(domain, this.payloadType, this.payload);
          if (this.peerId.publicKey == null) {
              throw new Error('Missing public key');
          }
          const key = unmarshalPublicKey(this.peerId.publicKey);
          return key.verify(signData.subarray(), this.signature);
      }
  }
  /**
   * Helper function that prepares a Uint8Array to sign or verify a signature
   */
  const formatSignaturePayload = (domain, payloadType, payload) => {
      // When signing, a peer will prepare a Uint8Array by concatenating the following:
      // - The length of the domain separation string string in bytes
      // - The domain separation string, encoded as UTF-8
      // - The length of the payload_type field in bytes
      // - The value of the payload_type field
      // - The length of the payload field in bytes
      // - The value of the payload field
      const domainUint8Array = fromString$1(domain);
      const domainLength = unsigned.encode(domainUint8Array.byteLength);
      const payloadTypeLength = unsigned.encode(payloadType.length);
      const payloadLength = unsigned.encode(payload.length);
      return new Uint8ArrayList(domainLength, domainUint8Array, payloadTypeLength, payloadType, payloadLength, payload);
  };

  /**
   * @packageDocumentation
   *
   * Provides strategies ensure arrays are equivalent.
   *
   * @example
   *
   * ```typescript
   * import { arrayEquals } from '@libp2p/utils/array-equals'
   * import { multiaddr } from '@multformats/multiaddr'
   *
   * const ma1 = multiaddr('/ip4/127.0.0.1/tcp/9000'),
   * const ma2 = multiaddr('/ip4/82.41.53.1/tcp/9000')
   *
   * console.info(arrayEquals([ma1], [ma1])) // true
   * console.info(arrayEquals([ma1], [ma2])) // false
   * ```
   */
  /**
   * Verify if two arrays of non primitive types with the "equals" function are equal.
   * Compatible with multiaddr, peer-id and others.
   */
  function arrayEquals(a, b) {
      const sort = (a, b) => a.toString().localeCompare(b.toString());
      if (a.length !== b.length) {
          return false;
      }
      b.sort(sort);
      return a.sort(sort).every((item, index) => b[index].equals(item));
  }

  var encode_1 = encode$2;

  var MSB$1 = 0x80
    , REST$1 = 0x7F
    , MSBALL = ~REST$1
    , INT = Math.pow(2, 31);

  function encode$2(num, out, offset) {
    if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
      encode$2.bytes = 0;
      throw new RangeError('Could not encode varint')
    }
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;

    while(num >= INT) {
      out[offset++] = (num & 0xFF) | MSB$1;
      num /= 128;
    }
    while(num & MSBALL) {
      out[offset++] = (num & 0xFF) | MSB$1;
      num >>>= 7;
    }
    out[offset] = num | 0;
    
    encode$2.bytes = offset - oldOffset + 1;
    
    return out
  }

  var decode$1 = read$1;

  var MSB = 0x80
    , REST = 0x7F;

  function read$1(buf, offset) {
    var res    = 0
      , offset = offset || 0
      , shift  = 0
      , counter = offset
      , b
      , l = buf.length;

    do {
      if (counter >= l || shift > 49) {
        read$1.bytes = 0;
        throw new RangeError('Could not decode varint')
      }
      b = buf[counter++];
      res += shift < 28
        ? (b & REST) << shift
        : (b & REST) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB)

    read$1.bytes = counter - offset;

    return res
  }

  var N1 = Math.pow(2,  7);
  var N2 = Math.pow(2, 14);
  var N3 = Math.pow(2, 21);
  var N4 = Math.pow(2, 28);
  var N5 = Math.pow(2, 35);
  var N6 = Math.pow(2, 42);
  var N7 = Math.pow(2, 49);
  var N8 = Math.pow(2, 56);
  var N9 = Math.pow(2, 63);

  var length = function (value) {
    return (
      value < N1 ? 1
    : value < N2 ? 2
    : value < N3 ? 3
    : value < N4 ? 4
    : value < N5 ? 5
    : value < N6 ? 6
    : value < N7 ? 7
    : value < N8 ? 8
    : value < N9 ? 9
    :              10
    )
  };

  var varint = {
      encode: encode_1
    , decode: decode$1
    , encodingLength: length
  };

  var varint$1 = /*@__PURE__*/getDefaultExportFromCjs(varint);

  /* eslint-disable @typescript-eslint/no-unsafe-return */
  class Parser {
      index = 0;
      input = "";
      new(input) {
          this.index = 0;
          this.input = input;
          return this;
      }
      /** Run a parser, and restore the pre-parse state if it fails. */
      readAtomically(fn) {
          const index = this.index;
          const result = fn();
          if (result === undefined) {
              this.index = index;
          }
          return result;
      }
      /** Run a parser, but fail if the entire input wasn't consumed. Doesn't run atomically. */
      parseWith(fn) {
          const result = fn();
          if (this.index !== this.input.length) {
              return undefined;
          }
          return result;
      }
      /** Peek the next character from the input */
      peekChar() {
          if (this.index >= this.input.length) {
              return undefined;
          }
          return this.input[this.index];
      }
      /** Read the next character from the input */
      readChar() {
          if (this.index >= this.input.length) {
              return undefined;
          }
          return this.input[this.index++];
      }
      /** Read the next character from the input if it matches the target. */
      readGivenChar(target) {
          return this.readAtomically(() => {
              const char = this.readChar();
              if (char !== target) {
                  return undefined;
              }
              return char;
          });
      }
      /**
       * Helper for reading separators in an indexed loop. Reads the separator
       * character iff index > 0, then runs the parser. When used in a loop,
       * the separator character will only be read on index > 0 (see
       * readIPv4Addr for an example)
       */
      readSeparator(sep, index, inner) {
          return this.readAtomically(() => {
              if (index > 0) {
                  if (this.readGivenChar(sep) === undefined) {
                      return undefined;
                  }
              }
              return inner();
          });
      }
      /**
       * Read a number off the front of the input in the given radix, stopping
       * at the first non-digit character or eof. Fails if the number has more
       * digits than max_digits or if there is no number.
       */
      readNumber(radix, maxDigits, allowZeroPrefix, maxBytes) {
          return this.readAtomically(() => {
              let result = 0;
              let digitCount = 0;
              const leadingChar = this.peekChar();
              if (leadingChar === undefined) {
                  return undefined;
              }
              const hasLeadingZero = leadingChar === "0";
              const maxValue = 2 ** (8 * maxBytes) - 1;
              // eslint-disable-next-line no-constant-condition
              while (true) {
                  const digit = this.readAtomically(() => {
                      const char = this.readChar();
                      if (char === undefined) {
                          return undefined;
                      }
                      const num = Number.parseInt(char, radix);
                      if (Number.isNaN(num)) {
                          return undefined;
                      }
                      return num;
                  });
                  if (digit === undefined) {
                      break;
                  }
                  result *= radix;
                  result += digit;
                  if (result > maxValue) {
                      return undefined;
                  }
                  digitCount += 1;
                  if (maxDigits !== undefined) {
                      if (digitCount > maxDigits) {
                          return undefined;
                      }
                  }
              }
              if (digitCount === 0) {
                  return undefined;
              }
              else if (!allowZeroPrefix && hasLeadingZero && digitCount > 1) {
                  return undefined;
              }
              else {
                  return result;
              }
          });
      }
      /** Read an IPv4 address. */
      readIPv4Addr() {
          return this.readAtomically(() => {
              const out = new Uint8Array(4);
              for (let i = 0; i < out.length; i++) {
                  const ix = this.readSeparator(".", i, () => this.readNumber(10, 3, false, 1));
                  if (ix === undefined) {
                      return undefined;
                  }
                  out[i] = ix;
              }
              return out;
          });
      }
      /** Read an IPv6 Address. */
      readIPv6Addr() {
          /**
           * Read a chunk of an IPv6 address into `groups`. Returns the number
           * of groups read, along with a bool indicating if an embedded
           * trailing IPv4 address was read. Specifically, read a series of
           * colon-separated IPv6 groups (0x0000 - 0xFFFF), with an optional
           * trailing embedded IPv4 address.
           */
          const readGroups = (groups) => {
              for (let i = 0; i < groups.length / 2; i++) {
                  const ix = i * 2;
                  // Try to read a trailing embedded IPv4 address. There must be at least 4 groups left.
                  if (i < groups.length - 3) {
                      const ipv4 = this.readSeparator(":", i, () => this.readIPv4Addr());
                      if (ipv4 !== undefined) {
                          groups[ix] = ipv4[0];
                          groups[ix + 1] = ipv4[1];
                          groups[ix + 2] = ipv4[2];
                          groups[ix + 3] = ipv4[3];
                          return [ix + 4, true];
                      }
                  }
                  const group = this.readSeparator(":", i, () => this.readNumber(16, 4, true, 2));
                  if (group === undefined) {
                      return [ix, false];
                  }
                  groups[ix] = group >> 8;
                  groups[ix + 1] = group & 255;
              }
              return [groups.length, false];
          };
          return this.readAtomically(() => {
              // Read the front part of the address; either the whole thing, or up to the first ::
              const head = new Uint8Array(16);
              const [headSize, headIp4] = readGroups(head);
              if (headSize === 16) {
                  return head;
              }
              // IPv4 part is not allowed before `::`
              if (headIp4) {
                  return undefined;
              }
              // Read `::` if previous code parsed less than 8 groups.
              // `::` indicates one or more groups of 16 bits of zeros.
              if (this.readGivenChar(":") === undefined) {
                  return undefined;
              }
              if (this.readGivenChar(":") === undefined) {
                  return undefined;
              }
              // Read the back part of the address. The :: must contain at least one
              // set of zeroes, so our max length is 7.
              const tail = new Uint8Array(14);
              const limit = 16 - (headSize + 2);
              const [tailSize] = readGroups(tail.subarray(0, limit));
              // Concat the head and tail of the IP address
              head.set(tail.subarray(0, tailSize), 16 - tailSize);
              return head;
          });
      }
      /** Read an IP Address, either IPv4 or IPv6. */
      readIPAddr() {
          return this.readIPv4Addr() ?? this.readIPv6Addr();
      }
  }

  // See https://stackoverflow.com/questions/166132/maximum-length-of-the-textual-representation-of-an-ipv6-address
  const MAX_IPV6_LENGTH = 45;
  const MAX_IPV4_LENGTH = 15;
  const parser = new Parser();
  /** Parse `input` into IPv4 bytes. */
  function parseIPv4(input) {
      if (input.length > MAX_IPV4_LENGTH) {
          return undefined;
      }
      return parser.new(input).parseWith(() => parser.readIPv4Addr());
  }
  /** Parse `input` into IPv6 bytes. */
  function parseIPv6(input) {
      if (input.length > MAX_IPV6_LENGTH) {
          return undefined;
      }
      return parser.new(input).parseWith(() => parser.readIPv6Addr());
  }
  /** Parse `input` into IPv4 or IPv6 bytes. */
  function parseIP(input) {
      if (input.length > MAX_IPV6_LENGTH) {
          return undefined;
      }
      return parser.new(input).parseWith(() => parser.readIPAddr());
  }

  /** Check if `input` is IPv4. */
  function isIPv4(input) {
      return Boolean(parseIPv4(input));
  }
  /** Check if `input` is IPv6. */
  function isIPv6(input) {
      return Boolean(parseIPv6(input));
  }
  /** Check if `input` is IPv4 or IPv6. */
  function isIP(input) {
      return Boolean(parseIP(input));
  }

  const isV4 = isIPv4;
  const isV6 = isIPv6;
  // Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7
  // but with buf/offset args removed because we don't use them
  const toBytes = function (ip) {
      let offset = 0;
      ip = ip.toString().trim();
      if (isV4(ip)) {
          const bytes = new Uint8Array(offset + 4);
          ip.split(/\./g).forEach((byte) => {
              bytes[offset++] = parseInt(byte, 10) & 0xff;
          });
          return bytes;
      }
      if (isV6(ip)) {
          const sections = ip.split(':', 8);
          let i;
          for (i = 0; i < sections.length; i++) {
              const isv4 = isV4(sections[i]);
              let v4Buffer;
              if (isv4) {
                  v4Buffer = toBytes(sections[i]);
                  sections[i] = toString$1(v4Buffer.slice(0, 2), 'base16');
              }
              if (v4Buffer != null && ++i < 8) {
                  sections.splice(i, 0, toString$1(v4Buffer.slice(2, 4), 'base16'));
              }
          }
          if (sections[0] === '') {
              while (sections.length < 8)
                  sections.unshift('0');
          }
          else if (sections[sections.length - 1] === '') {
              while (sections.length < 8)
                  sections.push('0');
          }
          else if (sections.length < 8) {
              for (i = 0; i < sections.length && sections[i] !== ''; i++)
                  ;
              const argv = [i, 1];
              for (i = 9 - sections.length; i > 0; i--) {
                  argv.push('0');
              }
              sections.splice.apply(sections, argv);
          }
          const bytes = new Uint8Array(offset + 16);
          for (i = 0; i < sections.length; i++) {
              const word = parseInt(sections[i], 16);
              bytes[offset++] = (word >> 8) & 0xff;
              bytes[offset++] = word & 0xff;
          }
          return bytes;
      }
      throw new Error('invalid ip address');
  };
  // Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63
  const toString = function (buf, offset = 0, length) {
      offset = ~~offset;
      length = length ?? (buf.length - offset);
      const view = new DataView(buf.buffer);
      if (length === 4) {
          const result = [];
          // IPv4
          for (let i = 0; i < length; i++) {
              result.push(buf[offset + i]);
          }
          return result.join('.');
      }
      if (length === 16) {
          const result = [];
          // IPv6
          for (let i = 0; i < length; i += 2) {
              result.push(view.getUint16(offset + i).toString(16));
          }
          return result.join(':')
              .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')
              .replace(/:{3,4}/, '::');
      }
      return '';
  };

  const V = -1;
  const names = {};
  const codes$2 = {};
  const table = [
      [4, 32, 'ip4'],
      [6, 16, 'tcp'],
      [33, 16, 'dccp'],
      [41, 128, 'ip6'],
      [42, V, 'ip6zone'],
      [43, 8, 'ipcidr'],
      [53, V, 'dns', true],
      [54, V, 'dns4', true],
      [55, V, 'dns6', true],
      [56, V, 'dnsaddr', true],
      [132, 16, 'sctp'],
      [273, 16, 'udp'],
      [275, 0, 'p2p-webrtc-star'],
      [276, 0, 'p2p-webrtc-direct'],
      [277, 0, 'p2p-stardust'],
      [280, 0, 'webrtc-direct'],
      [281, 0, 'webrtc'],
      [290, 0, 'p2p-circuit'],
      [301, 0, 'udt'],
      [302, 0, 'utp'],
      [400, V, 'unix', false, true],
      // `ipfs` is added before `p2p` for legacy support.
      // All text representations will default to `p2p`, but `ipfs` will
      // still be supported
      [421, V, 'ipfs'],
      // `p2p` is the preferred name for 421, and is now the default
      [421, V, 'p2p'],
      [443, 0, 'https'],
      [444, 96, 'onion'],
      [445, 296, 'onion3'],
      [446, V, 'garlic64'],
      [448, 0, 'tls'],
      [449, V, 'sni'],
      [460, 0, 'quic'],
      [461, 0, 'quic-v1'],
      [465, 0, 'webtransport'],
      [466, V, 'certhash'],
      [477, 0, 'ws'],
      [478, 0, 'wss'],
      [479, 0, 'p2p-websocket-star'],
      [480, 0, 'http'],
      [777, V, 'memory']
  ];
  // populate tables
  table.forEach(row => {
      const proto = createProtocol(...row);
      codes$2[proto.code] = proto;
      names[proto.name] = proto;
  });
  function createProtocol(code, size, name, resolvable, path) {
      return {
          code,
          size,
          name,
          resolvable: Boolean(resolvable),
          path: Boolean(path)
      };
  }
  /**
   * For the passed proto string or number, return a {@link Protocol}
   *
   * @example
   *
   * ```js
   * import { protocol } from '@multiformats/multiaddr'
   *
   * console.info(protocol(4))
   * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }
   * ```
   */
  function getProtocol(proto) {
      if (typeof proto === 'number') {
          if (codes$2[proto] != null) {
              return codes$2[proto];
          }
          throw new Error(`no protocol with code: ${proto}`);
      }
      else if (typeof proto === 'string') {
          if (names[proto] != null) {
              return names[proto];
          }
          throw new Error(`no protocol with name: ${proto}`);
      }
      throw new Error(`invalid protocol id type: ${typeof proto}`);
  }

  /**
   * @packageDocumentation
   *
   * Provides methods for converting
   */
  getProtocol('ip4');
  getProtocol('ip6');
  getProtocol('ipcidr');
  /**
   * Convert [code,Uint8Array] to string
   */
  function convertToString(proto, buf) {
      const protocol = getProtocol(proto);
      switch (protocol.code) {
          case 4: // ipv4
          case 41: // ipv6
              return bytes2ip(buf);
          case 42: // ipv6zone
              return bytes2str(buf);
          case 6: // tcp
          case 273: // udp
          case 33: // dccp
          case 132: // sctp
              return bytes2port(buf).toString();
          case 53: // dns
          case 54: // dns4
          case 55: // dns6
          case 56: // dnsaddr
          case 400: // unix
          case 449: // sni
          case 777: // memory
              return bytes2str(buf);
          case 421: // ipfs
              return bytes2mh(buf);
          case 444: // onion
              return bytes2onion(buf);
          case 445: // onion3
              return bytes2onion(buf);
          case 466: // certhash
              return bytes2mb(buf);
          default:
              return toString$1(buf, 'base16'); // no clue. convert to hex
      }
  }
  function convertToBytes(proto, str) {
      const protocol = getProtocol(proto);
      switch (protocol.code) {
          case 4: // ipv4
              return ip2bytes(str);
          case 41: // ipv6
              return ip2bytes(str);
          case 42: // ipv6zone
              return str2bytes(str);
          case 6: // tcp
          case 273: // udp
          case 33: // dccp
          case 132: // sctp
              return port2bytes(parseInt(str, 10));
          case 53: // dns
          case 54: // dns4
          case 55: // dns6
          case 56: // dnsaddr
          case 400: // unix
          case 449: // sni
          case 777: // memory
              return str2bytes(str);
          case 421: // ipfs
              return mh2bytes(str);
          case 444: // onion
              return onion2bytes(str);
          case 445: // onion3
              return onion32bytes(str);
          case 466: // certhash
              return mb2bytes(str);
          default:
              return fromString$1(str, 'base16'); // no clue. convert from hex
      }
  }
  const decoders = Object.values(bases).map((c) => c.decoder);
  const anybaseDecoder = (function () {
      let acc = decoders[0].or(decoders[1]);
      decoders.slice(2).forEach((d) => (acc = acc.or(d)));
      return acc;
  })();
  function ip2bytes(ipString) {
      if (!isIP(ipString)) {
          throw new Error('invalid ip address');
      }
      return toBytes(ipString);
  }
  function bytes2ip(ipBuff) {
      const ipString = toString(ipBuff, 0, ipBuff.length);
      if (ipString == null) {
          throw new Error('ipBuff is required');
      }
      if (!isIP(ipString)) {
          throw new Error('invalid ip address');
      }
      return ipString;
  }
  function port2bytes(port) {
      const buf = new ArrayBuffer(2);
      const view = new DataView(buf);
      view.setUint16(0, port);
      return new Uint8Array(buf);
  }
  function bytes2port(buf) {
      const view = new DataView(buf.buffer);
      return view.getUint16(buf.byteOffset);
  }
  function str2bytes(str) {
      const buf = fromString$1(str);
      const size = Uint8Array.from(varint$1.encode(buf.length));
      return concat([size, buf], size.length + buf.length);
  }
  function bytes2str(buf) {
      const size = varint$1.decode(buf);
      buf = buf.slice(varint$1.decode.bytes);
      if (buf.length !== size) {
          throw new Error('inconsistent lengths');
      }
      return toString$1(buf);
  }
  function mh2bytes(hash) {
      let mh;
      if (hash[0] === 'Q' || hash[0] === '1') {
          mh = decode$2(base58btc.decode(`z${hash}`)).bytes;
      }
      else {
          mh = CID.parse(hash).multihash.bytes;
      }
      // the address is a varint prefixed multihash string representation
      const size = Uint8Array.from(varint$1.encode(mh.length));
      return concat([size, mh], size.length + mh.length);
  }
  function mb2bytes(mbstr) {
      const mb = anybaseDecoder.decode(mbstr);
      const size = Uint8Array.from(varint$1.encode(mb.length));
      return concat([size, mb], size.length + mb.length);
  }
  function bytes2mb(buf) {
      const size = varint$1.decode(buf);
      const hash = buf.slice(varint$1.decode.bytes);
      if (hash.length !== size) {
          throw new Error('inconsistent lengths');
      }
      return 'u' + toString$1(hash, 'base64url');
  }
  /**
   * Converts bytes to bas58btc string
   */
  function bytes2mh(buf) {
      const size = varint$1.decode(buf);
      const address = buf.slice(varint$1.decode.bytes);
      if (address.length !== size) {
          throw new Error('inconsistent lengths');
      }
      return toString$1(address, 'base58btc');
  }
  function onion2bytes(str) {
      const addr = str.split(':');
      if (addr.length !== 2) {
          throw new Error(`failed to parse onion addr: ["'${addr.join('", "')}'"]' does not contain a port number`);
      }
      if (addr[0].length !== 16) {
          throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);
      }
      // onion addresses do not include the multibase prefix, add it before decoding
      const buf = base32.decode('b' + addr[0]);
      // onion port number
      const port = parseInt(addr[1], 10);
      if (port < 1 || port > 65536) {
          throw new Error('Port number is not in range(1, 65536)');
      }
      const portBuf = port2bytes(port);
      return concat([buf, portBuf], buf.length + portBuf.length);
  }
  function onion32bytes(str) {
      const addr = str.split(':');
      if (addr.length !== 2) {
          throw new Error(`failed to parse onion addr: ["'${addr.join('", "')}'"]' does not contain a port number`);
      }
      if (addr[0].length !== 56) {
          throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);
      }
      // onion addresses do not include the multibase prefix, add it before decoding
      const buf = base32.decode(`b${addr[0]}`);
      // onion port number
      const port = parseInt(addr[1], 10);
      if (port < 1 || port > 65536) {
          throw new Error('Port number is not in range(1, 65536)');
      }
      const portBuf = port2bytes(port);
      return concat([buf, portBuf], buf.length + portBuf.length);
  }
  function bytes2onion(buf) {
      const addrBytes = buf.slice(0, buf.length - 2);
      const portBytes = buf.slice(buf.length - 2);
      const addr = toString$1(addrBytes, 'base32');
      const port = bytes2port(portBytes);
      return `${addr}:${port}`;
  }

  /**
   * string -> [[str name, str addr]... ]
   */
  function stringToStringTuples(str) {
      const tuples = [];
      const parts = str.split('/').slice(1); // skip first empty elem
      if (parts.length === 1 && parts[0] === '') {
          return [];
      }
      for (let p = 0; p < parts.length; p++) {
          const part = parts[p];
          const proto = getProtocol(part);
          if (proto.size === 0) {
              tuples.push([part]);
              // eslint-disable-next-line no-continue
              continue;
          }
          p++; // advance addr part
          if (p >= parts.length) {
              throw ParseError('invalid address: ' + str);
          }
          // if it's a path proto, take the rest
          if (proto.path === true) {
              tuples.push([
                  part,
                  // should we need to check each path part to see if it's a proto?
                  // This would allow for other protocols to be added after a unix path,
                  // however it would have issues if the path had a protocol name in the path
                  cleanPath(parts.slice(p).join('/'))
              ]);
              break;
          }
          tuples.push([part, parts[p]]);
      }
      return tuples;
  }
  /**
   * [[str name, str addr]... ] -> string
   */
  function stringTuplesToString(tuples) {
      const parts = [];
      tuples.map((tup) => {
          const proto = protoFromTuple(tup);
          parts.push(proto.name);
          if (tup.length > 1 && tup[1] != null) {
              parts.push(tup[1]);
          }
          return null;
      });
      return cleanPath(parts.join('/'));
  }
  /**
   * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]
   */
  function stringTuplesToTuples(tuples) {
      return tuples.map((tup) => {
          if (!Array.isArray(tup)) {
              tup = [tup];
          }
          const proto = protoFromTuple(tup);
          if (tup.length > 1) {
              return [proto.code, convertToBytes(proto.code, tup[1])];
          }
          return [proto.code];
      });
  }
  /**
   * Convert tuples to string tuples
   *
   * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]
   */
  function tuplesToStringTuples(tuples) {
      return tuples.map(tup => {
          const proto = protoFromTuple(tup);
          if (tup[1] != null) {
              return [proto.code, convertToString(proto.code, tup[1])];
          }
          return [proto.code];
      });
  }
  /**
   * [[int code, Uint8Array ]... ] -> Uint8Array
   */
  function tuplesToBytes(tuples) {
      return fromBytes(concat(tuples.map((tup) => {
          const proto = protoFromTuple(tup);
          let buf = Uint8Array.from(varint$1.encode(proto.code));
          if (tup.length > 1 && tup[1] != null) {
              buf = concat([buf, tup[1]]); // add address buffer
          }
          return buf;
      })));
  }
  /**
   * For the passed address, return the serialized size
   */
  function sizeForAddr(p, addr) {
      if (p.size > 0) {
          return p.size / 8;
      }
      else if (p.size === 0) {
          return 0;
      }
      else {
          const size = varint$1.decode(addr);
          return size + (varint$1.decode.bytes ?? 0);
      }
  }
  function bytesToTuples(buf) {
      const tuples = [];
      let i = 0;
      while (i < buf.length) {
          const code = varint$1.decode(buf, i);
          const n = varint$1.decode.bytes ?? 0;
          const p = getProtocol(code);
          const size = sizeForAddr(p, buf.slice(i + n));
          if (size === 0) {
              tuples.push([code]);
              i += n;
              // eslint-disable-next-line no-continue
              continue;
          }
          const addr = buf.slice(i + n, i + n + size);
          i += (size + n);
          if (i > buf.length) { // did not end _exactly_ at buffer.length
              throw ParseError('Invalid address Uint8Array: ' + toString$1(buf, 'base16'));
          }
          // ok, tuple seems good.
          tuples.push([code, addr]);
      }
      return tuples;
  }
  /**
   * Uint8Array -> String
   */
  function bytesToString(buf) {
      const a = bytesToTuples(buf);
      const b = tuplesToStringTuples(a);
      return stringTuplesToString(b);
  }
  /**
   * String -> Uint8Array
   */
  function stringToBytes(str) {
      str = cleanPath(str);
      const a = stringToStringTuples(str);
      const b = stringTuplesToTuples(a);
      return tuplesToBytes(b);
  }
  /**
   * String -> Uint8Array
   */
  function fromString(str) {
      return stringToBytes(str);
  }
  /**
   * Uint8Array -> Uint8Array
   */
  function fromBytes(buf) {
      const err = validateBytes(buf);
      if (err != null) {
          throw err;
      }
      return Uint8Array.from(buf); // copy
  }
  function validateBytes(buf) {
      try {
          bytesToTuples(buf); // try to parse. will throw if breaks
      }
      catch (err) {
          return err;
      }
  }
  function cleanPath(str) {
      return '/' + str.trim().split('/').filter((a) => a).join('/');
  }
  function ParseError(str) {
      return new Error('Error parsing address: ' + str);
  }
  function protoFromTuple(tup) {
      const proto = getProtocol(tup[0]);
      return proto;
  }

  /**
   * @packageDocumentation
   *
   * An implementation of a Multiaddr in JavaScript
   *
   * @example
   *
   * ```js
   * import { multiaddr } from '@multiformats/multiaddr'
   *
   * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')
   * ```
   */
  const inspect = Symbol.for('nodejs.util.inspect.custom');
  const DNS_CODES = [
      getProtocol('dns').code,
      getProtocol('dns4').code,
      getProtocol('dns6').code,
      getProtocol('dnsaddr').code
  ];
  /**
   * All configured {@link Resolver}s
   */
  const resolvers = new Map();
  const symbol$1 = Symbol.for('@multiformats/js-multiaddr/multiaddr');
  /**
   * Check if object is a {@link Multiaddr} instance
   *
   * @example
   *
   * ```js
   * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'
   *
   * isMultiaddr(5)
   * // false
   * isMultiaddr(multiaddr('/ip4/127.0.0.1'))
   * // true
   * ```
   */
  function isMultiaddr(value) {
      return Boolean(value?.[symbol$1]);
  }
  /**
   * Creates a {@link Multiaddr} from a {@link MultiaddrInput}
   */
  class DefaultMultiaddr {
      bytes;
      #string;
      #tuples;
      #stringTuples;
      #path;
      [symbol$1] = true;
      constructor(addr) {
          // default
          if (addr == null) {
              addr = '';
          }
          if (addr instanceof Uint8Array) {
              this.bytes = fromBytes(addr);
          }
          else if (typeof addr === 'string') {
              if (addr.length > 0 && addr.charAt(0) !== '/') {
                  throw new Error(`multiaddr "${addr}" must start with a "/"`);
              }
              this.bytes = fromString(addr);
          }
          else if (isMultiaddr(addr)) { // Multiaddr
              this.bytes = fromBytes(addr.bytes); // validate + copy buffer
          }
          else {
              throw new Error('addr must be a string, Buffer, or another Multiaddr');
          }
      }
      toString() {
          if (this.#string == null) {
              this.#string = bytesToString(this.bytes);
          }
          return this.#string;
      }
      toJSON() {
          return this.toString();
      }
      toOptions() {
          let family;
          let transport;
          let host;
          let port;
          let zone = '';
          const tcp = getProtocol('tcp');
          const udp = getProtocol('udp');
          const ip4 = getProtocol('ip4');
          const ip6 = getProtocol('ip6');
          const dns6 = getProtocol('dns6');
          const ip6zone = getProtocol('ip6zone');
          for (const [code, value] of this.stringTuples()) {
              if (code === ip6zone.code) {
                  zone = `%${value ?? ''}`;
              }
              // default to https when protocol & port are omitted from DNS addrs
              if (DNS_CODES.includes(code)) {
                  transport = tcp.name;
                  port = 443;
                  host = `${value ?? ''}${zone}`;
                  family = code === dns6.code ? 6 : 4;
              }
              if (code === tcp.code || code === udp.code) {
                  transport = getProtocol(code).name;
                  port = parseInt(value ?? '');
              }
              if (code === ip4.code || code === ip6.code) {
                  transport = getProtocol(code).name;
                  host = `${value ?? ''}${zone}`;
                  family = code === ip6.code ? 6 : 4;
              }
          }
          if (family == null || transport == null || host == null || port == null) {
              throw new Error('multiaddr must have a valid format: "/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}".');
          }
          const opts = {
              family,
              host,
              transport,
              port
          };
          return opts;
      }
      protos() {
          return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));
      }
      protoCodes() {
          const codes = [];
          const buf = this.bytes;
          let i = 0;
          while (i < buf.length) {
              const code = varint$1.decode(buf, i);
              const n = varint$1.decode.bytes ?? 0;
              const p = getProtocol(code);
              const size = sizeForAddr(p, buf.slice(i + n));
              i += (size + n);
              codes.push(code);
          }
          return codes;
      }
      protoNames() {
          return this.protos().map(proto => proto.name);
      }
      tuples() {
          if (this.#tuples == null) {
              this.#tuples = bytesToTuples(this.bytes);
          }
          return this.#tuples;
      }
      stringTuples() {
          if (this.#stringTuples == null) {
              this.#stringTuples = tuplesToStringTuples(this.tuples());
          }
          return this.#stringTuples;
      }
      encapsulate(addr) {
          addr = new DefaultMultiaddr(addr);
          return new DefaultMultiaddr(this.toString() + addr.toString());
      }
      decapsulate(addr) {
          const addrString = addr.toString();
          const s = this.toString();
          const i = s.lastIndexOf(addrString);
          if (i < 0) {
              throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);
          }
          return new DefaultMultiaddr(s.slice(0, i));
      }
      decapsulateCode(code) {
          const tuples = this.tuples();
          for (let i = tuples.length - 1; i >= 0; i--) {
              if (tuples[i][0] === code) {
                  return new DefaultMultiaddr(tuplesToBytes(tuples.slice(0, i)));
              }
          }
          return this;
      }
      getPeerId() {
          try {
              const tuples = this.stringTuples().filter((tuple) => {
                  if (tuple[0] === names.ipfs.code) {
                      return true;
                  }
                  return false;
              });
              // Get the last ipfs tuple ['ipfs', 'peerid string']
              const tuple = tuples.pop();
              if (tuple?.[1] != null) {
                  const peerIdStr = tuple[1];
                  // peer id is base58btc encoded string but not multibase encoded so add the `z`
                  // prefix so we can validate that it is correctly encoded
                  if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {
                      return toString$1(base58btc.decode(`z${peerIdStr}`), 'base58btc');
                  }
                  // try to parse peer id as CID
                  return toString$1(CID.parse(peerIdStr).multihash.bytes, 'base58btc');
              }
              return null;
          }
          catch (e) {
              return null;
          }
      }
      getPath() {
          // on initialization, this.#path is undefined
          // after the first call, it is either a string or null
          if (this.#path === undefined) {
              try {
                  this.#path = this.stringTuples().filter((tuple) => {
                      const proto = getProtocol(tuple[0]);
                      if (proto.path === true) {
                          return true;
                      }
                      return false;
                  })[0][1];
                  if (this.#path == null) {
                      this.#path = null;
                  }
              }
              catch {
                  this.#path = null;
              }
          }
          return this.#path;
      }
      equals(addr) {
          return equals(this.bytes, addr.bytes);
      }
      async resolve(options) {
          const resolvableProto = this.protos().find((p) => p.resolvable);
          // Multiaddr is not resolvable?
          if (resolvableProto == null) {
              return [this];
          }
          const resolver = resolvers.get(resolvableProto.name);
          if (resolver == null) {
              throw new CodeError(`no available resolver for ${resolvableProto.name}`, 'ERR_NO_AVAILABLE_RESOLVER');
          }
          const addresses = await resolver(this, options);
          return addresses.map((a) => new DefaultMultiaddr(a));
      }
      nodeAddress() {
          const options = this.toOptions();
          if (options.transport !== 'tcp' && options.transport !== 'udp') {
              throw new Error(`multiaddr must have a valid format - no protocol with name: "${options.transport}". Must have a valid transport protocol: "{tcp, udp}"`);
          }
          return {
              family: options.family,
              address: options.host,
              port: options.port
          };
      }
      isThinWaistAddress(addr) {
          const protos = (addr ?? this).protos();
          if (protos.length !== 2) {
              return false;
          }
          if (protos[0].code !== 4 && protos[0].code !== 41) {
              return false;
          }
          if (protos[1].code !== 6 && protos[1].code !== 273) {
              return false;
          }
          return true;
      }
      /**
       * Returns Multiaddr as a human-readable string
       * https://nodejs.org/api/util.html#utilinspectcustom
       *
       * @example
       * ```js
       * import { multiaddr } from '@multiformats/multiaddr'
       *
       * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))
       * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'
       * ```
       */
      [inspect]() {
          return `Multiaddr(${bytesToString(this.bytes)})`;
      }
  }
  /**
   * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}
   *
   * @example
   * ```js
   * import { multiaddr } from '@libp2p/multiaddr'
   *
   * multiaddr('/ip4/127.0.0.1/tcp/4001')
   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)
   * ```
   *
   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)
   */
  function multiaddr(addr) {
      return new DefaultMultiaddr(addr);
  }

  // The domain string used for peer records contained in a Envelope.
  const ENVELOPE_DOMAIN_PEER_RECORD = 'libp2p-peer-record';
  // The type hint used to identify peer records in a Envelope.
  // Defined in https://github.com/multiformats/multicodec/blob/master/table.csv
  // with name "libp2p-peer-record"
  const ENVELOPE_PAYLOAD_TYPE_PEER_RECORD = Uint8Array.from([3, 1]);

  /* eslint-disable import/export */
  /* eslint-disable complexity */
  /* eslint-disable @typescript-eslint/no-namespace */
  /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
  /* eslint-disable @typescript-eslint/no-empty-interface */
  var PeerRecord$1;
  (function (PeerRecord) {
      (function (AddressInfo) {
          let _codec;
          AddressInfo.codec = () => {
              if (_codec == null) {
                  _codec = message((obj, w, opts = {}) => {
                      if (opts.lengthDelimited !== false) {
                          w.fork();
                      }
                      if ((obj.multiaddr != null && obj.multiaddr.byteLength > 0)) {
                          w.uint32(10);
                          w.bytes(obj.multiaddr);
                      }
                      if (opts.lengthDelimited !== false) {
                          w.ldelim();
                      }
                  }, (reader, length) => {
                      const obj = {
                          multiaddr: new Uint8Array(0)
                      };
                      const end = length == null ? reader.len : reader.pos + length;
                      while (reader.pos < end) {
                          const tag = reader.uint32();
                          switch (tag >>> 3) {
                              case 1:
                                  obj.multiaddr = reader.bytes();
                                  break;
                              default:
                                  reader.skipType(tag & 7);
                                  break;
                          }
                      }
                      return obj;
                  });
              }
              return _codec;
          };
          AddressInfo.encode = (obj) => {
              return encodeMessage(obj, AddressInfo.codec());
          };
          AddressInfo.decode = (buf) => {
              return decodeMessage$1(buf, AddressInfo.codec());
          };
      })(PeerRecord.AddressInfo || (PeerRecord.AddressInfo = {}));
      let _codec;
      PeerRecord.codec = () => {
          if (_codec == null) {
              _codec = message((obj, w, opts = {}) => {
                  if (opts.lengthDelimited !== false) {
                      w.fork();
                  }
                  if ((obj.peerId != null && obj.peerId.byteLength > 0)) {
                      w.uint32(10);
                      w.bytes(obj.peerId);
                  }
                  if ((obj.seq != null && obj.seq !== 0n)) {
                      w.uint32(16);
                      w.uint64(obj.seq);
                  }
                  if (obj.addresses != null) {
                      for (const value of obj.addresses) {
                          w.uint32(26);
                          PeerRecord.AddressInfo.codec().encode(value, w);
                      }
                  }
                  if (opts.lengthDelimited !== false) {
                      w.ldelim();
                  }
              }, (reader, length) => {
                  const obj = {
                      peerId: new Uint8Array(0),
                      seq: 0n,
                      addresses: []
                  };
                  const end = length == null ? reader.len : reader.pos + length;
                  while (reader.pos < end) {
                      const tag = reader.uint32();
                      switch (tag >>> 3) {
                          case 1:
                              obj.peerId = reader.bytes();
                              break;
                          case 2:
                              obj.seq = reader.uint64();
                              break;
                          case 3:
                              obj.addresses.push(PeerRecord.AddressInfo.codec().decode(reader, reader.uint32()));
                              break;
                          default:
                              reader.skipType(tag & 7);
                              break;
                      }
                  }
                  return obj;
              });
          }
          return _codec;
      };
      PeerRecord.encode = (obj) => {
          return encodeMessage(obj, PeerRecord.codec());
      };
      PeerRecord.decode = (buf) => {
          return decodeMessage$1(buf, PeerRecord.codec());
      };
  })(PeerRecord$1 || (PeerRecord$1 = {}));

  /**
   * The PeerRecord is used for distributing peer routing records across the network.
   * It contains the peer's reachable listen addresses.
   */
  class PeerRecord {
      /**
       * Unmarshal Peer Record Protobuf
       */
      static createFromProtobuf = (buf) => {
          const peerRecord = PeerRecord$1.decode(buf);
          const peerId = peerIdFromBytes(peerRecord.peerId);
          const multiaddrs = (peerRecord.addresses ?? []).map((a) => multiaddr(a.multiaddr));
          const seqNumber = peerRecord.seq;
          return new PeerRecord({ peerId, multiaddrs, seqNumber });
      };
      static DOMAIN = ENVELOPE_DOMAIN_PEER_RECORD;
      static CODEC = ENVELOPE_PAYLOAD_TYPE_PEER_RECORD;
      peerId;
      multiaddrs;
      seqNumber;
      domain = PeerRecord.DOMAIN;
      codec = PeerRecord.CODEC;
      marshaled;
      constructor(init) {
          const { peerId, multiaddrs, seqNumber } = init;
          this.peerId = peerId;
          this.multiaddrs = multiaddrs ?? [];
          this.seqNumber = seqNumber ?? BigInt(Date.now());
      }
      /**
       * Marshal a record to be used in an envelope
       */
      marshal() {
          if (this.marshaled == null) {
              this.marshaled = PeerRecord$1.encode({
                  peerId: this.peerId.toBytes(),
                  seq: BigInt(this.seqNumber),
                  addresses: this.multiaddrs.map((m) => ({
                      multiaddr: m.bytes
                  }))
              });
          }
          return this.marshaled;
      }
      /**
       * Returns true if `this` record equals the `other`
       */
      equals(other) {
          if (!(other instanceof PeerRecord)) {
              return false;
          }
          // Validate PeerId
          if (!this.peerId.equals(other.peerId)) {
              return false;
          }
          // Validate seqNumber
          if (this.seqNumber !== other.seqNumber) {
              return false;
          }
          // Validate multiaddrs
          if (!arrayEquals(this.multiaddrs, other.multiaddrs)) {
              return false;
          }
          return true;
      }
  }

  function isAsyncIterable$9(thing) {
      return thing[Symbol.asyncIterator] != null;
  }
  function all(source) {
      if (isAsyncIterable$9(source)) {
          return (async () => {
              const arr = [];
              for await (const entry of source) {
                  arr.push(entry);
              }
              return arr;
          })();
      }
      const arr = [];
      for (const entry of source) {
          arr.push(entry);
      }
      return arr;
  }

  var eventemitter3 = {exports: {}};

  (function (module) {

  	var has = Object.prototype.hasOwnProperty
  	  , prefix = '~';

  	/**
  	 * Constructor to create a storage for our `EE` objects.
  	 * An `Events` instance is a plain object whose properties are event names.
  	 *
  	 * @constructor
  	 * @private
  	 */
  	function Events() {}

  	//
  	// We try to not inherit from `Object.prototype`. In some engines creating an
  	// instance in this way is faster than calling `Object.create(null)` directly.
  	// If `Object.create(null)` is not supported we prefix the event names with a
  	// character to make sure that the built-in object properties are not
  	// overridden or used as an attack vector.
  	//
  	if (Object.create) {
  	  Events.prototype = Object.create(null);

  	  //
  	  // This hack is needed because the `__proto__` property is still inherited in
  	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  	  //
  	  if (!new Events().__proto__) prefix = false;
  	}

  	/**
  	 * Representation of a single event listener.
  	 *
  	 * @param {Function} fn The listener function.
  	 * @param {*} context The context to invoke the listener with.
  	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
  	 * @constructor
  	 * @private
  	 */
  	function EE(fn, context, once) {
  	  this.fn = fn;
  	  this.context = context;
  	  this.once = once || false;
  	}

  	/**
  	 * Add a listener for a given event.
  	 *
  	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
  	 * @param {(String|Symbol)} event The event name.
  	 * @param {Function} fn The listener function.
  	 * @param {*} context The context to invoke the listener with.
  	 * @param {Boolean} once Specify if the listener is a one-time listener.
  	 * @returns {EventEmitter}
  	 * @private
  	 */
  	function addListener(emitter, event, fn, context, once) {
  	  if (typeof fn !== 'function') {
  	    throw new TypeError('The listener must be a function');
  	  }

  	  var listener = new EE(fn, context || emitter, once)
  	    , evt = prefix ? prefix + event : event;

  	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  	  else emitter._events[evt] = [emitter._events[evt], listener];

  	  return emitter;
  	}

  	/**
  	 * Clear event by name.
  	 *
  	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
  	 * @param {(String|Symbol)} evt The Event name.
  	 * @private
  	 */
  	function clearEvent(emitter, evt) {
  	  if (--emitter._eventsCount === 0) emitter._events = new Events();
  	  else delete emitter._events[evt];
  	}

  	/**
  	 * Minimal `EventEmitter` interface that is molded against the Node.js
  	 * `EventEmitter` interface.
  	 *
  	 * @constructor
  	 * @public
  	 */
  	function EventEmitter() {
  	  this._events = new Events();
  	  this._eventsCount = 0;
  	}

  	/**
  	 * Return an array listing the events for which the emitter has registered
  	 * listeners.
  	 *
  	 * @returns {Array}
  	 * @public
  	 */
  	EventEmitter.prototype.eventNames = function eventNames() {
  	  var names = []
  	    , events
  	    , name;

  	  if (this._eventsCount === 0) return names;

  	  for (name in (events = this._events)) {
  	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  	  }

  	  if (Object.getOwnPropertySymbols) {
  	    return names.concat(Object.getOwnPropertySymbols(events));
  	  }

  	  return names;
  	};

  	/**
  	 * Return the listeners registered for a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @returns {Array} The registered listeners.
  	 * @public
  	 */
  	EventEmitter.prototype.listeners = function listeners(event) {
  	  var evt = prefix ? prefix + event : event
  	    , handlers = this._events[evt];

  	  if (!handlers) return [];
  	  if (handlers.fn) return [handlers.fn];

  	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
  	    ee[i] = handlers[i].fn;
  	  }

  	  return ee;
  	};

  	/**
  	 * Return the number of listeners listening to a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @returns {Number} The number of listeners.
  	 * @public
  	 */
  	EventEmitter.prototype.listenerCount = function listenerCount(event) {
  	  var evt = prefix ? prefix + event : event
  	    , listeners = this._events[evt];

  	  if (!listeners) return 0;
  	  if (listeners.fn) return 1;
  	  return listeners.length;
  	};

  	/**
  	 * Calls each of the listeners registered for a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @returns {Boolean} `true` if the event had listeners, else `false`.
  	 * @public
  	 */
  	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  	  var evt = prefix ? prefix + event : event;

  	  if (!this._events[evt]) return false;

  	  var listeners = this._events[evt]
  	    , len = arguments.length
  	    , args
  	    , i;

  	  if (listeners.fn) {
  	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

  	    switch (len) {
  	      case 1: return listeners.fn.call(listeners.context), true;
  	      case 2: return listeners.fn.call(listeners.context, a1), true;
  	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
  	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
  	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
  	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
  	    }

  	    for (i = 1, args = new Array(len -1); i < len; i++) {
  	      args[i - 1] = arguments[i];
  	    }

  	    listeners.fn.apply(listeners.context, args);
  	  } else {
  	    var length = listeners.length
  	      , j;

  	    for (i = 0; i < length; i++) {
  	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

  	      switch (len) {
  	        case 1: listeners[i].fn.call(listeners[i].context); break;
  	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
  	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
  	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
  	        default:
  	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
  	            args[j - 1] = arguments[j];
  	          }

  	          listeners[i].fn.apply(listeners[i].context, args);
  	      }
  	    }
  	  }

  	  return true;
  	};

  	/**
  	 * Add a listener for a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @param {Function} fn The listener function.
  	 * @param {*} [context=this] The context to invoke the listener with.
  	 * @returns {EventEmitter} `this`.
  	 * @public
  	 */
  	EventEmitter.prototype.on = function on(event, fn, context) {
  	  return addListener(this, event, fn, context, false);
  	};

  	/**
  	 * Add a one-time listener for a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @param {Function} fn The listener function.
  	 * @param {*} [context=this] The context to invoke the listener with.
  	 * @returns {EventEmitter} `this`.
  	 * @public
  	 */
  	EventEmitter.prototype.once = function once(event, fn, context) {
  	  return addListener(this, event, fn, context, true);
  	};

  	/**
  	 * Remove the listeners of a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @param {Function} fn Only remove the listeners that match this function.
  	 * @param {*} context Only remove the listeners that have this context.
  	 * @param {Boolean} once Only remove one-time listeners.
  	 * @returns {EventEmitter} `this`.
  	 * @public
  	 */
  	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  	  var evt = prefix ? prefix + event : event;

  	  if (!this._events[evt]) return this;
  	  if (!fn) {
  	    clearEvent(this, evt);
  	    return this;
  	  }

  	  var listeners = this._events[evt];

  	  if (listeners.fn) {
  	    if (
  	      listeners.fn === fn &&
  	      (!once || listeners.once) &&
  	      (!context || listeners.context === context)
  	    ) {
  	      clearEvent(this, evt);
  	    }
  	  } else {
  	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
  	      if (
  	        listeners[i].fn !== fn ||
  	        (once && !listeners[i].once) ||
  	        (context && listeners[i].context !== context)
  	      ) {
  	        events.push(listeners[i]);
  	      }
  	    }

  	    //
  	    // Reset the array, or remove it completely if we have no more listeners.
  	    //
  	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
  	    else clearEvent(this, evt);
  	  }

  	  return this;
  	};

  	/**
  	 * Remove all listeners, or those of the specified event.
  	 *
  	 * @param {(String|Symbol)} [event] The event name.
  	 * @returns {EventEmitter} `this`.
  	 * @public
  	 */
  	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  	  var evt;

  	  if (event) {
  	    evt = prefix ? prefix + event : event;
  	    if (this._events[evt]) clearEvent(this, evt);
  	  } else {
  	    this._events = new Events();
  	    this._eventsCount = 0;
  	  }

  	  return this;
  	};

  	//
  	// Alias methods names because people roll like that.
  	//
  	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  	//
  	// Expose the prefix.
  	//
  	EventEmitter.prefixed = prefix;

  	//
  	// Allow `EventEmitter` to be imported as module namespace.
  	//
  	EventEmitter.EventEmitter = EventEmitter;

  	//
  	// Expose the module.
  	//
  	{
  	  module.exports = EventEmitter;
  	} 
  } (eventemitter3));

  var eventemitter3Exports = eventemitter3.exports;
  var EventEmitter = /*@__PURE__*/getDefaultExportFromCjs(eventemitter3Exports);

  let TimeoutError$1 = class TimeoutError extends Error {
  	constructor(message) {
  		super(message);
  		this.name = 'TimeoutError';
  	}
  };

  /**
  An error to be thrown when the request is aborted by AbortController.
  DOMException is thrown instead of this Error when DOMException is available.
  */
  let AbortError$4 = class AbortError extends Error {
  	constructor(message) {
  		super();
  		this.name = 'AbortError';
  		this.message = message;
  	}
  };

  /**
  TODO: Remove AbortError and just throw DOMException when targeting Node 18.
  */
  const getDOMException$1 = errorMessage => globalThis.DOMException === undefined ?
  	new AbortError$4(errorMessage) :
  	new DOMException(errorMessage);

  /**
  TODO: Remove below function and just 'reject(signal.reason)' when targeting Node 18.
  */
  const getAbortedReason$1 = signal => {
  	const reason = signal.reason === undefined ?
  		getDOMException$1('This operation was aborted.') :
  		signal.reason;

  	return reason instanceof Error ? reason : getDOMException$1(reason);
  };

  function pTimeout$1(promise, milliseconds, fallback, options) {
  	let timer;

  	const cancelablePromise = new Promise((resolve, reject) => {
  		if (typeof milliseconds !== 'number' || Math.sign(milliseconds) !== 1) {
  			throw new TypeError(`Expected \`milliseconds\` to be a positive number, got \`${milliseconds}\``);
  		}

  		if (milliseconds === Number.POSITIVE_INFINITY) {
  			resolve(promise);
  			return;
  		}

  		options = {
  			customTimers: {setTimeout, clearTimeout},
  			...options
  		};

  		if (options.signal) {
  			const {signal} = options;
  			if (signal.aborted) {
  				reject(getAbortedReason$1(signal));
  			}

  			signal.addEventListener('abort', () => {
  				reject(getAbortedReason$1(signal));
  			});
  		}

  		timer = options.customTimers.setTimeout.call(undefined, () => {
  			if (typeof fallback === 'function') {
  				try {
  					resolve(fallback());
  				} catch (error) {
  					reject(error);
  				}

  				return;
  			}

  			const message = typeof fallback === 'string' ? fallback : `Promise timed out after ${milliseconds} milliseconds`;
  			const timeoutError = fallback instanceof Error ? fallback : new TimeoutError$1(message);

  			if (typeof promise.cancel === 'function') {
  				promise.cancel();
  			}

  			reject(timeoutError);
  		}, milliseconds);

  		(async () => {
  			try {
  				resolve(await promise);
  			} catch (error) {
  				reject(error);
  			} finally {
  				options.customTimers.clearTimeout.call(undefined, timer);
  			}
  		})();
  	});

  	cancelablePromise.clear = () => {
  		clearTimeout(timer);
  		timer = undefined;
  	};

  	return cancelablePromise;
  }

  // Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound
  // Used to compute insertion index to keep queue sorted after insertion
  function lowerBound$1(array, value, comparator) {
      let first = 0;
      let count = array.length;
      while (count > 0) {
          const step = Math.trunc(count / 2);
          let it = first + step;
          if (comparator(array[it], value) <= 0) {
              first = ++it;
              count -= step + 1;
          }
          else {
              count = step;
          }
      }
      return first;
  }

  var __classPrivateFieldGet$1 = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _PriorityQueue_queue;
  class PriorityQueue {
      constructor() {
          _PriorityQueue_queue.set(this, []);
      }
      enqueue(run, options) {
          options = {
              priority: 0,
              ...options,
          };
          const element = {
              priority: options.priority,
              run,
          };
          if (this.size && __classPrivateFieldGet$1(this, _PriorityQueue_queue, "f")[this.size - 1].priority >= options.priority) {
              __classPrivateFieldGet$1(this, _PriorityQueue_queue, "f").push(element);
              return;
          }
          const index = lowerBound$1(__classPrivateFieldGet$1(this, _PriorityQueue_queue, "f"), element, (a, b) => b.priority - a.priority);
          __classPrivateFieldGet$1(this, _PriorityQueue_queue, "f").splice(index, 0, element);
      }
      dequeue() {
          const item = __classPrivateFieldGet$1(this, _PriorityQueue_queue, "f").shift();
          return item === null || item === void 0 ? void 0 : item.run;
      }
      filter(options) {
          return __classPrivateFieldGet$1(this, _PriorityQueue_queue, "f").filter((element) => element.priority === options.priority).map((element) => element.run);
      }
      get size() {
          return __classPrivateFieldGet$1(this, _PriorityQueue_queue, "f").length;
      }
  }
  _PriorityQueue_queue = new WeakMap();

  var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
  };
  var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _PQueue_instances, _PQueue_carryoverConcurrencyCount, _PQueue_isIntervalIgnored, _PQueue_intervalCount, _PQueue_intervalCap, _PQueue_interval, _PQueue_intervalEnd, _PQueue_intervalId, _PQueue_timeoutId, _PQueue_queue, _PQueue_queueClass, _PQueue_pending, _PQueue_concurrency, _PQueue_isPaused, _PQueue_throwOnTimeout, _PQueue_doesIntervalAllowAnother_get, _PQueue_doesConcurrentAllowAnother_get, _PQueue_next, _PQueue_onResumeInterval, _PQueue_isIntervalPaused_get, _PQueue_tryToStartAnother, _PQueue_initializeIntervalIfNeeded, _PQueue_onInterval, _PQueue_processQueue, _PQueue_throwOnAbort, _PQueue_onEvent;
  /**
  The error thrown by `queue.add()` when a job is aborted before it is run. See `signal`.
  */
  let AbortError$3 = class AbortError extends Error {
  };
  /**
  Promise queue with concurrency control.
  */
  class PQueue extends EventEmitter {
      // TODO: The `throwOnTimeout` option should affect the return types of `add()` and `addAll()`
      constructor(options) {
          var _a, _b, _c, _d;
          super();
          _PQueue_instances.add(this);
          _PQueue_carryoverConcurrencyCount.set(this, void 0);
          _PQueue_isIntervalIgnored.set(this, void 0);
          _PQueue_intervalCount.set(this, 0);
          _PQueue_intervalCap.set(this, void 0);
          _PQueue_interval.set(this, void 0);
          _PQueue_intervalEnd.set(this, 0);
          _PQueue_intervalId.set(this, void 0);
          _PQueue_timeoutId.set(this, void 0);
          _PQueue_queue.set(this, void 0);
          _PQueue_queueClass.set(this, void 0);
          _PQueue_pending.set(this, 0);
          // The `!` is needed because of https://github.com/microsoft/TypeScript/issues/32194
          _PQueue_concurrency.set(this, void 0);
          _PQueue_isPaused.set(this, void 0);
          _PQueue_throwOnTimeout.set(this, void 0);
          /**
          Per-operation timeout in milliseconds. Operations fulfill once `timeout` elapses if they haven't already.
      
          Applies to each future operation.
          */
          Object.defineProperty(this, "timeout", {
              enumerable: true,
              configurable: true,
              writable: true,
              value: void 0
          });
          // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
          options = {
              carryoverConcurrencyCount: false,
              intervalCap: Number.POSITIVE_INFINITY,
              interval: 0,
              concurrency: Number.POSITIVE_INFINITY,
              autoStart: true,
              queueClass: PriorityQueue,
              ...options,
          };
          if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {
              throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${(_b = (_a = options.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ''}\` (${typeof options.intervalCap})`);
          }
          if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {
              throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''}\` (${typeof options.interval})`);
          }
          __classPrivateFieldSet(this, _PQueue_carryoverConcurrencyCount, options.carryoverConcurrencyCount, "f");
          __classPrivateFieldSet(this, _PQueue_isIntervalIgnored, options.intervalCap === Number.POSITIVE_INFINITY || options.interval === 0, "f");
          __classPrivateFieldSet(this, _PQueue_intervalCap, options.intervalCap, "f");
          __classPrivateFieldSet(this, _PQueue_interval, options.interval, "f");
          __classPrivateFieldSet(this, _PQueue_queue, new options.queueClass(), "f");
          __classPrivateFieldSet(this, _PQueue_queueClass, options.queueClass, "f");
          this.concurrency = options.concurrency;
          this.timeout = options.timeout;
          __classPrivateFieldSet(this, _PQueue_throwOnTimeout, options.throwOnTimeout === true, "f");
          __classPrivateFieldSet(this, _PQueue_isPaused, options.autoStart === false, "f");
      }
      get concurrency() {
          return __classPrivateFieldGet(this, _PQueue_concurrency, "f");
      }
      set concurrency(newConcurrency) {
          if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {
              throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${newConcurrency}\` (${typeof newConcurrency})`);
          }
          __classPrivateFieldSet(this, _PQueue_concurrency, newConcurrency, "f");
          __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_processQueue).call(this);
      }
      async add(function_, options = {}) {
          options = {
              timeout: this.timeout,
              throwOnTimeout: __classPrivateFieldGet(this, _PQueue_throwOnTimeout, "f"),
              ...options,
          };
          return new Promise((resolve, reject) => {
              __classPrivateFieldGet(this, _PQueue_queue, "f").enqueue(async () => {
                  var _a;
                  var _b, _c;
                  __classPrivateFieldSet(this, _PQueue_pending, (_b = __classPrivateFieldGet(this, _PQueue_pending, "f"), _b++, _b), "f");
                  __classPrivateFieldSet(this, _PQueue_intervalCount, (_c = __classPrivateFieldGet(this, _PQueue_intervalCount, "f"), _c++, _c), "f");
                  try {
                      // TODO: Use options.signal?.throwIfAborted() when targeting Node.js 18
                      if ((_a = options.signal) === null || _a === void 0 ? void 0 : _a.aborted) {
                          // TODO: Use ABORT_ERR code when targeting Node.js 16 (https://nodejs.org/docs/latest-v16.x/api/errors.html#abort_err)
                          throw new AbortError$3('The task was aborted.');
                      }
                      let operation = function_({ signal: options.signal });
                      if (options.timeout) {
                          operation = pTimeout$1(Promise.resolve(operation), options.timeout);
                      }
                      if (options.signal) {
                          operation = Promise.race([operation, __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_throwOnAbort).call(this, options.signal)]);
                      }
                      const result = await operation;
                      resolve(result);
                      this.emit('completed', result);
                  }
                  catch (error) {
                      if (error instanceof TimeoutError$1 && !options.throwOnTimeout) {
                          resolve();
                          return;
                      }
                      reject(error);
                      this.emit('error', error);
                  }
                  finally {
                      __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_next).call(this);
                  }
              }, options);
              this.emit('add');
              __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_tryToStartAnother).call(this);
          });
      }
      async addAll(functions, options) {
          return Promise.all(functions.map(async (function_) => this.add(function_, options)));
      }
      /**
      Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)
      */
      start() {
          if (!__classPrivateFieldGet(this, _PQueue_isPaused, "f")) {
              return this;
          }
          __classPrivateFieldSet(this, _PQueue_isPaused, false, "f");
          __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_processQueue).call(this);
          return this;
      }
      /**
      Put queue execution on hold.
      */
      pause() {
          __classPrivateFieldSet(this, _PQueue_isPaused, true, "f");
      }
      /**
      Clear the queue.
      */
      clear() {
          __classPrivateFieldSet(this, _PQueue_queue, new (__classPrivateFieldGet(this, _PQueue_queueClass, "f"))(), "f");
      }
      /**
      Can be called multiple times. Useful if you for example add additional items at a later time.

      @returns A promise that settles when the queue becomes empty.
      */
      async onEmpty() {
          // Instantly resolve if the queue is empty
          if (__classPrivateFieldGet(this, _PQueue_queue, "f").size === 0) {
              return;
          }
          await __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_onEvent).call(this, 'empty');
      }
      /**
      @returns A promise that settles when the queue size is less than the given limit: `queue.size < limit`.

      If you want to avoid having the queue grow beyond a certain size you can `await queue.onSizeLessThan()` before adding a new item.

      Note that this only limits the number of items waiting to start. There could still be up to `concurrency` jobs already running that this call does not include in its calculation.
      */
      async onSizeLessThan(limit) {
          // Instantly resolve if the queue is empty.
          if (__classPrivateFieldGet(this, _PQueue_queue, "f").size < limit) {
              return;
          }
          await __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_onEvent).call(this, 'next', () => __classPrivateFieldGet(this, _PQueue_queue, "f").size < limit);
      }
      /**
      The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.

      @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.
      */
      async onIdle() {
          // Instantly resolve if none pending and if nothing else is queued
          if (__classPrivateFieldGet(this, _PQueue_pending, "f") === 0 && __classPrivateFieldGet(this, _PQueue_queue, "f").size === 0) {
              return;
          }
          await __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_onEvent).call(this, 'idle');
      }
      /**
      Size of the queue, the number of queued items waiting to run.
      */
      get size() {
          return __classPrivateFieldGet(this, _PQueue_queue, "f").size;
      }
      /**
      Size of the queue, filtered by the given options.

      For example, this can be used to find the number of items remaining in the queue with a specific priority level.
      */
      sizeBy(options) {
          // eslint-disable-next-line unicorn/no-array-callback-reference
          return __classPrivateFieldGet(this, _PQueue_queue, "f").filter(options).length;
      }
      /**
      Number of running items (no longer in the queue).
      */
      get pending() {
          return __classPrivateFieldGet(this, _PQueue_pending, "f");
      }
      /**
      Whether the queue is currently paused.
      */
      get isPaused() {
          return __classPrivateFieldGet(this, _PQueue_isPaused, "f");
      }
  }
  _PQueue_carryoverConcurrencyCount = new WeakMap(), _PQueue_isIntervalIgnored = new WeakMap(), _PQueue_intervalCount = new WeakMap(), _PQueue_intervalCap = new WeakMap(), _PQueue_interval = new WeakMap(), _PQueue_intervalEnd = new WeakMap(), _PQueue_intervalId = new WeakMap(), _PQueue_timeoutId = new WeakMap(), _PQueue_queue = new WeakMap(), _PQueue_queueClass = new WeakMap(), _PQueue_pending = new WeakMap(), _PQueue_concurrency = new WeakMap(), _PQueue_isPaused = new WeakMap(), _PQueue_throwOnTimeout = new WeakMap(), _PQueue_instances = new WeakSet(), _PQueue_doesIntervalAllowAnother_get = function _PQueue_doesIntervalAllowAnother_get() {
      return __classPrivateFieldGet(this, _PQueue_isIntervalIgnored, "f") || __classPrivateFieldGet(this, _PQueue_intervalCount, "f") < __classPrivateFieldGet(this, _PQueue_intervalCap, "f");
  }, _PQueue_doesConcurrentAllowAnother_get = function _PQueue_doesConcurrentAllowAnother_get() {
      return __classPrivateFieldGet(this, _PQueue_pending, "f") < __classPrivateFieldGet(this, _PQueue_concurrency, "f");
  }, _PQueue_next = function _PQueue_next() {
      var _a;
      __classPrivateFieldSet(this, _PQueue_pending, (_a = __classPrivateFieldGet(this, _PQueue_pending, "f"), _a--, _a), "f");
      __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_tryToStartAnother).call(this);
      this.emit('next');
  }, _PQueue_onResumeInterval = function _PQueue_onResumeInterval() {
      __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_onInterval).call(this);
      __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_initializeIntervalIfNeeded).call(this);
      __classPrivateFieldSet(this, _PQueue_timeoutId, undefined, "f");
  }, _PQueue_isIntervalPaused_get = function _PQueue_isIntervalPaused_get() {
      const now = Date.now();
      if (__classPrivateFieldGet(this, _PQueue_intervalId, "f") === undefined) {
          const delay = __classPrivateFieldGet(this, _PQueue_intervalEnd, "f") - now;
          if (delay < 0) {
              // Act as the interval was done
              // We don't need to resume it here because it will be resumed on line 160
              __classPrivateFieldSet(this, _PQueue_intervalCount, (__classPrivateFieldGet(this, _PQueue_carryoverConcurrencyCount, "f")) ? __classPrivateFieldGet(this, _PQueue_pending, "f") : 0, "f");
          }
          else {
              // Act as the interval is pending
              if (__classPrivateFieldGet(this, _PQueue_timeoutId, "f") === undefined) {
                  __classPrivateFieldSet(this, _PQueue_timeoutId, setTimeout(() => {
                      __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_onResumeInterval).call(this);
                  }, delay), "f");
              }
              return true;
          }
      }
      return false;
  }, _PQueue_tryToStartAnother = function _PQueue_tryToStartAnother() {
      if (__classPrivateFieldGet(this, _PQueue_queue, "f").size === 0) {
          // We can clear the interval ("pause")
          // Because we can redo it later ("resume")
          if (__classPrivateFieldGet(this, _PQueue_intervalId, "f")) {
              clearInterval(__classPrivateFieldGet(this, _PQueue_intervalId, "f"));
          }
          __classPrivateFieldSet(this, _PQueue_intervalId, undefined, "f");
          this.emit('empty');
          if (__classPrivateFieldGet(this, _PQueue_pending, "f") === 0) {
              this.emit('idle');
          }
          return false;
      }
      if (!__classPrivateFieldGet(this, _PQueue_isPaused, "f")) {
          const canInitializeInterval = !__classPrivateFieldGet(this, _PQueue_instances, "a", _PQueue_isIntervalPaused_get);
          if (__classPrivateFieldGet(this, _PQueue_instances, "a", _PQueue_doesIntervalAllowAnother_get) && __classPrivateFieldGet(this, _PQueue_instances, "a", _PQueue_doesConcurrentAllowAnother_get)) {
              const job = __classPrivateFieldGet(this, _PQueue_queue, "f").dequeue();
              if (!job) {
                  return false;
              }
              this.emit('active');
              job();
              if (canInitializeInterval) {
                  __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_initializeIntervalIfNeeded).call(this);
              }
              return true;
          }
      }
      return false;
  }, _PQueue_initializeIntervalIfNeeded = function _PQueue_initializeIntervalIfNeeded() {
      if (__classPrivateFieldGet(this, _PQueue_isIntervalIgnored, "f") || __classPrivateFieldGet(this, _PQueue_intervalId, "f") !== undefined) {
          return;
      }
      __classPrivateFieldSet(this, _PQueue_intervalId, setInterval(() => {
          __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_onInterval).call(this);
      }, __classPrivateFieldGet(this, _PQueue_interval, "f")), "f");
      __classPrivateFieldSet(this, _PQueue_intervalEnd, Date.now() + __classPrivateFieldGet(this, _PQueue_interval, "f"), "f");
  }, _PQueue_onInterval = function _PQueue_onInterval() {
      if (__classPrivateFieldGet(this, _PQueue_intervalCount, "f") === 0 && __classPrivateFieldGet(this, _PQueue_pending, "f") === 0 && __classPrivateFieldGet(this, _PQueue_intervalId, "f")) {
          clearInterval(__classPrivateFieldGet(this, _PQueue_intervalId, "f"));
          __classPrivateFieldSet(this, _PQueue_intervalId, undefined, "f");
      }
      __classPrivateFieldSet(this, _PQueue_intervalCount, __classPrivateFieldGet(this, _PQueue_carryoverConcurrencyCount, "f") ? __classPrivateFieldGet(this, _PQueue_pending, "f") : 0, "f");
      __classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_processQueue).call(this);
  }, _PQueue_processQueue = function _PQueue_processQueue() {
      // eslint-disable-next-line no-empty
      while (__classPrivateFieldGet(this, _PQueue_instances, "m", _PQueue_tryToStartAnother).call(this)) { }
  }, _PQueue_throwOnAbort = async function _PQueue_throwOnAbort(signal) {
      return new Promise((_resolve, reject) => {
          signal.addEventListener('abort', () => {
              // TODO: Reject with signal.throwIfAborted() when targeting Node.js 18
              // TODO: Use ABORT_ERR code when targeting Node.js 16 (https://nodejs.org/docs/latest-v16.x/api/errors.html#abort_err)
              reject(new AbortError$3('The task was aborted.'));
          }, { once: true });
      });
  }, _PQueue_onEvent = async function _PQueue_onEvent(event, filter) {
      return new Promise(resolve => {
          const listener = () => {
              if (filter && !filter()) {
                  return;
              }
              this.off(event, listener);
              resolve();
          };
          this.on(event, listener);
      });
  };

  class TimeoutError extends Error {
  	constructor(message) {
  		super(message);
  		this.name = 'TimeoutError';
  	}
  }

  /**
  An error to be thrown when the request is aborted by AbortController.
  DOMException is thrown instead of this Error when DOMException is available.
  */
  let AbortError$2 = class AbortError extends Error {
  	constructor(message) {
  		super();
  		this.name = 'AbortError';
  		this.message = message;
  	}
  };

  /**
  TODO: Remove AbortError and just throw DOMException when targeting Node 18.
  */
  const getDOMException = errorMessage => globalThis.DOMException === undefined
  	? new AbortError$2(errorMessage)
  	: new DOMException(errorMessage);

  /**
  TODO: Remove below function and just 'reject(signal.reason)' when targeting Node 18.
  */
  const getAbortedReason = signal => {
  	const reason = signal.reason === undefined
  		? getDOMException('This operation was aborted.')
  		: signal.reason;

  	return reason instanceof Error ? reason : getDOMException(reason);
  };

  function pTimeout(promise, options) {
  	const {
  		milliseconds,
  		fallback,
  		message,
  		customTimers = {setTimeout, clearTimeout},
  	} = options;

  	let timer;

  	const wrappedPromise = new Promise((resolve, reject) => {
  		if (typeof milliseconds !== 'number' || Math.sign(milliseconds) !== 1) {
  			throw new TypeError(`Expected \`milliseconds\` to be a positive number, got \`${milliseconds}\``);
  		}

  		if (options.signal) {
  			const {signal} = options;
  			if (signal.aborted) {
  				reject(getAbortedReason(signal));
  			}

  			signal.addEventListener('abort', () => {
  				reject(getAbortedReason(signal));
  			});
  		}

  		if (milliseconds === Number.POSITIVE_INFINITY) {
  			promise.then(resolve, reject);
  			return;
  		}

  		// We create the error outside of `setTimeout` to preserve the stack trace.
  		const timeoutError = new TimeoutError();

  		timer = customTimers.setTimeout.call(undefined, () => {
  			if (fallback) {
  				try {
  					resolve(fallback());
  				} catch (error) {
  					reject(error);
  				}

  				return;
  			}

  			if (typeof promise.cancel === 'function') {
  				promise.cancel();
  			}

  			if (message === false) {
  				resolve();
  			} else if (message instanceof Error) {
  				reject(message);
  			} else {
  				timeoutError.message = message ?? `Promise timed out after ${milliseconds} milliseconds`;
  				reject(timeoutError);
  			}
  		}, milliseconds);

  		(async () => {
  			try {
  				resolve(await promise);
  			} catch (error) {
  				reject(error);
  			}
  		})();
  	});

  	const cancelablePromise = wrappedPromise.finally(() => {
  		cancelablePromise.clear();
  	});

  	cancelablePromise.clear = () => {
  		customTimers.clearTimeout.call(undefined, timer);
  		timer = undefined;
  	};

  	return cancelablePromise;
  }

  const WORKER_REQUEST_READ_LOCK = 'lock:worker:request-read';
  const WORKER_RELEASE_READ_LOCK = 'lock:worker:release-read';
  const MASTER_GRANT_READ_LOCK = 'lock:master:grant-read';
  const WORKER_REQUEST_WRITE_LOCK = 'lock:worker:request-write';
  const WORKER_RELEASE_WRITE_LOCK = 'lock:worker:release-write';
  const MASTER_GRANT_WRITE_LOCK = 'lock:master:grant-write';

  const events = {};
  const observable = (worker) => {
      worker.addEventListener('message', (event) => {
          observable.dispatchEvent('message', worker, event);
      });
      if (worker.port != null) {
          worker.port.addEventListener('message', (event) => {
              observable.dispatchEvent('message', worker, event);
          });
      }
  };
  observable.addEventListener = (type, fn) => {
      if (events[type] == null) {
          events[type] = [];
      }
      events[type].push(fn);
  };
  observable.removeEventListener = (type, fn) => {
      if (events[type] == null) {
          return;
      }
      events[type] = events[type]
          .filter(listener => listener === fn);
  };
  observable.dispatchEvent = function (type, worker, event) {
      if (events[type] == null) {
          return;
      }
      events[type].forEach(fn => fn(worker, event));
  };

  const handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {
      return (worker, event) => {
          if (event.data.type !== requestType) {
              return;
          }
          const requestEvent = {
              type: event.data.type,
              name: event.data.name,
              identifier: event.data.identifier
          };
          emitter.dispatchEvent(new MessageEvent(masterEvent, {
              data: {
                  name: requestEvent.name,
                  handler: async () => {
                      // grant lock to worker
                      worker.postMessage({
                          type: grantType,
                          name: requestEvent.name,
                          identifier: requestEvent.identifier
                      });
                      // wait for worker to finish
                      return await new Promise((resolve) => {
                          const releaseEventListener = (event) => {
                              if (event == null || event.data == null) {
                                  return;
                              }
                              const releaseEvent = {
                                  type: event.data.type,
                                  name: event.data.name,
                                  identifier: event.data.identifier
                              };
                              if (releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {
                                  worker.removeEventListener('message', releaseEventListener);
                                  resolve();
                              }
                          };
                          worker.addEventListener('message', releaseEventListener);
                      });
                  }
              }
          }));
      };
  };
  const makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {
      return async () => {
          const id = nanoid();
          globalThis.postMessage({
              type: requestType,
              identifier: id,
              name
          });
          return await new Promise((resolve) => {
              const listener = (event) => {
                  if (event == null || event.data == null) {
                      return;
                  }
                  const responseEvent = {
                      type: event.data.type,
                      identifier: event.data.identifier
                  };
                  if (responseEvent.type === grantType && responseEvent.identifier === id) {
                      globalThis.removeEventListener('message', listener);
                      // grant lock
                      resolve(() => {
                          // release lock
                          globalThis.postMessage({
                              type: releaseType,
                              identifier: id,
                              name
                          });
                      });
                  }
              };
              globalThis.addEventListener('message', listener);
          });
      };
  };
  const defaultOptions$5 = {
      singleProcess: false
  };
  var impl = (options) => {
      options = Object.assign({}, defaultOptions$5, options);
      const isPrimary = Boolean(globalThis.document) || options.singleProcess;
      if (isPrimary) {
          const emitter = new EventTarget();
          observable.addEventListener('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));
          observable.addEventListener('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));
          return emitter;
      }
      return {
          isWorker: true,
          readLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),
          writeLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)
      };
  };

  const mutexes = {};
  let implementation;
  async function createReleaseable(queue, options) {
      let res;
      const p = new Promise((resolve) => {
          res = resolve;
      });
      void queue.add(async () => await pTimeout((async () => {
          return await new Promise((resolve) => {
              res(() => {
                  resolve();
              });
          });
      })(), {
          milliseconds: options.timeout
      }));
      return await p;
  }
  const createMutex = (name, options) => {
      if (implementation.isWorker === true) {
          return {
              readLock: implementation.readLock(name, options),
              writeLock: implementation.writeLock(name, options)
          };
      }
      const masterQueue = new PQueue({ concurrency: 1 });
      let readQueue;
      return {
          async readLock() {
              // If there's already a read queue, just add the task to it
              if (readQueue != null) {
                  return await createReleaseable(readQueue, options);
              }
              // Create a new read queue
              readQueue = new PQueue({
                  concurrency: options.concurrency,
                  autoStart: false
              });
              const localReadQueue = readQueue;
              // Add the task to the read queue
              const readPromise = createReleaseable(readQueue, options);
              void masterQueue.add(async () => {
                  // Start the task only once the master queue has completed processing
                  // any previous tasks
                  localReadQueue.start();
                  // Once all the tasks in the read queue have completed, remove it so
                  // that the next read lock will occur after any write locks that were
                  // started in the interim
                  return await localReadQueue.onIdle()
                      .then(() => {
                      if (readQueue === localReadQueue) {
                          readQueue = null;
                      }
                  });
              });
              return await readPromise;
          },
          async writeLock() {
              // Remove the read queue reference, so that any later read locks will be
              // added to a new queue that starts after this write lock has been
              // released
              readQueue = null;
              return await createReleaseable(masterQueue, options);
          }
      };
  };
  const defaultOptions$4 = {
      name: 'lock',
      concurrency: Infinity,
      timeout: 84600000,
      singleProcess: false
  };
  function createMortice(options) {
      const opts = Object.assign({}, defaultOptions$4, options);
      if (implementation == null) {
          implementation = impl(opts);
          if (implementation.isWorker !== true) {
              // we are master, set up worker requests
              implementation.addEventListener('requestReadLock', (event) => {
                  if (mutexes[event.data.name] == null) {
                      return;
                  }
                  void mutexes[event.data.name].readLock()
                      .then(async (release) => await event.data.handler().finally(() => release()));
              });
              implementation.addEventListener('requestWriteLock', async (event) => {
                  if (mutexes[event.data.name] == null) {
                      return;
                  }
                  void mutexes[event.data.name].writeLock()
                      .then(async (release) => await event.data.handler().finally(() => release()));
              });
          }
      }
      if (mutexes[opts.name] == null) {
          mutexes[opts.name] = createMutex(opts.name, opts);
      }
      return mutexes[opts.name];
  }

  const codes$1 = {
      ERR_INVALID_PARAMETERS: 'ERR_INVALID_PARAMETERS'
  };

  /* eslint-disable import/export */
  /* eslint-disable complexity */
  /* eslint-disable @typescript-eslint/no-namespace */
  /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
  /* eslint-disable @typescript-eslint/no-empty-interface */
  var Peer;
  (function (Peer) {
      (function (Peer$metadataEntry) {
          let _codec;
          Peer$metadataEntry.codec = () => {
              if (_codec == null) {
                  _codec = message((obj, w, opts = {}) => {
                      if (opts.lengthDelimited !== false) {
                          w.fork();
                      }
                      if ((obj.key != null && obj.key !== '')) {
                          w.uint32(10);
                          w.string(obj.key);
                      }
                      if ((obj.value != null && obj.value.byteLength > 0)) {
                          w.uint32(18);
                          w.bytes(obj.value);
                      }
                      if (opts.lengthDelimited !== false) {
                          w.ldelim();
                      }
                  }, (reader, length) => {
                      const obj = {
                          key: '',
                          value: new Uint8Array(0)
                      };
                      const end = length == null ? reader.len : reader.pos + length;
                      while (reader.pos < end) {
                          const tag = reader.uint32();
                          switch (tag >>> 3) {
                              case 1:
                                  obj.key = reader.string();
                                  break;
                              case 2:
                                  obj.value = reader.bytes();
                                  break;
                              default:
                                  reader.skipType(tag & 7);
                                  break;
                          }
                      }
                      return obj;
                  });
              }
              return _codec;
          };
          Peer$metadataEntry.encode = (obj) => {
              return encodeMessage(obj, Peer$metadataEntry.codec());
          };
          Peer$metadataEntry.decode = (buf) => {
              return decodeMessage$1(buf, Peer$metadataEntry.codec());
          };
      })(Peer.Peer$metadataEntry || (Peer.Peer$metadataEntry = {}));
      (function (Peer$tagsEntry) {
          let _codec;
          Peer$tagsEntry.codec = () => {
              if (_codec == null) {
                  _codec = message((obj, w, opts = {}) => {
                      if (opts.lengthDelimited !== false) {
                          w.fork();
                      }
                      if ((obj.key != null && obj.key !== '')) {
                          w.uint32(10);
                          w.string(obj.key);
                      }
                      if (obj.value != null) {
                          w.uint32(18);
                          Tag.codec().encode(obj.value, w);
                      }
                      if (opts.lengthDelimited !== false) {
                          w.ldelim();
                      }
                  }, (reader, length) => {
                      const obj = {
                          key: ''
                      };
                      const end = length == null ? reader.len : reader.pos + length;
                      while (reader.pos < end) {
                          const tag = reader.uint32();
                          switch (tag >>> 3) {
                              case 1:
                                  obj.key = reader.string();
                                  break;
                              case 2:
                                  obj.value = Tag.codec().decode(reader, reader.uint32());
                                  break;
                              default:
                                  reader.skipType(tag & 7);
                                  break;
                          }
                      }
                      return obj;
                  });
              }
              return _codec;
          };
          Peer$tagsEntry.encode = (obj) => {
              return encodeMessage(obj, Peer$tagsEntry.codec());
          };
          Peer$tagsEntry.decode = (buf) => {
              return decodeMessage$1(buf, Peer$tagsEntry.codec());
          };
      })(Peer.Peer$tagsEntry || (Peer.Peer$tagsEntry = {}));
      let _codec;
      Peer.codec = () => {
          if (_codec == null) {
              _codec = message((obj, w, opts = {}) => {
                  if (opts.lengthDelimited !== false) {
                      w.fork();
                  }
                  if (obj.addresses != null) {
                      for (const value of obj.addresses) {
                          w.uint32(10);
                          Address.codec().encode(value, w);
                      }
                  }
                  if (obj.protocols != null) {
                      for (const value of obj.protocols) {
                          w.uint32(18);
                          w.string(value);
                      }
                  }
                  if (obj.publicKey != null) {
                      w.uint32(34);
                      w.bytes(obj.publicKey);
                  }
                  if (obj.peerRecordEnvelope != null) {
                      w.uint32(42);
                      w.bytes(obj.peerRecordEnvelope);
                  }
                  if (obj.metadata != null && obj.metadata.size !== 0) {
                      for (const [key, value] of obj.metadata.entries()) {
                          w.uint32(50);
                          Peer.Peer$metadataEntry.codec().encode({ key, value }, w);
                      }
                  }
                  if (obj.tags != null && obj.tags.size !== 0) {
                      for (const [key, value] of obj.tags.entries()) {
                          w.uint32(58);
                          Peer.Peer$tagsEntry.codec().encode({ key, value }, w);
                      }
                  }
                  if (opts.lengthDelimited !== false) {
                      w.ldelim();
                  }
              }, (reader, length) => {
                  const obj = {
                      addresses: [],
                      protocols: [],
                      metadata: new Map(),
                      tags: new Map()
                  };
                  const end = length == null ? reader.len : reader.pos + length;
                  while (reader.pos < end) {
                      const tag = reader.uint32();
                      switch (tag >>> 3) {
                          case 1:
                              obj.addresses.push(Address.codec().decode(reader, reader.uint32()));
                              break;
                          case 2:
                              obj.protocols.push(reader.string());
                              break;
                          case 4:
                              obj.publicKey = reader.bytes();
                              break;
                          case 5:
                              obj.peerRecordEnvelope = reader.bytes();
                              break;
                          case 6: {
                              const entry = Peer.Peer$metadataEntry.codec().decode(reader, reader.uint32());
                              obj.metadata.set(entry.key, entry.value);
                              break;
                          }
                          case 7: {
                              const entry = Peer.Peer$tagsEntry.codec().decode(reader, reader.uint32());
                              obj.tags.set(entry.key, entry.value);
                              break;
                          }
                          default:
                              reader.skipType(tag & 7);
                              break;
                      }
                  }
                  return obj;
              });
          }
          return _codec;
      };
      Peer.encode = (obj) => {
          return encodeMessage(obj, Peer.codec());
      };
      Peer.decode = (buf) => {
          return decodeMessage$1(buf, Peer.codec());
      };
  })(Peer || (Peer = {}));
  var Address;
  (function (Address) {
      let _codec;
      Address.codec = () => {
          if (_codec == null) {
              _codec = message((obj, w, opts = {}) => {
                  if (opts.lengthDelimited !== false) {
                      w.fork();
                  }
                  if ((obj.multiaddr != null && obj.multiaddr.byteLength > 0)) {
                      w.uint32(10);
                      w.bytes(obj.multiaddr);
                  }
                  if (obj.isCertified != null) {
                      w.uint32(16);
                      w.bool(obj.isCertified);
                  }
                  if (opts.lengthDelimited !== false) {
                      w.ldelim();
                  }
              }, (reader, length) => {
                  const obj = {
                      multiaddr: new Uint8Array(0)
                  };
                  const end = length == null ? reader.len : reader.pos + length;
                  while (reader.pos < end) {
                      const tag = reader.uint32();
                      switch (tag >>> 3) {
                          case 1:
                              obj.multiaddr = reader.bytes();
                              break;
                          case 2:
                              obj.isCertified = reader.bool();
                              break;
                          default:
                              reader.skipType(tag & 7);
                              break;
                      }
                  }
                  return obj;
              });
          }
          return _codec;
      };
      Address.encode = (obj) => {
          return encodeMessage(obj, Address.codec());
      };
      Address.decode = (buf) => {
          return decodeMessage$1(buf, Address.codec());
      };
  })(Address || (Address = {}));
  var Tag;
  (function (Tag) {
      let _codec;
      Tag.codec = () => {
          if (_codec == null) {
              _codec = message((obj, w, opts = {}) => {
                  if (opts.lengthDelimited !== false) {
                      w.fork();
                  }
                  if ((obj.value != null && obj.value !== 0)) {
                      w.uint32(8);
                      w.uint32(obj.value);
                  }
                  if (obj.expiry != null) {
                      w.uint32(16);
                      w.uint64(obj.expiry);
                  }
                  if (opts.lengthDelimited !== false) {
                      w.ldelim();
                  }
              }, (reader, length) => {
                  const obj = {
                      value: 0
                  };
                  const end = length == null ? reader.len : reader.pos + length;
                  while (reader.pos < end) {
                      const tag = reader.uint32();
                      switch (tag >>> 3) {
                          case 1:
                              obj.value = reader.uint32();
                              break;
                          case 2:
                              obj.expiry = reader.uint64();
                              break;
                          default:
                              reader.skipType(tag & 7);
                              break;
                      }
                  }
                  return obj;
              });
          }
          return _codec;
      };
      Tag.encode = (obj) => {
          return encodeMessage(obj, Tag.codec());
      };
      Tag.decode = (buf) => {
          return decodeMessage$1(buf, Tag.codec());
      };
  })(Tag || (Tag = {}));

  function bytesToPeer(peerId, buf) {
      const peer = Peer.decode(buf);
      if (peer.publicKey != null && peerId.publicKey == null) {
          peerId = peerIdFromPeerId({
              ...peerId,
              publicKey: peerId.publicKey
          });
      }
      const tags = new Map();
      // remove any expired tags
      const now = BigInt(Date.now());
      for (const [key, tag] of peer.tags.entries()) {
          if (tag.expiry != null && tag.expiry < now) {
              continue;
          }
          tags.set(key, tag);
      }
      return {
          ...peer,
          id: peerId,
          addresses: peer.addresses.map(({ multiaddr: ma, isCertified }) => {
              return {
                  multiaddr: multiaddr(ma),
                  isCertified: isCertified ?? false
              };
          }),
          metadata: peer.metadata,
          peerRecordEnvelope: peer.peerRecordEnvelope ?? undefined,
          tags
      };
  }

  const NAMESPACE_COMMON = '/peers/';
  function peerIdToDatastoreKey(peerId) {
      if (!isPeerId(peerId) || peerId.type == null) {
          throw new CodeError('Invalid PeerId', codes$1.ERR_INVALID_PARAMETERS);
      }
      const b32key = peerId.toCID().toString();
      return new Key(`${NAMESPACE_COMMON}${b32key}`);
  }

  async function dedupeFilterAndSortAddresses(peerId, filter, addresses) {
      const addressMap = new Map();
      for (const addr of addresses) {
          if (addr == null) {
              continue;
          }
          if (addr.multiaddr instanceof Uint8Array) {
              addr.multiaddr = multiaddr(addr.multiaddr);
          }
          if (!isMultiaddr(addr.multiaddr)) {
              throw new CodeError('Multiaddr was invalid', codes$1.ERR_INVALID_PARAMETERS);
          }
          if (!(await filter(peerId, addr.multiaddr))) {
              continue;
          }
          const isCertified = addr.isCertified ?? false;
          const maStr = addr.multiaddr.toString();
          const existingAddr = addressMap.get(maStr);
          if (existingAddr != null) {
              addr.isCertified = existingAddr.isCertified || isCertified;
          }
          else {
              addressMap.set(maStr, {
                  multiaddr: addr.multiaddr,
                  isCertified
              });
          }
      }
      return [...addressMap.values()]
          .sort((a, b) => {
          return a.multiaddr.toString().localeCompare(b.multiaddr.toString());
      })
          .map(({ isCertified, multiaddr }) => ({
          isCertified,
          multiaddr: multiaddr.bytes
      }));
  }

  async function toPeerPB(peerId, data, strategy, options) {
      if (data == null) {
          throw new CodeError('Invalid PeerData', codes$1.ERR_INVALID_PARAMETERS);
      }
      if (data.publicKey != null && peerId.publicKey != null && !equals(data.publicKey, peerId.publicKey)) {
          throw new CodeError('publicKey bytes do not match peer id publicKey bytes', codes$1.ERR_INVALID_PARAMETERS);
      }
      const existingPeer = options.existingPeer;
      if (existingPeer != null && !peerId.equals(existingPeer.id)) {
          throw new CodeError('peer id did not match existing peer id', codes$1.ERR_INVALID_PARAMETERS);
      }
      let addresses = existingPeer?.addresses ?? [];
      let protocols = new Set(existingPeer?.protocols ?? []);
      let metadata = existingPeer?.metadata ?? new Map();
      let tags = existingPeer?.tags ?? new Map();
      let peerRecordEnvelope = existingPeer?.peerRecordEnvelope;
      // when patching, we replace the original fields with passed values
      if (strategy === 'patch') {
          if (data.multiaddrs != null || data.addresses != null) {
              addresses = [];
              if (data.multiaddrs != null) {
                  addresses.push(...data.multiaddrs.map(multiaddr => ({
                      isCertified: false,
                      multiaddr
                  })));
              }
              if (data.addresses != null) {
                  addresses.push(...data.addresses);
              }
          }
          if (data.protocols != null) {
              protocols = new Set(data.protocols);
          }
          if (data.metadata != null) {
              const metadataEntries = data.metadata instanceof Map ? [...data.metadata.entries()] : Object.entries(data.metadata);
              metadata = createSortedMap(metadataEntries, {
                  validate: validateMetadata
              });
          }
          if (data.tags != null) {
              const tagsEntries = data.tags instanceof Map ? [...data.tags.entries()] : Object.entries(data.tags);
              tags = createSortedMap(tagsEntries, {
                  validate: validateTag,
                  map: mapTag
              });
          }
          if (data.peerRecordEnvelope != null) {
              peerRecordEnvelope = data.peerRecordEnvelope;
          }
      }
      // when merging, we join the original fields with passed values
      if (strategy === 'merge') {
          if (data.multiaddrs != null) {
              addresses.push(...data.multiaddrs.map(multiaddr => ({
                  isCertified: false,
                  multiaddr
              })));
          }
          if (data.addresses != null) {
              addresses.push(...data.addresses);
          }
          if (data.protocols != null) {
              protocols = new Set([...protocols, ...data.protocols]);
          }
          if (data.metadata != null) {
              const metadataEntries = data.metadata instanceof Map ? [...data.metadata.entries()] : Object.entries(data.metadata);
              for (const [key, value] of metadataEntries) {
                  if (value == null) {
                      metadata.delete(key);
                  }
                  else {
                      metadata.set(key, value);
                  }
              }
              metadata = createSortedMap([...metadata.entries()], {
                  validate: validateMetadata
              });
          }
          if (data.tags != null) {
              const tagsEntries = data.tags instanceof Map ? [...data.tags.entries()] : Object.entries(data.tags);
              const mergedTags = new Map(tags);
              for (const [key, value] of tagsEntries) {
                  if (value == null) {
                      mergedTags.delete(key);
                  }
                  else {
                      mergedTags.set(key, value);
                  }
              }
              tags = createSortedMap([...mergedTags.entries()], {
                  validate: validateTag,
                  map: mapTag
              });
          }
          if (data.peerRecordEnvelope != null) {
              peerRecordEnvelope = data.peerRecordEnvelope;
          }
      }
      const output = {
          addresses: await dedupeFilterAndSortAddresses(peerId, options.addressFilter ?? (async () => true), addresses),
          protocols: [...protocols.values()].sort((a, b) => {
              return a.localeCompare(b);
          }),
          metadata,
          tags,
          publicKey: existingPeer?.id.publicKey ?? data.publicKey ?? peerId.publicKey,
          peerRecordEnvelope
      };
      // Ed25519 and secp256k1 have their public key embedded in them so no need to duplicate it
      if (peerId.type !== 'RSA') {
          delete output.publicKey;
      }
      return output;
  }
  /**
   * In JS maps are ordered by insertion order so create a new map with the
   * keys inserted in alphabetical order.
   */
  function createSortedMap(entries, options) {
      const output = new Map();
      for (const [key, value] of entries) {
          if (value == null) {
              continue;
          }
          options.validate(key, value);
      }
      for (const [key, value] of entries.sort(([a], [b]) => {
          return a.localeCompare(b);
      })) {
          if (value != null) {
              output.set(key, options.map?.(key, value) ?? value);
          }
      }
      return output;
  }
  function validateMetadata(key, value) {
      if (typeof key !== 'string') {
          throw new CodeError('Metadata key must be a string', codes$1.ERR_INVALID_PARAMETERS);
      }
      if (!(value instanceof Uint8Array)) {
          throw new CodeError('Metadata value must be a Uint8Array', codes$1.ERR_INVALID_PARAMETERS);
      }
  }
  function validateTag(key, tag) {
      if (typeof key !== 'string') {
          throw new CodeError('Tag name must be a string', codes$1.ERR_INVALID_PARAMETERS);
      }
      if (tag.value != null) {
          if (parseInt(`${tag.value}`, 10) !== tag.value) {
              throw new CodeError('Tag value must be an integer', codes$1.ERR_INVALID_PARAMETERS);
          }
          if (tag.value < 0 || tag.value > 100) {
              throw new CodeError('Tag value must be between 0-100', codes$1.ERR_INVALID_PARAMETERS);
          }
      }
      if (tag.ttl != null) {
          if (parseInt(`${tag.ttl}`, 10) !== tag.ttl) {
              throw new CodeError('Tag ttl must be an integer', codes$1.ERR_INVALID_PARAMETERS);
          }
          if (tag.ttl < 0) {
              throw new CodeError('Tag ttl must be between greater than 0', codes$1.ERR_INVALID_PARAMETERS);
          }
      }
  }
  function mapTag(key, tag) {
      let expiry;
      if (tag.expiry != null) {
          expiry = tag.expiry;
      }
      if (tag.ttl != null) {
          expiry = BigInt(Date.now() + Number(tag.ttl));
      }
      return {
          value: tag.value ?? 0,
          expiry
      };
  }

  function decodePeer(key, value, cache) {
      // /peers/${peer-id-as-libp2p-key-cid-string-in-base-32}
      const base32Str = key.toString().split('/')[2];
      const buf = base32.decode(base32Str);
      const peerId = peerIdFromBytes(buf);
      const cached = cache.get(peerId);
      if (cached != null) {
          return cached;
      }
      const peer = bytesToPeer(peerId, value);
      cache.set(peerId, peer);
      return peer;
  }
  function mapQuery(query, cache) {
      if (query == null) {
          return {};
      }
      return {
          prefix: NAMESPACE_COMMON,
          filters: (query.filters ?? []).map(fn => ({ key, value }) => {
              return fn(decodePeer(key, value, cache));
          }),
          orders: (query.orders ?? []).map(fn => (a, b) => {
              return fn(decodePeer(a.key, a.value, cache), decodePeer(b.key, b.value, cache));
          })
      };
  }
  class PersistentStore {
      peerId;
      datastore;
      lock;
      addressFilter;
      constructor(components, init = {}) {
          this.peerId = components.peerId;
          this.datastore = components.datastore;
          this.addressFilter = init.addressFilter;
          this.lock = createMortice({
              name: 'peer-store',
              singleProcess: true
          });
      }
      async has(peerId) {
          return this.datastore.has(peerIdToDatastoreKey(peerId));
      }
      async delete(peerId) {
          if (this.peerId.equals(peerId)) {
              throw new CodeError('Cannot delete self peer', codes$1.ERR_INVALID_PARAMETERS);
          }
          await this.datastore.delete(peerIdToDatastoreKey(peerId));
      }
      async load(peerId) {
          const buf = await this.datastore.get(peerIdToDatastoreKey(peerId));
          return bytesToPeer(peerId, buf);
      }
      async save(peerId, data) {
          const { existingBuf, existingPeer } = await this.#findExistingPeer(peerId);
          const peerPb = await toPeerPB(peerId, data, 'patch', {
              addressFilter: this.addressFilter
          });
          return this.#saveIfDifferent(peerId, peerPb, existingBuf, existingPeer);
      }
      async patch(peerId, data) {
          const { existingBuf, existingPeer } = await this.#findExistingPeer(peerId);
          const peerPb = await toPeerPB(peerId, data, 'patch', {
              addressFilter: this.addressFilter,
              existingPeer
          });
          return this.#saveIfDifferent(peerId, peerPb, existingBuf, existingPeer);
      }
      async merge(peerId, data) {
          const { existingBuf, existingPeer } = await this.#findExistingPeer(peerId);
          const peerPb = await toPeerPB(peerId, data, 'merge', {
              addressFilter: this.addressFilter,
              existingPeer
          });
          return this.#saveIfDifferent(peerId, peerPb, existingBuf, existingPeer);
      }
      async *all(query) {
          const peerCache = new PeerMap();
          for await (const { key, value } of this.datastore.query(mapQuery(query ?? {}, peerCache))) {
              const peer = decodePeer(key, value, peerCache);
              if (peer.id.equals(this.peerId)) {
                  // Skip self peer if present
                  continue;
              }
              yield peer;
          }
      }
      async #findExistingPeer(peerId) {
          try {
              const existingBuf = await this.datastore.get(peerIdToDatastoreKey(peerId));
              const existingPeer = bytesToPeer(peerId, existingBuf);
              return {
                  existingBuf,
                  existingPeer
              };
          }
          catch (err) {
              if (err.code !== 'ERR_NOT_FOUND') {
                  throw err;
              }
          }
          return {};
      }
      async #saveIfDifferent(peerId, peer, existingBuf, existingPeer) {
          const buf = Peer.encode(peer);
          if (existingBuf != null && equals(buf, existingBuf)) {
              return {
                  peer: bytesToPeer(peerId, buf),
                  previous: existingPeer,
                  updated: false
              };
          }
          await this.datastore.put(peerIdToDatastoreKey(peerId), buf);
          return {
              peer: bytesToPeer(peerId, buf),
              previous: existingPeer,
              updated: true
          };
      }
  }

  const log$i = logger('libp2p:peer-store');
  /**
   * An implementation of PeerStore that stores data in a Datastore
   */
  class PersistentPeerStore {
      store;
      events;
      peerId;
      constructor(components, init = {}) {
          this.events = components.events;
          this.peerId = components.peerId;
          this.store = new PersistentStore(components, init);
      }
      async forEach(fn, query) {
          log$i.trace('forEach await read lock');
          const release = await this.store.lock.readLock();
          log$i.trace('forEach got read lock');
          try {
              for await (const peer of this.store.all(query)) {
                  fn(peer);
              }
          }
          finally {
              log$i.trace('forEach release read lock');
              release();
          }
      }
      async all(query) {
          log$i.trace('all await read lock');
          const release = await this.store.lock.readLock();
          log$i.trace('all got read lock');
          try {
              return await all(this.store.all(query));
          }
          finally {
              log$i.trace('all release read lock');
              release();
          }
      }
      async delete(peerId) {
          log$i.trace('delete await write lock');
          const release = await this.store.lock.writeLock();
          log$i.trace('delete got write lock');
          try {
              await this.store.delete(peerId);
          }
          finally {
              log$i.trace('delete release write lock');
              release();
          }
      }
      async has(peerId) {
          log$i.trace('has await read lock');
          const release = await this.store.lock.readLock();
          log$i.trace('has got read lock');
          try {
              return await this.store.has(peerId);
          }
          finally {
              log$i.trace('has release read lock');
              release();
          }
      }
      async get(peerId) {
          log$i.trace('get await read lock');
          const release = await this.store.lock.readLock();
          log$i.trace('get got read lock');
          try {
              return await this.store.load(peerId);
          }
          finally {
              log$i.trace('get release read lock');
              release();
          }
      }
      async save(id, data) {
          log$i.trace('save await write lock');
          const release = await this.store.lock.writeLock();
          log$i.trace('save got write lock');
          try {
              const result = await this.store.save(id, data);
              this.#emitIfUpdated(id, result);
              return result.peer;
          }
          finally {
              log$i.trace('save release write lock');
              release();
          }
      }
      async patch(id, data) {
          log$i.trace('patch await write lock');
          const release = await this.store.lock.writeLock();
          log$i.trace('patch got write lock');
          try {
              const result = await this.store.patch(id, data);
              this.#emitIfUpdated(id, result);
              return result.peer;
          }
          finally {
              log$i.trace('patch release write lock');
              release();
          }
      }
      async merge(id, data) {
          log$i.trace('merge await write lock');
          const release = await this.store.lock.writeLock();
          log$i.trace('merge got write lock');
          try {
              const result = await this.store.merge(id, data);
              this.#emitIfUpdated(id, result);
              return result.peer;
          }
          finally {
              log$i.trace('merge release write lock');
              release();
          }
      }
      async consumePeerRecord(buf, expectedPeer) {
          const envelope = await RecordEnvelope.openAndCertify(buf, PeerRecord.DOMAIN);
          if (expectedPeer?.equals(envelope.peerId) === false) {
              log$i('envelope peer id was not the expected peer id - expected: %p received: %p', expectedPeer, envelope.peerId);
              return false;
          }
          const peerRecord = PeerRecord.createFromProtobuf(envelope.payload);
          let peer;
          try {
              peer = await this.get(envelope.peerId);
          }
          catch (err) {
              if (err.code !== 'ERR_NOT_FOUND') {
                  throw err;
              }
          }
          // ensure seq is greater than, or equal to, the last received
          if (peer?.peerRecordEnvelope != null) {
              const storedEnvelope = await RecordEnvelope.createFromProtobuf(peer.peerRecordEnvelope);
              const storedRecord = PeerRecord.createFromProtobuf(storedEnvelope.payload);
              if (storedRecord.seqNumber >= peerRecord.seqNumber) {
                  log$i('sequence number was lower or equal to existing sequence number - stored: %d received: %d', storedRecord.seqNumber, peerRecord.seqNumber);
                  return false;
              }
          }
          await this.patch(peerRecord.peerId, {
              peerRecordEnvelope: buf,
              addresses: peerRecord.multiaddrs.map(multiaddr => ({
                  isCertified: true,
                  multiaddr
              }))
          });
          return true;
      }
      #emitIfUpdated(id, result) {
          if (!result.updated) {
              return;
          }
          if (this.peerId.equals(id)) {
              this.events.safeDispatchEvent('self:peer:update', { detail: result });
          }
          else {
              this.events.safeDispatchEvent('peer:update', { detail: result });
          }
      }
  }

  function isAsyncIterable$8(thing) {
      return thing[Symbol.asyncIterator] != null;
  }
  function drain(source) {
      if (isAsyncIterable$8(source)) {
          return (async () => {
              for await (const _ of source) { } // eslint-disable-line no-unused-vars,no-empty,@typescript-eslint/no-unused-vars
          })();
      }
      else {
          for (const _ of source) { } // eslint-disable-line no-unused-vars,no-empty,@typescript-eslint/no-unused-vars
      }
  }

  function peekable(iterable) {
      // @ts-expect-error can't use Symbol.asyncIterator to index iterable since it might be Iterable
      const [iterator, symbol] = iterable[Symbol.asyncIterator] != null
          // @ts-expect-error can't use Symbol.asyncIterator to index iterable since it might be Iterable
          ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]
          // @ts-expect-error can't use Symbol.iterator to index iterable since it might be AsyncIterable
          : [iterable[Symbol.iterator](), Symbol.iterator];
      const queue = [];
      // @ts-expect-error can't use symbol to index peekable
      return {
          peek: () => {
              return iterator.next();
          },
          push: (value) => {
              queue.push(value);
          },
          next: () => {
              if (queue.length > 0) {
                  return {
                      done: false,
                      value: queue.shift()
                  };
              }
              return iterator.next();
          },
          [symbol]() {
              return this;
          }
      };
  }

  function isAsyncIterable$7(thing) {
      return thing[Symbol.asyncIterator] != null;
  }
  function filter(source, fn) {
      if (isAsyncIterable$7(source)) {
          return (async function* () {
              for await (const entry of source) {
                  if (await fn(entry)) {
                      yield entry;
                  }
              }
          })();
      }
      // if mapping function returns a promise we have to return an async generator
      const peekable$1 = peekable(source);
      const { value, done } = peekable$1.next();
      if (done === true) {
          return (function* () { }());
      }
      const res = fn(value);
      // @ts-expect-error .then is not present on O
      if (typeof res.then === 'function') {
          return (async function* () {
              if (await res) {
                  yield value;
              }
              for await (const entry of peekable$1) {
                  if (await fn(entry)) {
                      yield entry;
                  }
              }
          })();
      }
      const func = fn;
      return (function* () {
          if (res === true) {
              yield value;
          }
          for (const entry of peekable$1) {
              if (func(entry)) {
                  yield entry;
              }
          }
      })();
  }

  function isAsyncIterable$6(thing) {
      return thing[Symbol.asyncIterator] != null;
  }
  function sort(source, sorter) {
      if (isAsyncIterable$6(source)) {
          return (async function* () {
              const arr = await all(source);
              yield* arr.sort(sorter);
          })();
      }
      return (function* () {
          const arr = all(source);
          yield* arr.sort(sorter);
      })();
  }

  function isAsyncIterable$5(thing) {
      return thing[Symbol.asyncIterator] != null;
  }
  function take(source, limit) {
      if (isAsyncIterable$5(source)) {
          return (async function* () {
              let items = 0;
              if (limit < 1) {
                  return;
              }
              for await (const entry of source) {
                  yield entry;
                  items++;
                  if (items === limit) {
                      return;
                  }
              }
          })();
      }
      return (function* () {
          let items = 0;
          if (limit < 1) {
              return;
          }
          for (const entry of source) {
              yield entry;
              items++;
              if (items === limit) {
                  return;
              }
          }
      })();
  }

  class BaseDatastore {
      put(key, val, options) {
          return Promise.reject(new Error('.put is not implemented'));
      }
      get(key, options) {
          return Promise.reject(new Error('.get is not implemented'));
      }
      has(key, options) {
          return Promise.reject(new Error('.has is not implemented'));
      }
      delete(key, options) {
          return Promise.reject(new Error('.delete is not implemented'));
      }
      async *putMany(source, options = {}) {
          for await (const { key, value } of source) {
              await this.put(key, value, options);
              yield key;
          }
      }
      async *getMany(source, options = {}) {
          for await (const key of source) {
              yield {
                  key,
                  value: await this.get(key, options)
              };
          }
      }
      async *deleteMany(source, options = {}) {
          for await (const key of source) {
              await this.delete(key, options);
              yield key;
          }
      }
      batch() {
          let puts = [];
          let dels = [];
          return {
              put(key, value) {
                  puts.push({ key, value });
              },
              delete(key) {
                  dels.push(key);
              },
              commit: async (options) => {
                  await drain(this.putMany(puts, options));
                  puts = [];
                  await drain(this.deleteMany(dels, options));
                  dels = [];
              }
          };
      }
      /**
       * Extending classes should override `query` or implement this method
       */
      // eslint-disable-next-line require-yield
      async *_all(q, options) {
          throw new Error('._all is not implemented');
      }
      /**
       * Extending classes should override `queryKeys` or implement this method
       */
      // eslint-disable-next-line require-yield
      async *_allKeys(q, options) {
          throw new Error('._allKeys is not implemented');
      }
      query(q, options) {
          let it = this._all(q, options);
          if (q.prefix != null) {
              const prefix = q.prefix;
              it = filter(it, (e) => e.key.toString().startsWith(prefix));
          }
          if (Array.isArray(q.filters)) {
              it = q.filters.reduce((it, f) => filter(it, f), it);
          }
          if (Array.isArray(q.orders)) {
              it = q.orders.reduce((it, f) => sort(it, f), it);
          }
          if (q.offset != null) {
              let i = 0;
              const offset = q.offset;
              it = filter(it, () => i++ >= offset);
          }
          if (q.limit != null) {
              it = take(it, q.limit);
          }
          return it;
      }
      queryKeys(q, options) {
          let it = this._allKeys(q, options);
          if (q.prefix != null) {
              const prefix = q.prefix;
              it = filter(it, (key) => key.toString().startsWith(prefix));
          }
          if (Array.isArray(q.filters)) {
              it = q.filters.reduce((it, f) => filter(it, f), it);
          }
          if (Array.isArray(q.orders)) {
              it = q.orders.reduce((it, f) => sort(it, f), it);
          }
          if (q.offset != null) {
              const offset = q.offset;
              let i = 0;
              it = filter(it, () => i++ >= offset);
          }
          if (q.limit != null) {
              it = take(it, q.limit);
          }
          return it;
      }
  }

  /**
   * @typedef {{ [key: string]: any }} Extensions
   * @typedef {Error} Err
   * @property {string} message
   */

  /**
   *
   * @param {Error} obj
   * @param {Extensions} props
   * @returns {Error & Extensions}
   */
  function assign(obj, props) {
      for (const key in props) {
          Object.defineProperty(obj, key, {
              value: props[key],
              enumerable: true,
              configurable: true,
          });
      }

      return obj;
  }

  /**
   *
   * @param {any} err - An Error
   * @param {string|Extensions} code - A string code or props to set on the error
   * @param {Extensions} [props] - Props to set on the error
   * @returns {Error & Extensions}
   */
  function createError(err, code, props) {
      if (!err || typeof err === 'string') {
          throw new TypeError('Please pass an Error to err-code');
      }

      if (!props) {
          props = {};
      }

      if (typeof code === 'object') {
          props = code;
          code = '';
      }

      if (code) {
          props.code = code;
      }

      try {
          return assign(err, props);
      } catch (_) {
          props.message = err.message;
          props.stack = err.stack;

          const ErrClass = function () {};

          ErrClass.prototype = Object.create(Object.getPrototypeOf(err));

          // @ts-ignore
          const output = assign(new ErrClass(), props);

          return output;
      }
  }

  var errCode = createError;

  var errCode$1 = /*@__PURE__*/getDefaultExportFromCjs(errCode);

  function notFoundError(err) {
      err = err ?? new Error('Not Found');
      return errCode$1(err, 'ERR_NOT_FOUND');
  }

  class MemoryDatastore extends BaseDatastore {
      data;
      constructor() {
          super();
          this.data = new Map();
      }
      put(key, val) {
          this.data.set(key.toString(), val);
          return key;
      }
      get(key) {
          const result = this.data.get(key.toString());
          if (result == null) {
              throw notFoundError();
          }
          return result;
      }
      has(key) {
          return this.data.has(key.toString());
      }
      delete(key) {
          this.data.delete(key.toString());
      }
      *_all() {
          for (const [key, value] of this.data.entries()) {
              yield { key: new Key(key), value };
          }
      }
      *_allKeys() {
          for (const key of this.data.keys()) {
              yield new Key(key);
          }
      }
  }

  function debounce(func, wait) {
      let timeout;
      return function () {
          const later = function () {
              timeout = undefined;
              func();
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
      };
  }

  const log$h = logger('libp2p:address-manager');
  const defaultAddressFilter = (addrs) => addrs;
  /**
   * If the passed multiaddr contains the passed peer id, remove it
   */
  function stripPeerId(ma, peerId) {
      const observedPeerIdStr = ma.getPeerId();
      // strip our peer id if it has been passed
      if (observedPeerIdStr != null) {
          const observedPeerId = peerIdFromString(observedPeerIdStr);
          // use same encoding for comparison
          if (observedPeerId.equals(peerId)) {
              ma = ma.decapsulate(multiaddr(`/p2p/${peerId.toString()}`));
          }
      }
      return ma;
  }
  class DefaultAddressManager {
      components;
      // this is an array to allow for duplicates, e.g. multiples of `/ip4/0.0.0.0/tcp/0`
      listen;
      announce;
      observed;
      announceFilter;
      /**
       * Responsible for managing the peer addresses.
       * Peers can specify their listen and announce addresses.
       * The listen addresses will be used by the libp2p transports to listen for new connections,
       * while the announce addresses will be used for the peer addresses' to other peers in the network.
       */
      constructor(components, init = {}) {
          const { listen = [], announce = [] } = init;
          this.components = components;
          this.listen = listen.map(ma => ma.toString());
          this.announce = new Set(announce.map(ma => ma.toString()));
          this.observed = new Map();
          this.announceFilter = init.announceFilter ?? defaultAddressFilter;
          // this method gets called repeatedly on startup when transports start listening so
          // debounce it so we don't cause multiple self:peer:update events to be emitted
          this._updatePeerStoreAddresses = debounce(this._updatePeerStoreAddresses.bind(this), 1000);
          // update our stored addresses when new transports listen
          components.events.addEventListener('transport:listening', () => {
              this._updatePeerStoreAddresses();
          });
          // update our stored addresses when existing transports stop listening
          components.events.addEventListener('transport:close', () => {
              this._updatePeerStoreAddresses();
          });
      }
      _updatePeerStoreAddresses() {
          // if announce addresses have been configured, ensure they make it into our peer
          // record for things like identify
          const addrs = this.getAnnounceAddrs()
              .concat(this.components.transportManager.getAddrs())
              .concat([...this.observed.entries()]
              .filter(([_, metadata]) => metadata.confident)
              .map(([str]) => multiaddr(str))).map(ma => {
              // strip our peer id if it is present
              if (ma.getPeerId() === this.components.peerId.toString()) {
                  return ma.decapsulate(`/p2p/${this.components.peerId.toString()}`);
              }
              return ma;
          });
          this.components.peerStore.patch(this.components.peerId, {
              multiaddrs: addrs
          })
              .catch(err => { log$h.error('error updating addresses', err); });
      }
      /**
       * Get peer listen multiaddrs
       */
      getListenAddrs() {
          return Array.from(this.listen).map((a) => multiaddr(a));
      }
      /**
       * Get peer announcing multiaddrs
       */
      getAnnounceAddrs() {
          return Array.from(this.announce).map((a) => multiaddr(a));
      }
      /**
       * Get observed multiaddrs
       */
      getObservedAddrs() {
          return Array.from(this.observed).map(([a]) => multiaddr(a));
      }
      /**
       * Add peer observed addresses
       */
      addObservedAddr(addr) {
          addr = stripPeerId(addr, this.components.peerId);
          const addrString = addr.toString();
          // do not trigger the change:addresses event if we already know about this address
          if (this.observed.has(addrString)) {
              return;
          }
          this.observed.set(addrString, {
              confident: false
          });
      }
      confirmObservedAddr(addr) {
          addr = stripPeerId(addr, this.components.peerId);
          const addrString = addr.toString();
          const metadata = this.observed.get(addrString) ?? {
              confident: false
          };
          const startingConfidence = metadata.confident;
          this.observed.set(addrString, {
              confident: true
          });
          // only trigger the 'self:peer:update' event if our confidence in an address has changed
          if (!startingConfidence) {
              this._updatePeerStoreAddresses();
          }
      }
      removeObservedAddr(addr) {
          addr = stripPeerId(addr, this.components.peerId);
          const addrString = addr.toString();
          this.observed.delete(addrString);
      }
      getAddresses() {
          let addrs = this.getAnnounceAddrs().map(ma => ma.toString());
          if (addrs.length === 0) {
              // no configured announce addrs, add configured listen addresses
              addrs = this.components.transportManager.getAddrs().map(ma => ma.toString());
          }
          // add observed addresses we are confident in
          addrs = addrs.concat(Array.from(this.observed)
              .filter(([ma, metadata]) => metadata.confident)
              .map(([ma]) => ma));
          // dedupe multiaddrs
          const addrSet = new Set(addrs);
          // Create advertising list
          return this.announceFilter(Array.from(addrSet)
              .map(str => multiaddr(str)))
              .map(ma => {
              // do not append our peer id to a path multiaddr as it will become invalid
              if (ma.protos().pop()?.path === true) {
                  return ma;
              }
              if (ma.getPeerId() === this.components.peerId.toString()) {
                  return ma;
              }
              return ma.encapsulate(`/p2p/${this.components.peerId.toString()}`);
          });
      }
  }

  function isStartable(obj) {
      return obj != null && typeof obj.start === 'function' && typeof obj.stop === 'function';
  }

  class DefaultComponents {
      components = {};
      _started = false;
      constructor(init = {}) {
          this.components = {};
          for (const [key, value] of Object.entries(init)) {
              this.components[key] = value;
          }
      }
      isStarted() {
          return this._started;
      }
      async _invokeStartableMethod(methodName) {
          await Promise.all(Object.values(this.components)
              .filter(obj => isStartable(obj))
              .map(async (startable) => {
              await startable[methodName]?.();
          }));
      }
      async beforeStart() {
          await this._invokeStartableMethod('beforeStart');
      }
      async start() {
          await this._invokeStartableMethod('start');
          this._started = true;
      }
      async afterStart() {
          await this._invokeStartableMethod('afterStart');
      }
      async beforeStop() {
          await this._invokeStartableMethod('beforeStop');
      }
      async stop() {
          await this._invokeStartableMethod('stop');
          this._started = false;
      }
      async afterStop() {
          await this._invokeStartableMethod('afterStop');
      }
  }
  const OPTIONAL_SERVICES = [
      'metrics',
      'connectionProtector'
  ];
  const NON_SERVICE_PROPERTIES = [
      'components',
      'isStarted',
      'beforeStart',
      'start',
      'afterStart',
      'beforeStop',
      'stop',
      'afterStop',
      'then',
      '_invokeStartableMethod'
  ];
  function defaultComponents(init = {}) {
      const components = new DefaultComponents(init);
      const proxy = new Proxy(components, {
          get(target, prop, receiver) {
              if (typeof prop === 'string' && !NON_SERVICE_PROPERTIES.includes(prop)) {
                  const service = components.components[prop];
                  if (service == null && !OPTIONAL_SERVICES.includes(prop)) {
                      throw new CodeError(`${prop} not set`, 'ERR_SERVICE_MISSING');
                  }
                  return service;
              }
              return Reflect.get(target, prop, receiver);
          },
          set(target, prop, value) {
              if (typeof prop === 'string') {
                  components.components[prop] = value;
              }
              else {
                  Reflect.set(target, prop, value);
              }
              return true;
          }
      });
      // @ts-expect-error component keys are proxied
      return proxy;
  }

  var Netmask_1;
  // Generated by CoffeeScript 1.12.7
  (function() {
    var Netmask, atob, chr, chr0, chrA, chra, ip2long, long2ip;

    long2ip = function(long) {
      var a, b, c, d;
      a = (long & (0xff << 24)) >>> 24;
      b = (long & (0xff << 16)) >>> 16;
      c = (long & (0xff << 8)) >>> 8;
      d = long & 0xff;
      return [a, b, c, d].join('.');
    };

    ip2long = function(ip) {
      var b, c, i, j, n, ref;
      b = [];
      for (i = j = 0; j <= 3; i = ++j) {
        if (ip.length === 0) {
          break;
        }
        if (i > 0) {
          if (ip[0] !== '.') {
            throw new Error('Invalid IP');
          }
          ip = ip.substring(1);
        }
        ref = atob(ip), n = ref[0], c = ref[1];
        ip = ip.substring(c);
        b.push(n);
      }
      if (ip.length !== 0) {
        throw new Error('Invalid IP');
      }
      switch (b.length) {
        case 1:
          if (b[0] > 0xFFFFFFFF) {
            throw new Error('Invalid IP');
          }
          return b[0] >>> 0;
        case 2:
          if (b[0] > 0xFF || b[1] > 0xFFFFFF) {
            throw new Error('Invalid IP');
          }
          return (b[0] << 24 | b[1]) >>> 0;
        case 3:
          if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFFFF) {
            throw new Error('Invalid IP');
          }
          return (b[0] << 24 | b[1] << 16 | b[2]) >>> 0;
        case 4:
          if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFF || b[3] > 0xFF) {
            throw new Error('Invalid IP');
          }
          return (b[0] << 24 | b[1] << 16 | b[2] << 8 | b[3]) >>> 0;
        default:
          throw new Error('Invalid IP');
      }
    };

    chr = function(b) {
      return b.charCodeAt(0);
    };

    chr0 = chr('0');

    chra = chr('a');

    chrA = chr('A');

    atob = function(s) {
      var base, dmax, i, n, start;
      n = 0;
      base = 10;
      dmax = '9';
      i = 0;
      if (s.length > 1 && s[i] === '0') {
        if (s[i + 1] === 'x' || s[i + 1] === 'X') {
          i += 2;
          base = 16;
        } else if ('0' <= s[i + 1] && s[i + 1] <= '9') {
          i++;
          base = 8;
          dmax = '7';
        }
      }
      start = i;
      while (i < s.length) {
        if ('0' <= s[i] && s[i] <= dmax) {
          n = (n * base + (chr(s[i]) - chr0)) >>> 0;
        } else if (base === 16) {
          if ('a' <= s[i] && s[i] <= 'f') {
            n = (n * base + (10 + chr(s[i]) - chra)) >>> 0;
          } else if ('A' <= s[i] && s[i] <= 'F') {
            n = (n * base + (10 + chr(s[i]) - chrA)) >>> 0;
          } else {
            break;
          }
        } else {
          break;
        }
        if (n > 0xFFFFFFFF) {
          throw new Error('too large');
        }
        i++;
      }
      if (i === start) {
        throw new Error('empty octet');
      }
      return [n, i];
    };

    Netmask = (function() {
      function Netmask(net, mask) {
        var i, j, ref;
        if (typeof net !== 'string') {
          throw new Error("Missing `net' parameter");
        }
        if (!mask) {
          ref = net.split('/', 2), net = ref[0], mask = ref[1];
        }
        if (!mask) {
          mask = 32;
        }
        if (typeof mask === 'string' && mask.indexOf('.') > -1) {
          try {
            this.maskLong = ip2long(mask);
          } catch (error1) {
            throw new Error("Invalid mask: " + mask);
          }
          for (i = j = 32; j >= 0; i = --j) {
            if (this.maskLong === (0xffffffff << (32 - i)) >>> 0) {
              this.bitmask = i;
              break;
            }
          }
        } else if (mask || mask === 0) {
          this.bitmask = parseInt(mask, 10);
          this.maskLong = 0;
          if (this.bitmask > 0) {
            this.maskLong = (0xffffffff << (32 - this.bitmask)) >>> 0;
          }
        } else {
          throw new Error("Invalid mask: empty");
        }
        try {
          this.netLong = (ip2long(net) & this.maskLong) >>> 0;
        } catch (error1) {
          throw new Error("Invalid net address: " + net);
        }
        if (!(this.bitmask <= 32)) {
          throw new Error("Invalid mask for ip4: " + mask);
        }
        this.size = Math.pow(2, 32 - this.bitmask);
        this.base = long2ip(this.netLong);
        this.mask = long2ip(this.maskLong);
        this.hostmask = long2ip(~this.maskLong);
        this.first = this.bitmask <= 30 ? long2ip(this.netLong + 1) : this.base;
        this.last = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 2) : long2ip(this.netLong + this.size - 1);
        this.broadcast = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 1) : void 0;
      }

      Netmask.prototype.contains = function(ip) {
        if (typeof ip === 'string' && (ip.indexOf('/') > 0 || ip.split('.').length !== 4)) {
          ip = new Netmask(ip);
        }
        if (ip instanceof Netmask) {
          return this.contains(ip.base) && this.contains(ip.broadcast || ip.last);
        } else {
          return (ip2long(ip) & this.maskLong) >>> 0 === (this.netLong & this.maskLong) >>> 0;
        }
      };

      Netmask.prototype.next = function(count) {
        if (count == null) {
          count = 1;
        }
        return new Netmask(long2ip(this.netLong + (this.size * count)), this.mask);
      };

      Netmask.prototype.forEach = function(fn) {
        var index, lastLong, long;
        long = ip2long(this.first);
        lastLong = ip2long(this.last);
        index = 0;
        while (long <= lastLong) {
          fn(long2ip(long), long, index);
          index++;
          long++;
        }
      };

      Netmask.prototype.toString = function() {
        return this.base + "/" + this.bitmask;
      };

      return Netmask;

    })();

    Netmask_1 = Netmask;

  }).call(commonjsGlobal);

  const word = '[a-fA-F\\d:]';

  const boundry = options => options && options.includeBoundaries
  	? `(?:(?<=\\s|^)(?=${word})|(?<=${word})(?=\\s|$))`
  	: '';

  const v4 = '(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}';

  const v6segment = '[a-fA-F\\d]{1,4}';

  const v6 = `
(?:
(?:${v6segment}:){7}(?:${v6segment}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6segment}:){6}(?:${v4}|:${v6segment}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6segment}:){5}(?::${v4}|(?::${v6segment}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6segment}:){4}(?:(?::${v6segment}){0,1}:${v4}|(?::${v6segment}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6segment}:){3}(?:(?::${v6segment}){0,2}:${v4}|(?::${v6segment}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6segment}:){2}(?:(?::${v6segment}){0,3}:${v4}|(?::${v6segment}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6segment}:){1}(?:(?::${v6segment}){0,4}:${v4}|(?::${v6segment}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6segment}){0,5}:${v4}|(?::${v6segment}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, '').replace(/\n/g, '').trim();

  // Pre-compile only the exact regexes because adding a global flag make regexes stateful
  const v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);
  const v4exact = new RegExp(`^${v4}$`);
  const v6exact = new RegExp(`^${v6}$`);

  const ipRegex = options => options && options.exact
  	? v46Exact
  	: new RegExp(`(?:${boundry(options)}${v4}${boundry(options)})|(?:${boundry(options)}${v6}${boundry(options)})`, 'g');

  ipRegex.v4 = options => options && options.exact ? v4exact : new RegExp(`${boundry(options)}${v4}${boundry(options)}`, 'g');
  ipRegex.v6 = options => options && options.exact ? v6exact : new RegExp(`${boundry(options)}${v6}${boundry(options)}`, 'g');

  var ipaddr$1 = {exports: {}};

  (function (module) {
  	(function (root) {
  	    // A list of regular expressions that match arbitrary IPv4 addresses,
  	    // for which a number of weird notations exist.
  	    // Note that an address like 0010.0xa5.1.1 is considered legal.
  	    const ipv4Part = '(0?\\d+|0x[a-f0-9]+)';
  	    const ipv4Regexes = {
  	        fourOctet: new RegExp(`^${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}$`, 'i'),
  	        threeOctet: new RegExp(`^${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}$`, 'i'),
  	        twoOctet: new RegExp(`^${ipv4Part}\\.${ipv4Part}$`, 'i'),
  	        longValue: new RegExp(`^${ipv4Part}$`, 'i')
  	    };

  	    // Regular Expression for checking Octal numbers
  	    const octalRegex = new RegExp(`^0[0-7]+$`, 'i');
  	    const hexRegex = new RegExp(`^0x[a-f0-9]+$`, 'i');

  	    const zoneIndex = '%[0-9a-z]{1,}';

  	    // IPv6-matching regular expressions.
  	    // For IPv6, the task is simpler: it is enough to match the colon-delimited
  	    // hexadecimal IPv6 and a transitional variant with dotted-decimal IPv4 at
  	    // the end.
  	    const ipv6Part = '(?:[0-9a-f]+::?)+';
  	    const ipv6Regexes = {
  	        zoneIndex: new RegExp(zoneIndex, 'i'),
  	        'native': new RegExp(`^(::)?(${ipv6Part})?([0-9a-f]+)?(::)?(${zoneIndex})?$`, 'i'),
  	        deprecatedTransitional: new RegExp(`^(?:::)(${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}(${zoneIndex})?)$`, 'i'),
  	        transitional: new RegExp(`^((?:${ipv6Part})|(?:::)(?:${ipv6Part})?)${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}(${zoneIndex})?$`, 'i')
  	    };

  	    // Expand :: in an IPv6 address or address part consisting of `parts` groups.
  	    function expandIPv6 (string, parts) {
  	        // More than one '::' means invalid adddress
  	        if (string.indexOf('::') !== string.lastIndexOf('::')) {
  	            return null;
  	        }

  	        let colonCount = 0;
  	        let lastColon = -1;
  	        let zoneId = (string.match(ipv6Regexes.zoneIndex) || [])[0];
  	        let replacement, replacementCount;

  	        // Remove zone index and save it for later
  	        if (zoneId) {
  	            zoneId = zoneId.substring(1);
  	            string = string.replace(/%.+$/, '');
  	        }

  	        // How many parts do we already have?
  	        while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {
  	            colonCount++;
  	        }

  	        // 0::0 is two parts more than ::
  	        if (string.substr(0, 2) === '::') {
  	            colonCount--;
  	        }

  	        if (string.substr(-2, 2) === '::') {
  	            colonCount--;
  	        }

  	        // The following loop would hang if colonCount > parts
  	        if (colonCount > parts) {
  	            return null;
  	        }

  	        // replacement = ':' + '0:' * (parts - colonCount)
  	        replacementCount = parts - colonCount;
  	        replacement = ':';
  	        while (replacementCount--) {
  	            replacement += '0:';
  	        }

  	        // Insert the missing zeroes
  	        string = string.replace('::', replacement);

  	        // Trim any garbage which may be hanging around if :: was at the edge in
  	        // the source strin
  	        if (string[0] === ':') {
  	            string = string.slice(1);
  	        }

  	        if (string[string.length - 1] === ':') {
  	            string = string.slice(0, -1);
  	        }

  	        parts = (function () {
  	            const ref = string.split(':');
  	            const results = [];

  	            for (let i = 0; i < ref.length; i++) {
  	                results.push(parseInt(ref[i], 16));
  	            }

  	            return results;
  	        })();

  	        return {
  	            parts: parts,
  	            zoneId: zoneId
  	        };
  	    }

  	    // A generic CIDR (Classless Inter-Domain Routing) RFC1518 range matcher.
  	    function matchCIDR (first, second, partSize, cidrBits) {
  	        if (first.length !== second.length) {
  	            throw new Error('ipaddr: cannot match CIDR for objects with different lengths');
  	        }

  	        let part = 0;
  	        let shift;

  	        while (cidrBits > 0) {
  	            shift = partSize - cidrBits;
  	            if (shift < 0) {
  	                shift = 0;
  	            }

  	            if (first[part] >> shift !== second[part] >> shift) {
  	                return false;
  	            }

  	            cidrBits -= partSize;
  	            part += 1;
  	        }

  	        return true;
  	    }

  	    function parseIntAuto (string) {
  	        // Hexadedimal base 16 (0x#)
  	        if (hexRegex.test(string)) {
  	            return parseInt(string, 16);
  	        }
  	        // While octal representation is discouraged by ECMAScript 3
  	        // and forbidden by ECMAScript 5, we silently allow it to
  	        // work only if the rest of the string has numbers less than 8.
  	        if (string[0] === '0' && !isNaN(parseInt(string[1], 10))) {
  	        if (octalRegex.test(string)) {
  	            return parseInt(string, 8);
  	        }
  	            throw new Error(`ipaddr: cannot parse ${string} as octal`);
  	        }
  	        // Always include the base 10 radix!
  	        return parseInt(string, 10);
  	    }

  	    function padPart (part, length) {
  	        while (part.length < length) {
  	            part = `0${part}`;
  	        }

  	        return part;
  	    }

  	    const ipaddr = {};

  	    // An IPv4 address (RFC791).
  	    ipaddr.IPv4 = (function () {
  	        // Constructs a new IPv4 address from an array of four octets
  	        // in network order (MSB first)
  	        // Verifies the input.
  	        function IPv4 (octets) {
  	            if (octets.length !== 4) {
  	                throw new Error('ipaddr: ipv4 octet count should be 4');
  	            }

  	            let i, octet;

  	            for (i = 0; i < octets.length; i++) {
  	                octet = octets[i];
  	                if (!((0 <= octet && octet <= 255))) {
  	                    throw new Error('ipaddr: ipv4 octet should fit in 8 bits');
  	                }
  	            }

  	            this.octets = octets;
  	        }

  	        // Special IPv4 address ranges.
  	        // See also https://en.wikipedia.org/wiki/Reserved_IP_addresses
  	        IPv4.prototype.SpecialRanges = {
  	            unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
  	            broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
  	            // RFC3171
  	            multicast: [[new IPv4([224, 0, 0, 0]), 4]],
  	            // RFC3927
  	            linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
  	            // RFC5735
  	            loopback: [[new IPv4([127, 0, 0, 0]), 8]],
  	            // RFC6598
  	            carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],
  	            // RFC1918
  	            'private': [
  	                [new IPv4([10, 0, 0, 0]), 8],
  	                [new IPv4([172, 16, 0, 0]), 12],
  	                [new IPv4([192, 168, 0, 0]), 16]
  	            ],
  	            // Reserved and testing-only ranges; RFCs 5735, 5737, 2544, 1700
  	            reserved: [
  	                [new IPv4([192, 0, 0, 0]), 24],
  	                [new IPv4([192, 0, 2, 0]), 24],
  	                [new IPv4([192, 88, 99, 0]), 24],
  	                [new IPv4([198, 18, 0, 0]), 15],
  	                [new IPv4([198, 51, 100, 0]), 24],
  	                [new IPv4([203, 0, 113, 0]), 24],
  	                [new IPv4([240, 0, 0, 0]), 4]
  	            ]
  	        };

  	        // The 'kind' method exists on both IPv4 and IPv6 classes.
  	        IPv4.prototype.kind = function () {
  	            return 'ipv4';
  	        };

  	        // Checks if this address matches other one within given CIDR range.
  	        IPv4.prototype.match = function (other, cidrRange) {
  	            let ref;
  	            if (cidrRange === undefined) {
  	                ref = other;
  	                other = ref[0];
  	                cidrRange = ref[1];
  	            }

  	            if (other.kind() !== 'ipv4') {
  	                throw new Error('ipaddr: cannot match ipv4 address with non-ipv4 one');
  	            }

  	            return matchCIDR(this.octets, other.octets, 8, cidrRange);
  	        };

  	        // returns a number of leading ones in IPv4 address, making sure that
  	        // the rest is a solid sequence of 0's (valid netmask)
  	        // returns either the CIDR length or null if mask is not valid
  	        IPv4.prototype.prefixLengthFromSubnetMask = function () {
  	            let cidr = 0;
  	            // non-zero encountered stop scanning for zeroes
  	            let stop = false;
  	            // number of zeroes in octet
  	            const zerotable = {
  	                0: 8,
  	                128: 7,
  	                192: 6,
  	                224: 5,
  	                240: 4,
  	                248: 3,
  	                252: 2,
  	                254: 1,
  	                255: 0
  	            };
  	            let i, octet, zeros;

  	            for (i = 3; i >= 0; i -= 1) {
  	                octet = this.octets[i];
  	                if (octet in zerotable) {
  	                    zeros = zerotable[octet];
  	                    if (stop && zeros !== 0) {
  	                        return null;
  	                    }

  	                    if (zeros !== 8) {
  	                        stop = true;
  	                    }

  	                    cidr += zeros;
  	                } else {
  	                    return null;
  	                }
  	            }

  	            return 32 - cidr;
  	        };

  	        // Checks if the address corresponds to one of the special ranges.
  	        IPv4.prototype.range = function () {
  	            return ipaddr.subnetMatch(this, this.SpecialRanges);
  	        };

  	        // Returns an array of byte-sized values in network order (MSB first)
  	        IPv4.prototype.toByteArray = function () {
  	            return this.octets.slice(0);
  	        };

  	        // Converts this IPv4 address to an IPv4-mapped IPv6 address.
  	        IPv4.prototype.toIPv4MappedAddress = function () {
  	            return ipaddr.IPv6.parse(`::ffff:${this.toString()}`);
  	        };

  	        // Symmetrical method strictly for aligning with the IPv6 methods.
  	        IPv4.prototype.toNormalizedString = function () {
  	            return this.toString();
  	        };

  	        // Returns the address in convenient, decimal-dotted format.
  	        IPv4.prototype.toString = function () {
  	            return this.octets.join('.');
  	        };

  	        return IPv4;
  	    })();

  	    // A utility function to return broadcast address given the IPv4 interface and prefix length in CIDR notation
  	    ipaddr.IPv4.broadcastAddressFromCIDR = function (string) {

  	        try {
  	            const cidr = this.parseCIDR(string);
  	            const ipInterfaceOctets = cidr[0].toByteArray();
  	            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
  	            const octets = [];
  	            let i = 0;
  	            while (i < 4) {
  	                // Broadcast address is bitwise OR between ip interface and inverted mask
  	                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
  	                i++;
  	            }

  	            return new this(octets);
  	        } catch (e) {
  	            throw new Error('ipaddr: the address does not have IPv4 CIDR format');
  	        }
  	    };

  	    // Checks if a given string is formatted like IPv4 address.
  	    ipaddr.IPv4.isIPv4 = function (string) {
  	        return this.parser(string) !== null;
  	    };

  	    // Checks if a given string is a valid IPv4 address.
  	    ipaddr.IPv4.isValid = function (string) {
  	        try {
  	            new this(this.parser(string));
  	            return true;
  	        } catch (e) {
  	            return false;
  	        }
  	    };

  	    // Checks if a given string is a full four-part IPv4 Address.
  	    ipaddr.IPv4.isValidFourPartDecimal = function (string) {
  	        if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/)) {
  	            return true;
  	        } else {
  	            return false;
  	        }
  	    };

  	    // A utility function to return network address given the IPv4 interface and prefix length in CIDR notation
  	    ipaddr.IPv4.networkAddressFromCIDR = function (string) {
  	        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;

  	        try {
  	            cidr = this.parseCIDR(string);
  	            ipInterfaceOctets = cidr[0].toByteArray();
  	            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
  	            octets = [];
  	            i = 0;
  	            while (i < 4) {
  	                // Network address is bitwise AND between ip interface and mask
  	                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
  	                i++;
  	            }

  	            return new this(octets);
  	        } catch (e) {
  	            throw new Error('ipaddr: the address does not have IPv4 CIDR format');
  	        }
  	    };

  	    // Tries to parse and validate a string with IPv4 address.
  	    // Throws an error if it fails.
  	    ipaddr.IPv4.parse = function (string) {
  	        const parts = this.parser(string);

  	        if (parts === null) {
  	            throw new Error('ipaddr: string is not formatted like an IPv4 Address');
  	        }

  	        return new this(parts);
  	    };

  	    // Parses the string as an IPv4 Address with CIDR Notation.
  	    ipaddr.IPv4.parseCIDR = function (string) {
  	        let match;

  	        if ((match = string.match(/^(.+)\/(\d+)$/))) {
  	            const maskLength = parseInt(match[2]);
  	            if (maskLength >= 0 && maskLength <= 32) {
  	                const parsed = [this.parse(match[1]), maskLength];
  	                Object.defineProperty(parsed, 'toString', {
  	                    value: function () {
  	                        return this.join('/');
  	                    }
  	                });
  	                return parsed;
  	            }
  	        }

  	        throw new Error('ipaddr: string is not formatted like an IPv4 CIDR range');
  	    };

  	    // Classful variants (like a.b, where a is an octet, and b is a 24-bit
  	    // value representing last three octets; this corresponds to a class C
  	    // address) are omitted due to classless nature of modern Internet.
  	    ipaddr.IPv4.parser = function (string) {
  	        let match, part, value;

  	        // parseInt recognizes all that octal & hexadecimal weirdness for us
  	        if ((match = string.match(ipv4Regexes.fourOctet))) {
  	            return (function () {
  	                const ref = match.slice(1, 6);
  	                const results = [];

  	                for (let i = 0; i < ref.length; i++) {
  	                    part = ref[i];
  	                    results.push(parseIntAuto(part));
  	                }

  	                return results;
  	            })();
  	        } else if ((match = string.match(ipv4Regexes.longValue))) {
  	            value = parseIntAuto(match[1]);
  	            if (value > 0xffffffff || value < 0) {
  	                throw new Error('ipaddr: address outside defined range');
  	            }

  	            return ((function () {
  	                const results = [];
  	                let shift;

  	                for (shift = 0; shift <= 24; shift += 8) {
  	                    results.push((value >> shift) & 0xff);
  	                }

  	                return results;
  	            })()).reverse();
  	        } else if ((match = string.match(ipv4Regexes.twoOctet))) {
  	            return (function () {
  	                const ref = match.slice(1, 4);
  	                const results = [];

  	                value = parseIntAuto(ref[1]);
  	                if (value > 0xffffff || value < 0) {
  	                    throw new Error('ipaddr: address outside defined range');
  	                }

  	                results.push(parseIntAuto(ref[0]));
  	                results.push((value >> 16) & 0xff);
  	                results.push((value >>  8) & 0xff);
  	                results.push( value        & 0xff);

  	                return results;
  	            })();
  	        } else if ((match = string.match(ipv4Regexes.threeOctet))) {
  	            return (function () {
  	                const ref = match.slice(1, 5);
  	                const results = [];

  	                value = parseIntAuto(ref[2]);
  	                if (value > 0xffff || value < 0) {
  	                    throw new Error('ipaddr: address outside defined range');
  	                }

  	                results.push(parseIntAuto(ref[0]));
  	                results.push(parseIntAuto(ref[1]));
  	                results.push((value >> 8) & 0xff);
  	                results.push( value       & 0xff);

  	                return results;
  	            })();
  	        } else {
  	            return null;
  	        }
  	    };

  	    // A utility function to return subnet mask in IPv4 format given the prefix length
  	    ipaddr.IPv4.subnetMaskFromPrefixLength = function (prefix) {
  	        prefix = parseInt(prefix);
  	        if (prefix < 0 || prefix > 32) {
  	            throw new Error('ipaddr: invalid IPv4 prefix length');
  	        }

  	        const octets = [0, 0, 0, 0];
  	        let j = 0;
  	        const filledOctetCount = Math.floor(prefix / 8);

  	        while (j < filledOctetCount) {
  	            octets[j] = 255;
  	            j++;
  	        }

  	        if (filledOctetCount < 4) {
  	            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);
  	        }

  	        return new this(octets);
  	    };

  	    // An IPv6 address (RFC2460)
  	    ipaddr.IPv6 = (function () {
  	        // Constructs an IPv6 address from an array of eight 16 - bit parts
  	        // or sixteen 8 - bit parts in network order(MSB first).
  	        // Throws an error if the input is invalid.
  	        function IPv6 (parts, zoneId) {
  	            let i, part;

  	            if (parts.length === 16) {
  	                this.parts = [];
  	                for (i = 0; i <= 14; i += 2) {
  	                    this.parts.push((parts[i] << 8) | parts[i + 1]);
  	                }
  	            } else if (parts.length === 8) {
  	                this.parts = parts;
  	            } else {
  	                throw new Error('ipaddr: ipv6 part count should be 8 or 16');
  	            }

  	            for (i = 0; i < this.parts.length; i++) {
  	                part = this.parts[i];
  	                if (!((0 <= part && part <= 0xffff))) {
  	                    throw new Error('ipaddr: ipv6 part should fit in 16 bits');
  	                }
  	            }

  	            if (zoneId) {
  	                this.zoneId = zoneId;
  	            }
  	        }

  	        // Special IPv6 ranges
  	        IPv6.prototype.SpecialRanges = {
  	            // RFC4291, here and after
  	            unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
  	            linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],
  	            multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],
  	            loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
  	            uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],
  	            ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],
  	            // RFC6145
  	            rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],
  	            // RFC6052
  	            rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],
  	            // RFC3056
  	            '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],
  	            // RFC6052, RFC6146
  	            teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],
  	            // RFC4291
  	            reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]],
  	            benchmarking: [new IPv6([0x2001, 0x2, 0, 0, 0, 0, 0, 0]), 48],
  	            amt: [new IPv6([0x2001, 0x3, 0, 0, 0, 0, 0, 0]), 32],
  	            as112v6: [new IPv6([0x2001, 0x4, 0x112, 0, 0, 0, 0, 0]), 48],
  	            deprecated: [new IPv6([0x2001, 0x10, 0, 0, 0, 0, 0, 0]), 28],
  	            orchid2: [new IPv6([0x2001, 0x20, 0, 0, 0, 0, 0, 0]), 28]
  	        };

  	        // Checks if this address is an IPv4-mapped IPv6 address.
  	        IPv6.prototype.isIPv4MappedAddress = function () {
  	            return this.range() === 'ipv4Mapped';
  	        };

  	        // The 'kind' method exists on both IPv4 and IPv6 classes.
  	        IPv6.prototype.kind = function () {
  	            return 'ipv6';
  	        };

  	        // Checks if this address matches other one within given CIDR range.
  	        IPv6.prototype.match = function (other, cidrRange) {
  	            let ref;

  	            if (cidrRange === undefined) {
  	                ref = other;
  	                other = ref[0];
  	                cidrRange = ref[1];
  	            }

  	            if (other.kind() !== 'ipv6') {
  	                throw new Error('ipaddr: cannot match ipv6 address with non-ipv6 one');
  	            }

  	            return matchCIDR(this.parts, other.parts, 16, cidrRange);
  	        };

  	        // returns a number of leading ones in IPv6 address, making sure that
  	        // the rest is a solid sequence of 0's (valid netmask)
  	        // returns either the CIDR length or null if mask is not valid
  	        IPv6.prototype.prefixLengthFromSubnetMask = function () {
  	            let cidr = 0;
  	            // non-zero encountered stop scanning for zeroes
  	            let stop = false;
  	            // number of zeroes in octet
  	            const zerotable = {
  	                0: 16,
  	                32768: 15,
  	                49152: 14,
  	                57344: 13,
  	                61440: 12,
  	                63488: 11,
  	                64512: 10,
  	                65024: 9,
  	                65280: 8,
  	                65408: 7,
  	                65472: 6,
  	                65504: 5,
  	                65520: 4,
  	                65528: 3,
  	                65532: 2,
  	                65534: 1,
  	                65535: 0
  	            };
  	            let part, zeros;

  	            for (let i = 7; i >= 0; i -= 1) {
  	                part = this.parts[i];
  	                if (part in zerotable) {
  	                    zeros = zerotable[part];
  	                    if (stop && zeros !== 0) {
  	                        return null;
  	                    }

  	                    if (zeros !== 16) {
  	                        stop = true;
  	                    }

  	                    cidr += zeros;
  	                } else {
  	                    return null;
  	                }
  	            }

  	            return 128 - cidr;
  	        };


  	        // Checks if the address corresponds to one of the special ranges.
  	        IPv6.prototype.range = function () {
  	            return ipaddr.subnetMatch(this, this.SpecialRanges);
  	        };

  	        // Returns an array of byte-sized values in network order (MSB first)
  	        IPv6.prototype.toByteArray = function () {
  	            let part;
  	            const bytes = [];
  	            const ref = this.parts;
  	            for (let i = 0; i < ref.length; i++) {
  	                part = ref[i];
  	                bytes.push(part >> 8);
  	                bytes.push(part & 0xff);
  	            }

  	            return bytes;
  	        };

  	        // Returns the address in expanded format with all zeroes included, like
  	        // 2001:0db8:0008:0066:0000:0000:0000:0001
  	        IPv6.prototype.toFixedLengthString = function () {
  	            const addr = ((function () {
  	                const results = [];
  	                for (let i = 0; i < this.parts.length; i++) {
  	                    results.push(padPart(this.parts[i].toString(16), 4));
  	                }

  	                return results;
  	            }).call(this)).join(':');

  	            let suffix = '';

  	            if (this.zoneId) {
  	                suffix = `%${this.zoneId}`;
  	            }

  	            return addr + suffix;
  	        };

  	        // Converts this address to IPv4 address if it is an IPv4-mapped IPv6 address.
  	        // Throws an error otherwise.
  	        IPv6.prototype.toIPv4Address = function () {
  	            if (!this.isIPv4MappedAddress()) {
  	                throw new Error('ipaddr: trying to convert a generic ipv6 address to ipv4');
  	            }

  	            const ref = this.parts.slice(-2);
  	            const high = ref[0];
  	            const low = ref[1];

  	            return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);
  	        };

  	        // Returns the address in expanded format with all zeroes included, like
  	        // 2001:db8:8:66:0:0:0:1
  	        //
  	        // Deprecated: use toFixedLengthString() instead.
  	        IPv6.prototype.toNormalizedString = function () {
  	            const addr = ((function () {
  	                const results = [];

  	                for (let i = 0; i < this.parts.length; i++) {
  	                    results.push(this.parts[i].toString(16));
  	                }

  	                return results;
  	            }).call(this)).join(':');

  	            let suffix = '';

  	            if (this.zoneId) {
  	                suffix = `%${this.zoneId}`;
  	            }

  	            return addr + suffix;
  	        };

  	        // Returns the address in compact, human-readable format like
  	        // 2001:db8:8:66::1
  	        // in line with RFC 5952 (see https://tools.ietf.org/html/rfc5952#section-4)
  	        IPv6.prototype.toRFC5952String = function () {
  	            const regex = /((^|:)(0(:|$)){2,})/g;
  	            const string = this.toNormalizedString();
  	            let bestMatchIndex = 0;
  	            let bestMatchLength = -1;
  	            let match;

  	            while ((match = regex.exec(string))) {
  	                if (match[0].length > bestMatchLength) {
  	                    bestMatchIndex = match.index;
  	                    bestMatchLength = match[0].length;
  	                }
  	            }

  	            if (bestMatchLength < 0) {
  	                return string;
  	            }

  	            return `${string.substring(0, bestMatchIndex)}::${string.substring(bestMatchIndex + bestMatchLength)}`;
  	        };

  	        // Returns the address in compact, human-readable format like
  	        // 2001:db8:8:66::1
  	        // Calls toRFC5952String under the hood.
  	        IPv6.prototype.toString = function () {
  	            return this.toRFC5952String();
  	        };

  	        return IPv6;

  	    })();

  	    // A utility function to return broadcast address given the IPv6 interface and prefix length in CIDR notation
  	    ipaddr.IPv6.broadcastAddressFromCIDR = function (string) {
  	        try {
  	            const cidr = this.parseCIDR(string);
  	            const ipInterfaceOctets = cidr[0].toByteArray();
  	            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
  	            const octets = [];
  	            let i = 0;
  	            while (i < 16) {
  	                // Broadcast address is bitwise OR between ip interface and inverted mask
  	                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
  	                i++;
  	            }

  	            return new this(octets);
  	        } catch (e) {
  	            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);
  	        }
  	    };

  	    // Checks if a given string is formatted like IPv6 address.
  	    ipaddr.IPv6.isIPv6 = function (string) {
  	        return this.parser(string) !== null;
  	    };

  	    // Checks to see if string is a valid IPv6 Address
  	    ipaddr.IPv6.isValid = function (string) {

  	        // Since IPv6.isValid is always called first, this shortcut
  	        // provides a substantial performance gain.
  	        if (typeof string === 'string' && string.indexOf(':') === -1) {
  	            return false;
  	        }

  	        try {
  	            const addr = this.parser(string);
  	            new this(addr.parts, addr.zoneId);
  	            return true;
  	        } catch (e) {
  	            return false;
  	        }
  	    };

  	    // A utility function to return network address given the IPv6 interface and prefix length in CIDR notation
  	    ipaddr.IPv6.networkAddressFromCIDR = function (string) {
  	        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;

  	        try {
  	            cidr = this.parseCIDR(string);
  	            ipInterfaceOctets = cidr[0].toByteArray();
  	            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
  	            octets = [];
  	            i = 0;
  	            while (i < 16) {
  	                // Network address is bitwise AND between ip interface and mask
  	                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
  	                i++;
  	            }

  	            return new this(octets);
  	        } catch (e) {
  	            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);
  	        }
  	    };

  	    // Tries to parse and validate a string with IPv6 address.
  	    // Throws an error if it fails.
  	    ipaddr.IPv6.parse = function (string) {
  	        const addr = this.parser(string);

  	        if (addr.parts === null) {
  	            throw new Error('ipaddr: string is not formatted like an IPv6 Address');
  	        }

  	        return new this(addr.parts, addr.zoneId);
  	    };

  	    ipaddr.IPv6.parseCIDR = function (string) {
  	        let maskLength, match, parsed;

  	        if ((match = string.match(/^(.+)\/(\d+)$/))) {
  	            maskLength = parseInt(match[2]);
  	            if (maskLength >= 0 && maskLength <= 128) {
  	                parsed = [this.parse(match[1]), maskLength];
  	                Object.defineProperty(parsed, 'toString', {
  	                    value: function () {
  	                        return this.join('/');
  	                    }
  	                });
  	                return parsed;
  	            }
  	        }

  	        throw new Error('ipaddr: string is not formatted like an IPv6 CIDR range');
  	    };

  	    // Parse an IPv6 address.
  	    ipaddr.IPv6.parser = function (string) {
  	        let addr, i, match, octet, octets, zoneId;

  	        if ((match = string.match(ipv6Regexes.deprecatedTransitional))) {
  	            return this.parser(`::ffff:${match[1]}`);
  	        }
  	        if (ipv6Regexes.native.test(string)) {
  	            return expandIPv6(string, 8);
  	        }
  	        if ((match = string.match(ipv6Regexes.transitional))) {
  	            zoneId = match[6] || '';
  	            addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);
  	            if (addr.parts) {
  	                octets = [
  	                    parseInt(match[2]),
  	                    parseInt(match[3]),
  	                    parseInt(match[4]),
  	                    parseInt(match[5])
  	                ];
  	                for (i = 0; i < octets.length; i++) {
  	                    octet = octets[i];
  	                    if (!((0 <= octet && octet <= 255))) {
  	                        return null;
  	                    }
  	                }

  	                addr.parts.push(octets[0] << 8 | octets[1]);
  	                addr.parts.push(octets[2] << 8 | octets[3]);
  	                return {
  	                    parts: addr.parts,
  	                    zoneId: addr.zoneId
  	                };
  	            }
  	        }

  	        return null;
  	    };

  	    // A utility function to return subnet mask in IPv6 format given the prefix length
  	    ipaddr.IPv6.subnetMaskFromPrefixLength = function (prefix) {
  	        prefix = parseInt(prefix);
  	        if (prefix < 0 || prefix > 128) {
  	            throw new Error('ipaddr: invalid IPv6 prefix length');
  	        }

  	        const octets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  	        let j = 0;
  	        const filledOctetCount = Math.floor(prefix / 8);

  	        while (j < filledOctetCount) {
  	            octets[j] = 255;
  	            j++;
  	        }

  	        if (filledOctetCount < 16) {
  	            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);
  	        }

  	        return new this(octets);
  	    };

  	    // Try to parse an array in network order (MSB first) for IPv4 and IPv6
  	    ipaddr.fromByteArray = function (bytes) {
  	        const length = bytes.length;

  	        if (length === 4) {
  	            return new ipaddr.IPv4(bytes);
  	        } else if (length === 16) {
  	            return new ipaddr.IPv6(bytes);
  	        } else {
  	            throw new Error('ipaddr: the binary input is neither an IPv6 nor IPv4 address');
  	        }
  	    };

  	    // Checks if the address is valid IP address
  	    ipaddr.isValid = function (string) {
  	        return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
  	    };


  	    // Attempts to parse an IP Address, first through IPv6 then IPv4.
  	    // Throws an error if it could not be parsed.
  	    ipaddr.parse = function (string) {
  	        if (ipaddr.IPv6.isValid(string)) {
  	            return ipaddr.IPv6.parse(string);
  	        } else if (ipaddr.IPv4.isValid(string)) {
  	            return ipaddr.IPv4.parse(string);
  	        } else {
  	            throw new Error('ipaddr: the address has neither IPv6 nor IPv4 format');
  	        }
  	    };

  	    // Attempt to parse CIDR notation, first through IPv6 then IPv4.
  	    // Throws an error if it could not be parsed.
  	    ipaddr.parseCIDR = function (string) {
  	        try {
  	            return ipaddr.IPv6.parseCIDR(string);
  	        } catch (e) {
  	            try {
  	                return ipaddr.IPv4.parseCIDR(string);
  	            } catch (e2) {
  	                throw new Error('ipaddr: the address has neither IPv6 nor IPv4 CIDR format');
  	            }
  	        }
  	    };

  	    // Parse an address and return plain IPv4 address if it is an IPv4-mapped address
  	    ipaddr.process = function (string) {
  	        const addr = this.parse(string);

  	        if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {
  	            return addr.toIPv4Address();
  	        } else {
  	            return addr;
  	        }
  	    };

  	    // An utility function to ease named range matching. See examples below.
  	    // rangeList can contain both IPv4 and IPv6 subnet entries and will not throw errors
  	    // on matching IPv4 addresses to IPv6 ranges or vice versa.
  	    ipaddr.subnetMatch = function (address, rangeList, defaultName) {
  	        let i, rangeName, rangeSubnets, subnet;

  	        if (defaultName === undefined || defaultName === null) {
  	            defaultName = 'unicast';
  	        }

  	        for (rangeName in rangeList) {
  	            if (Object.prototype.hasOwnProperty.call(rangeList, rangeName)) {
  	                rangeSubnets = rangeList[rangeName];
  	                // ECMA5 Array.isArray isn't available everywhere
  	                if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
  	                    rangeSubnets = [rangeSubnets];
  	                }

  	                for (i = 0; i < rangeSubnets.length; i++) {
  	                    subnet = rangeSubnets[i];
  	                    if (address.kind() === subnet[0].kind() && address.match.apply(address, subnet)) {
  	                        return rangeName;
  	                    }
  	                }
  	            }
  	        }

  	        return defaultName;
  	    };

  	    // Export for both the CommonJS and browser-like environment
  	    if (module.exports) {
  	        module.exports = ipaddr;

  	    } else {
  	        root.ipaddr = ipaddr;
  	    }

  	}(commonjsGlobal)); 
  } (ipaddr$1));

  var ipaddrExports = ipaddr$1.exports;
  var ipaddr = /*@__PURE__*/getDefaultExportFromCjs(ipaddrExports);

  const { isValid: is_valid, parse } = ipaddr;
  const PRIVATE_IP_RANGES = [
      '0.0.0.0/8',
      '10.0.0.0/8',
      '100.64.0.0/10',
      '127.0.0.0/8',
      '169.254.0.0/16',
      '172.16.0.0/12',
      '192.0.0.0/24',
      '192.0.0.0/29',
      '192.0.0.8/32',
      '192.0.0.9/32',
      '192.0.0.10/32',
      '192.0.0.170/32',
      '192.0.0.171/32',
      '192.0.2.0/24',
      '192.31.196.0/24',
      '192.52.193.0/24',
      '192.88.99.0/24',
      '192.168.0.0/16',
      '192.175.48.0/24',
      '198.18.0.0/15',
      '198.51.100.0/24',
      '203.0.113.0/24',
      '240.0.0.0/4',
      '255.255.255.255/32'
  ];
  const NETMASK_RANGES = PRIVATE_IP_RANGES.map(ip_range => new Netmask_1(ip_range));
  function ipv4_check(ip_addr) {
      for (let r of NETMASK_RANGES) {
          if (r.contains(ip_addr))
              return true;
      }
      return false;
  }
  function ipv6_check(ip_addr) {
      return /^::$/.test(ip_addr) ||
          /^::1$/.test(ip_addr) ||
          /^::f{4}:([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/.test(ip_addr) ||
          /^::f{4}:0.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/.test(ip_addr) ||
          /^64:ff9b::([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/.test(ip_addr) ||
          /^100::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||
          /^2001::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||
          /^2001:2[0-9a-fA-F]:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||
          /^2001:db8:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||
          /^2002:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||
          /^f[c-d]([0-9a-fA-F]{2,2}):/i.test(ip_addr) ||
          /^fe[8-9a-bA-B][0-9a-fA-F]:/i.test(ip_addr) ||
          /^ff([0-9a-fA-F]{2,2}):/i.test(ip_addr);
  }
  var is_ip_private = (ip) => {
      if (is_valid(ip)) {
          const parsed = parse(ip);
          if (parsed.kind() === 'ipv4')
              return ipv4_check(parsed.toNormalizedString());
          else if (parsed.kind() === 'ipv6')
              return ipv6_check(ip);
      }
      else if (isIP(ip) && ipRegex.v6().test(ip))
          return ipv6_check(ip);
      return undefined;
  };

  /**
   * Returns a connection gater that disallows dialling private addresses by
   * default. Browsers are severely limited in their resource usage so don't
   * waste time trying to dial undiallable addresses.
   */
  function connectionGater(gater = {}) {
      return {
          denyDialPeer: async () => false,
          denyDialMultiaddr: async (multiaddr) => {
              const tuples = multiaddr.stringTuples();
              if (tuples[0][0] === 4 || tuples[0][0] === 41) {
                  return Boolean(is_ip_private(`${tuples[0][1]}`));
              }
              return false;
          },
          denyInboundConnection: async () => false,
          denyOutboundConnection: async () => false,
          denyInboundEncryptedConnection: async () => false,
          denyOutboundEncryptedConnection: async () => false,
          denyInboundUpgradedConnection: async () => false,
          denyOutboundUpgradedConnection: async () => false,
          filterMultiaddrForPeer: async () => true,
          ...gater
      };
  }

  /**
   * Enum Transport Manager Fault Tolerance values
   */
  var FaultTolerance;
  (function (FaultTolerance) {
      /**
       * should be used for failing in any listen circumstance
       */
      FaultTolerance[FaultTolerance["FATAL_ALL"] = 0] = "FATAL_ALL";
      /**
       * should be used for not failing when not listening
       */
      FaultTolerance[FaultTolerance["NO_FATAL"] = 1] = "NO_FATAL";
  })(FaultTolerance || (FaultTolerance = {}));

  /**
   * Check if a given multiaddr has a private address.
   */
  function isPrivate(ma) {
      try {
          const { address } = ma.nodeAddress();
          return Boolean(is_ip_private(address));
      }
      catch {
          return true;
      }
  }

  /**
   * @packageDocumentation
   *
   * Provides strategies to sort a list of multiaddrs.
   *
   * @example
   *
   * ```typescript
   * import { publicAddressesFirst } from '@libp2p/utils/address-sort'
   * import { multiaddr } from '@multformats/multiaddr'
   *
   *
   * const addresses = [
   *   multiaddr('/ip4/127.0.0.1/tcp/9000'),
   *   multiaddr('/ip4/82.41.53.1/tcp/9000')
   * ].sort(publicAddressesFirst)
   *
   * console.info(addresses)
   * // ['/ip4/82.41.53.1/tcp/9000', '/ip4/127.0.0.1/tcp/9000']
   * ```
   */
  /**
   * Compare function for array.sort().
   * This sort aims to move the private addresses to the end of the array.
   * In case of equality, a certified address will come first.
   */
  function publicAddressesFirst(a, b) {
      const isAPrivate = isPrivate(a.multiaddr);
      const isBPrivate = isPrivate(b.multiaddr);
      if (isAPrivate && !isBPrivate) {
          return 1;
      }
      else if (!isAPrivate && isBPrivate) {
          return -1;
      }
      // Check certified?
      if (a.isCertified && !b.isCertified) {
          return -1;
      }
      else if (!a.isCertified && b.isCertified) {
          return 1;
      }
      return 0;
  }

  var receptacle = Receptacle;
  var toMS = requireMs();
  var cache = Receptacle.prototype;
  var counter = new Date() % 1e9;

  function getUID () { return (Math.random() * 1e9 >>> 0) + (counter++) }

  /**
   * Creates a cache with a maximum key size.
   *
   * @constructor
   * @param {Object} options
   * @param {Number} [options.max=Infinity] the maximum number of keys allowed in the cache (lru).
   * @param {Array} [options.items=[]] the default items in the cache.
   */
  function Receptacle (options) {
    options = options || {};
    this.id = options.id || getUID();
    this.max = options.max || Infinity;
    this.items = options.items || [];
    this._lookup = {};
    this.size = this.items.length;
    this.lastModified = new Date(options.lastModified || new Date());

    // Setup initial timers and indexes for the cache.
    for (var item, ttl, i = this.items.length; i--;) {
      item = this.items[i];
      ttl = new Date(item.expires) - new Date();
      this._lookup[item.key] = item;
      if (ttl > 0) this.expire(item.key, ttl);
      else if (ttl <= 0) this.delete(item.key);
    }
  }

  /**
   * Tests if a key is currently in the cache.
   * Does not check if slot is empty.
   *
   * @param {String} key - the key to retrieve from the cache.
   * @return {Boolean}
   */
  cache.has = function (key) {
    return key in this._lookup
  };

  /**
   * Retrieves a key from the cache and marks it as recently used.
   *
   * @param {String} key - the key to retrieve from the cache.
   * @return {*}
   */
  cache.get = function (key) {
    if (!this.has(key)) return null
    var record = this._lookup[key];
    // Update expiry for "refresh" keys
    if (record.refresh) this.expire(key, record.refresh);
    // Move to front of the line.
    this.items.splice(this.items.indexOf(record), 1);
    this.items.push(record);
    return record.value
  };

  /**
   * Retrieves user meta data for a cached item.
   *
   * @param {String} key - the key to retrieve meta data from the cache.
   * @return {*}
   */
  cache.meta = function (key) {
    if (!this.has(key)) return null
    var record = this._lookup[key];
    if (!('meta' in record)) return null
    return record.meta
  };

  /**
   * Puts a key into the cache with an optional expiry time.
   *
   * @param {String} key - the key for the value in the cache.
   * @param {*} value - the value to place at the key.
   * @param {Number} [options.ttl] - a time after which the key will be removed.
   * @return {Receptacle}
   */
  cache.set = function (key, value, options) {
    var oldRecord = this._lookup[key];
    var record = this._lookup[key] = { key: key, value: value };
    // Mark cache as modified.
    this.lastModified = new Date();

    if (oldRecord) {
      // Replace an old key.
      clearTimeout(oldRecord.timeout);
      this.items.splice(this.items.indexOf(oldRecord), 1, record);
    } else {
      // Remove least used item if needed.
      if (this.size >= this.max) this.delete(this.items[0].key);
      // Add a new key.
      this.items.push(record);
      this.size++;
    }

    if (options) {
      // Setup key expiry.
      if ('ttl' in options) this.expire(key, options.ttl);
      // Store user options in the record.
      if ('meta' in options) record.meta = options.meta;
      // Mark a auto refresh key.
      if (options.refresh) record.refresh = options.ttl;
    }

    return this
  };

  /**
   * Deletes an item from the cache.
   *
   * @param {String} key - the key to remove.
   * @return {Receptacle}
   */
  cache.delete = function (key) {
    var record = this._lookup[key];
    if (!record) return false
    this.lastModified = new Date();
    this.items.splice(this.items.indexOf(record), 1);
    clearTimeout(record.timeout);
    delete this._lookup[key];
    this.size--;
    return this
  };

  /**
   * Utility to register a key that will be removed after some time.
   *
   * @param {String} key - the key to remove.
   * @param {Number} [ms] - the timeout before removal.
   * @return {Receptacle}
   */
  cache.expire = function (key, ttl) {
    var ms = ttl || 0;
    var record = this._lookup[key];
    if (!record) return this
    if (typeof ms === 'string') ms = toMS(ttl);
    if (typeof ms !== 'number') throw new TypeError('Expiration time must be a string or number.')
    clearTimeout(record.timeout);
    record.timeout = setTimeout(this.delete.bind(this, record.key), ms);
    record.expires = Number(new Date()) + ms;
    return this
  };

  /**
   * Deletes all items from the cache.
   * @return {Receptacle}
   */
  cache.clear = function () {
    for (var i = this.items.length; i--;) this.delete(this.items[i].key);
    return this
  };

  /**
   * Fixes serialization issues in polyfilled environments.
   * Ensures non-cyclical serialized object.
   */
  cache.toJSON = function () {
    var items = new Array(this.items.length);
    var item;
    for (var i = items.length; i--;) {
      item = this.items[i];
      items[i] = {
        key: item.key,
        meta: item.meta,
        value: item.value,
        expires: item.expires,
        refresh: item.refresh
      };
    }

    return {
      id: this.id,
      max: isFinite(this.max) ? this.max : undefined,
      lastModified: this.lastModified,
      items: items
    }
  };

  var Receptacle$1 = /*@__PURE__*/getDefaultExportFromCjs(receptacle);

  const globalFetch = globalThis.fetch;
  const globalHeaders = globalThis.Headers;

  /**
   * Build fetch resource for request
   */
  function buildResource(serverResolver, hostname, recordType) {
      return `${serverResolver}?name=${hostname}&type=${recordType}`;
  }
  /**
   * Use fetch to find the record
   */
  async function request(resource, signal) {
      const req = await globalFetch(resource, {
          headers: new globalHeaders({
              accept: 'application/dns-json'
          }),
          signal
      });
      const res = await req.json();
      return res;
  }
  /**
   * Creates cache key composed by recordType and hostname
   *
   * @param {string} hostname
   * @param {string} recordType
   */
  function getCacheKey(hostname, recordType) {
      return `${recordType}_${hostname}`;
  }

  const log$g = Object.assign(debug('dns-over-http-resolver'), {
      error: debug('dns-over-http-resolver:error')
  });
  /**
   * DNS over HTTP resolver.
   * Uses a list of servers to resolve DNS records with HTTP requests.
   */
  class Resolver {
      /**
       * @class
       * @param {object} [options]
       * @param {number} [options.maxCache = 100] - maximum number of cached dns records
       * @param {Request} [options.request] - function to return DNSJSON
       */
      constructor(options = {}) {
          this._cache = new Receptacle$1({ max: options?.maxCache ?? 100 });
          this._TXTcache = new Receptacle$1({ max: options?.maxCache ?? 100 });
          this._servers = [
              'https://cloudflare-dns.com/dns-query',
              'https://dns.google/resolve'
          ];
          this._request = options.request ?? request;
          this._abortControllers = [];
      }
      /**
       * Cancel all outstanding DNS queries made by this resolver. Any outstanding
       * requests will be aborted and promises rejected.
       */
      cancel() {
          this._abortControllers.forEach(controller => controller.abort());
      }
      /**
       * Get an array of the IP addresses currently configured for DNS resolution.
       * These addresses are formatted according to RFC 5952. It can include a custom port.
       */
      getServers() {
          return this._servers;
      }
      /**
       * Get a shuffled array of the IP addresses currently configured for DNS resolution.
       * These addresses are formatted according to RFC 5952. It can include a custom port.
       */
      _getShuffledServers() {
          const newServers = [...this._servers];
          for (let i = newServers.length - 1; i > 0; i--) {
              const j = Math.floor(Math.random() * i);
              const temp = newServers[i];
              newServers[i] = newServers[j];
              newServers[j] = temp;
          }
          return newServers;
      }
      /**
       * Sets the IP address and port of servers to be used when performing DNS resolution.
       *
       * @param {string[]} servers - array of RFC 5952 formatted addresses.
       */
      setServers(servers) {
          this._servers = servers;
      }
      /**
       * Uses the DNS protocol to resolve the given host name into the appropriate DNS record
       *
       * @param {string} hostname - host name to resolve
       * @param {string} [rrType = 'A'] - resource record type
       */
      async resolve(hostname, rrType = 'A') {
          switch (rrType) {
              case 'A':
                  return await this.resolve4(hostname);
              case 'AAAA':
                  return await this.resolve6(hostname);
              case 'TXT':
                  return await this.resolveTxt(hostname);
              default:
                  throw new Error(`${rrType} is not supported`);
          }
      }
      /**
       * Uses the DNS protocol to resolve the given host name into IPv4 addresses
       *
       * @param {string} hostname - host name to resolve
       */
      async resolve4(hostname) {
          const recordType = 'A';
          const cached = this._cache.get(getCacheKey(hostname, recordType));
          if (cached != null) {
              return cached;
          }
          let aborted = false;
          for (const server of this._getShuffledServers()) {
              const controller = new AbortController();
              this._abortControllers.push(controller);
              try {
                  const response = await this._request(buildResource(server, hostname, recordType), controller.signal);
                  const data = response.Answer.map(a => a.data);
                  const ttl = Math.min(...response.Answer.map(a => a.TTL));
                  this._cache.set(getCacheKey(hostname, recordType), data, { ttl });
                  return data;
              }
              catch (err) {
                  if (controller.signal.aborted) {
                      aborted = true;
                  }
                  log$g.error(`${server} could not resolve ${hostname} record ${recordType}`);
              }
              finally {
                  this._abortControllers = this._abortControllers.filter(c => c !== controller);
              }
          }
          if (aborted) {
              throw Object.assign(new Error('queryA ECANCELLED'), {
                  code: 'ECANCELLED'
              });
          }
          throw new Error(`Could not resolve ${hostname} record ${recordType}`);
      }
      /**
       * Uses the DNS protocol to resolve the given host name into IPv6 addresses
       *
       * @param {string} hostname - host name to resolve
       */
      async resolve6(hostname) {
          const recordType = 'AAAA';
          const cached = this._cache.get(getCacheKey(hostname, recordType));
          if (cached != null) {
              return cached;
          }
          let aborted = false;
          for (const server of this._getShuffledServers()) {
              const controller = new AbortController();
              this._abortControllers.push(controller);
              try {
                  const response = await this._request(buildResource(server, hostname, recordType), controller.signal);
                  const data = response.Answer.map(a => a.data);
                  const ttl = Math.min(...response.Answer.map(a => a.TTL));
                  this._cache.set(getCacheKey(hostname, recordType), data, { ttl });
                  return data;
              }
              catch (err) {
                  if (controller.signal.aborted) {
                      aborted = true;
                  }
                  log$g.error(`${server} could not resolve ${hostname} record ${recordType}`);
              }
              finally {
                  this._abortControllers = this._abortControllers.filter(c => c !== controller);
              }
          }
          if (aborted) {
              throw Object.assign(new Error('queryAaaa ECANCELLED'), {
                  code: 'ECANCELLED'
              });
          }
          throw new Error(`Could not resolve ${hostname} record ${recordType}`);
      }
      /**
       * Uses the DNS protocol to resolve the given host name into a Text record
       *
       * @param {string} hostname - host name to resolve
       */
      async resolveTxt(hostname) {
          const recordType = 'TXT';
          const cached = this._TXTcache.get(getCacheKey(hostname, recordType));
          if (cached != null) {
              return cached;
          }
          let aborted = false;
          for (const server of this._getShuffledServers()) {
              const controller = new AbortController();
              this._abortControllers.push(controller);
              try {
                  const response = await this._request(buildResource(server, hostname, recordType), controller.signal);
                  const data = response.Answer.map(a => [a.data.replace(/['"]+/g, '')]);
                  const ttl = Math.min(...response.Answer.map(a => a.TTL));
                  this._TXTcache.set(getCacheKey(hostname, recordType), data, { ttl });
                  return data;
              }
              catch (err) {
                  if (controller.signal.aborted) {
                      aborted = true;
                  }
                  log$g.error(`${server} could not resolve ${hostname} record ${recordType}`);
              }
              finally {
                  this._abortControllers = this._abortControllers.filter(c => c !== controller);
              }
          }
          if (aborted) {
              throw Object.assign(new Error('queryTxt ECANCELLED'), {
                  code: 'ECANCELLED'
              });
          }
          throw new Error(`Could not resolve ${hostname} record ${recordType}`);
      }
      clearCache() {
          this._cache.clear();
          this._TXTcache.clear();
      }
  }

  /**
   * @packageDocumentation
   *
   * Provides strategies for resolving multiaddrs.
   */
  const { code: dnsaddrCode } = getProtocol('dnsaddr');
  /**
   * Resolver for dnsaddr addresses.
   *
   * @example
   *
   * ```typescript
   * import { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'
   * import { multiaddr } from '@multiformats/multiaddr'
   *
   * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')
   * const addresses = await dnsaddrResolver(ma)
   *
   * console.info(addresses)
   * //[
   * //  '/dnsaddr/am6.bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',
   * //  '/dnsaddr/ny5.bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',
   * //  '/dnsaddr/sg1.bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',
   * //  '/dnsaddr/sv15.bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN'
   * //]
   * ```
   */
  async function dnsaddrResolver(addr, options = {}) {
      const resolver = new Resolver();
      if (options.signal != null) {
          options.signal.addEventListener('abort', () => {
              resolver.cancel();
          });
      }
      const peerId = addr.getPeerId();
      const [, hostname] = addr.stringTuples().find(([proto]) => proto === dnsaddrCode) ?? [];
      if (hostname == null) {
          throw new Error('No hostname found in multiaddr');
      }
      const records = await resolver.resolveTxt(`_dnsaddr.${hostname}`);
      let addresses = records.flat().map((a) => a.split('=')[1]).filter(Boolean);
      if (peerId != null) {
          addresses = addresses.filter((entry) => entry.includes(peerId));
      }
      return addresses;
  }

  var messages;
  (function (messages) {
      messages["NOT_STARTED_YET"] = "The libp2p node is not started yet";
      messages["DHT_DISABLED"] = "DHT is not available";
      messages["PUBSUB_DISABLED"] = "PubSub is not available";
      messages["CONN_ENCRYPTION_REQUIRED"] = "At least one connection encryption module is required";
      messages["ERR_TRANSPORTS_REQUIRED"] = "At least one transport module is required";
      messages["ERR_PROTECTOR_REQUIRED"] = "Private network is enforced, but no protector was provided";
      messages["NOT_FOUND"] = "Not found";
  })(messages || (messages = {}));
  var codes;
  (function (codes) {
      codes["DHT_DISABLED"] = "ERR_DHT_DISABLED";
      codes["ERR_PUBSUB_DISABLED"] = "ERR_PUBSUB_DISABLED";
      codes["PUBSUB_NOT_STARTED"] = "ERR_PUBSUB_NOT_STARTED";
      codes["DHT_NOT_STARTED"] = "ERR_DHT_NOT_STARTED";
      codes["CONN_ENCRYPTION_REQUIRED"] = "ERR_CONN_ENCRYPTION_REQUIRED";
      codes["ERR_TRANSPORTS_REQUIRED"] = "ERR_TRANSPORTS_REQUIRED";
      codes["ERR_PROTECTOR_REQUIRED"] = "ERR_PROTECTOR_REQUIRED";
      codes["ERR_PEER_DIAL_INTERCEPTED"] = "ERR_PEER_DIAL_INTERCEPTED";
      codes["ERR_CONNECTION_INTERCEPTED"] = "ERR_CONNECTION_INTERCEPTED";
      codes["ERR_INVALID_PROTOCOLS_FOR_STREAM"] = "ERR_INVALID_PROTOCOLS_FOR_STREAM";
      codes["ERR_CONNECTION_ENDED"] = "ERR_CONNECTION_ENDED";
      codes["ERR_CONNECTION_FAILED"] = "ERR_CONNECTION_FAILED";
      codes["ERR_NODE_NOT_STARTED"] = "ERR_NODE_NOT_STARTED";
      codes["ERR_ALREADY_ABORTED"] = "ERR_ALREADY_ABORTED";
      codes["ERR_TOO_MANY_ADDRESSES"] = "ERR_TOO_MANY_ADDRESSES";
      codes["ERR_NO_VALID_ADDRESSES"] = "ERR_NO_VALID_ADDRESSES";
      codes["ERR_RELAYED_DIAL"] = "ERR_RELAYED_DIAL";
      codes["ERR_DIALED_SELF"] = "ERR_DIALED_SELF";
      codes["ERR_DISCOVERED_SELF"] = "ERR_DISCOVERED_SELF";
      codes["ERR_DUPLICATE_TRANSPORT"] = "ERR_DUPLICATE_TRANSPORT";
      codes["ERR_ENCRYPTION_FAILED"] = "ERR_ENCRYPTION_FAILED";
      codes["ERR_HOP_REQUEST_FAILED"] = "ERR_HOP_REQUEST_FAILED";
      codes["ERR_INVALID_KEY"] = "ERR_INVALID_KEY";
      codes["ERR_INVALID_MESSAGE"] = "ERR_INVALID_MESSAGE";
      codes["ERR_INVALID_PARAMETERS"] = "ERR_INVALID_PARAMETERS";
      codes["ERR_INVALID_PEER"] = "ERR_INVALID_PEER";
      codes["ERR_MUXER_UNAVAILABLE"] = "ERR_MUXER_UNAVAILABLE";
      codes["ERR_NOT_FOUND"] = "ERR_NOT_FOUND";
      codes["ERR_TIMEOUT"] = "ERR_TIMEOUT";
      codes["ERR_TRANSPORT_UNAVAILABLE"] = "ERR_TRANSPORT_UNAVAILABLE";
      codes["ERR_TRANSPORT_DIAL_FAILED"] = "ERR_TRANSPORT_DIAL_FAILED";
      codes["ERR_UNSUPPORTED_PROTOCOL"] = "ERR_UNSUPPORTED_PROTOCOL";
      codes["ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED"] = "ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED";
      codes["ERR_INVALID_MULTIADDR"] = "ERR_INVALID_MULTIADDR";
      codes["ERR_SIGNATURE_NOT_VALID"] = "ERR_SIGNATURE_NOT_VALID";
      codes["ERR_FIND_SELF"] = "ERR_FIND_SELF";
      codes["ERR_NO_ROUTERS_AVAILABLE"] = "ERR_NO_ROUTERS_AVAILABLE";
      codes["ERR_CONNECTION_NOT_MULTIPLEXED"] = "ERR_CONNECTION_NOT_MULTIPLEXED";
      codes["ERR_NO_DIAL_TOKENS"] = "ERR_NO_DIAL_TOKENS";
      codes["ERR_KEYCHAIN_REQUIRED"] = "ERR_KEYCHAIN_REQUIRED";
      codes["ERR_INVALID_CMS"] = "ERR_INVALID_CMS";
      codes["ERR_MISSING_KEYS"] = "ERR_MISSING_KEYS";
      codes["ERR_NO_KEY"] = "ERR_NO_KEY";
      codes["ERR_INVALID_KEY_NAME"] = "ERR_INVALID_KEY_NAME";
      codes["ERR_INVALID_KEY_TYPE"] = "ERR_INVALID_KEY_TYPE";
      codes["ERR_KEY_ALREADY_EXISTS"] = "ERR_KEY_ALREADY_EXISTS";
      codes["ERR_INVALID_KEY_SIZE"] = "ERR_INVALID_KEY_SIZE";
      codes["ERR_KEY_NOT_FOUND"] = "ERR_KEY_NOT_FOUND";
      codes["ERR_OLD_KEY_NAME_INVALID"] = "ERR_OLD_KEY_NAME_INVALID";
      codes["ERR_NEW_KEY_NAME_INVALID"] = "ERR_NEW_KEY_NAME_INVALID";
      codes["ERR_PASSWORD_REQUIRED"] = "ERR_PASSWORD_REQUIRED";
      codes["ERR_PEM_REQUIRED"] = "ERR_PEM_REQUIRED";
      codes["ERR_CANNOT_READ_KEY"] = "ERR_CANNOT_READ_KEY";
      codes["ERR_MISSING_PRIVATE_KEY"] = "ERR_MISSING_PRIVATE_KEY";
      codes["ERR_MISSING_PUBLIC_KEY"] = "ERR_MISSING_PUBLIC_KEY";
      codes["ERR_INVALID_OLD_PASS_TYPE"] = "ERR_INVALID_OLD_PASS_TYPE";
      codes["ERR_INVALID_NEW_PASS_TYPE"] = "ERR_INVALID_NEW_PASS_TYPE";
      codes["ERR_INVALID_PASS_LENGTH"] = "ERR_INVALID_PASS_LENGTH";
      codes["ERR_NOT_IMPLEMENTED"] = "ERR_NOT_IMPLEMENTED";
      codes["ERR_WRONG_PING_ACK"] = "ERR_WRONG_PING_ACK";
      codes["ERR_INVALID_RECORD"] = "ERR_INVALID_RECORD";
      codes["ERR_ALREADY_SUCCEEDED"] = "ERR_ALREADY_SUCCEEDED";
      codes["ERR_NO_HANDLER_FOR_PROTOCOL"] = "ERR_NO_HANDLER_FOR_PROTOCOL";
      codes["ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS"] = "ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS";
      codes["ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS"] = "ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS";
      codes["ERR_CONNECTION_DENIED"] = "ERR_CONNECTION_DENIED";
      codes["ERR_TRANSFER_LIMIT_EXCEEDED"] = "ERR_TRANSFER_LIMIT_EXCEEDED";
  })(codes || (codes = {}));

  const DefaultConfig = {
      addresses: {
          listen: [],
          announce: [],
          noAnnounce: [],
          announceFilter: (multiaddrs) => multiaddrs
      },
      connectionManager: {
          resolvers: {
              dnsaddr: dnsaddrResolver
          },
          addressSorter: publicAddressesFirst
      },
      transportManager: {
          faultTolerance: FaultTolerance.FATAL_ALL
      }
  };
  function validateConfig(opts) {
      const resultingOptions = mergeOptions$1(DefaultConfig, opts);
      if (resultingOptions.transports == null || resultingOptions.transports.length < 1) {
          throw new CodeError(messages.ERR_TRANSPORTS_REQUIRED, codes.ERR_TRANSPORTS_REQUIRED);
      }
      if (resultingOptions.connectionProtector === null && globalThis.process?.env?.LIBP2P_FORCE_PNET != null) { // eslint-disable-line no-undef
          throw new CodeError(messages.ERR_PROTECTOR_REQUIRED, codes.ERR_PROTECTOR_REQUIRED);
      }
      return resultingOptions;
  }

  const KEEP_ALIVE = 'keep-alive';

  var RateLimiterAbstract_1 = class RateLimiterAbstract {
    /**
     *
     * @param opts Object Defaults {
     *   points: 4, // Number of points
     *   duration: 1, // Per seconds
     *   blockDuration: 0, // Block if consumed more than points in current duration for blockDuration seconds
     *   execEvenly: false, // Execute allowed actions evenly over duration
     *   execEvenlyMinDelayMs: duration * 1000 / points, // ms, works with execEvenly=true option
     *   keyPrefix: 'rlflx',
     * }
     */
    constructor(opts = {}) {
      this.points = opts.points;
      this.duration = opts.duration;
      this.blockDuration = opts.blockDuration;
      this.execEvenly = opts.execEvenly;
      this.execEvenlyMinDelayMs = opts.execEvenlyMinDelayMs;
      this.keyPrefix = opts.keyPrefix;
    }

    get points() {
      return this._points;
    }

    set points(value) {
      this._points = value >= 0 ? value : 4;
    }

    get duration() {
      return this._duration;
    }

    set duration(value) {
      this._duration = typeof value === 'undefined' ? 1 : value;
    }

    get msDuration() {
      return this.duration * 1000;
    }

    get blockDuration() {
      return this._blockDuration;
    }

    set blockDuration(value) {
      this._blockDuration = typeof value === 'undefined' ? 0 : value;
    }

    get msBlockDuration() {
      return this.blockDuration * 1000;
    }

    get execEvenly() {
      return this._execEvenly;
    }

    set execEvenly(value) {
      this._execEvenly = typeof value === 'undefined' ? false : Boolean(value);
    }

    get execEvenlyMinDelayMs() {
      return this._execEvenlyMinDelayMs;
    }

    set execEvenlyMinDelayMs(value) {
      this._execEvenlyMinDelayMs = typeof value === 'undefined' ? Math.ceil(this.msDuration / this.points) : value;
    }

    get keyPrefix() {
      return this._keyPrefix;
    }

    set keyPrefix(value) {
      if (typeof value === 'undefined') {
        value = 'rlflx';
      }
      if (typeof value !== 'string') {
        throw new Error('keyPrefix must be string');
      }
      this._keyPrefix = value;
    }

    _getKeySecDuration(options = {}) {
      return options && options.customDuration >= 0
        ? options.customDuration
        : this.duration;
    }

    getKey(key) {
      return this.keyPrefix.length > 0 ? `${this.keyPrefix}:${key}` : key;
    }

    parseKey(rlKey) {
      return rlKey.substring(this.keyPrefix.length);
    }

    consume() {
      throw new Error("You have to implement the method 'consume'!");
    }

    penalty() {
      throw new Error("You have to implement the method 'penalty'!");
    }

    reward() {
      throw new Error("You have to implement the method 'reward'!");
    }

    get() {
      throw new Error("You have to implement the method 'get'!");
    }

    set() {
      throw new Error("You have to implement the method 'set'!");
    }

    block() {
      throw new Error("You have to implement the method 'block'!");
    }

    delete() {
      throw new Error("You have to implement the method 'delete'!");
    }
  };

  var BlockedKeys_1$1 = class BlockedKeys {
    constructor() {
      this._keys = {}; // {'key': 1526279430331}
      this._addedKeysAmount = 0;
    }

    collectExpired() {
      const now = Date.now();

      Object.keys(this._keys).forEach((key) => {
        if (this._keys[key] <= now) {
          delete this._keys[key];
        }
      });

      this._addedKeysAmount = Object.keys(this._keys).length;
    }

    /**
     * Add new blocked key
     *
     * @param key String
     * @param sec Number
     */
    add(key, sec) {
      this.addMs(key, sec * 1000);
    }

    /**
     * Add new blocked key for ms
     *
     * @param key String
     * @param ms Number
     */
    addMs(key, ms) {
      this._keys[key] = Date.now() + ms;
      this._addedKeysAmount++;
      if (this._addedKeysAmount > 999) {
        this.collectExpired();
      }
    }

    /**
     * 0 means not blocked
     *
     * @param key
     * @returns {number}
     */
    msBeforeExpire(key) {
      const expire = this._keys[key];

      if (expire && expire >= Date.now()) {
        this.collectExpired();
        const now = Date.now();
        return expire >= now ? expire - now : 0;
      }

      return 0;
    }

    /**
     * If key is not given, delete all data in memory
     * 
     * @param {string|undefined} key
     */
    delete(key) {
      if (key) {
        delete this._keys[key];
      } else {
        Object.keys(this._keys).forEach((key) => {
          delete this._keys[key];
        });
      }
    }
  };

  const BlockedKeys$1 = BlockedKeys_1$1;

  var BlockedKeys_1 = BlockedKeys$1;

  var RateLimiterRes_1 = class RateLimiterRes {
    constructor(remainingPoints, msBeforeNext, consumedPoints, isFirstInDuration) {
      this.remainingPoints = typeof remainingPoints === 'undefined' ? 0 : remainingPoints; // Remaining points in current duration
      this.msBeforeNext = typeof msBeforeNext === 'undefined' ? 0 : msBeforeNext; // Milliseconds before next action
      this.consumedPoints = typeof consumedPoints === 'undefined' ? 0 : consumedPoints; // Consumed points in current duration
      this.isFirstInDuration = typeof isFirstInDuration === 'undefined' ? false : isFirstInDuration;
    }

    get msBeforeNext() {
      return this._msBeforeNext;
    }

    set msBeforeNext(ms) {
      this._msBeforeNext = ms;
      return this;
    }

    get remainingPoints() {
      return this._remainingPoints;
    }

    set remainingPoints(p) {
      this._remainingPoints = p;
      return this;
    }

    get consumedPoints() {
      return this._consumedPoints;
    }

    set consumedPoints(p) {
      this._consumedPoints = p;
      return this;
    }

    get isFirstInDuration() {
      return this._isFirstInDuration;
    }

    set isFirstInDuration(value) {
      this._isFirstInDuration = Boolean(value);
    }

    _getDecoratedProperties() {
      return {
        remainingPoints: this.remainingPoints,
        msBeforeNext: this.msBeforeNext,
        consumedPoints: this.consumedPoints,
        isFirstInDuration: this.isFirstInDuration,
      };
    }

    [Symbol.for("nodejs.util.inspect.custom")]() {
      return this._getDecoratedProperties();
    }

    toString() {
      return JSON.stringify(this._getDecoratedProperties());
    }

    toJSON() {
      return this._getDecoratedProperties();
    }
  };

  const RateLimiterAbstract$3 = RateLimiterAbstract_1;
  const BlockedKeys = BlockedKeys_1;
  const RateLimiterRes$b = RateLimiterRes_1;

  var RateLimiterStoreAbstract_1 = class RateLimiterStoreAbstract extends RateLimiterAbstract$3 {
    /**
     *
     * @param opts Object Defaults {
     *   ... see other in RateLimiterAbstract
     *
     *   inMemoryBlockOnConsumed: 40, // Number of points when key is blocked
     *   inMemoryBlockDuration: 10, // Block duration in seconds
     *   insuranceLimiter: RateLimiterAbstract
     * }
     */
    constructor(opts = {}) {
      super(opts);

      this.inMemoryBlockOnConsumed = opts.inMemoryBlockOnConsumed || opts.inmemoryBlockOnConsumed;
      this.inMemoryBlockDuration = opts.inMemoryBlockDuration || opts.inmemoryBlockDuration;
      this.insuranceLimiter = opts.insuranceLimiter;
      this._inMemoryBlockedKeys = new BlockedKeys();
    }

    get client() {
      return this._client;
    }

    set client(value) {
      if (typeof value === 'undefined') {
        throw new Error('storeClient is not set');
      }
      this._client = value;
    }

    /**
     * Have to be launched after consume
     * It blocks key and execute evenly depending on result from store
     *
     * It uses _getRateLimiterRes function to prepare RateLimiterRes from store result
     *
     * @param resolve
     * @param reject
     * @param rlKey
     * @param changedPoints
     * @param storeResult
     * @param {Object} options
     * @private
     */
    _afterConsume(resolve, reject, rlKey, changedPoints, storeResult, options = {}) {
      const res = this._getRateLimiterRes(rlKey, changedPoints, storeResult);

      if (this.inMemoryBlockOnConsumed > 0 && !(this.inMemoryBlockDuration > 0)
        && res.consumedPoints >= this.inMemoryBlockOnConsumed
      ) {
        this._inMemoryBlockedKeys.addMs(rlKey, res.msBeforeNext);
        if (res.consumedPoints > this.points) {
          return reject(res);
        } else {
          return resolve(res)
        }
      } else if (res.consumedPoints > this.points) {
        let blockPromise = Promise.resolve();
        // Block only first time when consumed more than points
        if (this.blockDuration > 0 && res.consumedPoints <= (this.points + changedPoints)) {
          res.msBeforeNext = this.msBlockDuration;
          blockPromise = this._block(rlKey, res.consumedPoints, this.msBlockDuration, options);
        }

        if (this.inMemoryBlockOnConsumed > 0 && res.consumedPoints >= this.inMemoryBlockOnConsumed) {
          // Block key for this.inMemoryBlockDuration seconds
          this._inMemoryBlockedKeys.add(rlKey, this.inMemoryBlockDuration);
          res.msBeforeNext = this.msInMemoryBlockDuration;
        }

        blockPromise
          .then(() => {
            reject(res);
          })
          .catch((err) => {
            reject(err);
          });
      } else if (this.execEvenly && res.msBeforeNext > 0 && !res.isFirstInDuration) {
        let delay = Math.ceil(res.msBeforeNext / (res.remainingPoints + 2));
        if (delay < this.execEvenlyMinDelayMs) {
          delay = res.consumedPoints * this.execEvenlyMinDelayMs;
        }

        setTimeout(resolve, delay, res);
      } else {
        resolve(res);
      }
    }

    _handleError(err, funcName, resolve, reject, key, data = false, options = {}) {
      if (!(this.insuranceLimiter instanceof RateLimiterAbstract$3)) {
        reject(err);
      } else {
        this.insuranceLimiter[funcName](key, data, options)
          .then((res) => {
            resolve(res);
          })
          .catch((res) => {
            reject(res);
          });
      }
    }

    /**
     * @deprecated Use camelCase version
     * @returns {BlockedKeys}
     * @private
     */
    get _inmemoryBlockedKeys() {
      return this._inMemoryBlockedKeys
    }

    /**
     * @deprecated Use camelCase version
     * @param rlKey
     * @returns {number}
     */
    getInmemoryBlockMsBeforeExpire(rlKey) {
      return this.getInMemoryBlockMsBeforeExpire(rlKey)
    }

    /**
     * @deprecated Use camelCase version
     * @returns {number|number}
     */
    get inmemoryBlockOnConsumed() {
      return this.inMemoryBlockOnConsumed;
    }

    /**
     * @deprecated Use camelCase version
     * @param value
     */
    set inmemoryBlockOnConsumed(value) {
      this.inMemoryBlockOnConsumed = value;
    }

    /**
     * @deprecated Use camelCase version
     * @returns {number|number}
     */
    get inmemoryBlockDuration() {
      return this.inMemoryBlockDuration;
    }

    /**
     * @deprecated Use camelCase version
     * @param value
     */
    set inmemoryBlockDuration(value) {
      this.inMemoryBlockDuration = value;
    }

    /**
     * @deprecated Use camelCase version
     * @returns {number}
     */
    get msInmemoryBlockDuration() {
      return this.inMemoryBlockDuration * 1000;
    }

    getInMemoryBlockMsBeforeExpire(rlKey) {
      if (this.inMemoryBlockOnConsumed > 0) {
        return this._inMemoryBlockedKeys.msBeforeExpire(rlKey);
      }

      return 0;
    }

    get inMemoryBlockOnConsumed() {
      return this._inMemoryBlockOnConsumed;
    }

    set inMemoryBlockOnConsumed(value) {
      this._inMemoryBlockOnConsumed = value ? parseInt(value) : 0;
      if (this.inMemoryBlockOnConsumed > 0 && this.points > this.inMemoryBlockOnConsumed) {
        throw new Error('inMemoryBlockOnConsumed option must be greater or equal "points" option');
      }
    }

    get inMemoryBlockDuration() {
      return this._inMemoryBlockDuration;
    }

    set inMemoryBlockDuration(value) {
      this._inMemoryBlockDuration = value ? parseInt(value) : 0;
      if (this.inMemoryBlockDuration > 0 && this.inMemoryBlockOnConsumed === 0) {
        throw new Error('inMemoryBlockOnConsumed option must be set up');
      }
    }

    get msInMemoryBlockDuration() {
      return this._inMemoryBlockDuration * 1000;
    }

    get insuranceLimiter() {
      return this._insuranceLimiter;
    }

    set insuranceLimiter(value) {
      if (typeof value !== 'undefined' && !(value instanceof RateLimiterAbstract$3)) {
        throw new Error('insuranceLimiter must be instance of RateLimiterAbstract');
      }
      this._insuranceLimiter = value;
      if (this._insuranceLimiter) {
        this._insuranceLimiter.blockDuration = this.blockDuration;
        this._insuranceLimiter.execEvenly = this.execEvenly;
      }
    }

    /**
     * Block any key for secDuration seconds
     *
     * @param key
     * @param secDuration
     * @param {Object} options
     *
     * @return Promise<RateLimiterRes>
     */
    block(key, secDuration, options = {}) {
      const msDuration = secDuration * 1000;
      return this._block(this.getKey(key), this.points + 1, msDuration, options);
    }

    /**
     * Set points by key for any duration
     *
     * @param key
     * @param points
     * @param secDuration
     * @param {Object} options
     *
     * @return Promise<RateLimiterRes>
     */
    set(key, points, secDuration, options = {}) {
      const msDuration = (secDuration >= 0 ? secDuration : this.duration) * 1000;
      return this._block(this.getKey(key), points, msDuration, options);
    }

    /**
     *
     * @param key
     * @param pointsToConsume
     * @param {Object} options
     * @returns Promise<RateLimiterRes>
     */
    consume(key, pointsToConsume = 1, options = {}) {
      return new Promise((resolve, reject) => {
        const rlKey = this.getKey(key);

        const inMemoryBlockMsBeforeExpire = this.getInMemoryBlockMsBeforeExpire(rlKey);
        if (inMemoryBlockMsBeforeExpire > 0) {
          return reject(new RateLimiterRes$b(0, inMemoryBlockMsBeforeExpire));
        }

        this._upsert(rlKey, pointsToConsume, this._getKeySecDuration(options) * 1000, false, options)
          .then((res) => {
            this._afterConsume(resolve, reject, rlKey, pointsToConsume, res);
          })
          .catch((err) => {
            this._handleError(err, 'consume', resolve, reject, key, pointsToConsume, options);
          });
      });
    }

    /**
     *
     * @param key
     * @param points
     * @param {Object} options
     * @returns Promise<RateLimiterRes>
     */
    penalty(key, points = 1, options = {}) {
      const rlKey = this.getKey(key);
      return new Promise((resolve, reject) => {
        this._upsert(rlKey, points, this._getKeySecDuration(options) * 1000, false, options)
          .then((res) => {
            resolve(this._getRateLimiterRes(rlKey, points, res));
          })
          .catch((err) => {
            this._handleError(err, 'penalty', resolve, reject, key, points, options);
          });
      });
    }

    /**
     *
     * @param key
     * @param points
     * @param {Object} options
     * @returns Promise<RateLimiterRes>
     */
    reward(key, points = 1, options = {}) {
      const rlKey = this.getKey(key);
      return new Promise((resolve, reject) => {
        this._upsert(rlKey, -points, this._getKeySecDuration(options) * 1000, false, options)
          .then((res) => {
            resolve(this._getRateLimiterRes(rlKey, -points, res));
          })
          .catch((err) => {
            this._handleError(err, 'reward', resolve, reject, key, points, options);
          });
      });
    }

    /**
     *
     * @param key
     * @param {Object} options
     * @returns Promise<RateLimiterRes>|null
     */
    get(key, options = {}) {
      const rlKey = this.getKey(key);
      return new Promise((resolve, reject) => {
        this._get(rlKey, options)
          .then((res) => {
            if (res === null || typeof res === 'undefined') {
              resolve(null);
            } else {
              resolve(this._getRateLimiterRes(rlKey, 0, res));
            }
          })
          .catch((err) => {
            this._handleError(err, 'get', resolve, reject, key, options);
          });
      });
    }

    /**
     *
     * @param key
     * @param {Object} options
     * @returns Promise<boolean>
     */
    delete(key, options = {}) {
      const rlKey = this.getKey(key);
      return new Promise((resolve, reject) => {
        this._delete(rlKey, options)
          .then((res) => {
            this._inMemoryBlockedKeys.delete(rlKey);
            resolve(res);
          })
          .catch((err) => {
            this._handleError(err, 'delete', resolve, reject, key, options);
          });
      });
    }

    /**
     * Cleanup keys no-matter expired or not.
     */
    deleteInMemoryBlockedAll() {
      this._inMemoryBlockedKeys.delete();
    }

    /**
     * Get RateLimiterRes object filled depending on storeResult, which specific for exact store
     *
     * @param rlKey
     * @param changedPoints
     * @param storeResult
     * @private
     */
    _getRateLimiterRes(rlKey, changedPoints, storeResult) { // eslint-disable-line no-unused-vars
      throw new Error("You have to implement the method '_getRateLimiterRes'!");
    }

    /**
     * Block key for this.msBlockDuration milliseconds
     * Usually, it just prolongs lifetime of key
     *
     * @param rlKey
     * @param initPoints
     * @param msDuration
     * @param {Object} options
     *
     * @return Promise<any>
     */
    _block(rlKey, initPoints, msDuration, options = {}) {
      return new Promise((resolve, reject) => {
        this._upsert(rlKey, initPoints, msDuration, true, options)
          .then(() => {
            resolve(new RateLimiterRes$b(0, msDuration > 0 ? msDuration : -1, initPoints));
          })
          .catch((err) => {
            this._handleError(err, 'block', resolve, reject, this.parseKey(rlKey), msDuration / 1000, options);
          });
      });
    }

    /**
     * Have to be implemented in every limiter
     * Resolve with raw result from Store OR null if rlKey is not set
     * or Reject with error
     *
     * @param rlKey
     * @param {Object} options
     * @private
     *
     * @return Promise<any>
     */
    _get(rlKey, options = {}) { // eslint-disable-line no-unused-vars
      throw new Error("You have to implement the method '_get'!");
    }

    /**
     * Have to be implemented
     * Resolve with true OR false if rlKey doesn't exist
     * or Reject with error
     *
     * @param rlKey
     * @param {Object} options
     * @private
     *
     * @return Promise<any>
     */
    _delete(rlKey, options = {}) { // eslint-disable-line no-unused-vars
      throw new Error("You have to implement the method '_delete'!");
    }

    /**
     * Have to be implemented
     * Resolve with object used for {@link _getRateLimiterRes} to generate {@link RateLimiterRes}
     *
     * @param {string} rlKey
     * @param {number} points
     * @param {number} msDuration
     * @param {boolean} forceExpire
     * @param {Object} options
     * @abstract
     *
     * @return Promise<Object>
     */
    _upsert(rlKey, points, msDuration, forceExpire = false, options = {}) {
      throw new Error("You have to implement the method '_upsert'!");
    }
  };

  const RateLimiterStoreAbstract$4 = RateLimiterStoreAbstract_1;
  const RateLimiterRes$a = RateLimiterRes_1;

  const incrTtlLuaScript = `redis.call('set', KEYS[1], 0, 'EX', ARGV[2], 'NX') \
local consumed = redis.call('incrby', KEYS[1], ARGV[1]) \
local ttl = redis.call('pttl', KEYS[1]) \
if ttl == -1 then \
  redis.call('expire', KEYS[1], ARGV[2]) \
  ttl = 1000 * ARGV[2] \
end \
return {consumed, ttl} \
`;

  let RateLimiterRedis$1 = class RateLimiterRedis extends RateLimiterStoreAbstract$4 {
    /**
     *
     * @param {Object} opts
     * Defaults {
     *   ... see other in RateLimiterStoreAbstract
     *
     *   redis: RedisClient
     *   rejectIfRedisNotReady: boolean = false - reject / invoke insuranceLimiter immediately when redis connection is not "ready"
     * }
     */
    constructor(opts) {
      super(opts);
      if (opts.redis) {
        this.client = opts.redis;
      } else {
        this.client = opts.storeClient;
      }

      this._rejectIfRedisNotReady = !!opts.rejectIfRedisNotReady;

      if (typeof this.client.defineCommand === 'function') {
        this.client.defineCommand("rlflxIncr", {
          numberOfKeys: 1,
          lua: incrTtlLuaScript,
        });
      }
    }

    /**
     * Prevent actual redis call if redis connection is not ready
     * Because of different connection state checks for ioredis and node-redis, only this clients would be actually checked.
     * For any other clients all the requests would be passed directly to redis client
     * @return {boolean}
     * @private
     */
    _isRedisReady() {
      if (!this._rejectIfRedisNotReady) {
        return true;
      }
      // ioredis client
      if (this.client.status && this.client.status !== 'ready') {
        return false;
      }
      // node-redis client
      if (typeof this.client.isReady === 'function' && !this.client.isReady()) {
        return false;
      }
      return true;
    }

    _getRateLimiterRes(rlKey, changedPoints, result) {
      let [consumed, resTtlMs] = result;
      // Support ioredis results format
      if (Array.isArray(consumed)) {
        [, consumed] = consumed;
        [, resTtlMs] = resTtlMs;
      }

      const res = new RateLimiterRes$a();
      res.consumedPoints = parseInt(consumed);
      res.isFirstInDuration = res.consumedPoints === changedPoints;
      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);
      res.msBeforeNext = resTtlMs;

      return res;
    }

    _upsert(rlKey, points, msDuration, forceExpire = false) {
      return new Promise((resolve, reject) => {
        if (!this._isRedisReady()) {
          return reject(new Error('Redis connection is not ready'));
        }

        const secDuration = Math.floor(msDuration / 1000);
        const multi = this.client.multi();
        if (forceExpire) {
          if (secDuration > 0) {
            multi.set(rlKey, points, 'EX', secDuration);
          } else {
            multi.set(rlKey, points);
          }

          multi.pttl(rlKey)
            .exec((err, res) => {
              if (err) {
                return reject(err);
              }

              return resolve(res);
            });
        } else {
          if (secDuration > 0) {
            const incrCallback = function(err, result) {
              if (err) {
                return reject(err);
              }

              return resolve(result);
            };

            if (typeof this.client.rlflxIncr === 'function') {
              this.client.rlflxIncr(rlKey, points, secDuration, incrCallback);
            } else {
              this.client.eval(incrTtlLuaScript, 1, rlKey, points, secDuration, incrCallback);
            }
          } else {
            multi.incrby(rlKey, points)
              .pttl(rlKey)
              .exec((err, res) => {
                if (err) {
                  return reject(err);
                }

                return resolve(res);
              });
          }
        }
      });
    }

    _get(rlKey) {
      return new Promise((resolve, reject) => {
        if (!this._isRedisReady()) {
          return reject(new Error('Redis connection is not ready'));
        }

        this.client
          .multi()
          .get(rlKey)
          .pttl(rlKey)
          .exec((err, res) => {
            if (err) {
              reject(err);
            } else {
              const [points] = res;
              if (points === null) {
                return resolve(null)
              }

              resolve(res);
            }
          });
      });
    }

    _delete(rlKey) {
      return new Promise((resolve, reject) => {
        this.client.del(rlKey, (err, res) => {
          if (err) {
            reject(err);
          } else {
            resolve(res > 0);
          }
        });
      });
    }
  };

  var RateLimiterRedis_1 = RateLimiterRedis$1;

  const RateLimiterStoreAbstract$3 = RateLimiterStoreAbstract_1;
  const RateLimiterRes$9 = RateLimiterRes_1;

  /**
   * Get MongoDB driver version as upsert options differ
   * @params {Object} Client instance
   * @returns {Object} Version Object containing major, feature & minor versions.
   */
  function getDriverVersion(client) {
    try {
      const _client = client.client ? client.client : client;

      const { version } = _client.topology.s.options.metadata.driver;
      const _v = version.split('.').map(v => parseInt(v));

      return {
        major: _v[0],
        feature: _v[1],
        patch: _v[2],
      };
    } catch (err) {
      return { major: 0, feature: 0, patch: 0 };
    }
  }

  let RateLimiterMongo$1 = class RateLimiterMongo extends RateLimiterStoreAbstract$3 {
    /**
     *
     * @param {Object} opts
     * Defaults {
     *   indexKeyPrefix: {attr1: 1, attr2: 1}
     *   ... see other in RateLimiterStoreAbstract
     *
     *   mongo: MongoClient
     * }
     */
    constructor(opts) {
      super(opts);

      this.dbName = opts.dbName;
      this.tableName = opts.tableName;
      this.indexKeyPrefix = opts.indexKeyPrefix;

      if (opts.mongo) {
        this.client = opts.mongo;
      } else {
        this.client = opts.storeClient;
      }
      if (typeof this.client.then === 'function') {
        // If Promise
        this.client
          .then((conn) => {
            this.client = conn;
            this._initCollection();
            this._driverVersion = getDriverVersion(this.client);
          });
      } else {
        this._initCollection();
        this._driverVersion = getDriverVersion(this.client);
      }
    }

    get dbName() {
      return this._dbName;
    }

    set dbName(value) {
      this._dbName = typeof value === 'undefined' ? RateLimiterMongo.getDbName() : value;
    }

    static getDbName() {
      return 'node-rate-limiter-flexible';
    }

    get tableName() {
      return this._tableName;
    }

    set tableName(value) {
      this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;
    }

    get client() {
      return this._client;
    }

    set client(value) {
      if (typeof value === 'undefined') {
        throw new Error('mongo is not set');
      }
      this._client = value;
    }

    get indexKeyPrefix() {
      return this._indexKeyPrefix;
    }

    set indexKeyPrefix(obj) {
      this._indexKeyPrefix = obj || {};
    }

    _initCollection() {
      const db = typeof this.client.db === 'function'
        ? this.client.db(this.dbName)
        : this.client;

      const collection = db.collection(this.tableName);
      collection.createIndex({ expire: -1 }, { expireAfterSeconds: 0 });
      collection.createIndex(Object.assign({}, this.indexKeyPrefix, { key: 1 }), { unique: true });

      this._collection = collection;
    }

    _getRateLimiterRes(rlKey, changedPoints, result) {
      const res = new RateLimiterRes$9();

      let doc;
      if (typeof result.value === 'undefined') {
        doc = result;
      } else {
        doc = result.value;
      }

      res.isFirstInDuration = doc.points === changedPoints;
      res.consumedPoints = doc.points;

      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);
      res.msBeforeNext = doc.expire !== null
        ? Math.max(new Date(doc.expire).getTime() - Date.now(), 0)
        : -1;

      return res;
    }

    _upsert(key, points, msDuration, forceExpire = false, options = {}) {
      if (!this._collection) {
        return Promise.reject(Error('Mongo connection is not established'));
      }

      const docAttrs = options.attrs || {};

      let where;
      let upsertData;
      if (forceExpire) {
        where = { key };
        where = Object.assign(where, docAttrs);
        upsertData = {
          $set: {
            key,
            points,
            expire: msDuration > 0 ? new Date(Date.now() + msDuration) : null,
          },
        };
        upsertData.$set = Object.assign(upsertData.$set, docAttrs);
      } else {
        where = {
          $or: [
            { expire: { $gt: new Date() } },
            { expire: { $eq: null } },
          ],
          key,
        };
        where = Object.assign(where, docAttrs);
        upsertData = {
          $setOnInsert: {
            key,
            expire: msDuration > 0 ? new Date(Date.now() + msDuration) : null,
          },
          $inc: { points },
        };
        upsertData.$setOnInsert = Object.assign(upsertData.$setOnInsert, docAttrs);
      }

      // Options for collection updates differ between driver versions
      const upsertOptions = {
        upsert: true,
      };
      if ((this._driverVersion.major >= 4) ||
          (this._driverVersion.major === 3 &&
            (this._driverVersion.feature >=7) || 
            (this._driverVersion.feature >= 6 && 
                this._driverVersion.patch >= 7 ))) 
      {
        upsertOptions.returnDocument = 'after';
      } else {
        upsertOptions.returnOriginal = false;
      }

      /*
       * 1. Find actual limit and increment points
       * 2. If limit expired, but Mongo doesn't clean doc by TTL yet, try to replace limit doc completely
       * 3. If 2 or more Mongo threads try to insert the new limit doc, only the first succeed
       * 4. Try to upsert from step 1. Actual limit is created now, points are incremented without problems
       */
      return new Promise((resolve, reject) => {
        this._collection.findOneAndUpdate(
          where,
          upsertData,
          upsertOptions
        ).then((res) => {
          resolve(res);
        }).catch((errUpsert) => {
          if (errUpsert && errUpsert.code === 11000) { // E11000 duplicate key error collection
            const replaceWhere = Object.assign({ // try to replace OLD limit doc
              $or: [
                { expire: { $lte: new Date() } },
                { expire: { $eq: null } },
              ],
              key,
            }, docAttrs);

            const replaceTo = {
              $set: Object.assign({
                key,
                points,
                expire: msDuration > 0 ? new Date(Date.now() + msDuration) : null,
              }, docAttrs)
            };

            this._collection.findOneAndUpdate(
              replaceWhere,
              replaceTo,
              upsertOptions
            ).then((res) => {
              resolve(res);
            }).catch((errReplace) => {
              if (errReplace && errReplace.code === 11000) { // E11000 duplicate key error collection
                this._upsert(key, points, msDuration, forceExpire)
                  .then(res => resolve(res))
                  .catch(err => reject(err));
              } else {
                reject(errReplace);
              }
            });
          } else {
            reject(errUpsert);
          }
        });
      });
    }

    _get(rlKey, options = {}) {
      if (!this._collection) {
        return Promise.reject(Error('Mongo connection is not established'));
      }

      const docAttrs = options.attrs || {};

      const where = Object.assign({
        key: rlKey,
        $or: [
          { expire: { $gt: new Date() } },
          { expire: { $eq: null } },
        ],
      }, docAttrs);

      return this._collection.findOne(where);
    }

    _delete(rlKey, options = {}) {
      if (!this._collection) {
        return Promise.reject(Error('Mongo connection is not established'));
      }

      const docAttrs = options.attrs || {};
      const where = Object.assign({ key: rlKey }, docAttrs);

      return this._collection.deleteOne(where)
        .then(res => res.deletedCount > 0);
    }
  };

  var RateLimiterMongo_1 = RateLimiterMongo$1;

  const RateLimiterStoreAbstract$2 = RateLimiterStoreAbstract_1;
  const RateLimiterRes$8 = RateLimiterRes_1;

  let RateLimiterMySQL$1 = class RateLimiterMySQL extends RateLimiterStoreAbstract$2 {
    /**
     * @callback callback
     * @param {Object} err
     *
     * @param {Object} opts
     * @param {callback} cb
     * Defaults {
     *   ... see other in RateLimiterStoreAbstract
     *
     *   storeClient: anySqlClient,
     *   storeType: 'knex', // required only for Knex instance
     *   dbName: 'string',
     *   tableName: 'string',
     * }
     */
    constructor(opts, cb = null) {
      super(opts);

      this.client = opts.storeClient;
      this.clientType = opts.storeType;

      this.dbName = opts.dbName;
      this.tableName = opts.tableName;

      this.clearExpiredByTimeout = opts.clearExpiredByTimeout;

      this.tableCreated = opts.tableCreated;
      if (!this.tableCreated) {
        this._createDbAndTable()
          .then(() => {
            this.tableCreated = true;
            if (this.clearExpiredByTimeout) {
              this._clearExpiredHourAgo();
            }
            if (typeof cb === 'function') {
              cb();
            }
          })
          .catch((err) => {
            if (typeof cb === 'function') {
              cb(err);
            } else {
              throw err;
            }
          });
      } else {
        if (this.clearExpiredByTimeout) {
          this._clearExpiredHourAgo();
        }
        if (typeof cb === 'function') {
          cb();
        }
      }
    }

    clearExpired(expire) {
      return new Promise((resolve) => {
        this._getConnection()
          .then((conn) => {
            conn.query(`DELETE FROM ??.?? WHERE expire < ?`, [this.dbName, this.tableName, expire], () => {
              this._releaseConnection(conn);
              resolve();
            });
          })
          .catch(() => {
            resolve();
          });
      });
    }

    _clearExpiredHourAgo() {
      if (this._clearExpiredTimeoutId) {
        clearTimeout(this._clearExpiredTimeoutId);
      }
      this._clearExpiredTimeoutId = setTimeout(() => {
        this.clearExpired(Date.now() - 3600000) // Never rejected
          .then(() => {
            this._clearExpiredHourAgo();
          });
      }, 300000);
      this._clearExpiredTimeoutId.unref();
    }

    /**
     *
     * @return Promise<any>
     * @private
     */
    _getConnection() {
      switch (this.clientType) {
        case 'pool':
          return new Promise((resolve, reject) => {
            this.client.getConnection((errConn, conn) => {
              if (errConn) {
                return reject(errConn);
              }

              resolve(conn);
            });
          });
        case 'sequelize':
          return this.client.connectionManager.getConnection();
        case 'knex':
          return this.client.client.acquireConnection();
        default:
          return Promise.resolve(this.client);
      }
    }

    _releaseConnection(conn) {
      switch (this.clientType) {
        case 'pool':
          return conn.release();
        case 'sequelize':
          return this.client.connectionManager.releaseConnection(conn);
        case 'knex':
          return this.client.client.releaseConnection(conn);
        default:
          return true;
      }
    }

    /**
     *
     * @returns {Promise<any>}
     * @private
     */
    _createDbAndTable() {
      return new Promise((resolve, reject) => {
        this._getConnection()
          .then((conn) => {
            conn.query(`CREATE DATABASE IF NOT EXISTS \`${this.dbName}\`;`, (errDb) => {
              if (errDb) {
                this._releaseConnection(conn);
                return reject(errDb);
              }
              conn.query(this._getCreateTableStmt(), (err) => {
                if (err) {
                  this._releaseConnection(conn);
                  return reject(err);
                }
                this._releaseConnection(conn);
                resolve();
              });
            });
          })
          .catch((err) => {
            reject(err);
          });
      });
    }

    _getCreateTableStmt() {
      return `CREATE TABLE IF NOT EXISTS \`${this.dbName}\`.\`${this.tableName}\` (` +
        '`key` VARCHAR(255) CHARACTER SET utf8 NOT NULL,' +
        '`points` INT(9) NOT NULL default 0,' +
        '`expire` BIGINT UNSIGNED,' +
        'PRIMARY KEY (`key`)' +
        ') ENGINE = INNODB;';
    }

    get clientType() {
      return this._clientType;
    }

    set clientType(value) {
      if (typeof value === 'undefined') {
        if (this.client.constructor.name === 'Connection') {
          value = 'connection';
        } else if (this.client.constructor.name === 'Pool') {
          value = 'pool';
        } else if (this.client.constructor.name === 'Sequelize') {
          value = 'sequelize';
        } else {
          throw new Error('storeType is not defined');
        }
      }
      this._clientType = value.toLowerCase();
    }

    get dbName() {
      return this._dbName;
    }

    set dbName(value) {
      this._dbName = typeof value === 'undefined' ? 'rtlmtrflx' : value;
    }

    get tableName() {
      return this._tableName;
    }

    set tableName(value) {
      this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;
    }

    get tableCreated() {
      return this._tableCreated
    }

    set tableCreated(value) {
      this._tableCreated = typeof value === 'undefined' ? false : !!value;
    }

    get clearExpiredByTimeout() {
      return this._clearExpiredByTimeout;
    }

    set clearExpiredByTimeout(value) {
      this._clearExpiredByTimeout = typeof value === 'undefined' ? true : Boolean(value);
    }

    _getRateLimiterRes(rlKey, changedPoints, result) {
      const res = new RateLimiterRes$8();
      const [row] = result;

      res.isFirstInDuration = changedPoints === row.points;
      res.consumedPoints = res.isFirstInDuration ? changedPoints : row.points;

      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);
      res.msBeforeNext = row.expire
        ? Math.max(row.expire - Date.now(), 0)
        : -1;

      return res;
    }

    _upsertTransaction(conn, key, points, msDuration, forceExpire) {
      return new Promise((resolve, reject) => {
        conn.query('BEGIN', (errBegin) => {
          if (errBegin) {
            conn.rollback();

            return reject(errBegin);
          }

          const dateNow = Date.now();
          const newExpire = msDuration > 0 ? dateNow + msDuration : null;

          let q;
          let values;
          if (forceExpire) {
            q = `INSERT INTO ??.?? VALUES (?, ?, ?)
          ON DUPLICATE KEY UPDATE 
            points = ?, 
            expire = ?;`;
            values = [
              this.dbName, this.tableName, key, points, newExpire,
              points,
              newExpire,
            ];
          } else {
            q = `INSERT INTO ??.?? VALUES (?, ?, ?)
          ON DUPLICATE KEY UPDATE 
            points = IF(expire <= ?, ?, points + (?)), 
            expire = IF(expire <= ?, ?, expire);`;
            values = [
              this.dbName, this.tableName, key, points, newExpire,
              dateNow, points, points,
              dateNow, newExpire,
            ];
          }

          conn.query(q, values, (errUpsert) => {
            if (errUpsert) {
              conn.rollback();

              return reject(errUpsert);
            }
            conn.query('SELECT points, expire FROM ??.?? WHERE `key` = ?;', [this.dbName, this.tableName, key], (errSelect, res) => {
              if (errSelect) {
                conn.rollback();

                return reject(errSelect);
              }

              conn.query('COMMIT', (err) => {
                if (err) {
                  conn.rollback();

                  return reject(err);
                }

                resolve(res);
              });
            });
          });
        });
      });
    }

    _upsert(key, points, msDuration, forceExpire = false) {
      if (!this.tableCreated) {
        return Promise.reject(Error('Table is not created yet'));
      }

      return new Promise((resolve, reject) => {
        this._getConnection()
          .then((conn) => {
            this._upsertTransaction(conn, key, points, msDuration, forceExpire)
              .then((res) => {
                resolve(res);
                this._releaseConnection(conn);
              })
              .catch((err) => {
                reject(err);
                this._releaseConnection(conn);
              });
          })
          .catch((err) => {
            reject(err);
          });
      });
    }

    _get(rlKey) {
      if (!this.tableCreated) {
        return Promise.reject(Error('Table is not created yet'));
      }

      return new Promise((resolve, reject) => {
        this._getConnection()
          .then((conn) => {
            conn.query(
              'SELECT points, expire FROM ??.?? WHERE `key` = ? AND (`expire` > ? OR `expire` IS NULL)',
              [this.dbName, this.tableName, rlKey, Date.now()],
              (err, res) => {
                if (err) {
                  reject(err);
                } else if (res.length === 0) {
                  resolve(null);
                } else {
                  resolve(res);
                }

                this._releaseConnection(conn);
              } // eslint-disable-line
            );
          })
          .catch((err) => {
            reject(err);
          });
      });
    }

    _delete(rlKey) {
      if (!this.tableCreated) {
        return Promise.reject(Error('Table is not created yet'));
      }

      return new Promise((resolve, reject) => {
        this._getConnection()
          .then((conn) => {
            conn.query(
              'DELETE FROM ??.?? WHERE `key` = ?',
              [this.dbName, this.tableName, rlKey],
              (err, res) => {
                if (err) {
                  reject(err);
                } else {
                  resolve(res.affectedRows > 0);
                }

                this._releaseConnection(conn);
              } // eslint-disable-line
            );
          })
          .catch((err) => {
            reject(err);
          });
      });
    }
  };

  var RateLimiterMySQL_1 = RateLimiterMySQL$1;

  const RateLimiterStoreAbstract$1 = RateLimiterStoreAbstract_1;
  const RateLimiterRes$7 = RateLimiterRes_1;

  let RateLimiterPostgres$1 = class RateLimiterPostgres extends RateLimiterStoreAbstract$1 {
    /**
     * @callback callback
     * @param {Object} err
     *
     * @param {Object} opts
     * @param {callback} cb
     * Defaults {
     *   ... see other in RateLimiterStoreAbstract
     *
     *   storeClient: postgresClient,
     *   storeType: 'knex', // required only for Knex instance
     *   tableName: 'string',
     * }
     */
    constructor(opts, cb = null) {
      super(opts);

      this.client = opts.storeClient;
      this.clientType = opts.storeType;

      this.tableName = opts.tableName;

      this.clearExpiredByTimeout = opts.clearExpiredByTimeout;

      this.tableCreated = opts.tableCreated;
      if (!this.tableCreated) {
        this._createTable()
          .then(() => {
            this.tableCreated = true;
            if (this.clearExpiredByTimeout) {
              this._clearExpiredHourAgo();
            }
            if (typeof cb === 'function') {
              cb();
            }
          })
          .catch((err) => {
            if (typeof cb === 'function') {
              cb(err);
            } else {
              throw err;
            }
          });
      } else {
        if (typeof cb === 'function') {
          cb();
        }
      }
    }

    clearExpired(expire) {
      return new Promise((resolve) => {
        const q = {
          name: 'rlflx-clear-expired',
          text: `DELETE FROM ${this.tableName} WHERE expire < $1`,
          values: [expire],
        };
        this._query(q)
          .then(() => {
            resolve();
          })
          .catch(() => {
            // Deleting expired query is not critical
            resolve();
          });
      });
    }

    /**
     * Delete all rows expired 1 hour ago once per 5 minutes
     *
     * @private
     */
    _clearExpiredHourAgo() {
      if (this._clearExpiredTimeoutId) {
        clearTimeout(this._clearExpiredTimeoutId);
      }
      this._clearExpiredTimeoutId = setTimeout(() => {
        this.clearExpired(Date.now() - 3600000) // Never rejected
          .then(() => {
            this._clearExpiredHourAgo();
          });
      }, 300000);
      this._clearExpiredTimeoutId.unref();
    }

    /**
     *
     * @return Promise<any>
     * @private
     */
    _getConnection() {
      switch (this.clientType) {
        case 'pool':
          return Promise.resolve(this.client);
        case 'sequelize':
          return this.client.connectionManager.getConnection();
        case 'knex':
          return this.client.client.acquireConnection();
        case 'typeorm':
          return Promise.resolve(this.client.driver.master);
        default:
          return Promise.resolve(this.client);
      }
    }

    _releaseConnection(conn) {
      switch (this.clientType) {
        case 'pool':
          return true;
        case 'sequelize':
          return this.client.connectionManager.releaseConnection(conn);
        case 'knex':
          return this.client.client.releaseConnection(conn);
        case 'typeorm':
          return true;
        default:
          return true;
      }
    }

    /**
     *
     * @returns {Promise<any>}
     * @private
     */
    _createTable() {
      return new Promise((resolve, reject) => {
        this._query({
          text: this._getCreateTableStmt(),
        })
          .then(() => {
            resolve();
          })
          .catch((err) => {
            if (err.code === '23505') {
              // Error: duplicate key value violates unique constraint "pg_type_typname_nsp_index"
              // Postgres doesn't handle concurrent table creation
              // It is supposed, that table is created by another worker
              resolve();
            } else {
              reject(err);
            }
          });
      });
    }

    _getCreateTableStmt() {
      return `CREATE TABLE IF NOT EXISTS ${this.tableName} ( 
      key varchar(255) PRIMARY KEY,
      points integer NOT NULL DEFAULT 0,
      expire bigint
    );`;
    }

    get clientType() {
      return this._clientType;
    }

    set clientType(value) {
      const constructorName = this.client.constructor.name;

      if (typeof value === 'undefined') {
        if (constructorName === 'Client') {
          value = 'client';
        } else if (
          constructorName === 'Pool' ||
          constructorName === 'BoundPool'
        ) {
          value = 'pool';
        } else if (constructorName === 'Sequelize') {
          value = 'sequelize';
        } else {
          throw new Error('storeType is not defined');
        }
      }

      this._clientType = value.toLowerCase();
    }

    get tableName() {
      return this._tableName;
    }

    set tableName(value) {
      this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;
    }

    get tableCreated() {
      return this._tableCreated
    }

    set tableCreated(value) {
      this._tableCreated = typeof value === 'undefined' ? false : !!value;
    }

    get clearExpiredByTimeout() {
      return this._clearExpiredByTimeout;
    }

    set clearExpiredByTimeout(value) {
      this._clearExpiredByTimeout = typeof value === 'undefined' ? true : Boolean(value);
    }

    _getRateLimiterRes(rlKey, changedPoints, result) {
      const res = new RateLimiterRes$7();
      const row = result.rows[0];

      res.isFirstInDuration = changedPoints === row.points;
      res.consumedPoints = res.isFirstInDuration ? changedPoints : row.points;

      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);
      res.msBeforeNext = row.expire
        ? Math.max(row.expire - Date.now(), 0)
        : -1;

      return res;
    }

    _query(q) {
      const prefix = this.tableName.toLowerCase();
      const queryObj = { name: `${prefix}:${q.name}`, text: q.text, values: q.values };
      return new Promise((resolve, reject) => {
        this._getConnection()
          .then((conn) => {
            conn.query(queryObj)
              .then((res) => {
                resolve(res);
                this._releaseConnection(conn);
              })
              .catch((err) => {
                reject(err);
                this._releaseConnection(conn);
              });
          })
          .catch((err) => {
            reject(err);
          });
      });
    }

    _upsert(key, points, msDuration, forceExpire = false) {
      if (!this.tableCreated) {
        return Promise.reject(Error('Table is not created yet'));
      }

      const newExpire = msDuration > 0 ? Date.now() + msDuration : null;
      const expireQ = forceExpire
        ? ' $3 '
        : ` CASE
             WHEN ${this.tableName}.expire <= $4 THEN $3
             ELSE ${this.tableName}.expire
            END `;

      return this._query({
        name: forceExpire ? 'rlflx-upsert-force' : 'rlflx-upsert',
        text: `
            INSERT INTO ${this.tableName} VALUES ($1, $2, $3)
              ON CONFLICT(key) DO UPDATE SET
                points = CASE
                          WHEN (${this.tableName}.expire <= $4 OR 1=${forceExpire ? 1 : 0}) THEN $2
                          ELSE ${this.tableName}.points + ($2)
                         END,
                expire = ${expireQ}
            RETURNING points, expire;`,
        values: [key, points, newExpire, Date.now()],
      });
    }

    _get(rlKey) {
      if (!this.tableCreated) {
        return Promise.reject(Error('Table is not created yet'));
      }

      return new Promise((resolve, reject) => {
        this._query({
          name: 'rlflx-get',
          text: `
            SELECT points, expire FROM ${this.tableName} WHERE key = $1 AND (expire > $2 OR expire IS NULL);`,
          values: [rlKey, Date.now()],
        })
          .then((res) => {
            if (res.rowCount === 0) {
              res = null;
            }
            resolve(res);
          })
          .catch((err) => {
            reject(err);
          });
      });
    }

    _delete(rlKey) {
      if (!this.tableCreated) {
        return Promise.reject(Error('Table is not created yet'));
      }

      return this._query({
        name: 'rlflx-delete',
        text: `DELETE FROM ${this.tableName} WHERE key = $1`,
        values: [rlKey],
      })
        .then(res => res.rowCount > 0);
    }
  };

  var RateLimiterPostgres_1 = RateLimiterPostgres$1;

  var Record_1 = class Record {
    /**
     *
     * @param value int
     * @param expiresAt Date|int
     * @param timeoutId
     */
    constructor(value, expiresAt, timeoutId = null) {
      this.value = value;
      this.expiresAt = expiresAt;
      this.timeoutId = timeoutId;
    }

    get value() {
      return this._value;
    }

    set value(value) {
      this._value = parseInt(value);
    }

    get expiresAt() {
      return this._expiresAt;
    }

    set expiresAt(value) {
      if (!(value instanceof Date) && Number.isInteger(value)) {
        value = new Date(value);
      }
      this._expiresAt = value;
    }

    get timeoutId() {
      return this._timeoutId;
    }

    set timeoutId(value) {
      this._timeoutId = value;
    }
  };

  const Record = Record_1;
  const RateLimiterRes$6 = RateLimiterRes_1;

  var MemoryStorage_1 = class MemoryStorage {
    constructor() {
      /**
       * @type {Object.<string, Record>}
       * @private
       */
      this._storage = {};
    }

    incrby(key, value, durationSec) {
      if (this._storage[key]) {
        const msBeforeExpires = this._storage[key].expiresAt
          ? this._storage[key].expiresAt.getTime() - new Date().getTime()
          : -1;
        if (msBeforeExpires !== 0) {
          // Change value
          this._storage[key].value = this._storage[key].value + value;

          return new RateLimiterRes$6(0, msBeforeExpires, this._storage[key].value, false);
        }

        return this.set(key, value, durationSec);
      }
      return this.set(key, value, durationSec);
    }

    set(key, value, durationSec) {
      const durationMs = durationSec * 1000;

      if (this._storage[key] && this._storage[key].timeoutId) {
        clearTimeout(this._storage[key].timeoutId);
      }

      this._storage[key] = new Record(
        value,
        durationMs > 0 ? new Date(Date.now() + durationMs) : null
      );
      if (durationMs > 0) {
        this._storage[key].timeoutId = setTimeout(() => {
          delete this._storage[key];
        }, durationMs);
        if (this._storage[key].timeoutId.unref) {
          this._storage[key].timeoutId.unref();
        }
      }

      return new RateLimiterRes$6(0, durationMs === 0 ? -1 : durationMs, this._storage[key].value, true);
    }

    /**
     *
     * @param key
     * @returns {*}
     */
    get(key) {
      if (this._storage[key]) {
        const msBeforeExpires = this._storage[key].expiresAt
          ? this._storage[key].expiresAt.getTime() - new Date().getTime()
          : -1;
        return new RateLimiterRes$6(0, msBeforeExpires, this._storage[key].value, false);
      }
      return null;
    }

    /**
     *
     * @param key
     * @returns {boolean}
     */
    delete(key) {
      if (this._storage[key]) {
        if (this._storage[key].timeoutId) {
          clearTimeout(this._storage[key].timeoutId);
        }
        delete this._storage[key];
        return true;
      }
      return false;
    }
  };

  const RateLimiterAbstract$2 = RateLimiterAbstract_1;
  const MemoryStorage = MemoryStorage_1;
  const RateLimiterRes$5 = RateLimiterRes_1;

  let RateLimiterMemory$2 = class RateLimiterMemory extends RateLimiterAbstract$2 {
    constructor(opts = {}) {
      super(opts);

      this._memoryStorage = new MemoryStorage();
    }
    /**
     *
     * @param key
     * @param pointsToConsume
     * @param {Object} options
     * @returns {Promise<RateLimiterRes>}
     */
    consume(key, pointsToConsume = 1, options = {}) {
      return new Promise((resolve, reject) => {
        const rlKey = this.getKey(key);
        const secDuration = this._getKeySecDuration(options);
        let res = this._memoryStorage.incrby(rlKey, pointsToConsume, secDuration);
        res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);

        if (res.consumedPoints > this.points) {
          // Block only first time when consumed more than points
          if (this.blockDuration > 0 && res.consumedPoints <= (this.points + pointsToConsume)) {
            // Block key
            res = this._memoryStorage.set(rlKey, res.consumedPoints, this.blockDuration);
          }
          reject(res);
        } else if (this.execEvenly && res.msBeforeNext > 0 && !res.isFirstInDuration) {
          // Execute evenly
          let delay = Math.ceil(res.msBeforeNext / (res.remainingPoints + 2));
          if (delay < this.execEvenlyMinDelayMs) {
            delay = res.consumedPoints * this.execEvenlyMinDelayMs;
          }

          setTimeout(resolve, delay, res);
        } else {
          resolve(res);
        }
      });
    }

    penalty(key, points = 1, options = {}) {
      const rlKey = this.getKey(key);
      return new Promise((resolve) => {
        const secDuration = this._getKeySecDuration(options);
        const res = this._memoryStorage.incrby(rlKey, points, secDuration);
        res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);
        resolve(res);
      });
    }

    reward(key, points = 1, options = {}) {
      const rlKey = this.getKey(key);
      return new Promise((resolve) => {
        const secDuration = this._getKeySecDuration(options);
        const res = this._memoryStorage.incrby(rlKey, -points, secDuration);
        res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);
        resolve(res);
      });
    }

    /**
     * Block any key for secDuration seconds
     *
     * @param key
     * @param secDuration
     */
    block(key, secDuration) {
      const msDuration = secDuration * 1000;
      const initPoints = this.points + 1;

      this._memoryStorage.set(this.getKey(key), initPoints, secDuration);
      return Promise.resolve(
        new RateLimiterRes$5(0, msDuration === 0 ? -1 : msDuration, initPoints)
      );
    }

    set(key, points, secDuration) {
      const msDuration = (secDuration >= 0 ? secDuration : this.duration) * 1000;

      this._memoryStorage.set(this.getKey(key), points, secDuration);
      return Promise.resolve(
        new RateLimiterRes$5(0, msDuration === 0 ? -1 : msDuration, points)
      );
    }

    get(key) {
      const res = this._memoryStorage.get(this.getKey(key));
      if (res !== null) {
        res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);
      }

      return Promise.resolve(res);
    }

    delete(key) {
      return Promise.resolve(this._memoryStorage.delete(this.getKey(key)));
    }
  };

  var RateLimiterMemory_1 = RateLimiterMemory$2;

  /**
   * Implements rate limiting in cluster using built-in IPC
   *
   * Two classes are described here: master and worker
   * Master have to be create in the master process without any options.
   * Any number of rate limiters can be created in workers, but each rate limiter must be with unique keyPrefix
   *
   * Workflow:
   * 1. master rate limiter created in master process
   * 2. worker rate limiter sends 'init' message with necessary options during creating
   * 3. master receives options and adds new rate limiter by keyPrefix if it isn't created yet
   * 4. master sends 'init' back to worker's rate limiter
   * 5. worker can process requests immediately,
   *    but they will be postponed by 'workerWaitInit' until master sends 'init' to worker
   * 6. every request to worker rate limiter creates a promise
   * 7. if master doesn't response for 'timeout', promise is rejected
   * 8. master sends 'resolve' or 'reject' command to worker
   * 9. worker resolves or rejects promise depending on message from master
   *
   */

  const cluster = require$$1;
  const crypto$1 = require$$1;
  const RateLimiterAbstract$1 = RateLimiterAbstract_1;
  const RateLimiterMemory$1 = RateLimiterMemory_1;
  const RateLimiterRes$4 = RateLimiterRes_1;

  const channel = 'rate_limiter_flexible';
  let masterInstance = null;

  const masterSendToWorker = function (worker, msg, type, res) {
    let data;
    if (res === null || res === true || res === false) {
      data = res;
    } else {
      data = {
        remainingPoints: res.remainingPoints,
        msBeforeNext: res.msBeforeNext,
        consumedPoints: res.consumedPoints,
        isFirstInDuration: res.isFirstInDuration,
      };
    }
    worker.send({
      channel,
      keyPrefix: msg.keyPrefix, // which rate limiter exactly
      promiseId: msg.promiseId,
      type,
      data,
    });
  };

  const workerWaitInit = function (payload) {
    setTimeout(() => {
      if (this._initiated) {
        process.send(payload);
        // Promise will be removed by timeout if too long
      } else if (typeof this._promises[payload.promiseId] !== 'undefined') {
        workerWaitInit.call(this, payload);
      }
    }, 30);
  };

  const workerSendToMaster = function (func, promiseId, key, arg, opts) {
    const payload = {
      channel,
      keyPrefix: this.keyPrefix,
      func,
      promiseId,
      data: {
        key,
        arg,
        opts,
      },
    };

    if (!this._initiated) {
      // Wait init before sending messages to master
      workerWaitInit.call(this, payload);
    } else {
      process.send(payload);
    }
  };

  const masterProcessMsg = function (worker, msg) {
    if (!msg || msg.channel !== channel || typeof this._rateLimiters[msg.keyPrefix] === 'undefined') {
      return false;
    }

    let promise;

    switch (msg.func) {
      case 'consume':
        promise = this._rateLimiters[msg.keyPrefix].consume(msg.data.key, msg.data.arg, msg.data.opts);
        break;
      case 'penalty':
        promise = this._rateLimiters[msg.keyPrefix].penalty(msg.data.key, msg.data.arg, msg.data.opts);
        break;
      case 'reward':
        promise = this._rateLimiters[msg.keyPrefix].reward(msg.data.key, msg.data.arg, msg.data.opts);
        break;
      case 'block':
        promise = this._rateLimiters[msg.keyPrefix].block(msg.data.key, msg.data.arg, msg.data.opts);
        break;
      case 'get':
        promise = this._rateLimiters[msg.keyPrefix].get(msg.data.key, msg.data.opts);
        break;
      case 'delete':
        promise = this._rateLimiters[msg.keyPrefix].delete(msg.data.key, msg.data.opts);
        break;
      default:
        return false;
    }

    if (promise) {
      promise
        .then((res) => {
          masterSendToWorker(worker, msg, 'resolve', res);
        })
        .catch((rejRes) => {
          masterSendToWorker(worker, msg, 'reject', rejRes);
        });
    }
  };

  const workerProcessMsg = function (msg) {
    if (!msg || msg.channel !== channel || msg.keyPrefix !== this.keyPrefix) {
      return false;
    }

    if (this._promises[msg.promiseId]) {
      clearTimeout(this._promises[msg.promiseId].timeoutId);
      let res;
      if (msg.data === null || msg.data === true || msg.data === false) {
        res = msg.data;
      } else {
        res = new RateLimiterRes$4(
          msg.data.remainingPoints,
          msg.data.msBeforeNext,
          msg.data.consumedPoints,
          msg.data.isFirstInDuration // eslint-disable-line comma-dangle
        );
      }

      switch (msg.type) {
        case 'resolve':
          this._promises[msg.promiseId].resolve(res);
          break;
        case 'reject':
          this._promises[msg.promiseId].reject(res);
          break;
        default:
          throw new Error(`RateLimiterCluster: no such message type '${msg.type}'`);
      }

      delete this._promises[msg.promiseId];
    }
  };
  /**
   * Prepare options to send to master
   * Master will create rate limiter depending on options
   *
   * @returns {{points: *, duration: *, blockDuration: *, execEvenly: *, execEvenlyMinDelayMs: *, keyPrefix: *}}
   */
  const getOpts = function () {
    return {
      points: this.points,
      duration: this.duration,
      blockDuration: this.blockDuration,
      execEvenly: this.execEvenly,
      execEvenlyMinDelayMs: this.execEvenlyMinDelayMs,
      keyPrefix: this.keyPrefix,
    };
  };

  const savePromise = function (resolve, reject) {
    const hrtime = process.hrtime();
    let promiseId = hrtime[0].toString() + hrtime[1].toString();

    if (typeof this._promises[promiseId] !== 'undefined') {
      promiseId += crypto$1.randomBytes(12).toString('base64');
    }

    this._promises[promiseId] = {
      resolve,
      reject,
      timeoutId: setTimeout(() => {
        delete this._promises[promiseId];
        reject(new Error('RateLimiterCluster timeout: no answer from master in time'));
      }, this.timeoutMs),
    };

    return promiseId;
  };

  let RateLimiterClusterMaster$1 = class RateLimiterClusterMaster {
    constructor() {
      if (masterInstance) {
        return masterInstance;
      }

      this._rateLimiters = {};

      cluster.setMaxListeners(0);

      cluster.on('message', (worker, msg) => {
        if (msg && msg.channel === channel && msg.type === 'init') {
          // If init request, check or create rate limiter by key prefix and send 'init' back to worker
          if (typeof this._rateLimiters[msg.opts.keyPrefix] === 'undefined') {
            this._rateLimiters[msg.opts.keyPrefix] = new RateLimiterMemory$1(msg.opts);
          }

          worker.send({
            channel,
            type: 'init',
            keyPrefix: msg.opts.keyPrefix,
          });
        } else {
          masterProcessMsg.call(this, worker, msg);
        }
      });

      masterInstance = this;
    }
  };

  let RateLimiterClusterMasterPM2$1 = class RateLimiterClusterMasterPM2 {
    constructor(pm2) {
      if (masterInstance) {
        return masterInstance;
      }

      this._rateLimiters = {};

      pm2.launchBus((err, pm2Bus) => {
        pm2Bus.on('process:msg', (packet) => {
          const msg = packet.raw;
          if (msg && msg.channel === channel && msg.type === 'init') {
            // If init request, check or create rate limiter by key prefix and send 'init' back to worker
            if (typeof this._rateLimiters[msg.opts.keyPrefix] === 'undefined') {
              this._rateLimiters[msg.opts.keyPrefix] = new RateLimiterMemory$1(msg.opts);
            }

            pm2.sendDataToProcessId(packet.process.pm_id, {
              data: {},
              topic: channel,
              channel,
              type: 'init',
              keyPrefix: msg.opts.keyPrefix,
            }, (sendErr, res) => {
              if (sendErr) {
                console.log(sendErr, res);
              }
            });
          } else {
            const worker = {
              send: (msgData) => {
                const pm2Message = msgData;
                pm2Message.topic = channel;
                if (typeof pm2Message.data === 'undefined') {
                  pm2Message.data = {};
                }
                pm2.sendDataToProcessId(packet.process.pm_id, pm2Message, (sendErr, res) => {
                  if (sendErr) {
                    console.log(sendErr, res);
                  }
                });
              },
            };
            masterProcessMsg.call(this, worker, msg);
          }
        });
      });

      masterInstance = this;
    }
  };

  class RateLimiterClusterWorker extends RateLimiterAbstract$1 {
    get timeoutMs() {
      return this._timeoutMs;
    }

    set timeoutMs(value) {
      this._timeoutMs = typeof value === 'undefined' ? 5000 : Math.abs(parseInt(value));
    }

    constructor(opts = {}) {
      super(opts);

      process.setMaxListeners(0);

      this.timeoutMs = opts.timeoutMs;

      this._initiated = false;

      process.on('message', (msg) => {
        if (msg && msg.channel === channel && msg.type === 'init' && msg.keyPrefix === this.keyPrefix) {
          this._initiated = true;
        } else {
          workerProcessMsg.call(this, msg);
        }
      });

      // Create limiter on master with specific options
      process.send({
        channel,
        type: 'init',
        opts: getOpts.call(this),
      });

      this._promises = {};
    }

    consume(key, pointsToConsume = 1, options = {}) {
      return new Promise((resolve, reject) => {
        const promiseId = savePromise.call(this, resolve, reject);

        workerSendToMaster.call(this, 'consume', promiseId, key, pointsToConsume, options);
      });
    }

    penalty(key, points = 1, options = {}) {
      return new Promise((resolve, reject) => {
        const promiseId = savePromise.call(this, resolve, reject);

        workerSendToMaster.call(this, 'penalty', promiseId, key, points, options);
      });
    }

    reward(key, points = 1, options = {}) {
      return new Promise((resolve, reject) => {
        const promiseId = savePromise.call(this, resolve, reject);

        workerSendToMaster.call(this, 'reward', promiseId, key, points, options);
      });
    }

    block(key, secDuration, options = {}) {
      return new Promise((resolve, reject) => {
        const promiseId = savePromise.call(this, resolve, reject);

        workerSendToMaster.call(this, 'block', promiseId, key, secDuration, options);
      });
    }

    get(key, options = {}) {
      return new Promise((resolve, reject) => {
        const promiseId = savePromise.call(this, resolve, reject);

        workerSendToMaster.call(this, 'get', promiseId, key, options);
      });
    }

    delete(key, options = {}) {
      return new Promise((resolve, reject) => {
        const promiseId = savePromise.call(this, resolve, reject);

        workerSendToMaster.call(this, 'delete', promiseId, key, options);
      });
    }
  }

  var RateLimiterCluster$1 = {
    RateLimiterClusterMaster: RateLimiterClusterMaster$1,
    RateLimiterClusterMasterPM2: RateLimiterClusterMasterPM2$1,
    RateLimiterCluster: RateLimiterClusterWorker,
  };

  const RateLimiterStoreAbstract = RateLimiterStoreAbstract_1;
  const RateLimiterRes$3 = RateLimiterRes_1;

  let RateLimiterMemcache$1 = class RateLimiterMemcache extends RateLimiterStoreAbstract {
    /**
     *
     * @param {Object} opts
     * Defaults {
     *   ... see other in RateLimiterStoreAbstract
     *
     *   storeClient: memcacheClient
     * }
     */
    constructor(opts) {
      super(opts);

      this.client = opts.storeClient;
    }

    _getRateLimiterRes(rlKey, changedPoints, result) {
      const res = new RateLimiterRes$3();
      res.consumedPoints = parseInt(result.consumedPoints);
      res.isFirstInDuration = result.consumedPoints === changedPoints;
      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);
      res.msBeforeNext = result.msBeforeNext;

      return res;
    }

    _upsert(rlKey, points, msDuration, forceExpire = false, options = {}) {
      return new Promise((resolve, reject) => {
        const nowMs = Date.now();
        const secDuration = Math.floor(msDuration / 1000);

        if (forceExpire) {
          this.client.set(rlKey, points, secDuration, (err) => {
            if (!err) {
              this.client.set(
                `${rlKey}_expire`,
                secDuration > 0 ? nowMs + (secDuration * 1000) : -1,
                secDuration,
                () => {
                  const res = {
                    consumedPoints: points,
                    msBeforeNext: secDuration > 0 ? secDuration * 1000 : -1,
                  };
                  resolve(res);
                }
              );
            } else {
              reject(err);
            }
          });
        } else {
          this.client.incr(rlKey, points, (err, consumedPoints) => {
            if (err || consumedPoints === false) {
              this.client.add(rlKey, points, secDuration, (errAddKey, createdNew) => {
                if (errAddKey || !createdNew) {
                  // Try to upsert again in case of race condition
                  if (typeof options.attemptNumber === 'undefined' || options.attemptNumber < 3) {
                    const nextOptions = Object.assign({}, options);
                    nextOptions.attemptNumber = nextOptions.attemptNumber ? (nextOptions.attemptNumber + 1) : 1;

                    this._upsert(rlKey, points, msDuration, forceExpire, nextOptions)
                      .then(resUpsert => resolve(resUpsert))
                      .catch(errUpsert => reject(errUpsert));
                  } else {
                    reject(new Error('Can not add key'));
                  }
                } else {
                  this.client.add(
                    `${rlKey}_expire`,
                    secDuration > 0 ? nowMs + (secDuration * 1000) : -1,
                    secDuration,
                    () => {
                      const res = {
                        consumedPoints: points,
                        msBeforeNext: secDuration > 0 ? secDuration * 1000 : -1,
                      };
                      resolve(res);
                    }
                  );
                }
              });
            } else {
              this.client.get(`${rlKey}_expire`, (errGetExpire, resGetExpireMs) => {
                if (errGetExpire) {
                  reject(errGetExpire);
                } else {
                  const expireMs = resGetExpireMs === false ? 0 : resGetExpireMs;
                  const res = {
                    consumedPoints,
                    msBeforeNext: expireMs >= 0 ? Math.max(expireMs - nowMs, 0) : -1,
                  };
                  resolve(res);
                }
              });
            }
          });
        }
      });
    }

    _get(rlKey) {
      return new Promise((resolve, reject) => {
        const nowMs = Date.now();

        this.client.get(rlKey, (err, consumedPoints) => {
          if (!consumedPoints) {
            resolve(null);
          } else {
            this.client.get(`${rlKey}_expire`, (errGetExpire, resGetExpireMs) => {
              if (errGetExpire) {
                reject(errGetExpire);
              } else {
                const expireMs = resGetExpireMs === false ? 0 : resGetExpireMs;
                const res = {
                  consumedPoints,
                  msBeforeNext: expireMs >= 0 ? Math.max(expireMs - nowMs, 0) : -1,
                };
                resolve(res);
              }
            });
          }
        });
      });
    }

    _delete(rlKey) {
      return new Promise((resolve, reject) => {
        this.client.del(rlKey, (err, res) => {
          if (err) {
            reject(err);
          } else if (res === false) {
            resolve(res);
          } else {
            this.client.del(`${rlKey}_expire`, (errDelExpire) => {
              if (errDelExpire) {
                reject(errDelExpire);
              } else {
                resolve(res);
              }
            });
          }
        });
      });
    }
  };

  var RateLimiterMemcache_1 = RateLimiterMemcache$1;

  const RateLimiterRes$2 = RateLimiterRes_1;

  var RLWrapperBlackAndWhite_1 = class RLWrapperBlackAndWhite {
    constructor(opts = {}) {
      this.limiter = opts.limiter;
      this.blackList = opts.blackList;
      this.whiteList = opts.whiteList;
      this.isBlackListed = opts.isBlackListed;
      this.isWhiteListed = opts.isWhiteListed;
      this.runActionAnyway = opts.runActionAnyway;
    }

    get limiter() {
      return this._limiter;
    }

    set limiter(value) {
      if (typeof value === 'undefined') {
        throw new Error('limiter is not set');
      }

      this._limiter = value;
    }

    get runActionAnyway() {
      return this._runActionAnyway;
    }

    set runActionAnyway(value) {
      this._runActionAnyway = typeof value === 'undefined' ? false : value;
    }

    get blackList() {
      return this._blackList;
    }

    set blackList(value) {
      this._blackList = Array.isArray(value) ? value : [];
    }

    get isBlackListed() {
      return this._isBlackListed;
    }

    set isBlackListed(func) {
      if (typeof func === 'undefined') {
        func = () => false;
      }
      if (typeof func !== 'function') {
        throw new Error('isBlackListed must be function');
      }
      this._isBlackListed = func;
    }

    get whiteList() {
      return this._whiteList;
    }

    set whiteList(value) {
      this._whiteList = Array.isArray(value) ? value : [];
    }

    get isWhiteListed() {
      return this._isWhiteListed;
    }

    set isWhiteListed(func) {
      if (typeof func === 'undefined') {
        func = () => false;
      }
      if (typeof func !== 'function') {
        throw new Error('isWhiteListed must be function');
      }
      this._isWhiteListed = func;
    }

    isBlackListedSomewhere(key) {
      return this.blackList.indexOf(key) >= 0 || this.isBlackListed(key);
    }

    isWhiteListedSomewhere(key) {
      return this.whiteList.indexOf(key) >= 0 || this.isWhiteListed(key);
    }

    getBlackRes() {
      return new RateLimiterRes$2(0, Number.MAX_SAFE_INTEGER, 0, false);
    }

    getWhiteRes() {
      return new RateLimiterRes$2(Number.MAX_SAFE_INTEGER, 0, 0, false);
    }

    rejectBlack() {
      return Promise.reject(this.getBlackRes());
    }

    resolveBlack() {
      return Promise.resolve(this.getBlackRes());
    }

    resolveWhite() {
      return Promise.resolve(this.getWhiteRes());
    }

    consume(key, pointsToConsume = 1) {
      let res;
      if (this.isWhiteListedSomewhere(key)) {
        res = this.resolveWhite();
      } else if (this.isBlackListedSomewhere(key)) {
        res = this.rejectBlack();
      }

      if (typeof res === 'undefined') {
        return this.limiter.consume(key, pointsToConsume);
      }

      if (this.runActionAnyway) {
        this.limiter.consume(key, pointsToConsume).catch(() => {});
      }
      return res;
    }

    block(key, secDuration) {
      let res;
      if (this.isWhiteListedSomewhere(key)) {
        res = this.resolveWhite();
      } else if (this.isBlackListedSomewhere(key)) {
        res = this.resolveBlack();
      }

      if (typeof res === 'undefined') {
        return this.limiter.block(key, secDuration);
      }

      if (this.runActionAnyway) {
        this.limiter.block(key, secDuration).catch(() => {});
      }
      return res;
    }

    penalty(key, points) {
      let res;
      if (this.isWhiteListedSomewhere(key)) {
        res = this.resolveWhite();
      } else if (this.isBlackListedSomewhere(key)) {
        res = this.resolveBlack();
      }

      if (typeof res === 'undefined') {
        return this.limiter.penalty(key, points);
      }

      if (this.runActionAnyway) {
        this.limiter.penalty(key, points).catch(() => {});
      }
      return res;
    }

    reward(key, points) {
      let res;
      if (this.isWhiteListedSomewhere(key)) {
        res = this.resolveWhite();
      } else if (this.isBlackListedSomewhere(key)) {
        res = this.resolveBlack();
      }

      if (typeof res === 'undefined') {
        return this.limiter.reward(key, points);
      }

      if (this.runActionAnyway) {
        this.limiter.reward(key, points).catch(() => {});
      }
      return res;
    }

    get(key) {
      let res;
      if (this.isWhiteListedSomewhere(key)) {
        res = this.resolveWhite();
      } else if (this.isBlackListedSomewhere(key)) {
        res = this.resolveBlack();
      }

      if (typeof res === 'undefined' || this.runActionAnyway) {
        return this.limiter.get(key);
      }

      return res;
    }

    delete(key) {
      return this.limiter.delete(key);
    }
  };

  const RateLimiterAbstract = RateLimiterAbstract_1;

  var RateLimiterUnion_1 = class RateLimiterUnion {
    constructor(...limiters) {
      if (limiters.length < 1) {
        throw new Error('RateLimiterUnion: at least one limiter have to be passed');
      }
      limiters.forEach((limiter) => {
        if (!(limiter instanceof RateLimiterAbstract)) {
          throw new Error('RateLimiterUnion: all limiters have to be instance of RateLimiterAbstract');
        }
      });

      this._limiters = limiters;
    }

    consume(key, points = 1) {
      return new Promise((resolve, reject) => {
        const promises = [];
        this._limiters.forEach((limiter) => {
          promises.push(limiter.consume(key, points).catch(rej => ({ rejected: true, rej })));
        });

        Promise.all(promises)
          .then((res) => {
            const resObj = {};
            let rejected = false;

            res.forEach((item) => {
              if (item.rejected === true) {
                rejected = true;
              }
            });

            for (let i = 0; i < res.length; i++) {
              if (rejected && res[i].rejected === true) {
                resObj[this._limiters[i].keyPrefix] = res[i].rej;
              } else if (!rejected) {
                resObj[this._limiters[i].keyPrefix] = res[i];
              }
            }

            if (rejected) {
              reject(resObj);
            } else {
              resolve(resObj);
            }
          });
      });
    }
  };

  var RateLimiterQueueError_1 = class RateLimiterQueueError extends Error {
    constructor(message, extra) {
      super();
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = 'CustomError';
      this.message = message;
      if (extra) {
        this.extra = extra;
      }
    }
  };

  const RateLimiterQueueError = RateLimiterQueueError_1;
  const MAX_QUEUE_SIZE = 4294967295;
  const KEY_DEFAULT = 'limiter';

  var RateLimiterQueue_1 = class RateLimiterQueue {
    constructor(limiterFlexible, opts = {
      maxQueueSize: MAX_QUEUE_SIZE,
    }) {
      this._queueLimiters = {
        KEY_DEFAULT: new RateLimiterQueueInternal(limiterFlexible, opts)
      };
      this._limiterFlexible = limiterFlexible;
      this._maxQueueSize = opts.maxQueueSize;
    }

    getTokensRemaining(key = KEY_DEFAULT) {
      if (this._queueLimiters[key]) {
        return this._queueLimiters[key].getTokensRemaining()
      } else {
        return Promise.resolve(this._limiterFlexible.points)
      }
    }

    removeTokens(tokens, key = KEY_DEFAULT) {
      if (!this._queueLimiters[key]) {
        this._queueLimiters[key] = new RateLimiterQueueInternal(
          this._limiterFlexible, {
            key,
            maxQueueSize: this._maxQueueSize,
          });
      }

      return this._queueLimiters[key].removeTokens(tokens)
    }
  };

  class RateLimiterQueueInternal {

    constructor(limiterFlexible, opts = {
      maxQueueSize: MAX_QUEUE_SIZE,
      key: KEY_DEFAULT,
    }) {
      this._key = opts.key;
      this._waitTimeout = null;
      this._queue = [];
      this._limiterFlexible = limiterFlexible;

      this._maxQueueSize = opts.maxQueueSize;
    }

    getTokensRemaining() {
      return this._limiterFlexible.get(this._key)
        .then((rlRes) => {
          return rlRes !== null ? rlRes.remainingPoints : this._limiterFlexible.points;
        })
    }

    removeTokens(tokens) {
      const _this = this;

      return new Promise((resolve, reject) => {
        if (tokens > _this._limiterFlexible.points) {
          reject(new RateLimiterQueueError(`Requested tokens ${tokens} exceeds maximum ${_this._limiterFlexible.points} tokens per interval`));
          return
        }

        if (_this._queue.length > 0) {
          _this._queueRequest.call(_this, resolve, reject, tokens);
        } else {
          _this._limiterFlexible.consume(_this._key, tokens)
            .then((res) => {
              resolve(res.remainingPoints);
            })
            .catch((rej) => {
              if (rej instanceof Error) {
                reject(rej);
              } else {
                _this._queueRequest.call(_this, resolve, reject, tokens);
                if (_this._waitTimeout === null) {
                  _this._waitTimeout = setTimeout(_this._processFIFO.bind(_this), rej.msBeforeNext);
                }
              }
            });
        }
      })
    }

    _queueRequest(resolve, reject, tokens) {
      const _this = this;
      if (_this._queue.length < _this._maxQueueSize) {
        _this._queue.push({resolve, reject, tokens});
      } else {
        reject(new RateLimiterQueueError(`Number of requests reached it's maximum ${_this._maxQueueSize}`));
      }
    }

    _processFIFO() {
      const _this = this;

      if (_this._waitTimeout !== null) {
        clearTimeout(_this._waitTimeout);
        _this._waitTimeout = null;
      }

      if (_this._queue.length === 0) {
        return;
      }

      const item = _this._queue.shift();
      _this._limiterFlexible.consume(_this._key, item.tokens)
        .then((res) => {
          item.resolve(res.remainingPoints);
          _this._processFIFO.call(_this);
        })
        .catch((rej) => {
          if (rej instanceof Error) {
            item.reject(rej);
            _this._processFIFO.call(_this);
          } else {
            _this._queue.unshift(item);
            if (_this._waitTimeout === null) {
              _this._waitTimeout = setTimeout(_this._processFIFO.bind(_this), rej.msBeforeNext);
            }
          }
        });
    }
  }

  const RateLimiterRes$1 = RateLimiterRes_1;

  /**
   * Bursty rate limiter exposes only msBeforeNext time and doesn't expose points from bursty limiter by default
   * @type {BurstyRateLimiter}
   */
  var BurstyRateLimiter_1 = class BurstyRateLimiter {
    constructor(rateLimiter, burstLimiter) {
      this._rateLimiter = rateLimiter;
      this._burstLimiter = burstLimiter;
    }

    /**
     * Merge rate limiter response objects. Responses can be null
     *
     * @param {RateLimiterRes} [rlRes] Rate limiter response
     * @param {RateLimiterRes} [blRes] Bursty limiter response
     */
    _combineRes(rlRes, blRes) {
      return new RateLimiterRes$1(
        rlRes.remainingPoints,
        Math.min(rlRes.msBeforeNext, blRes.msBeforeNext),
        rlRes.consumedPoints,
        rlRes.isFirstInDuration
      )
    }

    /**
     * @param key
     * @param pointsToConsume
     * @param options
     * @returns {Promise<any>}
     */
    consume(key, pointsToConsume = 1, options = {}) {
      return this._rateLimiter.consume(key, pointsToConsume, options)
        .catch((rlRej) => {
          if (rlRej instanceof RateLimiterRes$1) {
            return this._burstLimiter.consume(key, pointsToConsume, options)
              .then((blRes) => {
                return Promise.resolve(this._combineRes(rlRej, blRes))
              })
              .catch((blRej) => {
                  if (blRej instanceof RateLimiterRes$1) {
                    return Promise.reject(this._combineRes(rlRej, blRej))
                  } else {
                    return Promise.reject(blRej)
                  }
                }
              )
          } else {
            return Promise.reject(rlRej)
          }
        })
    }

    /**
     * It doesn't expose available points from burstLimiter
     *
     * @param key
     * @returns {Promise<RateLimiterRes>}
     */
    get(key) {
      return Promise.all([
        this._rateLimiter.get(key),
        this._burstLimiter.get(key),
      ]).then(([rlRes, blRes]) => {
        return this._combineRes(rlRes, blRes);
      });
    }

    get points() {
      return this._rateLimiter.points;
    }
  };

  const RateLimiterRedis = RateLimiterRedis_1;
  const RateLimiterMongo = RateLimiterMongo_1;
  const RateLimiterMySQL = RateLimiterMySQL_1;
  const RateLimiterPostgres = RateLimiterPostgres_1;
  const {RateLimiterClusterMaster, RateLimiterClusterMasterPM2, RateLimiterCluster} = RateLimiterCluster$1;
  const RateLimiterMemory = RateLimiterMemory_1;
  const RateLimiterMemcache = RateLimiterMemcache_1;
  const RLWrapperBlackAndWhite = RLWrapperBlackAndWhite_1;
  const RateLimiterUnion = RateLimiterUnion_1;
  const RateLimiterQueue = RateLimiterQueue_1;
  const BurstyRateLimiter = BurstyRateLimiter_1;
  const RateLimiterRes = RateLimiterRes_1;

  var rateLimiterFlexible = {
    RateLimiterRedis,
    RateLimiterMongo,
    RateLimiterMySQL,
    RateLimiterPostgres,
    RateLimiterMemory,
    RateLimiterMemcache,
    RateLimiterClusterMaster,
    RateLimiterClusterMasterPM2,
    RateLimiterCluster,
    RLWrapperBlackAndWhite,
    RateLimiterUnion,
    RateLimiterQueue,
    BurstyRateLimiter,
    RateLimiterRes,
  };

  const log$f = logger('libp2p:get-peer');
  /**
   * Extracts a PeerId and/or multiaddr from the passed PeerId or Multiaddr or an array of Multiaddrs
   */
  function getPeerAddress(peer) {
      if (isPeerId(peer)) {
          return { peerId: peer, multiaddrs: [] };
      }
      if (!Array.isArray(peer)) {
          peer = [peer];
      }
      let peerId;
      if (peer.length > 0) {
          const peerIdStr = peer[0].getPeerId();
          peerId = peerIdStr == null ? undefined : peerIdFromString(peerIdStr);
          // ensure PeerId is either not set or is consistent
          peer.forEach(ma => {
              if (!isMultiaddr(ma)) {
                  log$f.error('multiaddr %s was invalid', ma);
                  throw new CodeError('Invalid Multiaddr', codes.ERR_INVALID_MULTIADDR);
              }
              const maPeerIdStr = ma.getPeerId();
              if (maPeerIdStr == null) {
                  if (peerId != null) {
                      throw new CodeError('Multiaddrs must all have the same peer id or have no peer id', codes.ERR_INVALID_PARAMETERS);
                  }
              }
              else {
                  const maPeerId = peerIdFromString(maPeerIdStr);
                  if (peerId == null || !peerId.equals(maPeerId)) {
                      throw new CodeError('Multiaddrs must all have the same peer id or have no peer id', codes.ERR_INVALID_PARAMETERS);
                  }
              }
          });
      }
      return {
          peerId,
          multiaddrs: peer
      };
  }

  /* eslint-disable @typescript-eslint/no-non-null-assertion */
  // Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound
  // Used to compute insertion index to keep queue sorted after insertion
  function lowerBound(array, value, comparator) {
      let first = 0;
      let count = array.length;
      while (count > 0) {
          const step = Math.trunc(count / 2);
          let it = first + step;
          if (comparator(array[it], value) <= 0) {
              first = ++it;
              count -= step + 1;
          }
          else {
              count = step;
          }
      }
      return first;
  }
  /**
   * Port of https://github.com/sindresorhus/p-queue/blob/main/source/priority-queue.ts
   * that adds support for filtering jobs by peer id
   */
  class PeerPriorityQueue {
      #queue = [];
      enqueue(run, options) {
          const peerId = options?.peerId;
          const priority = options?.priority ?? 0;
          if (peerId == null) {
              throw new CodeError('missing peer id', codes.ERR_INVALID_PARAMETERS);
          }
          const element = {
              priority,
              peerId,
              run
          };
          if (this.size > 0 && this.#queue[this.size - 1].priority >= priority) {
              this.#queue.push(element);
              return;
          }
          const index = lowerBound(this.#queue, element, (a, b) => b.priority - a.priority);
          this.#queue.splice(index, 0, element);
      }
      dequeue() {
          const item = this.#queue.shift();
          return item?.run;
      }
      filter(options) {
          if (options.peerId != null) {
              const peerId = options.peerId;
              return this.#queue.filter((element) => peerId.equals(element.peerId)).map((element) => element.run);
          }
          return this.#queue.filter((element) => element.priority === options.priority).map((element) => element.run);
      }
      get size() {
          return this.#queue.length;
      }
  }
  /**
   * Extends PQueue to add support for querying queued jobs by peer id
   */
  class PeerJobQueue extends PQueue {
      constructor(options = {}) {
          super({
              ...options,
              queueClass: PeerPriorityQueue
          });
      }
      /**
       * Returns true if this queue has a job for the passed peer id that has not yet
       * started to run
       */
      hasJob(peerId) {
          return this.sizeBy({
              peerId
          }) > 0;
      }
  }

  /**
   * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#dialTimeout
   */
  const DIAL_TIMEOUT = 30e3;
  /**
   * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#inboundUpgradeTimeout
   */
  const INBOUND_UPGRADE_TIMEOUT = 30e3;
  /**
   * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxParallelDials
   */
  const MAX_PARALLEL_DIALS = 100;
  /**
   * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxPeerAddrsToDial
   */
  const MAX_PEER_ADDRS_TO_DIAL = 25;
  /**
   * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxParallelDialsPerPeer
   */
  const MAX_PARALLEL_DIALS_PER_PEER = 10;
  /**
   * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#minConnections
   */
  const MIN_CONNECTIONS = 50;
  /**
   * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxConnections
   */
  const MAX_CONNECTIONS = 300;
  /**
   * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#autoDialInterval
   */
  const AUTO_DIAL_INTERVAL = 5000;
  /**
   * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#autoDialConcurrency
   */
  const AUTO_DIAL_CONCURRENCY = 25;
  /**
   * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#autoDialPriority
   */
  const AUTO_DIAL_PRIORITY = 0;
  /**
   * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#autoDialMaxQueueLength
   */
  const AUTO_DIAL_MAX_QUEUE_LENGTH = 100;
  /**
   * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#inboundConnectionThreshold
   */
  const INBOUND_CONNECTION_THRESHOLD = 5;
  /**
   * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxIncomingPendingConnections
   */
  const MAX_INCOMING_PENDING_CONNECTIONS = 10;

  const log$e = logger('libp2p:connection-manager:auto-dial');
  const defaultOptions$3 = {
      minConnections: MIN_CONNECTIONS,
      maxQueueLength: AUTO_DIAL_MAX_QUEUE_LENGTH,
      autoDialConcurrency: AUTO_DIAL_CONCURRENCY,
      autoDialPriority: AUTO_DIAL_PRIORITY,
      autoDialInterval: AUTO_DIAL_INTERVAL
  };
  class AutoDial {
      connectionManager;
      peerStore;
      queue;
      minConnections;
      autoDialPriority;
      autoDialIntervalMs;
      autoDialMaxQueueLength;
      autoDialInterval;
      started;
      running;
      /**
       * Proactively tries to connect to known peers stored in the PeerStore.
       * It will keep the number of connections below the upper limit and sort
       * the peers to connect based on whether we know their keys and protocols.
       */
      constructor(components, init) {
          this.connectionManager = components.connectionManager;
          this.peerStore = components.peerStore;
          this.minConnections = init.minConnections ?? defaultOptions$3.minConnections;
          this.autoDialPriority = init.autoDialPriority ?? defaultOptions$3.autoDialPriority;
          this.autoDialIntervalMs = init.autoDialInterval ?? defaultOptions$3.autoDialInterval;
          this.autoDialMaxQueueLength = init.maxQueueLength ?? defaultOptions$3.maxQueueLength;
          this.started = false;
          this.running = false;
          this.queue = new PeerJobQueue({
              concurrency: init.autoDialConcurrency ?? defaultOptions$3.autoDialConcurrency
          });
          this.queue.addListener('error', (err) => {
              log$e.error('error during auto-dial', err);
          });
          // check the min connection limit whenever a peer disconnects
          components.events.addEventListener('connection:close', () => {
              this.autoDial()
                  .catch(err => {
                  log$e.error(err);
              });
          });
      }
      isStarted() {
          return this.started;
      }
      start() {
          this.autoDialInterval = setTimeout(() => {
              this.autoDial()
                  .catch(err => {
                  log$e.error('error while autodialing', err);
              });
          }, this.autoDialIntervalMs);
          this.started = true;
      }
      afterStart() {
          this.autoDial()
              .catch(err => {
              log$e.error('error while autodialing', err);
          });
      }
      stop() {
          // clear the queue
          this.queue.clear();
          clearTimeout(this.autoDialInterval);
          this.started = false;
          this.running = false;
      }
      async autoDial() {
          if (!this.started) {
              return;
          }
          const connections = this.connectionManager.getConnectionsMap();
          const numConnections = connections.size;
          // Already has enough connections
          if (numConnections >= this.minConnections) {
              log$e.trace('have enough connections %d/%d', numConnections, this.minConnections);
              return;
          }
          if (this.queue.size > this.autoDialMaxQueueLength) {
              log$e('not enough connections %d/%d but auto dial queue is full', numConnections, this.minConnections);
              return;
          }
          if (this.running) {
              log$e('not enough connections %d/%d - but skipping autodial as it is already running', numConnections, this.minConnections);
              return;
          }
          this.running = true;
          log$e('not enough connections %d/%d - will dial peers to increase the number of connections', numConnections, this.minConnections);
          const dialQueue = new PeerSet(
          // @ts-expect-error boolean filter removes falsy peer IDs
          this.connectionManager.getDialQueue()
              .map(queue => queue.peerId)
              .filter(Boolean));
          // Sort peers on whether we know protocols or public keys for them
          const peers = await this.peerStore.all({
              filters: [
                  // Remove some peers
                  (peer) => {
                      // Remove peers without addresses
                      if (peer.addresses.length === 0) {
                          log$e.trace('not autodialing %p because they have no addresses');
                          return false;
                      }
                      // remove peers we are already connected to
                      if (connections.has(peer.id)) {
                          log$e.trace('not autodialing %p because they are already connected');
                          return false;
                      }
                      // remove peers we are already dialling
                      if (dialQueue.has(peer.id)) {
                          log$e.trace('not autodialing %p because they are already being dialed');
                          return false;
                      }
                      // remove peers already in the autodial queue
                      if (this.queue.hasJob(peer.id)) {
                          log$e.trace('not autodialing %p because they are already being autodialed');
                          return false;
                      }
                      return true;
                  }
              ]
          });
          // shuffle the peers - this is so peers with the same tag values will be
          // dialled in a different order each time
          const shuffledPeers = peers.sort(() => Math.random() > 0.5 ? 1 : -1);
          // Sort shuffled peers by tag value
          const peerValues = new PeerMap();
          for (const peer of shuffledPeers) {
              if (peerValues.has(peer.id)) {
                  continue;
              }
              // sum all tag values
              peerValues.set(peer.id, [...peer.tags.values()].reduce((acc, curr) => {
                  return acc + curr.value;
              }, 0));
          }
          // sort by value, highest to lowest
          const sortedPeers = shuffledPeers.sort((a, b) => {
              const peerAValue = peerValues.get(a.id) ?? 0;
              const peerBValue = peerValues.get(b.id) ?? 0;
              if (peerAValue > peerBValue) {
                  return -1;
              }
              if (peerAValue < peerBValue) {
                  return 1;
              }
              return 0;
          });
          log$e('selected %d/%d peers to dial', sortedPeers.length, peers.length);
          for (const peer of sortedPeers) {
              this.queue.add(async () => {
                  const numConnections = this.connectionManager.getConnectionsMap().size;
                  // Check to see if we still need to auto dial
                  if (numConnections >= this.minConnections) {
                      log$e('got enough connections now %d/%d', numConnections, this.minConnections);
                      this.queue.clear();
                      return;
                  }
                  log$e('connecting to a peerStore stored peer %p', peer.id);
                  await this.connectionManager.openConnection(peer.id, {
                      // @ts-expect-error needs adding to the ConnectionManager interface
                      priority: this.autoDialPriority
                  });
              }, {
                  peerId: peer.id
              }).catch(err => {
                  log$e.error('could not connect to peerStore stored peer', err);
              });
          }
          this.running = false;
          if (this.started) {
              this.autoDialInterval = setTimeout(() => {
                  this.autoDial()
                      .catch(err => {
                      log$e.error('error while autodialing', err);
                  });
              }, this.autoDialIntervalMs);
          }
      }
  }

  const log$d = logger('libp2p:connection-manager:connection-pruner');
  const defaultOptions$2 = {
      maxConnections: MAX_CONNECTIONS,
      allow: []
  };
  /**
   * If we go over the max connections limit, choose some connections to close
   */
  class ConnectionPruner {
      maxConnections;
      connectionManager;
      peerStore;
      allow;
      events;
      constructor(components, init = {}) {
          this.maxConnections = init.maxConnections ?? defaultOptions$2.maxConnections;
          this.allow = init.allow ?? defaultOptions$2.allow;
          this.connectionManager = components.connectionManager;
          this.peerStore = components.peerStore;
          this.events = components.events;
          // check the max connection limit whenever a peer connects
          components.events.addEventListener('connection:open', () => {
              this.maybePruneConnections()
                  .catch(err => {
                  log$d.error(err);
              });
          });
      }
      /**
       * If we have more connections than our maximum, select some excess connections
       * to prune based on peer value
       */
      async maybePruneConnections() {
          const connections = this.connectionManager.getConnections();
          const numConnections = connections.length;
          const toPrune = Math.max(numConnections - this.maxConnections, 0);
          log$d('checking max connections limit %d/%d', numConnections, this.maxConnections);
          if (numConnections <= this.maxConnections) {
              return;
          }
          log$d('max connections limit exceeded %d/%d, pruning %d connection(s)', numConnections, this.maxConnections, toPrune);
          const peerValues = new PeerMap();
          // work out peer values
          for (const connection of connections) {
              const remotePeer = connection.remotePeer;
              if (peerValues.has(remotePeer)) {
                  continue;
              }
              peerValues.set(remotePeer, 0);
              try {
                  const peer = await this.peerStore.get(remotePeer);
                  // sum all tag values
                  peerValues.set(remotePeer, [...peer.tags.values()].reduce((acc, curr) => {
                      return acc + curr.value;
                  }, 0));
              }
              catch (err) {
                  if (err.code !== 'ERR_NOT_FOUND') {
                      log$d.error('error loading peer tags', err);
                  }
              }
          }
          // sort by value, lowest to highest
          const sortedConnections = connections.sort((a, b) => {
              const peerAValue = peerValues.get(a.remotePeer) ?? 0;
              const peerBValue = peerValues.get(b.remotePeer) ?? 0;
              if (peerAValue > peerBValue) {
                  return 1;
              }
              if (peerAValue < peerBValue) {
                  return -1;
              }
              // if the peers have an equal tag value then we want to close short-lived connections first
              const connectionALifespan = a.stat.timeline.open;
              const connectionBLifespan = b.stat.timeline.open;
              if (connectionALifespan < connectionBLifespan) {
                  return 1;
              }
              if (connectionALifespan > connectionBLifespan) {
                  return -1;
              }
              return 0;
          });
          // close some connections
          const toClose = [];
          for (const connection of sortedConnections) {
              log$d('too many connections open - closing a connection to %p', connection.remotePeer);
              // check allow list
              const connectionInAllowList = this.allow.some((ma) => {
                  return connection.remoteAddr.toString().startsWith(ma.toString());
              });
              // Connections in the allow list should be excluded from pruning
              if (!connectionInAllowList) {
                  toClose.push(connection);
              }
              if (toClose.length === toPrune) {
                  break;
              }
          }
          // close connections
          await Promise.all(toClose.map(async (connection) => {
              try {
                  await connection.close();
              }
              catch (err) {
                  log$d.error(err);
              }
          }));
          // despatch prune event
          this.events.safeDispatchEvent('connection:prune', { detail: toClose });
      }
  }

  /**
   * Takes an array of AbortSignals and returns a single signal.
   * If any signals are aborted, the returned signal will be aborted.
   */
  function anySignal(signals) {
      const controller = new globalThis.AbortController();
      function onAbort() {
          controller.abort();
          for (const signal of signals) {
              if (signal?.removeEventListener != null) {
                  signal.removeEventListener('abort', onAbort);
              }
          }
      }
      for (const signal of signals) {
          if (signal?.aborted === true) {
              onAbort();
              break;
          }
          if (signal?.addEventListener != null) {
              signal.addEventListener('abort', onAbort);
          }
      }
      function clear() {
          for (const signal of signals) {
              if (signal?.removeEventListener != null) {
                  signal.removeEventListener('abort', onAbort);
              }
          }
      }
      const signal = controller.signal;
      signal.clear = clear;
      return signal;
  }

  function pDefer() {
  	const deferred = {};

  	deferred.promise = new Promise((resolve, reject) => {
  		deferred.resolve = resolve;
  		deferred.reject = reject;
  	});

  	return deferred;
  }

  const log$c = logger('libp2p:connection-manager:utils');
  /**
   * Resolve multiaddr recursively
   */
  async function resolveMultiaddrs(ma, options) {
      // TODO: recursive logic should live in multiaddr once dns4/dns6 support is in place
      // Now only supporting resolve for dnsaddr
      const resolvableProto = ma.protoNames().includes('dnsaddr');
      // Multiaddr is not resolvable? End recursion!
      if (!resolvableProto) {
          return [ma];
      }
      const resolvedMultiaddrs = await resolveRecord(ma, options);
      const recursiveMultiaddrs = await Promise.all(resolvedMultiaddrs.map(async (nm) => {
          return resolveMultiaddrs(nm, options);
      }));
      const addrs = recursiveMultiaddrs.flat();
      const output = addrs.reduce((array, newM) => {
          if (array.find(m => m.equals(newM)) == null) {
              array.push(newM);
          }
          return array;
      }, ([]));
      log$c('resolved %s to', ma, output.map(ma => ma.toString()));
      return output;
  }
  /**
   * Resolve a given multiaddr. If this fails, an empty array will be returned
   */
  async function resolveRecord(ma, options) {
      try {
          ma = multiaddr(ma.toString()); // Use current multiaddr module
          const multiaddrs = await ma.resolve(options);
          return multiaddrs;
      }
      catch (err) {
          log$c.error(`multiaddr ${ma.toString()} could not be resolved`, err);
          return [];
      }
  }
  function combineSignals(...signals) {
      const sigs = [];
      for (const sig of signals) {
          if (sig != null) {
              try {
                  // fails on node < 15.4
                  eventsExports.setMaxListeners?.(Infinity, sig);
              }
              catch { }
              sigs.push(sig);
          }
      }
      // let any signal abort the dial
      const signal = anySignal(sigs);
      try {
          // fails on node < 15.4
          eventsExports.setMaxListeners?.(Infinity, signal);
      }
      catch { }
      return signal;
  }

  const log$b = logger('libp2p:connection-manager:dial-queue');
  const defaultOptions$1 = {
      addressSorter: publicAddressesFirst,
      maxParallelDials: MAX_PARALLEL_DIALS,
      maxPeerAddrsToDial: MAX_PEER_ADDRS_TO_DIAL,
      maxParallelDialsPerPeer: MAX_PARALLEL_DIALS_PER_PEER,
      dialTimeout: DIAL_TIMEOUT,
      resolvers: {
          dnsaddr: dnsaddrResolver
      }
  };
  class DialQueue {
      pendingDials;
      queue;
      peerId;
      peerStore;
      connectionGater;
      transportManager;
      addressSorter;
      maxPeerAddrsToDial;
      maxParallelDialsPerPeer;
      dialTimeout;
      inProgressDialCount;
      pendingDialCount;
      shutDownController;
      constructor(components, init = {}) {
          this.addressSorter = init.addressSorter ?? defaultOptions$1.addressSorter;
          this.maxPeerAddrsToDial = init.maxPeerAddrsToDial ?? defaultOptions$1.maxPeerAddrsToDial;
          this.maxParallelDialsPerPeer = init.maxParallelDialsPerPeer ?? defaultOptions$1.maxParallelDialsPerPeer;
          this.dialTimeout = init.dialTimeout ?? defaultOptions$1.dialTimeout;
          this.peerId = components.peerId;
          this.peerStore = components.peerStore;
          this.connectionGater = components.connectionGater;
          this.transportManager = components.transportManager;
          this.shutDownController = new AbortController();
          try {
              // This emitter gets listened to a lot
              eventsExports.setMaxListeners?.(Infinity, this.shutDownController.signal);
          }
          catch { }
          this.pendingDialCount = components.metrics?.registerMetric('libp2p_dialler_pending_dials');
          this.inProgressDialCount = components.metrics?.registerMetric('libp2p_dialler_in_progress_dials');
          this.pendingDials = [];
          for (const [key, value] of Object.entries(init.resolvers ?? {})) {
              resolvers.set(key, value);
          }
          // controls dial concurrency
          this.queue = new PQueue({
              concurrency: init.maxParallelDials ?? defaultOptions$1.maxParallelDials
          });
          // a job was added to the queue
          this.queue.on('add', () => {
              this.pendingDialCount?.update(this.queue.size);
              this.inProgressDialCount?.update(this.queue.pending);
          });
          // a queued job started
          this.queue.on('active', () => {
              this.pendingDialCount?.update(this.queue.size);
              this.inProgressDialCount?.update(this.queue.pending);
          });
          // a started job completed without error
          this.queue.on('completed', () => {
              this.pendingDialCount?.update(this.queue.size);
              this.inProgressDialCount?.update(this.queue.pending);
          });
          // a started job errored
          this.queue.on('error', (err) => {
              log$b.error('error in dial queue', err);
              this.pendingDialCount?.update(this.queue.size);
              this.inProgressDialCount?.update(this.queue.pending);
          });
          // all queued jobs have been started
          this.queue.on('empty', () => {
              this.pendingDialCount?.update(this.queue.size);
              this.inProgressDialCount?.update(this.queue.pending);
          });
          // add started jobs have run and the queue is empty
          this.queue.on('idle', () => {
              this.pendingDialCount?.update(this.queue.size);
              this.inProgressDialCount?.update(this.queue.pending);
          });
      }
      /**
       * Clears any pending dials
       */
      stop() {
          this.shutDownController.abort();
      }
      /**
       * Connects to a given peer, multiaddr or list of multiaddrs.
       *
       * If a peer is passed, all known multiaddrs will be tried. If a multiaddr or
       * multiaddrs are passed only those will be dialled.
       *
       * Where a list of multiaddrs is passed, if any contain a peer id then all
       * multiaddrs in the list must contain the same peer id.
       *
       * The dial to the first address that is successfully able to upgrade a connection
       * will be used, all other dials will be aborted when that happens.
       */
      async dial(peerIdOrMultiaddr, options = {}) {
          const { peerId, multiaddrs } = getPeerAddress(peerIdOrMultiaddr);
          const addrs = multiaddrs.map(multiaddr => ({
              multiaddr,
              isCertified: false
          }));
          // create abort conditions - need to do this before `calculateMultiaddrs` as we may be about to
          // resolve a dns addr which can time out
          const signal = this.createDialAbortControllers(options.signal);
          let addrsToDial;
          try {
              // load addresses from address book, resolve and dnsaddrs, filter undiallables, add peer IDs, etc
              addrsToDial = await this.calculateMultiaddrs(peerId, addrs, {
                  ...options,
                  signal
              });
          }
          catch (err) {
              signal.clear();
              throw err;
          }
          // ready to dial, all async work finished - make sure we don't have any
          // pending dials in progress for this peer or set of multiaddrs
          const existingDial = this.pendingDials.find(dial => {
              // is the dial for the same peer id?
              if (dial.peerId != null && peerId != null && dial.peerId.equals(peerId)) {
                  return true;
              }
              // is the dial for the same set of multiaddrs?
              if (addrsToDial.map(({ multiaddr }) => multiaddr.toString()).join() === dial.multiaddrs.map(multiaddr => multiaddr.toString()).join()) {
                  return true;
              }
              return false;
          });
          if (existingDial != null) {
              log$b('joining existing dial target for %p', peerId);
              signal.clear();
              return existingDial.promise;
          }
          log$b('creating dial target for', addrsToDial.map(({ multiaddr }) => multiaddr.toString()));
          // @ts-expect-error .promise property is set below
          const pendingDial = {
              id: randomId(),
              status: 'queued',
              peerId,
              multiaddrs: addrsToDial.map(({ multiaddr }) => multiaddr)
          };
          pendingDial.promise = this.performDial(pendingDial, {
              ...options,
              signal
          })
              .finally(() => {
              // remove our pending dial entry
              this.pendingDials = this.pendingDials.filter(p => p.id !== pendingDial.id);
              // clean up abort signals/controllers
              signal.clear();
          })
              .catch(err => {
              log$b.error('dial failed to %s', pendingDial.multiaddrs.map(ma => ma.toString()).join(', '), err);
              // Error is a timeout
              if (signal.aborted) {
                  const error = new CodeError(err.message, codes.ERR_TIMEOUT);
                  throw error;
              }
              throw err;
          });
          // let other dials join this one
          this.pendingDials.push(pendingDial);
          return pendingDial.promise;
      }
      createDialAbortControllers(userSignal) {
          // let any signal abort the dial
          const signal = anySignal([AbortSignal.timeout(this.dialTimeout),
              this.shutDownController.signal,
              userSignal
          ]);
          try {
              // This emitter gets listened to a lot
              eventsExports.setMaxListeners?.(Infinity, signal);
          }
          catch { }
          return signal;
      }
      // eslint-disable-next-line complexity
      async calculateMultiaddrs(peerId, addrs = [], options = {}) {
          // if a peer id or multiaddr(s) with a peer id, make sure it isn't our peer id and that we are allowed to dial it
          if (peerId != null) {
              if (this.peerId.equals(peerId)) {
                  throw new CodeError('Tried to dial self', codes.ERR_DIALED_SELF);
              }
              if ((await this.connectionGater.denyDialPeer?.(peerId)) === true) {
                  throw new CodeError('The dial request is blocked by gater.allowDialPeer', codes.ERR_PEER_DIAL_INTERCEPTED);
              }
              // if just a peer id was passed, load available multiaddrs for this peer from the address book
              if (addrs.length === 0) {
                  log$b('loading multiaddrs for %p', peerId);
                  try {
                      const peer = await this.peerStore.get(peerId);
                      addrs.push(...peer.addresses);
                      log$b('loaded multiaddrs for %p', peerId, addrs.map(({ multiaddr }) => multiaddr.toString()));
                  }
                  catch (err) {
                      if (err.code !== codes.ERR_NOT_FOUND) {
                          throw err;
                      }
                  }
              }
          }
          // resolve addresses - this can result in a one-to-many translation when dnsaddrs are resolved
          const resolvedAddresses = (await Promise.all(addrs.map(async (addr) => {
              const result = await resolveMultiaddrs(addr.multiaddr, options);
              if (result.length === 1 && result[0].equals(addr.multiaddr)) {
                  return addr;
              }
              return result.map(multiaddr => ({
                  multiaddr,
                  isCertified: false
              }));
          })))
              .flat();
          // filter out any multiaddrs that we do not have transports for
          const filteredAddrs = resolvedAddresses.filter(addr => Boolean(this.transportManager.transportForMultiaddr(addr.multiaddr)));
          // deduplicate addresses
          const dedupedAddrs = new Map();
          for (const addr of filteredAddrs) {
              const maStr = addr.multiaddr.toString();
              const existing = dedupedAddrs.get(maStr);
              if (existing != null) {
                  existing.isCertified = existing.isCertified || addr.isCertified || false;
                  continue;
              }
              dedupedAddrs.set(maStr, addr);
          }
          let dedupedMultiaddrs = [...dedupedAddrs.values()];
          if (dedupedMultiaddrs.length === 0 || dedupedMultiaddrs.length > this.maxPeerAddrsToDial) {
              log$b('addresses for %p before filtering', peerId ?? 'unknown peer', resolvedAddresses.map(({ multiaddr }) => multiaddr.toString()));
              log$b('addresses for %p after filtering', peerId ?? 'unknown peer', dedupedMultiaddrs.map(({ multiaddr }) => multiaddr.toString()));
          }
          // make sure we actually have some addresses to dial
          if (dedupedMultiaddrs.length === 0) {
              throw new CodeError('The dial request has no valid addresses', codes.ERR_NO_VALID_ADDRESSES);
          }
          // make sure we don't have too many addresses to dial
          if (dedupedMultiaddrs.length > this.maxPeerAddrsToDial) {
              throw new CodeError('dial with more addresses than allowed', codes.ERR_TOO_MANY_ADDRESSES);
          }
          // ensure the peer id is appended to the multiaddr
          if (peerId != null) {
              const peerIdMultiaddr = `/p2p/${peerId.toString()}`;
              dedupedMultiaddrs = dedupedMultiaddrs.map(addr => {
                  const addressPeerId = addr.multiaddr.getPeerId();
                  const lastProto = addr.multiaddr.protos().pop();
                  // do not append peer id to path multiaddrs
                  if (lastProto?.path === true) {
                      return addr;
                  }
                  // append peer id to multiaddr if it is not already present
                  if (addressPeerId !== peerId.toString()) {
                      return {
                          multiaddr: addr.multiaddr.encapsulate(peerIdMultiaddr),
                          isCertified: addr.isCertified
                      };
                  }
                  return addr;
              });
          }
          const gatedAdrs = [];
          for (const addr of dedupedMultiaddrs) {
              if (this.connectionGater.denyDialMultiaddr != null && await this.connectionGater.denyDialMultiaddr(addr.multiaddr)) {
                  continue;
              }
              gatedAdrs.push(addr);
          }
          const sortedGatedAddrs = gatedAdrs.sort(this.addressSorter);
          // make sure we actually have some addresses to dial
          if (sortedGatedAddrs.length === 0) {
              throw new CodeError('The connection gater denied all addresses in the dial request', codes.ERR_NO_VALID_ADDRESSES);
          }
          return sortedGatedAddrs;
      }
      async performDial(pendingDial, options = {}) {
          const dialAbortControllers = pendingDial.multiaddrs.map(() => new AbortController());
          try {
              // internal peer dial queue to ensure we only dial the configured number of addresses
              // per peer at the same time to prevent one peer with a lot of addresses swamping
              // the dial queue
              const peerDialQueue = new PQueue({
                  concurrency: this.maxParallelDialsPerPeer
              });
              peerDialQueue.on('error', (err) => {
                  log$b.error('error dialling', err);
              });
              const conn = await Promise.any(pendingDial.multiaddrs.map(async (addr, i) => {
                  const controller = dialAbortControllers[i];
                  if (controller == null) {
                      throw new CodeError('dialAction did not come with an AbortController', codes.ERR_INVALID_PARAMETERS);
                  }
                  // let any signal abort the dial
                  const signal = combineSignals(controller.signal, options.signal);
                  signal.addEventListener('abort', () => {
                      log$b('dial to %s aborted', addr);
                  });
                  const deferred = pDefer();
                  await peerDialQueue.add(async () => {
                      if (signal.aborted) {
                          log$b('dial to %s was aborted before reaching the head of the peer dial queue', addr);
                          deferred.reject(new AbortError$5());
                          return;
                      }
                      // add the individual dial to the dial queue so we don't breach maxConcurrentDials
                      await this.queue.add(async () => {
                          try {
                              if (signal.aborted) {
                                  log$b('dial to %s was aborted before reaching the head of the dial queue', addr);
                                  deferred.reject(new AbortError$5());
                                  return;
                              }
                              // update dial status
                              pendingDial.status = 'active';
                              const conn = await this.transportManager.dial(addr, {
                                  ...options,
                                  signal
                              });
                              if (controller.signal.aborted) {
                                  // another dial succeeded faster than this one
                                  log$b('multiple dials succeeded, closing superfluous connection');
                                  conn.close().catch(err => {
                                      log$b.error('error closing superfluous connection', err);
                                  });
                                  deferred.reject(new AbortError$5());
                                  return;
                              }
                              // remove the successful AbortController so it is not aborted
                              dialAbortControllers[i] = undefined;
                              // immediately abort any other dials
                              dialAbortControllers.forEach(c => {
                                  if (c !== undefined) {
                                      c.abort();
                                  }
                              });
                              log$b('dial to %s succeeded', addr);
                              // resolve the connection promise
                              deferred.resolve(conn);
                          }
                          catch (err) {
                              // something only went wrong if our signal was not aborted
                              log$b.error('error during dial of %s', addr, err);
                              deferred.reject(err);
                          }
                      }, {
                          ...options,
                          signal
                      }).catch(err => {
                          deferred.reject(err);
                      });
                  }, {
                      signal
                  }).catch(err => {
                      deferred.reject(err);
                  }).finally(() => {
                      signal.clear();
                  });
                  return deferred.promise;
              }));
              // dial succeeded or failed
              if (conn == null) {
                  throw new CodeError('successful dial led to empty object returned from peer dial queue', codes.ERR_TRANSPORT_DIAL_FAILED);
              }
              pendingDial.status = 'success';
              return conn;
          }
          catch (err) {
              pendingDial.status = 'error';
              // if we only dialled one address, unwrap the AggregateError to provide more
              // useful feedback to the user
              if (pendingDial.multiaddrs.length === 1 && err.name === 'AggregateError') {
                  throw err.errors[0];
              }
              throw err;
          }
      }
  }
  /**
   * Returns a random string
   */
  function randomId() {
      return `${(parseInt(String(Math.random() * 1e9), 10)).toString()}${Date.now()}`;
  }

  const log$a = logger('libp2p:connection-manager');
  const DEFAULT_DIAL_PRIORITY = 50;
  const defaultOptions = {
      minConnections: MIN_CONNECTIONS,
      maxConnections: MAX_CONNECTIONS,
      inboundConnectionThreshold: INBOUND_CONNECTION_THRESHOLD,
      maxIncomingPendingConnections: MAX_INCOMING_PENDING_CONNECTIONS,
      autoDialConcurrency: AUTO_DIAL_CONCURRENCY,
      autoDialPriority: AUTO_DIAL_PRIORITY,
      autoDialMaxQueueLength: AUTO_DIAL_MAX_QUEUE_LENGTH
  };
  /**
   * Responsible for managing known connections.
   */
  class DefaultConnectionManager {
      started;
      connections;
      allow;
      deny;
      maxIncomingPendingConnections;
      incomingPendingConnections;
      maxConnections;
      dialQueue;
      autoDial;
      connectionPruner;
      inboundConnectionRateLimiter;
      peerStore;
      metrics;
      events;
      constructor(components, init = {}) {
          this.maxConnections = init.maxConnections ?? defaultOptions.maxConnections;
          const minConnections = init.minConnections ?? defaultOptions.minConnections;
          if (this.maxConnections < minConnections) {
              throw new CodeError('Connection Manager maxConnections must be greater than minConnections', codes.ERR_INVALID_PARAMETERS);
          }
          /**
           * Map of connections per peer
           */
          this.connections = new PeerMap();
          this.started = false;
          this.peerStore = components.peerStore;
          this.metrics = components.metrics;
          this.events = components.events;
          this.onConnect = this.onConnect.bind(this);
          this.onDisconnect = this.onDisconnect.bind(this);
          this.events.addEventListener('connection:open', this.onConnect);
          this.events.addEventListener('connection:close', this.onDisconnect);
          // allow/deny lists
          this.allow = (init.allow ?? []).map(ma => multiaddr(ma));
          this.deny = (init.deny ?? []).map(ma => multiaddr(ma));
          this.incomingPendingConnections = 0;
          this.maxIncomingPendingConnections = init.maxIncomingPendingConnections ?? defaultOptions.maxIncomingPendingConnections;
          // controls individual peers trying to dial us too quickly
          this.inboundConnectionRateLimiter = new rateLimiterFlexible.RateLimiterMemory({
              points: init.inboundConnectionThreshold ?? defaultOptions.inboundConnectionThreshold,
              duration: 1
          });
          // controls what happens when we don't have enough connections
          this.autoDial = new AutoDial({
              connectionManager: this,
              peerStore: components.peerStore,
              events: components.events
          }, {
              minConnections,
              autoDialConcurrency: init.autoDialConcurrency ?? defaultOptions.autoDialConcurrency,
              autoDialPriority: init.autoDialPriority ?? defaultOptions.autoDialPriority,
              maxQueueLength: init.autoDialMaxQueueLength ?? defaultOptions.autoDialMaxQueueLength
          });
          // controls what happens when we have too many connections
          this.connectionPruner = new ConnectionPruner({
              connectionManager: this,
              peerStore: components.peerStore,
              events: components.events
          }, {
              maxConnections: this.maxConnections,
              allow: this.allow
          });
          this.dialQueue = new DialQueue({
              peerId: components.peerId,
              metrics: components.metrics,
              peerStore: components.peerStore,
              transportManager: components.transportManager,
              connectionGater: components.connectionGater
          }, {
              addressSorter: init.addressSorter ?? publicAddressesFirst,
              maxParallelDials: init.maxParallelDials ?? MAX_PARALLEL_DIALS,
              maxPeerAddrsToDial: init.maxPeerAddrsToDial ?? MAX_PEER_ADDRS_TO_DIAL,
              dialTimeout: init.dialTimeout ?? DIAL_TIMEOUT,
              resolvers: init.resolvers ?? {
                  dnsaddr: dnsaddrResolver
              }
          });
      }
      isStarted() {
          return this.started;
      }
      /**
       * Starts the Connection Manager. If Metrics are not enabled on libp2p
       * only event loop and connection limits will be monitored.
       */
      async start() {
          // track inbound/outbound connections
          this.metrics?.registerMetricGroup('libp2p_connection_manager_connections', {
              calculate: () => {
                  const metric = {
                      inbound: 0,
                      outbound: 0
                  };
                  for (const conns of this.connections.values()) {
                      for (const conn of conns) {
                          if (conn.stat.direction === 'inbound') {
                              metric.inbound++;
                          }
                          else {
                              metric.outbound++;
                          }
                      }
                  }
                  return metric;
              }
          });
          // track total number of streams per protocol
          this.metrics?.registerMetricGroup('libp2p_protocol_streams_total', {
              label: 'protocol',
              calculate: () => {
                  const metric = {};
                  for (const conns of this.connections.values()) {
                      for (const conn of conns) {
                          for (const stream of conn.streams) {
                              const key = `${stream.stat.direction} ${stream.stat.protocol ?? 'unnegotiated'}`;
                              metric[key] = (metric[key] ?? 0) + 1;
                          }
                      }
                  }
                  return metric;
              }
          });
          // track 90th percentile of streams per protocol
          this.metrics?.registerMetricGroup('libp2p_connection_manager_protocol_streams_per_connection_90th_percentile', {
              label: 'protocol',
              calculate: () => {
                  const allStreams = {};
                  for (const conns of this.connections.values()) {
                      for (const conn of conns) {
                          const streams = {};
                          for (const stream of conn.streams) {
                              const key = `${stream.stat.direction} ${stream.stat.protocol ?? 'unnegotiated'}`;
                              streams[key] = (streams[key] ?? 0) + 1;
                          }
                          for (const [protocol, count] of Object.entries(streams)) {
                              allStreams[protocol] = allStreams[protocol] ?? [];
                              allStreams[protocol].push(count);
                          }
                      }
                  }
                  const metric = {};
                  for (let [protocol, counts] of Object.entries(allStreams)) {
                      counts = counts.sort((a, b) => a - b);
                      const index = Math.floor(counts.length * 0.9);
                      metric[protocol] = counts[index];
                  }
                  return metric;
              }
          });
          this.autoDial.start();
          this.started = true;
          log$a('started');
      }
      async afterStart() {
          // re-connect to any peers with the KEEP_ALIVE tag
          void Promise.resolve()
              .then(async () => {
              const keepAlivePeers = await this.peerStore.all({
                  filters: [(peer) => {
                          return peer.tags.has(KEEP_ALIVE);
                      }]
              });
              await Promise.all(keepAlivePeers.map(async (peer) => {
                  await this.openConnection(peer.id)
                      .catch(err => {
                      log$a.error(err);
                  });
              }));
          })
              .catch(err => {
              log$a.error(err);
          });
          this.autoDial.afterStart();
      }
      /**
       * Stops the Connection Manager
       */
      async stop() {
          this.dialQueue.stop();
          this.autoDial.stop();
          // Close all connections we're tracking
          const tasks = [];
          for (const connectionList of this.connections.values()) {
              for (const connection of connectionList) {
                  tasks.push((async () => {
                      try {
                          await connection.close();
                      }
                      catch (err) {
                          log$a.error(err);
                      }
                  })());
              }
          }
          log$a('closing %d connections', tasks.length);
          await Promise.all(tasks);
          this.connections.clear();
          log$a('stopped');
      }
      onConnect(evt) {
          void this._onConnect(evt).catch(err => {
              log$a.error(err);
          });
      }
      /**
       * Tracks the incoming connection and check the connection limit
       */
      async _onConnect(evt) {
          const { detail: connection } = evt;
          if (!this.started) {
              // This can happen when we are in the process of shutting down the node
              await connection.close();
              return;
          }
          const peerId = connection.remotePeer;
          const storedConns = this.connections.get(peerId);
          let isNewPeer = false;
          if (storedConns != null) {
              storedConns.push(connection);
          }
          else {
              isNewPeer = true;
              this.connections.set(peerId, [connection]);
          }
          // only need to store RSA public keys, all other types are embedded in the peer id
          if (peerId.publicKey != null && peerId.type === 'RSA') {
              await this.peerStore.patch(peerId, {
                  publicKey: peerId.publicKey
              });
          }
          if (isNewPeer) {
              this.events.safeDispatchEvent('peer:connect', { detail: connection.remotePeer });
          }
      }
      /**
       * Removes the connection from tracking
       */
      onDisconnect(evt) {
          const { detail: connection } = evt;
          if (!this.started) {
              // This can happen when we are in the process of shutting down the node
              return;
          }
          const peerId = connection.remotePeer;
          let storedConn = this.connections.get(peerId);
          if (storedConn != null && storedConn.length > 1) {
              storedConn = storedConn.filter((conn) => conn.id !== connection.id);
              this.connections.set(peerId, storedConn);
          }
          else if (storedConn != null) {
              this.connections.delete(peerId);
              this.events.safeDispatchEvent('peer:disconnect', { detail: connection.remotePeer });
          }
      }
      getConnections(peerId) {
          if (peerId != null) {
              return this.connections.get(peerId) ?? [];
          }
          let conns = [];
          for (const c of this.connections.values()) {
              conns = conns.concat(c);
          }
          return conns;
      }
      getConnectionsMap() {
          return this.connections;
      }
      async openConnection(peerIdOrMultiaddr, options = {}) {
          if (!this.isStarted()) {
              throw new CodeError('Not started', codes.ERR_NODE_NOT_STARTED);
          }
          const { peerId } = getPeerAddress(peerIdOrMultiaddr);
          if (peerId != null) {
              log$a('dial %p', peerId);
              const existingConnections = this.getConnections(peerId);
              if (existingConnections.length > 0) {
                  log$a('had an existing connection to %p', peerId);
                  return existingConnections[0];
              }
          }
          const connection = await this.dialQueue.dial(peerIdOrMultiaddr, {
              ...options,
              priority: options.priority ?? DEFAULT_DIAL_PRIORITY
          });
          let peerConnections = this.connections.get(connection.remotePeer);
          if (peerConnections == null) {
              peerConnections = [];
              this.connections.set(connection.remotePeer, peerConnections);
          }
          // we get notified of connections via the Upgrader emitting "connection"
          // events, double check we aren't already tracking this connection before
          // storing it
          let trackedConnection = false;
          for (const conn of peerConnections) {
              if (conn.id === connection.id) {
                  trackedConnection = true;
              }
          }
          if (!trackedConnection) {
              peerConnections.push(connection);
          }
          return connection;
      }
      async closeConnections(peerId) {
          const connections = this.connections.get(peerId) ?? [];
          await Promise.all(connections.map(async (connection) => {
              await connection.close();
          }));
      }
      async acceptIncomingConnection(maConn) {
          // check deny list
          const denyConnection = this.deny.some(ma => {
              return maConn.remoteAddr.toString().startsWith(ma.toString());
          });
          if (denyConnection) {
              log$a('connection from %s refused - connection remote address was in deny list', maConn.remoteAddr);
              return false;
          }
          // check allow list
          const allowConnection = this.allow.some(ma => {
              return maConn.remoteAddr.toString().startsWith(ma.toString());
          });
          if (allowConnection) {
              this.incomingPendingConnections++;
              return true;
          }
          // check pending connections
          if (this.incomingPendingConnections === this.maxIncomingPendingConnections) {
              log$a('connection from %s refused - incomingPendingConnections exceeded by peer %s', maConn.remoteAddr);
              return false;
          }
          if (maConn.remoteAddr.isThinWaistAddress()) {
              const host = maConn.remoteAddr.nodeAddress().address;
              try {
                  await this.inboundConnectionRateLimiter.consume(host, 1);
              }
              catch {
                  log$a('connection from %s refused - inboundConnectionThreshold exceeded by host %s', host, maConn.remoteAddr);
                  return false;
              }
          }
          if (this.getConnections().length < this.maxConnections) {
              this.incomingPendingConnections++;
              return true;
          }
          log$a('connection from %s refused - maxConnections exceeded', maConn.remoteAddr);
          return false;
      }
      afterUpgradeInbound() {
          this.incomingPendingConnections--;
      }
      getDialQueue() {
          return this.dialQueue.pendingDials;
      }
  }

  // ported from https://www.npmjs.com/package/fast-fifo
  class FixedFIFO {
      buffer;
      mask;
      top;
      btm;
      next;
      constructor(hwm) {
          if (!(hwm > 0) || ((hwm - 1) & hwm) !== 0) {
              throw new Error('Max size for a FixedFIFO should be a power of two');
          }
          this.buffer = new Array(hwm);
          this.mask = hwm - 1;
          this.top = 0;
          this.btm = 0;
          this.next = null;
      }
      push(data) {
          if (this.buffer[this.top] !== undefined) {
              return false;
          }
          this.buffer[this.top] = data;
          this.top = (this.top + 1) & this.mask;
          return true;
      }
      shift() {
          const last = this.buffer[this.btm];
          if (last === undefined) {
              return undefined;
          }
          this.buffer[this.btm] = undefined;
          this.btm = (this.btm + 1) & this.mask;
          return last;
      }
      isEmpty() {
          return this.buffer[this.btm] === undefined;
      }
  }
  class FIFO {
      size;
      hwm;
      head;
      tail;
      constructor(options = {}) {
          this.hwm = options.splitLimit ?? 16;
          this.head = new FixedFIFO(this.hwm);
          this.tail = this.head;
          this.size = 0;
      }
      calculateSize(obj) {
          if (obj?.byteLength != null) {
              return obj.byteLength;
          }
          return 1;
      }
      push(val) {
          if (val?.value != null) {
              this.size += this.calculateSize(val.value);
          }
          if (!this.head.push(val)) {
              const prev = this.head;
              this.head = prev.next = new FixedFIFO(2 * this.head.buffer.length);
              this.head.push(val);
          }
      }
      shift() {
          let val = this.tail.shift();
          if (val === undefined && (this.tail.next != null)) {
              const next = this.tail.next;
              this.tail.next = null;
              this.tail = next;
              val = this.tail.shift();
          }
          if (val?.value != null) {
              this.size -= this.calculateSize(val.value);
          }
          return val;
      }
      isEmpty() {
          return this.head.isEmpty();
      }
  }

  /**
   * @packageDocumentation
   *
   * An iterable that you can push values into.
   *
   * @example
   *
   * ```js
   * import { pushable } from 'it-pushable'
   *
   * const source = pushable()
   *
   * setTimeout(() => source.push('hello'), 100)
   * setTimeout(() => source.push('world'), 200)
   * setTimeout(() => source.end(), 300)
   *
   * const start = Date.now()
   *
   * for await (const value of source) {
   *   console.log(`got "${value}" after ${Date.now() - start}ms`)
   * }
   * console.log(`done after ${Date.now() - start}ms`)
   *
   * // Output:
   * // got "hello" after 105ms
   * // got "world" after 207ms
   * // done after 309ms
   * ```
   *
   * @example
   *
   * ```js
   * import { pushableV } from 'it-pushable'
   * import all from 'it-all'
   *
   * const source = pushableV()
   *
   * source.push(1)
   * source.push(2)
   * source.push(3)
   * source.end()
   *
   * console.info(await all(source))
   *
   * // Output:
   * // [ [1, 2, 3] ]
   * ```
   */
  let AbortError$1 = class AbortError extends Error {
      type;
      code;
      constructor(message, code) {
          super(message ?? 'The operation was aborted');
          this.type = 'aborted';
          this.code = code ?? 'ABORT_ERR';
      }
  };
  function pushable(options = {}) {
      const getNext = (buffer) => {
          const next = buffer.shift();
          if (next == null) {
              return { done: true };
          }
          if (next.error != null) {
              throw next.error;
          }
          return {
              done: next.done === true,
              // @ts-expect-error if done is false, value will be present
              value: next.value
          };
      };
      return _pushable(getNext, options);
  }
  function _pushable(getNext, options) {
      options = options ?? {};
      let onEnd = options.onEnd;
      let buffer = new FIFO();
      let pushable;
      let onNext;
      let ended;
      let drain = pDefer();
      const waitNext = async () => {
          try {
              if (!buffer.isEmpty()) {
                  return getNext(buffer);
              }
              if (ended) {
                  return { done: true };
              }
              return await new Promise((resolve, reject) => {
                  onNext = (next) => {
                      onNext = null;
                      buffer.push(next);
                      try {
                          resolve(getNext(buffer));
                      }
                      catch (err) {
                          reject(err);
                      }
                      return pushable;
                  };
              });
          }
          finally {
              if (buffer.isEmpty()) {
                  // settle promise in the microtask queue to give consumers a chance to
                  // await after calling .push
                  queueMicrotask(() => {
                      drain.resolve();
                      drain = pDefer();
                  });
              }
          }
      };
      const bufferNext = (next) => {
          if (onNext != null) {
              return onNext(next);
          }
          buffer.push(next);
          return pushable;
      };
      const bufferError = (err) => {
          buffer = new FIFO();
          if (onNext != null) {
              return onNext({ error: err });
          }
          buffer.push({ error: err });
          return pushable;
      };
      const push = (value) => {
          if (ended) {
              return pushable;
          }
          // @ts-expect-error `byteLength` is not declared on PushType
          if (options?.objectMode !== true && value?.byteLength == null) {
              throw new Error('objectMode was not true but tried to push non-Uint8Array value');
          }
          return bufferNext({ done: false, value });
      };
      const end = (err) => {
          if (ended)
              return pushable;
          ended = true;
          return (err != null) ? bufferError(err) : bufferNext({ done: true });
      };
      const _return = () => {
          buffer = new FIFO();
          end();
          return { done: true };
      };
      const _throw = (err) => {
          end(err);
          return { done: true };
      };
      pushable = {
          [Symbol.asyncIterator]() { return this; },
          next: waitNext,
          return: _return,
          throw: _throw,
          push,
          end,
          get readableLength() {
              return buffer.size;
          },
          onEmpty: async (options) => {
              const signal = options?.signal;
              signal?.throwIfAborted();
              if (buffer.isEmpty()) {
                  return;
              }
              let cancel;
              let listener;
              if (signal != null) {
                  cancel = new Promise((resolve, reject) => {
                      listener = () => {
                          reject(new AbortError$1());
                      };
                      signal.addEventListener('abort', listener);
                  });
              }
              try {
                  await Promise.race([
                      drain.promise,
                      cancel
                  ]);
              }
              finally {
                  if (listener != null && signal != null) {
                      signal?.removeEventListener('abort', listener);
                  }
              }
          }
      };
      if (onEnd == null) {
          return pushable;
      }
      const _pushable = pushable;
      pushable = {
          [Symbol.asyncIterator]() { return this; },
          next() {
              return _pushable.next();
          },
          throw(err) {
              _pushable.throw(err);
              if (onEnd != null) {
                  onEnd(err);
                  onEnd = undefined;
              }
              return { done: true };
          },
          return() {
              _pushable.return();
              if (onEnd != null) {
                  onEnd();
                  onEnd = undefined;
              }
              return { done: true };
          },
          push,
          end(err) {
              _pushable.end(err);
              if (onEnd != null) {
                  onEnd(err);
                  onEnd = undefined;
              }
              return pushable;
          },
          get readableLength() {
              return _pushable.readableLength;
          }
      };
      return pushable;
  }

  function isAsyncIterable$4(thing) {
      return thing[Symbol.asyncIterator] != null;
  }
  function merge(...sources) {
      const syncSources = [];
      for (const source of sources) {
          if (!isAsyncIterable$4(source)) {
              syncSources.push(source);
          }
      }
      if (syncSources.length === sources.length) {
          // all sources are synchronous
          return (function* () {
              for (const source of syncSources) {
                  yield* source;
              }
          })();
      }
      return (async function* () {
          const output = pushable({
              objectMode: true
          });
          void Promise.resolve().then(async () => {
              try {
                  await Promise.all(sources.map(async (source) => {
                      for await (const item of source) {
                          output.push(item);
                      }
                  }));
                  output.end();
              }
              catch (err) {
                  output.end(err);
              }
          });
          yield* output;
      })();
  }

  function pipe(first, ...rest) {
      if (first == null) {
          throw new Error('Empty pipeline');
      }
      // Duplex at start: wrap in function and return duplex source
      if (isDuplex(first)) {
          const duplex = first;
          first = () => duplex.source;
          // Iterable at start: wrap in function
      }
      else if (isIterable(first) || isAsyncIterable$3(first)) {
          const source = first;
          first = () => source;
      }
      const fns = [first, ...rest];
      if (fns.length > 1) {
          // Duplex at end: use duplex sink
          if (isDuplex(fns[fns.length - 1])) {
              fns[fns.length - 1] = fns[fns.length - 1].sink;
          }
      }
      if (fns.length > 2) {
          // Duplex in the middle, consume source with duplex sink and return duplex source
          for (let i = 1; i < fns.length - 1; i++) {
              if (isDuplex(fns[i])) {
                  fns[i] = duplexPipelineFn(fns[i]);
              }
          }
      }
      return rawPipe(...fns);
  }
  const rawPipe = (...fns) => {
      let res;
      while (fns.length > 0) {
          res = fns.shift()(res);
      }
      return res;
  };
  const isAsyncIterable$3 = (obj) => {
      return obj?.[Symbol.asyncIterator] != null;
  };
  const isIterable = (obj) => {
      return obj?.[Symbol.iterator] != null;
  };
  const isDuplex = (obj) => {
      if (obj == null) {
          return false;
      }
      return obj.sink != null && obj.source != null;
  };
  const duplexPipelineFn = (duplex) => {
      return (source) => {
          const p = duplex.sink(source);
          if (p?.then != null) {
              const stream = pushable({
                  objectMode: true
              });
              p.then(() => {
                  stream.end();
              }, (err) => {
                  stream.end(err);
              });
              let sourceWrap;
              const source = duplex.source;
              if (isAsyncIterable$3(source)) {
                  sourceWrap = async function* () {
                      yield* source;
                      stream.end();
                  };
              }
              else if (isIterable(source)) {
                  sourceWrap = function* () {
                      yield* source;
                      stream.end();
                  };
              }
              else {
                  throw new Error('Unknown duplex source type - must be Iterable or AsyncIterable');
              }
              return merge(stream, sourceWrap());
          }
          return duplex.source;
      };
  };

  function isAsyncIterable$2(thing) {
      return thing[Symbol.asyncIterator] != null;
  }
  function map(source, func) {
      if (isAsyncIterable$2(source)) {
          return (async function* () {
              for await (const val of source) {
                  yield func(val);
              }
          })();
      }
      // if mapping function returns a promise we have to return an async generator
      const peekable$1 = peekable(source);
      const { value, done } = peekable$1.next();
      if (done === true) {
          return (function* () { }());
      }
      const res = func(value);
      // @ts-expect-error .then is not present on O
      if (typeof res.then === 'function') {
          return (async function* () {
              yield await res;
              for await (const val of peekable$1) {
                  yield func(val);
              }
          })();
      }
      const fn = func;
      return (function* () {
          yield res;
          for (const val of peekable$1) {
              yield fn(val);
          }
      })();
  }

  /**
   * Store the multiaddrs from every peer in the passed peer store
   */
  async function* storeAddresses(source, peerStore) {
      yield* map(source, async (peer) => {
          // ensure we have the addresses for a given peer
          await peerStore.merge(peer.id, {
              multiaddrs: peer.multiaddrs
          });
          return peer;
      });
  }
  /**
   * Filter peers by unique peer id
   */
  function uniquePeers(source) {
      /** @type Set<string> */
      const seen = new Set();
      return filter(source, (peer) => {
          // dedupe by peer id
          if (seen.has(peer.id.toString())) {
              return false;
          }
          seen.add(peer.id.toString());
          return true;
      });
  }
  /**
   * Require at least `min` peers to be yielded from `source`
   */
  async function* requirePeers(source, min = 1) {
      let seen = 0;
      for await (const peer of source) {
          seen++;
          yield peer;
      }
      if (seen < min) {
          throw new CodeError(`more peers required, seen: ${seen}  min: ${min}`, 'NOT_FOUND');
      }
  }

  class CompoundContentRouting {
      routers;
      started;
      components;
      constructor(components, init) {
          this.routers = init.routers ?? [];
          this.started = false;
          this.components = components;
      }
      isStarted() {
          return this.started;
      }
      async start() {
          this.started = true;
      }
      async stop() {
          this.started = false;
      }
      /**
       * Iterates over all content routers in parallel to find providers of the given key
       */
      async *findProviders(key, options = {}) {
          if (this.routers.length === 0) {
              throw new CodeError('No content routers available', codes.ERR_NO_ROUTERS_AVAILABLE);
          }
          yield* pipe(merge(...this.routers.map(router => router.findProviders(key, options))), (source) => storeAddresses(source, this.components.peerStore), (source) => uniquePeers(source), (source) => requirePeers(source));
      }
      /**
       * Iterates over all content routers in parallel to notify it is
       * a provider of the given key
       */
      async provide(key, options = {}) {
          if (this.routers.length === 0) {
              throw new CodeError('No content routers available', codes.ERR_NO_ROUTERS_AVAILABLE);
          }
          await Promise.all(this.routers.map(async (router) => { await router.provide(key, options); }));
      }
      /**
       * Store the given key/value pair in the available content routings
       */
      async put(key, value, options) {
          if (!this.isStarted()) {
              throw new CodeError(messages.NOT_STARTED_YET, codes.DHT_NOT_STARTED);
          }
          await Promise.all(this.routers.map(async (router) => {
              await router.put(key, value, options);
          }));
      }
      /**
       * Get the value to the given key.
       * Times out after 1 minute by default.
       */
      async get(key, options) {
          if (!this.isStarted()) {
              throw new CodeError(messages.NOT_STARTED_YET, codes.DHT_NOT_STARTED);
          }
          return Promise.any(this.routers.map(async (router) => {
              return router.get(key, options);
          }));
      }
  }

  function isAsyncIterable$1(thing) {
      return thing[Symbol.asyncIterator] != null;
  }
  function first(source) {
      if (isAsyncIterable$1(source)) {
          return (async () => {
              for await (const entry of source) { // eslint-disable-line no-unreachable-loop
                  return entry;
              }
              return undefined;
          })();
      }
      for (const entry of source) { // eslint-disable-line no-unreachable-loop
          return entry;
      }
      return undefined;
  }

  const log$9 = logger('libp2p:peer-routing');
  class DefaultPeerRouting {
      components;
      routers;
      constructor(components, init) {
          this.components = components;
          this.routers = init.routers ?? [];
      }
      /**
       * Iterates over all peer routers in parallel to find the given peer
       */
      async findPeer(id, options) {
          if (this.routers.length === 0) {
              throw new CodeError('No peer routers available', codes.ERR_NO_ROUTERS_AVAILABLE);
          }
          if (id.toString() === this.components.peerId.toString()) {
              throw new CodeError('Should not try to find self', codes.ERR_FIND_SELF);
          }
          const output = await pipe(merge(...this.routers.map(router => (async function* () {
              try {
                  yield await router.findPeer(id, options);
              }
              catch (err) {
                  log$9.error(err);
              }
          })())), (source) => filter(source, Boolean), (source) => storeAddresses(source, this.components.peerStore), async (source) => first(source));
          if (output != null) {
              return output;
          }
          throw new CodeError(messages.NOT_FOUND, codes.ERR_NOT_FOUND);
      }
      /**
       * Attempt to find the closest peers on the network to the given key
       */
      async *getClosestPeers(key, options) {
          if (this.routers.length === 0) {
              throw new CodeError('No peer routers available', codes.ERR_NO_ROUTERS_AVAILABLE);
          }
          yield* pipe(merge(...this.routers.map(router => router.getClosestPeers(key, options))), (source) => storeAddresses(source, this.components.peerStore), (source) => uniquePeers(source), (source) => requirePeers(source));
      }
  }

  const topologySymbol = Symbol.for('@libp2p/topology');
  function isTopology(other) {
      return other != null && Boolean(other[topologySymbol]);
  }

  const log$8 = logger('libp2p:registrar');
  const DEFAULT_MAX_INBOUND_STREAMS = 32;
  const DEFAULT_MAX_OUTBOUND_STREAMS = 64;
  /**
   * Responsible for notifying registered protocols of events in the network.
   */
  class DefaultRegistrar {
      topologies;
      handlers;
      components;
      constructor(components) {
          this.topologies = new Map();
          this.handlers = new Map();
          this.components = components;
          this._onDisconnect = this._onDisconnect.bind(this);
          this._onPeerUpdate = this._onPeerUpdate.bind(this);
          this._onConnect = this._onConnect.bind(this);
          this.components.events.addEventListener('peer:disconnect', this._onDisconnect);
          this.components.events.addEventListener('peer:connect', this._onConnect);
          this.components.events.addEventListener('peer:update', this._onPeerUpdate);
      }
      getProtocols() {
          return Array.from(new Set([
              ...this.handlers.keys()
          ])).sort();
      }
      getHandler(protocol) {
          const handler = this.handlers.get(protocol);
          if (handler == null) {
              throw new CodeError(`No handler registered for protocol ${protocol}`, codes.ERR_NO_HANDLER_FOR_PROTOCOL);
          }
          return handler;
      }
      getTopologies(protocol) {
          const topologies = this.topologies.get(protocol);
          if (topologies == null) {
              return [];
          }
          return [
              ...topologies.values()
          ];
      }
      /**
       * Registers the `handler` for each protocol
       */
      async handle(protocol, handler, opts) {
          if (this.handlers.has(protocol)) {
              throw new CodeError(`Handler already registered for protocol ${protocol}`, codes.ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED);
          }
          const options = mergeOptions$1.bind({ ignoreUndefined: true })({
              maxInboundStreams: DEFAULT_MAX_INBOUND_STREAMS,
              maxOutboundStreams: DEFAULT_MAX_OUTBOUND_STREAMS
          }, opts);
          this.handlers.set(protocol, {
              handler,
              options
          });
          // Add new protocol to self protocols in the peer store
          await this.components.peerStore.merge(this.components.peerId, {
              protocols: [protocol]
          });
      }
      /**
       * Removes the handler for each protocol. The protocol
       * will no longer be supported on streams.
       */
      async unhandle(protocols) {
          const protocolList = Array.isArray(protocols) ? protocols : [protocols];
          protocolList.forEach(protocol => {
              this.handlers.delete(protocol);
          });
          // Update self protocols in the peer store
          await this.components.peerStore.patch(this.components.peerId, {
              protocols: protocolList
          });
      }
      /**
       * Register handlers for a set of multicodecs given
       */
      async register(protocol, topology) {
          if (!isTopology(topology)) {
              log$8.error('topology must be an instance of interfaces/topology');
              throw new CodeError('topology must be an instance of interfaces/topology', codes.ERR_INVALID_PARAMETERS);
          }
          // Create topology
          const id = `${(Math.random() * 1e9).toString(36)}${Date.now()}`;
          let topologies = this.topologies.get(protocol);
          if (topologies == null) {
              topologies = new Map();
              this.topologies.set(protocol, topologies);
          }
          topologies.set(id, topology);
          // Set registrar
          await topology.setRegistrar(this);
          return id;
      }
      /**
       * Unregister topology
       */
      unregister(id) {
          for (const [protocol, topologies] of this.topologies.entries()) {
              if (topologies.has(id)) {
                  topologies.delete(id);
                  if (topologies.size === 0) {
                      this.topologies.delete(protocol);
                  }
              }
          }
      }
      /**
       * Remove a disconnected peer from the record
       */
      _onDisconnect(evt) {
          const remotePeer = evt.detail;
          void this.components.peerStore.get(remotePeer)
              .then(peer => {
              for (const protocol of peer.protocols) {
                  const topologies = this.topologies.get(protocol);
                  if (topologies == null) {
                      // no topologies are interested in this protocol
                      continue;
                  }
                  for (const topology of topologies.values()) {
                      topology.onDisconnect(remotePeer);
                  }
              }
          })
              .catch(err => {
              if (err.code === codes.ERR_NOT_FOUND) {
                  // peer has not completed identify so they are not in the peer store
                  return;
              }
              log$8.error('could not inform topologies of disconnecting peer %p', remotePeer, err);
          });
      }
      /**
       * On peer connected if we already have their protocols. Usually used for reconnects
       * as change:protocols event won't be emitted due to identical protocols.
       */
      _onConnect(evt) {
          const remotePeer = evt.detail;
          void this.components.peerStore.get(remotePeer)
              .then(peer => {
              const connection = this.components.connectionManager.getConnections(peer.id)[0];
              if (connection == null) {
                  log$8('peer %p connected but the connection manager did not have a connection', peer);
                  // peer disconnected while we were loading their details from the peer store
                  return;
              }
              for (const protocol of peer.protocols) {
                  const topologies = this.topologies.get(protocol);
                  if (topologies == null) {
                      // no topologies are interested in this protocol
                      continue;
                  }
                  for (const topology of topologies.values()) {
                      topology.onConnect(remotePeer, connection);
                  }
              }
          })
              .catch(err => {
              if (err.code === codes.ERR_NOT_FOUND) {
                  // peer has not completed identify so they are not in the peer store
                  return;
              }
              log$8.error('could not inform topologies of connecting peer %p', remotePeer, err);
          });
      }
      /**
       * Check if a new peer support the multicodecs for this topology
       */
      _onPeerUpdate(evt) {
          const { peer, previous } = evt.detail;
          const removed = (previous?.protocols ?? []).filter(protocol => !peer.protocols.includes(protocol));
          const added = peer.protocols.filter(protocol => !(previous?.protocols ?? []).includes(protocol));
          for (const protocol of removed) {
              const topologies = this.topologies.get(protocol);
              if (topologies == null) {
                  // no topologies are interested in this protocol
                  continue;
              }
              for (const topology of topologies.values()) {
                  topology.onDisconnect(peer.id);
              }
          }
          for (const protocol of added) {
              const topologies = this.topologies.get(protocol);
              if (topologies == null) {
                  // no topologies are interested in this protocol
                  continue;
              }
              for (const topology of topologies.values()) {
                  const connection = this.components.connectionManager.getConnections(peer.id)[0];
                  if (connection == null) {
                      continue;
                  }
                  topology.onConnect(peer.id, connection);
              }
          }
      }
  }

  class TrackedMap extends Map {
      metric;
      constructor(init) {
          super();
          const { name, metrics } = init;
          this.metric = metrics.registerMetric(name);
          this.updateComponentMetric();
      }
      set(key, value) {
          super.set(key, value);
          this.updateComponentMetric();
          return this;
      }
      delete(key) {
          const deleted = super.delete(key);
          this.updateComponentMetric();
          return deleted;
      }
      clear() {
          super.clear();
          this.updateComponentMetric();
      }
      updateComponentMetric() {
          this.metric.update(this.size);
      }
  }
  function trackedMap(config) {
      const { name, metrics } = config;
      let map;
      if (metrics != null) {
          map = new TrackedMap({ name, metrics });
      }
      else {
          map = new Map();
      }
      return map;
  }

  const log$7 = logger('libp2p:transports');
  class DefaultTransportManager {
      components;
      transports;
      listeners;
      faultTolerance;
      started;
      constructor(components, init = {}) {
          this.components = components;
          this.started = false;
          this.transports = new Map();
          this.listeners = trackedMap({
              name: 'libp2p_transport_manager_listeners',
              metrics: this.components.metrics
          });
          this.faultTolerance = init.faultTolerance ?? FaultTolerance.FATAL_ALL;
      }
      /**
       * Adds a `Transport` to the manager
       */
      add(transport) {
          const tag = transport[Symbol.toStringTag];
          if (tag == null) {
              throw new CodeError('Transport must have a valid tag', codes.ERR_INVALID_KEY);
          }
          if (this.transports.has(tag)) {
              throw new CodeError(`There is already a transport with the tag ${tag}`, codes.ERR_DUPLICATE_TRANSPORT);
          }
          log$7('adding transport %s', tag);
          this.transports.set(tag, transport);
          if (!this.listeners.has(tag)) {
              this.listeners.set(tag, []);
          }
      }
      isStarted() {
          return this.started;
      }
      start() {
          this.started = true;
      }
      async afterStart() {
          // Listen on the provided transports for the provided addresses
          const addrs = this.components.addressManager.getListenAddrs();
          await this.listen(addrs);
      }
      /**
       * Stops all listeners
       */
      async stop() {
          const tasks = [];
          for (const [key, listeners] of this.listeners) {
              log$7('closing listeners for %s', key);
              while (listeners.length > 0) {
                  const listener = listeners.pop();
                  if (listener == null) {
                      continue;
                  }
                  tasks.push(listener.close());
              }
          }
          await Promise.all(tasks);
          log$7('all listeners closed');
          for (const key of this.listeners.keys()) {
              this.listeners.set(key, []);
          }
          this.started = false;
      }
      /**
       * Dials the given Multiaddr over it's supported transport
       */
      async dial(ma, options) {
          const transport = this.transportForMultiaddr(ma);
          if (transport == null) {
              throw new CodeError(`No transport available for address ${String(ma)}`, codes.ERR_TRANSPORT_UNAVAILABLE);
          }
          try {
              return await transport.dial(ma, {
                  ...options,
                  upgrader: this.components.upgrader
              });
          }
          catch (err) {
              if (err.code == null) {
                  err.code = codes.ERR_TRANSPORT_DIAL_FAILED;
              }
              throw err;
          }
      }
      /**
       * Returns all Multiaddr's the listeners are using
       */
      getAddrs() {
          let addrs = [];
          for (const listeners of this.listeners.values()) {
              for (const listener of listeners) {
                  addrs = [...addrs, ...listener.getAddrs()];
              }
          }
          return addrs;
      }
      /**
       * Returns all the transports instances
       */
      getTransports() {
          return Array.of(...this.transports.values());
      }
      /**
       * Returns all the listener instances
       */
      getListeners() {
          return Array.of(...this.listeners.values()).flat();
      }
      /**
       * Finds a transport that matches the given Multiaddr
       */
      transportForMultiaddr(ma) {
          for (const transport of this.transports.values()) {
              const addrs = transport.filter([ma]);
              if (addrs.length > 0) {
                  return transport;
              }
          }
      }
      /**
       * Starts listeners for each listen Multiaddr
       */
      async listen(addrs) {
          if (addrs == null || addrs.length === 0) {
              log$7('no addresses were provided for listening, this node is dial only');
              return;
          }
          const couldNotListen = [];
          for (const [key, transport] of this.transports.entries()) {
              const supportedAddrs = transport.filter(addrs);
              const tasks = [];
              // For each supported multiaddr, create a listener
              for (const addr of supportedAddrs) {
                  log$7('creating listener for %s on %s', key, addr);
                  const listener = transport.createListener({
                      upgrader: this.components.upgrader
                  });
                  let listeners = this.listeners.get(key) ?? [];
                  if (listeners == null) {
                      listeners = [];
                      this.listeners.set(key, listeners);
                  }
                  listeners.push(listener);
                  // Track listen/close events
                  listener.addEventListener('listening', () => {
                      this.components.events.safeDispatchEvent('transport:listening', {
                          detail: listener
                      });
                  });
                  listener.addEventListener('close', () => {
                      const index = listeners.findIndex(l => l === listener);
                      // remove the listener
                      listeners.splice(index, 1);
                      this.components.events.safeDispatchEvent('transport:close', {
                          detail: listener
                      });
                  });
                  // We need to attempt to listen on everything
                  tasks.push(listener.listen(addr));
              }
              // Keep track of transports we had no addresses for
              if (tasks.length === 0) {
                  couldNotListen.push(key);
                  continue;
              }
              const results = await Promise.allSettled(tasks);
              // If we are listening on at least 1 address, succeed.
              // TODO: we should look at adding a retry (`p-retry`) here to better support
              // listening on remote addresses as they may be offline. We could then potentially
              // just wait for any (`p-any`) listener to succeed on each transport before returning
              const isListening = results.find(r => r.status === 'fulfilled');
              if ((isListening == null) && this.faultTolerance !== FaultTolerance.NO_FATAL) {
                  throw new CodeError(`Transport (${key}) could not listen on any available address`, codes.ERR_NO_VALID_ADDRESSES);
              }
          }
          // If no transports were able to listen, throw an error. This likely
          // means we were given addresses we do not have transports for
          if (couldNotListen.length === this.transports.size) {
              const message = `no valid addresses were provided for transports [${couldNotListen.join(', ')}]`;
              if (this.faultTolerance === FaultTolerance.FATAL_ALL) {
                  throw new CodeError(message, codes.ERR_NO_VALID_ADDRESSES);
              }
              log$7(`libp2p in dial mode only: ${message}`);
          }
      }
      /**
       * Removes the given transport from the manager.
       * If a transport has any running listeners, they will be closed.
       */
      async remove(key) {
          log$7('removing %s', key);
          // Close any running listeners
          for (const listener of this.listeners.get(key) ?? []) {
              await listener.close();
          }
          this.transports.delete(key);
          this.listeners.delete(key);
      }
      /**
       * Removes all transports from the manager.
       * If any listeners are running, they will be closed.
       *
       * @async
       */
      async removeAll() {
          const tasks = [];
          for (const key of this.transports.keys()) {
              tasks.push(this.remove(key));
          }
          await Promise.all(tasks);
      }
  }

  const PROTOCOL_ID = '/multistream/1.0.0';
  // Conforming to go-libp2p
  // See https://github.com/multiformats/go-multistream/blob/master/multistream.go#L297
  const MAX_PROTOCOL_LENGTH = 1024;

  /**
   * Returns an `AsyncGenerator` that allows reading a set number of bytes from the passed source.
   *
   * @example
   *
   * ```javascript
   * import { reader } from 'it-reader'
   *
   * const stream = reader(source)
   *
   * // read 10 bytes from the stream
   * const { done, value } = await stream.next(10)
   *
   * if (done === true) {
   *   // stream finished
   * }
   *
   * if (value != null) {
   *   // do something with value
   * }
   * ```
   */
  function reader$1(source) {
      const reader = (async function* () {
          // @ts-expect-error first yield in stream is ignored
          let bytes = yield; // Allows us to receive 8 when reader.next(8) is called
          let bl = new Uint8ArrayList();
          for await (const chunk of source) {
              if (bytes == null) {
                  bl.append(chunk);
                  bytes = yield bl;
                  bl = new Uint8ArrayList();
                  continue;
              }
              bl.append(chunk);
              while (bl.length >= bytes) {
                  const data = bl.sublist(0, bytes);
                  bl.consume(bytes);
                  bytes = yield data;
                  // If we no longer want a specific byte length, we yield the rest now
                  if (bytes == null) {
                      if (bl.length > 0) {
                          bytes = yield bl;
                          bl = new Uint8ArrayList();
                      }
                      break; // bytes is null and/or no more buffer to yield
                  }
              }
          }
          // Consumer wants more bytes but the source has ended and our buffer
          // is not big enough to satisfy.
          if (bytes != null) {
              throw Object.assign(new Error(`stream ended before ${bytes} bytes became available`), { code: 'ERR_UNDER_READ', buffer: bl });
          }
      })();
      void reader.next();
      return reader;
  }

  /**
   * @packageDocumentation
   *
   * @example
   *
   * ```js
   *
   * import { pipe } from 'it-pipe'
   * import { duplexPair } from 'it-pair/duplex'
   * import { handshake } from 'it-handshake'
   *
   * // Create connected duplex streams
   * const [client, server] = duplexPair()
   * const clientShake = handshake(client)
   * const serverShake = handshake(server)
   *
   * clientShake.write('hello')
   * console.log('client: %s', await serverShake.read())
   * // > client: hello
   * serverShake.write('hi')
   * serverShake.rest() // the server has finished the handshake
   * console.log('server: %s', await clientShake.read())
   * // > server: hi
   * clientShake.rest() // the client has finished the handshake
   *
   * // Make the server echo responses
   * pipe(
   *   serverShake.stream,
   *   async function * (source) {
   *     for await (const message of source) {
   *       yield message
   *     }
   *   },
   *   serverShake.stream
   * )
   *
   * // Send and receive an echo through the handshake stream
   * pipe(
   *   ['echo'],
   *   clientShake.stream,
   *   async function * (source) {
   *     for await (const bufferList of source) {
   *       console.log('Echo response: %s', bufferList.slice())
   *       // > Echo response: echo
   *     }
   *   }
   * )
   * ```
   */
  // Convert a duplex stream into a reader and writer and rest stream
  function handshake(stream) {
      const writer = pushable(); // Write bytes on demand to the sink
      const source = reader$1(stream.source); // Read bytes on demand from the source
      // Waits for a source to be passed to the rest stream's sink
      const sourcePromise = pDefer();
      let sinkErr;
      const sinkPromise = stream.sink((async function* () {
          yield* writer;
          const source = await sourcePromise.promise;
          yield* source;
      })());
      sinkPromise.catch(err => {
          sinkErr = err;
      });
      const rest = {
          sink: async (source) => {
              if (sinkErr != null) {
                  await Promise.reject(sinkErr);
                  return;
              }
              sourcePromise.resolve(source);
              await sinkPromise;
          },
          source
      };
      return {
          reader: source,
          writer,
          stream: rest,
          rest: () => writer.end(),
          write: writer.push,
          read: async () => {
              const res = await source.next();
              if (res.value != null) {
                  return res.value;
              }
          }
      };
  }

  class AbortError extends Error {
      constructor(message, code) {
          super(message ?? 'The operation was aborted');
          this.type = 'aborted';
          this.code = code ?? 'ABORT_ERR';
      }
  }

  function getIterator(obj) {
      if (obj != null) {
          if (typeof obj[Symbol.iterator] === 'function') {
              return obj[Symbol.iterator]();
          }
          if (typeof obj[Symbol.asyncIterator] === 'function') {
              return obj[Symbol.asyncIterator]();
          }
          if (typeof obj.next === 'function') {
              return obj; // probably an iterator
          }
      }
      throw new Error('argument is not an iterator or iterable');
  }

  /**
   * @packageDocumentation
   *
   * @example
   *
   * ```js
   * import { abortableSource } from 'abortable-iterator'
   *
   * async function main () {
   *   // An example function that creates an async iterator that yields an increasing
   *   // number every x milliseconds and NEVER ENDS!
   *   const asyncCounter = async function * (start, delay) {
   *     let i = start
   *     while (true) {
   *       yield new Promise(resolve => setTimeout(() => resolve(i++), delay))
   *     }
   *   }
   *
   *   // Create a counter that'll yield numbers from 0 upwards every second
   *   const everySecond = asyncCounter(0, 1000)
   *
   *   // Make everySecond abortable!
   *   const controller = new AbortController()
   *   const abortableEverySecond = abortableSource(everySecond, controller.signal)
   *
   *   // Abort after 5 seconds
   *   setTimeout(() => controller.abort(), 5000)
   *
   *   try {
   *     // Start the iteration, which will throw after 5 seconds when it is aborted
   *     for await (const n of abortableEverySecond) {
   *       console.log(n)
   *     }
   *   } catch (err) {
   *     if (err.code === 'ERR_ABORTED') {
   *       // Expected - all ok :D
   *     } else {
   *       throw err
   *     }
   *   }
   * }
   *
   * main()
   * ```
   */
  /**
   * Wrap an iterator to make it abortable, allow cleanup when aborted via onAbort
   */
  function abortableSource(source, signal, options) {
      const opts = options ?? {};
      const iterator = getIterator(source);
      async function* abortable() {
          let nextAbortHandler;
          const abortHandler = () => {
              if (nextAbortHandler != null)
                  nextAbortHandler();
          };
          signal.addEventListener('abort', abortHandler);
          while (true) {
              let result;
              try {
                  if (signal.aborted) {
                      const { abortMessage, abortCode } = opts;
                      throw new AbortError(abortMessage, abortCode);
                  }
                  const abort = new Promise((resolve, reject) => {
                      nextAbortHandler = () => {
                          const { abortMessage, abortCode } = opts;
                          reject(new AbortError(abortMessage, abortCode));
                      };
                  });
                  // Race the iterator and the abort signals
                  result = await Promise.race([abort, iterator.next()]);
                  nextAbortHandler = null;
              }
              catch (err) {
                  signal.removeEventListener('abort', abortHandler);
                  // Might not have been aborted by a known signal
                  const isKnownAborter = err.type === 'aborted' && signal.aborted;
                  if (isKnownAborter && (opts.onAbort != null)) {
                      // Do any custom abort handling for the iterator
                      opts.onAbort(source);
                  }
                  // End the iterator if it is a generator
                  if (typeof iterator.return === 'function') {
                      try {
                          const p = iterator.return();
                          if (p instanceof Promise) { // eslint-disable-line max-depth
                              p.catch(err => {
                                  if (opts.onReturnError != null) {
                                      opts.onReturnError(err);
                                  }
                              });
                          }
                      }
                      catch (err) {
                          if (opts.onReturnError != null) { // eslint-disable-line max-depth
                              opts.onReturnError(err);
                          }
                      }
                  }
                  if (isKnownAborter && opts.returnOnAbort === true) {
                      return;
                  }
                  throw err;
              }
              if (result.done === true) {
                  break;
              }
              yield result.value;
          }
          signal.removeEventListener('abort', abortHandler);
      }
      return abortable();
  }
  function abortableSink(sink, signal, options) {
      return (source) => sink(abortableSource(source, signal, options));
  }
  function abortableDuplex(duplex, signal, options) {
      return {
          sink: abortableSink(duplex.sink, signal, {
              ...options,
              onAbort: undefined
          }),
          source: abortableSource(duplex.source, signal, options)
      };
  }

  function isAsyncIterable(thing) {
      return thing[Symbol.asyncIterator] != null;
  }

  const defaultEncoder = (length) => {
      const lengthLength = unsigned.encodingLength(length);
      const lengthBuf = allocUnsafe(lengthLength);
      unsigned.encode(length, lengthBuf);
      defaultEncoder.bytes = lengthLength;
      return lengthBuf;
  };
  defaultEncoder.bytes = 0;
  function encode$1(source, options) {
      options = options ?? {};
      const encodeLength = options.lengthEncoder ?? defaultEncoder;
      function* maybeYield(chunk) {
          // length + data
          const length = encodeLength(chunk.byteLength);
          // yield only Uint8Arrays
          if (length instanceof Uint8Array) {
              yield length;
          }
          else {
              yield* length;
          }
          // yield only Uint8Arrays
          if (chunk instanceof Uint8Array) {
              yield chunk;
          }
          else {
              yield* chunk;
          }
      }
      if (isAsyncIterable(source)) {
          return (async function* () {
              for await (const chunk of source) {
                  yield* maybeYield(chunk);
              }
          })();
      }
      return (function* () {
          for (const chunk of source) {
              yield* maybeYield(chunk);
          }
      })();
  }
  encode$1.single = (chunk, options) => {
      options = options ?? {};
      const encodeLength = options.lengthEncoder ?? defaultEncoder;
      return new Uint8ArrayList(encodeLength(chunk.byteLength), chunk);
  };

  /* eslint max-depth: ["error", 6] */
  // Maximum length of the length section of the message
  const MAX_LENGTH_LENGTH = 8; // Varint.encode(Number.MAX_SAFE_INTEGER).length
  // Maximum length of the data section of the message
  const MAX_DATA_LENGTH = 1024 * 1024 * 4;
  var ReadMode;
  (function (ReadMode) {
      ReadMode[ReadMode["LENGTH"] = 0] = "LENGTH";
      ReadMode[ReadMode["DATA"] = 1] = "DATA";
  })(ReadMode || (ReadMode = {}));
  const defaultDecoder = (buf) => {
      const length = unsigned.decode(buf);
      defaultDecoder.bytes = unsigned.encodingLength(length);
      return length;
  };
  defaultDecoder.bytes = 0;
  function decode(source, options) {
      const buffer = new Uint8ArrayList();
      let mode = ReadMode.LENGTH;
      let dataLength = -1;
      const lengthDecoder = options?.lengthDecoder ?? defaultDecoder;
      const maxLengthLength = options?.maxLengthLength ?? MAX_LENGTH_LENGTH;
      const maxDataLength = options?.maxDataLength ?? MAX_DATA_LENGTH;
      function* maybeYield() {
          while (buffer.byteLength > 0) {
              if (mode === ReadMode.LENGTH) {
                  // read length, ignore errors for short reads
                  try {
                      dataLength = lengthDecoder(buffer);
                      if (dataLength < 0) {
                          throw errCode$1(new Error('invalid message length'), 'ERR_INVALID_MSG_LENGTH');
                      }
                      if (dataLength > maxDataLength) {
                          throw errCode$1(new Error('message length too long'), 'ERR_MSG_DATA_TOO_LONG');
                      }
                      const dataLengthLength = lengthDecoder.bytes;
                      buffer.consume(dataLengthLength);
                      if (options?.onLength != null) {
                          options.onLength(dataLength);
                      }
                      mode = ReadMode.DATA;
                  }
                  catch (err) {
                      if (err instanceof RangeError) {
                          if (buffer.byteLength > maxLengthLength) {
                              throw errCode$1(new Error('message length length too long'), 'ERR_MSG_LENGTH_TOO_LONG');
                          }
                          break;
                      }
                      throw err;
                  }
              }
              if (mode === ReadMode.DATA) {
                  if (buffer.byteLength < dataLength) {
                      // not enough data, wait for more
                      break;
                  }
                  const data = buffer.sublist(0, dataLength);
                  buffer.consume(dataLength);
                  if (options?.onData != null) {
                      options.onData(data);
                  }
                  yield data;
                  mode = ReadMode.LENGTH;
              }
          }
      }
      if (isAsyncIterable(source)) {
          return (async function* () {
              for await (const buf of source) {
                  buffer.append(buf);
                  yield* maybeYield();
              }
              if (buffer.byteLength > 0) {
                  throw errCode$1(new Error('unexpected end of input'), 'ERR_UNEXPECTED_EOF');
              }
          })();
      }
      return (function* () {
          for (const buf of source) {
              buffer.append(buf);
              yield* maybeYield();
          }
          if (buffer.byteLength > 0) {
              throw errCode$1(new Error('unexpected end of input'), 'ERR_UNEXPECTED_EOF');
          }
      })();
  }
  decode.fromReader = (reader, options) => {
      let byteLength = 1; // Read single byte chunks until the length is known
      const varByteSource = (async function* () {
          while (true) {
              try {
                  const { done, value } = await reader.next(byteLength);
                  if (done === true) {
                      return;
                  }
                  if (value != null) {
                      yield value;
                  }
              }
              catch (err) {
                  if (err.code === 'ERR_UNDER_READ') {
                      return { done: true, value: null };
                  }
                  throw err;
              }
              finally {
                  // Reset the byteLength so we continue to check for varints
                  byteLength = 1;
              }
          }
      }());
      /**
       * Once the length has been parsed, read chunk for that length
       */
      const onLength = (l) => { byteLength = l; };
      return decode(varByteSource, {
          ...(options ?? {}),
          onLength
      });
  };

  const log$6 = logger('libp2p:mss');
  const NewLine = fromString$1('\n');
  function encode(buffer) {
      const list = new Uint8ArrayList(buffer, NewLine);
      return encode$1.single(list);
  }
  /**
   * `write` encodes and writes a single buffer
   */
  function write(writer, buffer, options = {}) {
      const encoded = encode(buffer);
      if (options.writeBytes === true) {
          writer.push(encoded.subarray());
      }
      else {
          writer.push(encoded);
      }
  }
  /**
   * `writeAll` behaves like `write`, except it encodes an array of items as a single write
   */
  function writeAll(writer, buffers, options = {}) {
      const list = new Uint8ArrayList();
      for (const buf of buffers) {
          list.append(encode(buf));
      }
      if (options.writeBytes === true) {
          writer.push(list.subarray());
      }
      else {
          writer.push(list);
      }
  }
  async function read(reader, options) {
      let byteLength = 1; // Read single byte chunks until the length is known
      const varByteSource = {
          [Symbol.asyncIterator]: () => varByteSource,
          next: async () => reader.next(byteLength)
      };
      let input = varByteSource;
      // If we have been passed an abort signal, wrap the input source in an abortable
      // iterator that will throw if the operation is aborted
      if (options?.signal != null) {
          input = abortableSource(varByteSource, options.signal);
      }
      // Once the length has been parsed, read chunk for that length
      const onLength = (l) => {
          byteLength = l;
      };
      const buf = await pipe(input, (source) => decode(source, { onLength, maxDataLength: MAX_PROTOCOL_LENGTH }), async (source) => first(source));
      if (buf == null || buf.length === 0) {
          throw new CodeError('no buffer returned', 'ERR_INVALID_MULTISTREAM_SELECT_MESSAGE');
      }
      if (buf.get(buf.byteLength - 1) !== NewLine[0]) {
          log$6.error('Invalid mss message - missing newline - %s', buf.subarray());
          throw new CodeError('missing newline', 'ERR_INVALID_MULTISTREAM_SELECT_MESSAGE');
      }
      return buf.sublist(0, -1); // Remove newline
  }
  async function readString(reader, options) {
      const buf = await read(reader, options);
      return toString$1(buf.subarray());
  }

  const log$5 = logger('libp2p:mss:select');
  async function select(stream, protocols, options = {}) {
      protocols = Array.isArray(protocols) ? [...protocols] : [protocols];
      const { reader, writer, rest, stream: shakeStream } = handshake(stream);
      const protocol = protocols.shift();
      if (protocol == null) {
          throw new Error('At least one protocol must be specified');
      }
      log$5.trace('select: write ["%s", "%s"]', PROTOCOL_ID, protocol);
      const p1 = fromString$1(PROTOCOL_ID);
      const p2 = fromString$1(protocol);
      writeAll(writer, [p1, p2], options);
      let response = await readString(reader, options);
      log$5.trace('select: read "%s"', response);
      // Read the protocol response if we got the protocolId in return
      if (response === PROTOCOL_ID) {
          response = await readString(reader, options);
          log$5.trace('select: read "%s"', response);
      }
      // We're done
      if (response === protocol) {
          rest();
          return { stream: shakeStream, protocol };
      }
      // We haven't gotten a valid ack, try the other protocols
      for (const protocol of protocols) {
          log$5.trace('select: write "%s"', protocol);
          write(writer, fromString$1(protocol), options);
          const response = await readString(reader, options);
          log$5.trace('select: read "%s" for "%s"', response, protocol);
          if (response === protocol) {
              rest(); // End our writer so others can start writing to stream
              return { stream: shakeStream, protocol };
          }
      }
      rest();
      throw new CodeError('protocol selection failed', 'ERR_UNSUPPORTED_PROTOCOL');
  }

  const log$4 = logger('libp2p:mss:handle');
  async function handle(stream, protocols, options) {
      protocols = Array.isArray(protocols) ? protocols : [protocols];
      const { writer, reader, rest, stream: shakeStream } = handshake(stream);
      while (true) {
          const protocol = await readString(reader, options);
          log$4.trace('read "%s"', protocol);
          if (protocol === PROTOCOL_ID) {
              log$4.trace('respond with "%s" for "%s"', PROTOCOL_ID, protocol);
              write(writer, fromString$1(PROTOCOL_ID), options);
              continue;
          }
          if (protocols.includes(protocol)) {
              write(writer, fromString$1(protocol), options);
              log$4.trace('respond with "%s" for "%s"', protocol, protocol);
              rest();
              return { stream: shakeStream, protocol };
          }
          if (protocol === 'ls') {
              // <varint-msg-len><varint-proto-name-len><proto-name>\n<varint-proto-name-len><proto-name>\n\n
              write(writer, new Uint8ArrayList(...protocols.map(p => encode(fromString$1(p)))), options);
              // multistream.writeAll(writer, protocols.map(p => uint8ArrayFromString(p)))
              log$4.trace('respond with "%s" for %s', protocols, protocol);
              continue;
          }
          write(writer, fromString$1('na'), options);
          log$4('respond with "na" for "%s"', protocol);
      }
  }

  const symbol = Symbol.for('@libp2p/connection');

  const OPEN = 'OPEN';
  const CLOSING = 'CLOSING';
  const CLOSED = 'CLOSED';

  const log$3 = logger('libp2p:connection');
  /**
   * An implementation of the js-libp2p connection.
   * Any libp2p transport should use an upgrader to return this connection.
   */
  class ConnectionImpl {
      /**
       * Connection identifier.
       */
      id;
      /**
       * Observed multiaddr of the remote peer
       */
      remoteAddr;
      /**
       * Remote peer id
       */
      remotePeer;
      /**
       * Connection metadata
       */
      stat;
      /**
       * User provided tags
       *
       */
      tags;
      /**
       * Reference to the new stream function of the multiplexer
       */
      _newStream;
      /**
       * Reference to the close function of the raw connection
       */
      _close;
      /**
       * Reference to the getStreams function of the muxer
       */
      _getStreams;
      _closing;
      /**
       * An implementation of the js-libp2p connection.
       * Any libp2p transport should use an upgrader to return this connection.
       */
      constructor(init) {
          const { remoteAddr, remotePeer, newStream, close, getStreams, stat } = init;
          this.id = `${(parseInt(String(Math.random() * 1e9))).toString(36)}${Date.now()}`;
          this.remoteAddr = remoteAddr;
          this.remotePeer = remotePeer;
          this.stat = {
              ...stat,
              status: OPEN
          };
          this._newStream = newStream;
          this._close = close;
          this._getStreams = getStreams;
          this.tags = [];
          this._closing = false;
      }
      [Symbol.toStringTag] = 'Connection';
      [symbol] = true;
      /**
       * Get all the streams of the muxer
       */
      get streams() {
          return this._getStreams();
      }
      /**
       * Create a new stream from this connection
       */
      async newStream(protocols, options) {
          if (this.stat.status === CLOSING) {
              throw new CodeError('the connection is being closed', 'ERR_CONNECTION_BEING_CLOSED');
          }
          if (this.stat.status === CLOSED) {
              throw new CodeError('the connection is closed', 'ERR_CONNECTION_CLOSED');
          }
          if (!Array.isArray(protocols)) {
              protocols = [protocols];
          }
          const stream = await this._newStream(protocols, options);
          stream.stat.direction = 'outbound';
          return stream;
      }
      /**
       * Add a stream when it is opened to the registry
       */
      addStream(stream) {
          stream.stat.direction = 'inbound';
      }
      /**
       * Remove stream registry after it is closed
       */
      removeStream(id) {
      }
      /**
       * Close the connection
       */
      async close() {
          if (this.stat.status === CLOSED || this._closing) {
              return;
          }
          this.stat.status = CLOSING;
          // close all streams - this can throw if we're not multiplexed
          try {
              this.streams.forEach(s => { s.close(); });
          }
          catch (err) {
              log$3.error(err);
          }
          // Close raw connection
          this._closing = true;
          await this._close();
          this._closing = false;
          this.stat.timeline.close = Date.now();
          this.stat.status = CLOSED;
      }
  }
  function createConnection(init) {
      return new ConnectionImpl(init);
  }

  const log$2 = logger('libp2p:upgrader');
  function findIncomingStreamLimit(protocol, registrar) {
      try {
          const { options } = registrar.getHandler(protocol);
          return options.maxInboundStreams;
      }
      catch (err) {
          if (err.code !== codes.ERR_NO_HANDLER_FOR_PROTOCOL) {
              throw err;
          }
      }
      return DEFAULT_MAX_INBOUND_STREAMS;
  }
  function findOutgoingStreamLimit(protocol, registrar, options = {}) {
      try {
          const { options } = registrar.getHandler(protocol);
          if (options.maxOutboundStreams != null) {
              return options.maxOutboundStreams;
          }
      }
      catch (err) {
          if (err.code !== codes.ERR_NO_HANDLER_FOR_PROTOCOL) {
              throw err;
          }
      }
      return options.maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS;
  }
  function countStreams(protocol, direction, connection) {
      let streamCount = 0;
      connection.streams.forEach(stream => {
          if (stream.stat.direction === direction && stream.stat.protocol === protocol) {
              streamCount++;
          }
      });
      return streamCount;
  }
  class DefaultUpgrader {
      components;
      connectionEncryption;
      muxers;
      inboundUpgradeTimeout;
      events;
      constructor(components, init) {
          this.components = components;
          this.connectionEncryption = new Map();
          init.connectionEncryption.forEach(encrypter => {
              this.connectionEncryption.set(encrypter.protocol, encrypter);
          });
          this.muxers = new Map();
          init.muxers.forEach(muxer => {
              this.muxers.set(muxer.protocol, muxer);
          });
          this.inboundUpgradeTimeout = init.inboundUpgradeTimeout ?? INBOUND_UPGRADE_TIMEOUT;
          this.events = components.events;
      }
      async shouldBlockConnection(remotePeer, maConn, connectionType) {
          const connectionGater = this.components.connectionGater[connectionType];
          if (connectionGater !== undefined) {
              if (await connectionGater(remotePeer, maConn)) {
                  throw new CodeError(`The multiaddr connection is blocked by gater.${connectionType}`, codes.ERR_CONNECTION_INTERCEPTED);
              }
          }
      }
      /**
       * Upgrades an inbound connection
       */
      async upgradeInbound(maConn, opts) {
          const accept = await this.components.connectionManager.acceptIncomingConnection(maConn);
          if (!accept) {
              throw new CodeError('connection denied', codes.ERR_CONNECTION_DENIED);
          }
          let encryptedConn;
          let remotePeer;
          let upgradedConn;
          let muxerFactory;
          let cryptoProtocol;
          const signal = anySignal([AbortSignal.timeout(this.inboundUpgradeTimeout)]);
          try {
              // fails on node < 15.4
              eventsExports.setMaxListeners?.(Infinity, signal);
          }
          catch { }
          try {
              const abortableStream = abortableDuplex(maConn, signal);
              maConn.source = abortableStream.source;
              maConn.sink = abortableStream.sink;
              if ((await this.components.connectionGater.denyInboundConnection?.(maConn)) === true) {
                  throw new CodeError('The multiaddr connection is blocked by gater.acceptConnection', codes.ERR_CONNECTION_INTERCEPTED);
              }
              this.components.metrics?.trackMultiaddrConnection(maConn);
              log$2('starting the inbound connection upgrade');
              // Protect
              let protectedConn = maConn;
              if (opts?.skipProtection !== true) {
                  const protector = this.components.connectionProtector;
                  if (protector != null) {
                      log$2('protecting the inbound connection');
                      protectedConn = await protector.protect(maConn);
                  }
              }
              try {
                  // Encrypt the connection
                  encryptedConn = protectedConn;
                  if (opts?.skipEncryption !== true) {
                      ({
                          conn: encryptedConn,
                          remotePeer,
                          protocol: cryptoProtocol
                      } = await this._encryptInbound(protectedConn));
                      const maConn = {
                          ...protectedConn,
                          ...encryptedConn
                      };
                      await this.shouldBlockConnection(remotePeer, maConn, 'denyInboundEncryptedConnection');
                  }
                  else {
                      const idStr = maConn.remoteAddr.getPeerId();
                      if (idStr == null) {
                          throw new CodeError('inbound connection that skipped encryption must have a peer id', codes.ERR_INVALID_MULTIADDR);
                      }
                      const remotePeerId = peerIdFromString(idStr);
                      cryptoProtocol = 'native';
                      remotePeer = remotePeerId;
                  }
                  upgradedConn = encryptedConn;
                  if (opts?.muxerFactory != null) {
                      muxerFactory = opts.muxerFactory;
                  }
                  else if (this.muxers.size > 0) {
                      // Multiplex the connection
                      const multiplexed = await this._multiplexInbound({
                          ...protectedConn,
                          ...encryptedConn
                      }, this.muxers);
                      muxerFactory = multiplexed.muxerFactory;
                      upgradedConn = multiplexed.stream;
                  }
              }
              catch (err) {
                  log$2.error('Failed to upgrade inbound connection', err);
                  throw err;
              }
              await this.shouldBlockConnection(remotePeer, maConn, 'denyInboundUpgradedConnection');
              log$2('Successfully upgraded inbound connection');
              return this._createConnection({
                  cryptoProtocol,
                  direction: 'inbound',
                  maConn,
                  upgradedConn,
                  muxerFactory,
                  remotePeer
              });
          }
          finally {
              this.components.connectionManager.afterUpgradeInbound();
              signal.clear();
          }
      }
      /**
       * Upgrades an outbound connection
       */
      async upgradeOutbound(maConn, opts) {
          const idStr = maConn.remoteAddr.getPeerId();
          let remotePeerId;
          if (idStr != null) {
              remotePeerId = peerIdFromString(idStr);
              await this.shouldBlockConnection(remotePeerId, maConn, 'denyOutboundConnection');
          }
          let encryptedConn;
          let remotePeer;
          let upgradedConn;
          let cryptoProtocol;
          let muxerFactory;
          this.components.metrics?.trackMultiaddrConnection(maConn);
          log$2('Starting the outbound connection upgrade');
          // If the transport natively supports encryption, skip connection
          // protector and encryption
          // Protect
          let protectedConn = maConn;
          if (opts?.skipProtection !== true) {
              const protector = this.components.connectionProtector;
              if (protector != null) {
                  protectedConn = await protector.protect(maConn);
              }
          }
          try {
              // Encrypt the connection
              encryptedConn = protectedConn;
              if (opts?.skipEncryption !== true) {
                  ({
                      conn: encryptedConn,
                      remotePeer,
                      protocol: cryptoProtocol
                  } = await this._encryptOutbound(protectedConn, remotePeerId));
                  const maConn = {
                      ...protectedConn,
                      ...encryptedConn
                  };
                  await this.shouldBlockConnection(remotePeer, maConn, 'denyOutboundEncryptedConnection');
              }
              else {
                  if (remotePeerId == null) {
                      throw new CodeError('Encryption was skipped but no peer id was passed', codes.ERR_INVALID_PEER);
                  }
                  cryptoProtocol = 'native';
                  remotePeer = remotePeerId;
              }
              upgradedConn = encryptedConn;
              if (opts?.muxerFactory != null) {
                  muxerFactory = opts.muxerFactory;
              }
              else if (this.muxers.size > 0) {
                  // Multiplex the connection
                  const multiplexed = await this._multiplexOutbound({
                      ...protectedConn,
                      ...encryptedConn
                  }, this.muxers);
                  muxerFactory = multiplexed.muxerFactory;
                  upgradedConn = multiplexed.stream;
              }
          }
          catch (err) {
              log$2.error('Failed to upgrade outbound connection', err);
              await maConn.close(err);
              throw err;
          }
          await this.shouldBlockConnection(remotePeer, maConn, 'denyOutboundUpgradedConnection');
          log$2('Successfully upgraded outbound connection');
          return this._createConnection({
              cryptoProtocol,
              direction: 'outbound',
              maConn,
              upgradedConn,
              muxerFactory,
              remotePeer
          });
      }
      /**
       * A convenience method for generating a new `Connection`
       */
      _createConnection(opts) {
          const { cryptoProtocol, direction, maConn, upgradedConn, remotePeer, muxerFactory } = opts;
          let muxer;
          let newStream;
          let connection; // eslint-disable-line prefer-const
          if (muxerFactory != null) {
              // Create the muxer
              muxer = muxerFactory.createStreamMuxer({
                  direction,
                  // Run anytime a remote stream is created
                  onIncomingStream: muxedStream => {
                      if (connection == null) {
                          return;
                      }
                      void Promise.resolve()
                          .then(async () => {
                          const protocols = this.components.registrar.getProtocols();
                          const { stream, protocol } = await handle(muxedStream, protocols);
                          log$2('%s: incoming stream opened on %s', direction, protocol);
                          if (connection == null) {
                              return;
                          }
                          const incomingLimit = findIncomingStreamLimit(protocol, this.components.registrar);
                          const streamCount = countStreams(protocol, 'inbound', connection);
                          if (streamCount === incomingLimit) {
                              const err = new CodeError(`Too many inbound protocol streams for protocol "${protocol}" - limit ${incomingLimit}`, codes.ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS);
                              muxedStream.abort(err);
                              throw err;
                          }
                          // after the handshake the returned stream can have early data so override
                          // the souce/sink
                          muxedStream.source = stream.source;
                          muxedStream.sink = stream.sink;
                          muxedStream.stat.protocol = protocol;
                          // If a protocol stream has been successfully negotiated and is to be passed to the application,
                          // the peerstore should ensure that the peer is registered with that protocol
                          await this.components.peerStore.merge(remotePeer, {
                              protocols: [protocol]
                          });
                          connection.addStream(muxedStream);
                          this.components.metrics?.trackProtocolStream(muxedStream, connection);
                          this._onStream({ connection, stream: muxedStream, protocol });
                      })
                          .catch(err => {
                          log$2.error(err);
                          if (muxedStream.stat.timeline.close == null) {
                              muxedStream.close();
                          }
                      });
                  },
                  // Run anytime a stream closes
                  onStreamEnd: muxedStream => {
                      connection?.removeStream(muxedStream.id);
                  }
              });
              newStream = async (protocols, options = {}) => {
                  if (muxer == null) {
                      throw new CodeError('Stream is not multiplexed', codes.ERR_MUXER_UNAVAILABLE);
                  }
                  log$2('%s: starting new stream on %s', direction, protocols);
                  const muxedStream = await muxer.newStream();
                  try {
                      if (options.signal == null) {
                          log$2('No abort signal was passed while trying to negotiate protocols %s falling back to default timeout', protocols);
                          options.signal = AbortSignal.timeout(30000);
                          try {
                              // fails on node < 15.4
                              eventsExports.setMaxListeners?.(Infinity, options.signal);
                          }
                          catch { }
                      }
                      const { stream, protocol } = await select(muxedStream, protocols, options);
                      const outgoingLimit = findOutgoingStreamLimit(protocol, this.components.registrar, options);
                      const streamCount = countStreams(protocol, 'outbound', connection);
                      if (streamCount >= outgoingLimit) {
                          const err = new CodeError(`Too many outbound protocol streams for protocol "${protocol}" - limit ${outgoingLimit}`, codes.ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS);
                          muxedStream.abort(err);
                          throw err;
                      }
                      // If a protocol stream has been successfully negotiated and is to be passed to the application,
                      // the peerstore should ensure that the peer is registered with that protocol
                      await this.components.peerStore.merge(remotePeer, {
                          protocols: [protocol]
                      });
                      // after the handshake the returned stream can have early data so override
                      // the souce/sink
                      muxedStream.source = stream.source;
                      muxedStream.sink = stream.sink;
                      muxedStream.stat.protocol = protocol;
                      this.components.metrics?.trackProtocolStream(muxedStream, connection);
                      return muxedStream;
                  }
                  catch (err) {
                      log$2.error('could not create new stream', err);
                      if (muxedStream.stat.timeline.close == null) {
                          muxedStream.close();
                      }
                      if (err.code != null) {
                          throw err;
                      }
                      throw new CodeError(String(err), codes.ERR_UNSUPPORTED_PROTOCOL);
                  }
              };
              // Pipe all data through the muxer
              void Promise.all([
                  muxer.sink(upgradedConn.source),
                  upgradedConn.sink(muxer.source)
              ]).catch(err => {
                  log$2.error(err);
              });
          }
          const _timeline = maConn.timeline;
          maConn.timeline = new Proxy(_timeline, {
              set: (...args) => {
                  if (connection != null && args[1] === 'close' && args[2] != null && _timeline.close == null) {
                      // Wait for close to finish before notifying of the closure
                      (async () => {
                          try {
                              if (connection.stat.status === 'OPEN') {
                                  await connection.close();
                              }
                          }
                          catch (err) {
                              log$2.error(err);
                          }
                          finally {
                              this.events.safeDispatchEvent('connection:close', {
                                  detail: connection
                              });
                          }
                      })().catch(err => {
                          log$2.error(err);
                      });
                  }
                  return Reflect.set(...args);
              }
          });
          maConn.timeline.upgraded = Date.now();
          const errConnectionNotMultiplexed = () => {
              throw new CodeError('connection is not multiplexed', codes.ERR_CONNECTION_NOT_MULTIPLEXED);
          };
          // Create the connection
          connection = createConnection({
              remoteAddr: maConn.remoteAddr,
              remotePeer,
              stat: {
                  status: 'OPEN',
                  direction,
                  timeline: maConn.timeline,
                  multiplexer: muxer?.protocol,
                  encryption: cryptoProtocol
              },
              newStream: newStream ?? errConnectionNotMultiplexed,
              getStreams: () => { if (muxer != null) {
                  return muxer.streams;
              }
              else {
                  return errConnectionNotMultiplexed();
              } },
              close: async () => {
                  await maConn.close();
                  // Ensure remaining streams are closed
                  if (muxer != null) {
                      muxer.close();
                  }
              }
          });
          this.events.safeDispatchEvent('connection:open', {
              detail: connection
          });
          return connection;
      }
      /**
       * Routes incoming streams to the correct handler
       */
      _onStream(opts) {
          const { connection, stream, protocol } = opts;
          const { handler } = this.components.registrar.getHandler(protocol);
          handler({ connection, stream });
      }
      /**
       * Attempts to encrypt the incoming `connection` with the provided `cryptos`
       */
      async _encryptInbound(connection) {
          const protocols = Array.from(this.connectionEncryption.keys());
          log$2('handling inbound crypto protocol selection', protocols);
          try {
              const { stream, protocol } = await handle(connection, protocols, {
                  writeBytes: true
              });
              const encrypter = this.connectionEncryption.get(protocol);
              if (encrypter == null) {
                  throw new Error(`no crypto module found for ${protocol}`);
              }
              log$2('encrypting inbound connection...');
              return {
                  ...await encrypter.secureInbound(this.components.peerId, stream),
                  protocol
              };
          }
          catch (err) {
              throw new CodeError(String(err), codes.ERR_ENCRYPTION_FAILED);
          }
      }
      /**
       * Attempts to encrypt the given `connection` with the provided connection encrypters.
       * The first `ConnectionEncrypter` module to succeed will be used
       */
      async _encryptOutbound(connection, remotePeerId) {
          const protocols = Array.from(this.connectionEncryption.keys());
          log$2('selecting outbound crypto protocol', protocols);
          try {
              const { stream, protocol } = await select(connection, protocols, {
                  writeBytes: true
              });
              const encrypter = this.connectionEncryption.get(protocol);
              if (encrypter == null) {
                  throw new Error(`no crypto module found for ${protocol}`);
              }
              log$2('encrypting outbound connection to %p', remotePeerId);
              return {
                  ...await encrypter.secureOutbound(this.components.peerId, stream, remotePeerId),
                  protocol
              };
          }
          catch (err) {
              throw new CodeError(String(err), codes.ERR_ENCRYPTION_FAILED);
          }
      }
      /**
       * Selects one of the given muxers via multistream-select. That
       * muxer will be used for all future streams on the connection.
       */
      async _multiplexOutbound(connection, muxers) {
          const protocols = Array.from(muxers.keys());
          log$2('outbound selecting muxer %s', protocols);
          try {
              const { stream, protocol } = await select(connection, protocols, {
                  writeBytes: true
              });
              log$2('%s selected as muxer protocol', protocol);
              const muxerFactory = muxers.get(protocol);
              return { stream, muxerFactory };
          }
          catch (err) {
              log$2.error('error multiplexing outbound stream', err);
              throw new CodeError(String(err), codes.ERR_MUXER_UNAVAILABLE);
          }
      }
      /**
       * Registers support for one of the given muxers via multistream-select. The
       * selected muxer will be used for all future streams on the connection.
       */
      async _multiplexInbound(connection, muxers) {
          const protocols = Array.from(muxers.keys());
          log$2('inbound handling muxers %s', protocols);
          try {
              const { stream, protocol } = await handle(connection, protocols, {
                  writeBytes: true
              });
              const muxerFactory = muxers.get(protocol);
              return { stream, muxerFactory };
          }
          catch (err) {
              log$2.error('error multiplexing inbound stream', err);
              throw new CodeError(String(err), codes.ERR_MUXER_UNAVAILABLE);
          }
      }
  }

  const log$1 = logger('libp2p');
  class Libp2pNode extends EventEmitter$1 {
      peerId;
      peerStore;
      contentRouting;
      peerRouting;
      keychain;
      metrics;
      services;
      components;
      #started;
      constructor(init) {
          super();
          // event bus - components can listen to this emitter to be notified of system events
          // and also cause them to be emitted
          const events = new EventEmitter$1();
          const originalDispatch = events.dispatchEvent.bind(events);
          events.dispatchEvent = (evt) => {
              const internalResult = originalDispatch(evt);
              const externalResult = this.dispatchEvent(new CustomEvent(evt.type, { detail: evt.detail }));
              return internalResult || externalResult;
          };
          try {
              // This emitter gets listened to a lot
              eventsExports.setMaxListeners?.(Infinity, events);
          }
          catch { }
          this.#started = false;
          this.peerId = init.peerId;
          // @ts-expect-error {} may not be of type T
          this.services = {};
          const components = this.components = defaultComponents({
              peerId: init.peerId,
              events,
              datastore: init.datastore ?? new MemoryDatastore(),
              connectionGater: connectionGater(init.connectionGater)
          });
          this.peerStore = this.configureComponent('peerStore', new PersistentPeerStore(components, {
              addressFilter: this.components.connectionGater.filterMultiaddrForPeer,
              ...init.peerStore
          }));
          // Create Metrics
          if (init.metrics != null) {
              this.metrics = this.configureComponent('metrics', init.metrics(this.components));
          }
          components.events.addEventListener('peer:update', evt => {
              // if there was no peer previously in the peer store this is a new peer
              if (evt.detail.previous == null) {
                  this.safeDispatchEvent('peer:discovery', { detail: evt.detail.peer });
              }
          });
          // Set up connection protector if configured
          if (init.connectionProtector != null) {
              this.configureComponent('connectionProtector', init.connectionProtector(components));
          }
          // Set up the Upgrader
          this.components.upgrader = new DefaultUpgrader(this.components, {
              connectionEncryption: (init.connectionEncryption ?? []).map((fn, index) => this.configureComponent(`connection-encryption-${index}`, fn(this.components))),
              muxers: (init.streamMuxers ?? []).map((fn, index) => this.configureComponent(`stream-muxers-${index}`, fn(this.components))),
              inboundUpgradeTimeout: init.connectionManager.inboundUpgradeTimeout
          });
          // Setup the transport manager
          this.configureComponent('transportManager', new DefaultTransportManager(this.components, init.transportManager));
          // Create the Connection Manager
          this.configureComponent('connectionManager', new DefaultConnectionManager(this.components, init.connectionManager));
          // Create the Registrar
          this.configureComponent('registrar', new DefaultRegistrar(this.components));
          // Addresses {listen, announce, noAnnounce}
          this.configureComponent('addressManager', new DefaultAddressManager(this.components, init.addresses));
          // Create keychain
          const keychainOpts = DefaultKeyChain.generateOptions();
          this.keychain = this.configureComponent('keyChain', new DefaultKeyChain(this.components, {
              ...keychainOpts,
              ...init.keychain
          }));
          // Peer routers
          const peerRouters = (init.peerRouters ?? []).map((fn, index) => this.configureComponent(`peer-router-${index}`, fn(this.components)));
          this.peerRouting = this.components.peerRouting = this.configureComponent('peerRouting', new DefaultPeerRouting(this.components, {
              routers: peerRouters
          }));
          // Content routers
          const contentRouters = (init.contentRouters ?? []).map((fn, index) => this.configureComponent(`content-router-${index}`, fn(this.components)));
          this.contentRouting = this.components.contentRouting = this.configureComponent('contentRouting', new CompoundContentRouting(this.components, {
              routers: contentRouters
          }));
          (init.peerDiscovery ?? []).forEach((fn, index) => {
              const service = this.configureComponent(`peer-discovery-${index}`, fn(this.components));
              service.addEventListener('peer', (evt) => {
                  this.#onDiscoveryPeer(evt);
              });
          });
          // Transport modules
          init.transports.forEach((fn, index) => {
              this.components.transportManager.add(this.configureComponent(`transport-${index}`, fn(this.components)));
          });
          // User defined modules
          if (init.services != null) {
              for (const name of Object.keys(init.services)) {
                  const createService = init.services[name];
                  const service = createService(this.components);
                  if (service == null) {
                      log$1.error('service factory %s returned null or undefined instance', name);
                      continue;
                  }
                  this.services[name] = service;
                  this.configureComponent(name, service);
                  if (service[contentRouting] != null) {
                      log$1('registering service %s for content routing', name);
                      contentRouters.push(service[contentRouting]);
                  }
                  if (service[peerRouting] != null) {
                      log$1('registering service %s for peer routing', name);
                      peerRouters.push(service[peerRouting]);
                  }
                  if (service[peerDiscovery] != null) {
                      log$1('registering service %s for peer discovery', name);
                      service[peerDiscovery].addEventListener('peer', (evt) => {
                          this.#onDiscoveryPeer(evt);
                      });
                  }
              }
          }
      }
      configureComponent(name, component) {
          if (component == null) {
              log$1.error('component %s was null or undefined', name);
          }
          this.components[name] = component;
          return component;
      }
      /**
       * Starts the libp2p node and all its subsystems
       */
      async start() {
          if (this.#started) {
              return;
          }
          this.#started = true;
          log$1('libp2p is starting');
          const keys = await this.keychain.listKeys();
          if (keys.find(key => key.name === 'self') == null) {
              log$1('importing self key into keychain');
              await this.keychain.importPeer('self', this.components.peerId);
          }
          try {
              await this.components.beforeStart?.();
              await this.components.start();
              await this.components.afterStart?.();
              this.safeDispatchEvent('start', { detail: this });
              log$1('libp2p has started');
          }
          catch (err) {
              log$1.error('An error occurred starting libp2p', err);
              await this.stop();
              throw err;
          }
      }
      /**
       * Stop the libp2p node by closing its listeners and open connections
       */
      async stop() {
          if (!this.#started) {
              return;
          }
          log$1('libp2p is stopping');
          this.#started = false;
          await this.components.beforeStop?.();
          await this.components.stop();
          await this.components.afterStop?.();
          this.safeDispatchEvent('stop', { detail: this });
          log$1('libp2p has stopped');
      }
      isStarted() {
          return this.#started;
      }
      getConnections(peerId) {
          return this.components.connectionManager.getConnections(peerId);
      }
      getDialQueue() {
          return this.components.connectionManager.getDialQueue();
      }
      getPeers() {
          const peerSet = new PeerSet();
          for (const conn of this.components.connectionManager.getConnections()) {
              peerSet.add(conn.remotePeer);
          }
          return Array.from(peerSet);
      }
      async dial(peer, options = {}) {
          return this.components.connectionManager.openConnection(peer, options);
      }
      async dialProtocol(peer, protocols, options = {}) {
          if (protocols == null) {
              throw new CodeError('no protocols were provided to open a stream', codes.ERR_INVALID_PROTOCOLS_FOR_STREAM);
          }
          protocols = Array.isArray(protocols) ? protocols : [protocols];
          if (protocols.length === 0) {
              throw new CodeError('no protocols were provided to open a stream', codes.ERR_INVALID_PROTOCOLS_FOR_STREAM);
          }
          const connection = await this.dial(peer, options);
          return connection.newStream(protocols, options);
      }
      getMultiaddrs() {
          return this.components.addressManager.getAddresses();
      }
      getProtocols() {
          return this.components.registrar.getProtocols();
      }
      async hangUp(peer) {
          if (isMultiaddr(peer)) {
              peer = peerIdFromString(peer.getPeerId() ?? '');
          }
          await this.components.connectionManager.closeConnections(peer);
      }
      /**
       * Get the public key for the given peer id
       */
      async getPublicKey(peer, options = {}) {
          log$1('getPublicKey %p', peer);
          if (peer.publicKey != null) {
              return peer.publicKey;
          }
          const peerInfo = await this.peerStore.get(peer);
          if (peerInfo.id.publicKey != null) {
              return peerInfo.id.publicKey;
          }
          const peerKey = concat([
              fromString$1('/pk/'),
              peer.multihash.digest
          ]);
          // search any available content routing methods
          const bytes = await this.contentRouting.get(peerKey, options);
          // ensure the returned key is valid
          unmarshalPublicKey(bytes);
          await this.peerStore.patch(peer, {
              publicKey: bytes
          });
          return bytes;
      }
      async handle(protocols, handler, options) {
          if (!Array.isArray(protocols)) {
              protocols = [protocols];
          }
          await Promise.all(protocols.map(async (protocol) => {
              await this.components.registrar.handle(protocol, handler, options);
          }));
      }
      async unhandle(protocols) {
          if (!Array.isArray(protocols)) {
              protocols = [protocols];
          }
          await Promise.all(protocols.map(async (protocol) => {
              await this.components.registrar.unhandle(protocol);
          }));
      }
      async register(protocol, topology) {
          return this.components.registrar.register(protocol, topology);
      }
      unregister(id) {
          this.components.registrar.unregister(id);
      }
      /**
       * Called whenever peer discovery services emit `peer` events and adds peers
       * to the peer store.
       */
      #onDiscoveryPeer(evt) {
          const { detail: peer } = evt;
          if (peer.id.toString() === this.peerId.toString()) {
              log$1.error(new Error(codes.ERR_DISCOVERED_SELF));
              return;
          }
          void this.components.peerStore.merge(peer.id, {
              multiaddrs: peer.multiaddrs,
              protocols: peer.protocols
          })
              .catch(err => { log$1.error(err); });
      }
  }
  /**
   * Returns a new Libp2pNode instance - this exposes more of the internals than the
   * libp2p interface and is useful for testing and debugging.
   */
  async function createLibp2pNode$1(options) {
      if (options.peerId == null) {
          const datastore = options.datastore;
          if (datastore != null) {
              try {
                  // try load the peer id from the keychain
                  const keyChain = new DefaultKeyChain({
                      datastore
                  }, mergeOptions$1(DefaultKeyChain.generateOptions(), options.keychain));
                  options.peerId = await keyChain.exportPeerId('self');
              }
              catch (err) {
                  if (err.code !== 'ERR_NOT_FOUND') {
                      throw err;
                  }
              }
          }
      }
      if (options.peerId == null) {
          // no peer id in the keychain, create a new peer id
          options.peerId = await createEd25519PeerId();
      }
      return new Libp2pNode(validateConfig(options));
  }

  /**
   * @packageDocumentation
   *
   * Use the `createLibp2p` function to create a libp2p node.
   *
   * @example
   *
   * ```typescript
   * import { createLibp2p } from 'libp2p'
   *
   * const node = await createLibp2p({
   *   // ...other options
   * })
   * ```
   */
  /**
   * Returns a new instance of the Libp2p interface, generating a new PeerId
   * if one is not passed as part of the options.
   *
   * The node will be started unless `start: false` is passed as an option.
   *
   * @example
   *
   * ```js
   * import { createLibp2p } from 'libp2p'
   * import { tcp } from '@libp2p/tcp'
   * import { mplex } from '@libp2p/mplex'
   * import { noise } from '@chainsafe/libp2p-noise'
   * import { yamux } from '@chainsafe/libp2p-yamux'
   *
   * // specify options
   * const options = {
   *   transports: [tcp()],
   *   streamMuxers: [yamux(), mplex()],
   *   connectionEncryption: [noise()]
   * }
   *
   * // create libp2p
   * const libp2p = await createLibp2p(options)
   * ```
   */
  async function createLibp2p(options) {
      const node = await createLibp2pNode$1(options);
      if (options.start !== false) {
          await node.start();
      }
      return node;
  }

  const noop$1 = () => { };
  class TopologyImpl {
      min;
      max;
      /**
       * Set of peers that support the protocol
       */
      peers;
      onConnect;
      onDisconnect;
      registrar;
      constructor(init) {
          this.min = init.min ?? 0;
          this.max = init.max ?? Infinity;
          this.peers = new Set();
          this.onConnect = init.onConnect ?? noop$1;
          this.onDisconnect = init.onDisconnect ?? noop$1;
      }
      get [Symbol.toStringTag]() {
          return topologySymbol.toString();
      }
      [topologySymbol] = true;
      async setRegistrar(registrar) {
          this.registrar = registrar;
      }
      /**
       * Notify about peer disconnected event
       */
      disconnect(peerId) {
          this.onDisconnect(peerId);
      }
  }
  function createTopology(init) {
      return new TopologyImpl(init);
  }

  class MessageCache {
      /**
       * Holds history of messages in timebounded history arrays
       */
      constructor(
      /**
       * The number of indices in the cache history used for gossiping. That means that a message
       * won't get gossiped anymore when shift got called `gossip` many times after inserting the
       * message in the cache.
       */
      gossip, historyCapacity, msgIdToStrFn) {
          this.gossip = gossip;
          this.msgs = new Map();
          this.history = [];
          /** Track with accounting of messages in the mcache that are not yet validated */
          this.notValidatedCount = 0;
          this.msgIdToStrFn = msgIdToStrFn;
          for (let i = 0; i < historyCapacity; i++) {
              this.history[i] = [];
          }
      }
      get size() {
          return this.msgs.size;
      }
      /**
       * Adds a message to the current window and the cache
       * Returns true if the message is not known and is inserted in the cache
       */
      put(messageId, msg, validated = false) {
          const { msgIdStr } = messageId;
          // Don't add duplicate entries to the cache.
          if (this.msgs.has(msgIdStr)) {
              return false;
          }
          this.msgs.set(msgIdStr, {
              message: msg,
              validated,
              originatingPeers: new Set(),
              iwantCounts: new Map()
          });
          this.history[0].push({ ...messageId, topic: msg.topic });
          if (!validated) {
              this.notValidatedCount++;
          }
          return true;
      }
      observeDuplicate(msgId, fromPeerIdStr) {
          const entry = this.msgs.get(msgId);
          if (entry &&
              // if the message is already validated, we don't need to store extra peers sending us
              // duplicates as the message has already been forwarded
              !entry.validated) {
              entry.originatingPeers.add(fromPeerIdStr);
          }
      }
      /**
       * Retrieves a message from the cache by its ID, if it is still present
       */
      get(msgId) {
          return this.msgs.get(this.msgIdToStrFn(msgId))?.message;
      }
      /**
       * Increases the iwant count for the given message by one and returns the message together
       * with the iwant if the message exists.
       */
      getWithIWantCount(msgIdStr, p) {
          const msg = this.msgs.get(msgIdStr);
          if (!msg) {
              return null;
          }
          const count = (msg.iwantCounts.get(p) ?? 0) + 1;
          msg.iwantCounts.set(p, count);
          return { msg: msg.message, count };
      }
      /**
       * Retrieves a list of message IDs for a set of topics
       */
      getGossipIDs(topics) {
          const msgIdsByTopic = new Map();
          for (let i = 0; i < this.gossip; i++) {
              this.history[i].forEach((entry) => {
                  const msg = this.msgs.get(entry.msgIdStr);
                  if (msg && msg.validated && topics.has(entry.topic)) {
                      let msgIds = msgIdsByTopic.get(entry.topic);
                      if (!msgIds) {
                          msgIds = [];
                          msgIdsByTopic.set(entry.topic, msgIds);
                      }
                      msgIds.push(entry.msgId);
                  }
              });
          }
          return msgIdsByTopic;
      }
      /**
       * Gets a message with msgId and tags it as validated.
       * This function also returns the known peers that have sent us this message. This is used to
       * prevent us sending redundant messages to peers who have already propagated it.
       */
      validate(msgId) {
          const entry = this.msgs.get(msgId);
          if (!entry) {
              return null;
          }
          if (!entry.validated) {
              this.notValidatedCount--;
          }
          const { message, originatingPeers } = entry;
          entry.validated = true;
          // Clear the known peers list (after a message is validated, it is forwarded and we no
          // longer need to store the originating peers).
          entry.originatingPeers = new Set();
          return { message, originatingPeers };
      }
      /**
       * Shifts the current window, discarding messages older than this.history.length of the cache
       */
      shift() {
          const lastCacheEntries = this.history[this.history.length - 1];
          lastCacheEntries.forEach((cacheEntry) => {
              const entry = this.msgs.get(cacheEntry.msgIdStr);
              if (entry) {
                  this.msgs.delete(cacheEntry.msgIdStr);
                  if (!entry.validated) {
                      this.notValidatedCount--;
                  }
              }
          });
          this.history.pop();
          this.history.unshift([]);
      }
      remove(msgId) {
          const entry = this.msgs.get(msgId);
          if (!entry) {
              return null;
          }
          // Keep the message on the history vector, it will be dropped on a shift()
          this.msgs.delete(msgId);
          return entry;
      }
  }

  function commonjsRequire(path) {
  	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }

  var rpc$1 = {exports: {}};

  var indexMinimal = {};

  var minimal$1 = {};

  var longbits;
  var hasRequiredLongbits;

  function requireLongbits () {
  	if (hasRequiredLongbits) return longbits;
  	hasRequiredLongbits = 1;
  	longbits = LongBits;

  	var util = requireMinimal();

  	/**
  	 * Constructs new long bits.
  	 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
  	 * @memberof util
  	 * @constructor
  	 * @param {number} lo Low 32 bits, unsigned
  	 * @param {number} hi High 32 bits, unsigned
  	 */
  	function LongBits(lo, hi) {

  	    // note that the casts below are theoretically unnecessary as of today, but older statically
  	    // generated converter code might still call the ctor with signed 32bits. kept for compat.

  	    /**
  	     * Low bits.
  	     * @type {number}
  	     */
  	    this.lo = lo >>> 0;

  	    /**
  	     * High bits.
  	     * @type {number}
  	     */
  	    this.hi = hi >>> 0;
  	}

  	/**
  	 * Zero bits.
  	 * @memberof util.LongBits
  	 * @type {util.LongBits}
  	 */
  	var zero = LongBits.zero = new LongBits(0, 0);

  	zero.toNumber = function() { return 0; };
  	zero.zzEncode = zero.zzDecode = function() { return this; };
  	zero.length = function() { return 1; };

  	/**
  	 * Zero hash.
  	 * @memberof util.LongBits
  	 * @type {string}
  	 */
  	var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

  	/**
  	 * Constructs new long bits from the specified number.
  	 * @param {number} value Value
  	 * @returns {util.LongBits} Instance
  	 */
  	LongBits.fromNumber = function fromNumber(value) {
  	    if (value === 0)
  	        return zero;
  	    var sign = value < 0;
  	    if (sign)
  	        value = -value;
  	    var lo = value >>> 0,
  	        hi = (value - lo) / 4294967296 >>> 0;
  	    if (sign) {
  	        hi = ~hi >>> 0;
  	        lo = ~lo >>> 0;
  	        if (++lo > 4294967295) {
  	            lo = 0;
  	            if (++hi > 4294967295)
  	                hi = 0;
  	        }
  	    }
  	    return new LongBits(lo, hi);
  	};

  	/**
  	 * Constructs new long bits from a number, long or string.
  	 * @param {Long|number|string} value Value
  	 * @returns {util.LongBits} Instance
  	 */
  	LongBits.from = function from(value) {
  	    if (typeof value === "number")
  	        return LongBits.fromNumber(value);
  	    if (util.isString(value)) {
  	        /* istanbul ignore else */
  	        if (util.Long)
  	            value = util.Long.fromString(value);
  	        else
  	            return LongBits.fromNumber(parseInt(value, 10));
  	    }
  	    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
  	};

  	/**
  	 * Converts this long bits to a possibly unsafe JavaScript number.
  	 * @param {boolean} [unsigned=false] Whether unsigned or not
  	 * @returns {number} Possibly unsafe number
  	 */
  	LongBits.prototype.toNumber = function toNumber(unsigned) {
  	    if (!unsigned && this.hi >>> 31) {
  	        var lo = ~this.lo + 1 >>> 0,
  	            hi = ~this.hi     >>> 0;
  	        if (!lo)
  	            hi = hi + 1 >>> 0;
  	        return -(lo + hi * 4294967296);
  	    }
  	    return this.lo + this.hi * 4294967296;
  	};

  	/**
  	 * Converts this long bits to a long.
  	 * @param {boolean} [unsigned=false] Whether unsigned or not
  	 * @returns {Long} Long
  	 */
  	LongBits.prototype.toLong = function toLong(unsigned) {
  	    return util.Long
  	        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
  	        /* istanbul ignore next */
  	        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
  	};

  	var charCodeAt = String.prototype.charCodeAt;

  	/**
  	 * Constructs new long bits from the specified 8 characters long hash.
  	 * @param {string} hash Hash
  	 * @returns {util.LongBits} Bits
  	 */
  	LongBits.fromHash = function fromHash(hash) {
  	    if (hash === zeroHash)
  	        return zero;
  	    return new LongBits(
  	        ( charCodeAt.call(hash, 0)
  	        | charCodeAt.call(hash, 1) << 8
  	        | charCodeAt.call(hash, 2) << 16
  	        | charCodeAt.call(hash, 3) << 24) >>> 0
  	    ,
  	        ( charCodeAt.call(hash, 4)
  	        | charCodeAt.call(hash, 5) << 8
  	        | charCodeAt.call(hash, 6) << 16
  	        | charCodeAt.call(hash, 7) << 24) >>> 0
  	    );
  	};

  	/**
  	 * Converts this long bits to a 8 characters long hash.
  	 * @returns {string} Hash
  	 */
  	LongBits.prototype.toHash = function toHash() {
  	    return String.fromCharCode(
  	        this.lo        & 255,
  	        this.lo >>> 8  & 255,
  	        this.lo >>> 16 & 255,
  	        this.lo >>> 24      ,
  	        this.hi        & 255,
  	        this.hi >>> 8  & 255,
  	        this.hi >>> 16 & 255,
  	        this.hi >>> 24
  	    );
  	};

  	/**
  	 * Zig-zag encodes this long bits.
  	 * @returns {util.LongBits} `this`
  	 */
  	LongBits.prototype.zzEncode = function zzEncode() {
  	    var mask =   this.hi >> 31;
  	    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
  	    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
  	    return this;
  	};

  	/**
  	 * Zig-zag decodes this long bits.
  	 * @returns {util.LongBits} `this`
  	 */
  	LongBits.prototype.zzDecode = function zzDecode() {
  	    var mask = -(this.lo & 1);
  	    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
  	    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
  	    return this;
  	};

  	/**
  	 * Calculates the length of this longbits when encoded as a varint.
  	 * @returns {number} Length
  	 */
  	LongBits.prototype.length = function length() {
  	    var part0 =  this.lo,
  	        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
  	        part2 =  this.hi >>> 24;
  	    return part2 === 0
  	         ? part1 === 0
  	           ? part0 < 16384
  	             ? part0 < 128 ? 1 : 2
  	             : part0 < 2097152 ? 3 : 4
  	           : part1 < 16384
  	             ? part1 < 128 ? 5 : 6
  	             : part1 < 2097152 ? 7 : 8
  	         : part2 < 128 ? 9 : 10;
  	};
  	return longbits;
  }

  var hasRequiredMinimal;

  function requireMinimal () {
  	if (hasRequiredMinimal) return minimal$1;
  	hasRequiredMinimal = 1;
  	(function (exports) {
  		var util = exports;

  		// used to return a Promise where callback is omitted
  		util.asPromise = requireAspromise();

  		// converts to / from base64 encoded strings
  		util.base64 = requireBase64();

  		// base class of rpc.Service
  		util.EventEmitter = requireEventemitter();

  		// float handling accross browsers
  		util.float = requireFloat();

  		// requires modules optionally and hides the call from bundlers
  		util.inquire = requireInquire();

  		// converts to / from utf8 encoded strings
  		util.utf8 = requireUtf8();

  		// provides a node-like buffer pool in the browser
  		util.pool = requirePool();

  		// utility to work with the low and high bits of a 64 bit value
  		util.LongBits = requireLongbits();

  		/**
  		 * Whether running within node or not.
  		 * @memberof util
  		 * @type {boolean}
  		 */
  		util.isNode = Boolean(typeof commonjsGlobal !== "undefined"
  		                   && commonjsGlobal
  		                   && commonjsGlobal.process
  		                   && commonjsGlobal.process.versions
  		                   && commonjsGlobal.process.versions.node);

  		/**
  		 * Global object reference.
  		 * @memberof util
  		 * @type {Object}
  		 */
  		util.global = util.isNode && commonjsGlobal
  		           || typeof window !== "undefined" && window
  		           || typeof self   !== "undefined" && self
  		           || commonjsGlobal; // eslint-disable-line no-invalid-this

  		/**
  		 * An immuable empty array.
  		 * @memberof util
  		 * @type {Array.<*>}
  		 * @const
  		 */
  		util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

  		/**
  		 * An immutable empty object.
  		 * @type {Object}
  		 * @const
  		 */
  		util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

  		/**
  		 * Tests if the specified value is an integer.
  		 * @function
  		 * @param {*} value Value to test
  		 * @returns {boolean} `true` if the value is an integer
  		 */
  		util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
  		    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
  		};

  		/**
  		 * Tests if the specified value is a string.
  		 * @param {*} value Value to test
  		 * @returns {boolean} `true` if the value is a string
  		 */
  		util.isString = function isString(value) {
  		    return typeof value === "string" || value instanceof String;
  		};

  		/**
  		 * Tests if the specified value is a non-null object.
  		 * @param {*} value Value to test
  		 * @returns {boolean} `true` if the value is a non-null object
  		 */
  		util.isObject = function isObject(value) {
  		    return value && typeof value === "object";
  		};

  		/**
  		 * Checks if a property on a message is considered to be present.
  		 * This is an alias of {@link util.isSet}.
  		 * @function
  		 * @param {Object} obj Plain object or message instance
  		 * @param {string} prop Property name
  		 * @returns {boolean} `true` if considered to be present, otherwise `false`
  		 */
  		util.isset =

  		/**
  		 * Checks if a property on a message is considered to be present.
  		 * @param {Object} obj Plain object or message instance
  		 * @param {string} prop Property name
  		 * @returns {boolean} `true` if considered to be present, otherwise `false`
  		 */
  		util.isSet = function isSet(obj, prop) {
  		    var value = obj[prop];
  		    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
  		        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
  		    return false;
  		};

  		/**
  		 * Any compatible Buffer instance.
  		 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
  		 * @interface Buffer
  		 * @extends Uint8Array
  		 */

  		/**
  		 * Node's Buffer class if available.
  		 * @type {Constructor<Buffer>}
  		 */
  		util.Buffer = (function() {
  		    try {
  		        var Buffer = util.inquire("buffer").Buffer;
  		        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
  		        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
  		    } catch (e) {
  		        /* istanbul ignore next */
  		        return null;
  		    }
  		})();

  		// Internal alias of or polyfull for Buffer.from.
  		util._Buffer_from = null;

  		// Internal alias of or polyfill for Buffer.allocUnsafe.
  		util._Buffer_allocUnsafe = null;

  		/**
  		 * Creates a new buffer of whatever type supported by the environment.
  		 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
  		 * @returns {Uint8Array|Buffer} Buffer
  		 */
  		util.newBuffer = function newBuffer(sizeOrArray) {
  		    /* istanbul ignore next */
  		    return typeof sizeOrArray === "number"
  		        ? util.Buffer
  		            ? util._Buffer_allocUnsafe(sizeOrArray)
  		            : new util.Array(sizeOrArray)
  		        : util.Buffer
  		            ? util._Buffer_from(sizeOrArray)
  		            : typeof Uint8Array === "undefined"
  		                ? sizeOrArray
  		                : new Uint8Array(sizeOrArray);
  		};

  		/**
  		 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
  		 * @type {Constructor<Uint8Array>}
  		 */
  		util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

  		/**
  		 * Any compatible Long instance.
  		 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
  		 * @interface Long
  		 * @property {number} low Low bits
  		 * @property {number} high High bits
  		 * @property {boolean} unsigned Whether unsigned or not
  		 */

  		/**
  		 * Long.js's Long class if available.
  		 * @type {Constructor<Long>}
  		 */
  		util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
  		         || /* istanbul ignore next */ util.global.Long
  		         || util.inquire("long");

  		/**
  		 * Regular expression used to verify 2 bit (`bool`) map keys.
  		 * @type {RegExp}
  		 * @const
  		 */
  		util.key2Re = /^true|false|0|1$/;

  		/**
  		 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
  		 * @type {RegExp}
  		 * @const
  		 */
  		util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

  		/**
  		 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
  		 * @type {RegExp}
  		 * @const
  		 */
  		util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

  		/**
  		 * Converts a number or long to an 8 characters long hash string.
  		 * @param {Long|number} value Value to convert
  		 * @returns {string} Hash
  		 */
  		util.longToHash = function longToHash(value) {
  		    return value
  		        ? util.LongBits.from(value).toHash()
  		        : util.LongBits.zeroHash;
  		};

  		/**
  		 * Converts an 8 characters long hash string to a long or number.
  		 * @param {string} hash Hash
  		 * @param {boolean} [unsigned=false] Whether unsigned or not
  		 * @returns {Long|number} Original value
  		 */
  		util.longFromHash = function longFromHash(hash, unsigned) {
  		    var bits = util.LongBits.fromHash(hash);
  		    if (util.Long)
  		        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
  		    return bits.toNumber(Boolean(unsigned));
  		};

  		/**
  		 * Merges the properties of the source object into the destination object.
  		 * @memberof util
  		 * @param {Object.<string,*>} dst Destination object
  		 * @param {Object.<string,*>} src Source object
  		 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
  		 * @returns {Object.<string,*>} Destination object
  		 */
  		function merge(dst, src, ifNotSet) { // used by converters
  		    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
  		        if (dst[keys[i]] === undefined || !ifNotSet)
  		            dst[keys[i]] = src[keys[i]];
  		    return dst;
  		}

  		util.merge = merge;

  		/**
  		 * Converts the first character of a string to lower case.
  		 * @param {string} str String to convert
  		 * @returns {string} Converted string
  		 */
  		util.lcFirst = function lcFirst(str) {
  		    return str.charAt(0).toLowerCase() + str.substring(1);
  		};

  		/**
  		 * Creates a custom error constructor.
  		 * @memberof util
  		 * @param {string} name Error name
  		 * @returns {Constructor<Error>} Custom error constructor
  		 */
  		function newError(name) {

  		    function CustomError(message, properties) {

  		        if (!(this instanceof CustomError))
  		            return new CustomError(message, properties);

  		        // Error.call(this, message);
  		        // ^ just returns a new error instance because the ctor can be called as a function

  		        Object.defineProperty(this, "message", { get: function() { return message; } });

  		        /* istanbul ignore next */
  		        if (Error.captureStackTrace) // node
  		            Error.captureStackTrace(this, CustomError);
  		        else
  		            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

  		        if (properties)
  		            merge(this, properties);
  		    }

  		    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

  		    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

  		    CustomError.prototype.toString = function toString() {
  		        return this.name + ": " + this.message;
  		    };

  		    return CustomError;
  		}

  		util.newError = newError;

  		/**
  		 * Constructs a new protocol error.
  		 * @classdesc Error subclass indicating a protocol specifc error.
  		 * @memberof util
  		 * @extends Error
  		 * @template T extends Message<T>
  		 * @constructor
  		 * @param {string} message Error message
  		 * @param {Object.<string,*>} [properties] Additional properties
  		 * @example
  		 * try {
  		 *     MyMessage.decode(someBuffer); // throws if required fields are missing
  		 * } catch (e) {
  		 *     if (e instanceof ProtocolError && e.instance)
  		 *         console.log("decoded so far: " + JSON.stringify(e.instance));
  		 * }
  		 */
  		util.ProtocolError = newError("ProtocolError");

  		/**
  		 * So far decoded message instance.
  		 * @name util.ProtocolError#instance
  		 * @type {Message<T>}
  		 */

  		/**
  		 * A OneOf getter as returned by {@link util.oneOfGetter}.
  		 * @typedef OneOfGetter
  		 * @type {function}
  		 * @returns {string|undefined} Set field name, if any
  		 */

  		/**
  		 * Builds a getter for a oneof's present field name.
  		 * @param {string[]} fieldNames Field names
  		 * @returns {OneOfGetter} Unbound getter
  		 */
  		util.oneOfGetter = function getOneOf(fieldNames) {
  		    var fieldMap = {};
  		    for (var i = 0; i < fieldNames.length; ++i)
  		        fieldMap[fieldNames[i]] = 1;

  		    /**
  		     * @returns {string|undefined} Set field name, if any
  		     * @this Object
  		     * @ignore
  		     */
  		    return function() { // eslint-disable-line consistent-return
  		        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
  		            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
  		                return keys[i];
  		    };
  		};

  		/**
  		 * A OneOf setter as returned by {@link util.oneOfSetter}.
  		 * @typedef OneOfSetter
  		 * @type {function}
  		 * @param {string|undefined} value Field name
  		 * @returns {undefined}
  		 */

  		/**
  		 * Builds a setter for a oneof's present field name.
  		 * @param {string[]} fieldNames Field names
  		 * @returns {OneOfSetter} Unbound setter
  		 */
  		util.oneOfSetter = function setOneOf(fieldNames) {

  		    /**
  		     * @param {string} name Field name
  		     * @returns {undefined}
  		     * @this Object
  		     * @ignore
  		     */
  		    return function(name) {
  		        for (var i = 0; i < fieldNames.length; ++i)
  		            if (fieldNames[i] !== name)
  		                delete this[fieldNames[i]];
  		    };
  		};

  		/**
  		 * Default conversion options used for {@link Message#toJSON} implementations.
  		 *
  		 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
  		 *
  		 * - Longs become strings
  		 * - Enums become string keys
  		 * - Bytes become base64 encoded strings
  		 * - (Sub-)Messages become plain objects
  		 * - Maps become plain objects with all string keys
  		 * - Repeated fields become arrays
  		 * - NaN and Infinity for float and double fields become strings
  		 *
  		 * @type {IConversionOptions}
  		 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
  		 */
  		util.toJSONOptions = {
  		    longs: String,
  		    enums: String,
  		    bytes: String,
  		    json: true
  		};

  		// Sets up buffer utility according to the environment (called in index-minimal)
  		util._configure = function() {
  		    var Buffer = util.Buffer;
  		    /* istanbul ignore if */
  		    if (!Buffer) {
  		        util._Buffer_from = util._Buffer_allocUnsafe = null;
  		        return;
  		    }
  		    // because node 4.x buffers are incompatible & immutable
  		    // see: https://github.com/dcodeIO/protobuf.js/pull/665
  		    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
  		        /* istanbul ignore next */
  		        function Buffer_from(value, encoding) {
  		            return new Buffer(value, encoding);
  		        };
  		    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
  		        /* istanbul ignore next */
  		        function Buffer_allocUnsafe(size) {
  		            return new Buffer(size);
  		        };
  		}; 
  	} (minimal$1));
  	return minimal$1;
  }

  var writer = Writer$1;

  var util$4      = requireMinimal();

  var BufferWriter$1; // cyclic

  var LongBits$1  = util$4.LongBits,
      base64    = util$4.base64,
      utf8$1      = util$4.utf8;

  /**
   * Constructs a new writer operation instance.
   * @classdesc Scheduled writer operation.
   * @constructor
   * @param {function(*, Uint8Array, number)} fn Function to call
   * @param {number} len Value byte length
   * @param {*} val Value to write
   * @ignore
   */
  function Op(fn, len, val) {

      /**
       * Function to call.
       * @type {function(Uint8Array, number, *)}
       */
      this.fn = fn;

      /**
       * Value byte length.
       * @type {number}
       */
      this.len = len;

      /**
       * Next operation.
       * @type {Writer.Op|undefined}
       */
      this.next = undefined;

      /**
       * Value to write.
       * @type {*}
       */
      this.val = val; // type varies
  }

  /* istanbul ignore next */
  function noop() {} // eslint-disable-line no-empty-function

  /**
   * Constructs a new writer state instance.
   * @classdesc Copied writer state.
   * @memberof Writer
   * @constructor
   * @param {Writer} writer Writer to copy state from
   * @ignore
   */
  function State(writer) {

      /**
       * Current head.
       * @type {Writer.Op}
       */
      this.head = writer.head;

      /**
       * Current tail.
       * @type {Writer.Op}
       */
      this.tail = writer.tail;

      /**
       * Current buffer length.
       * @type {number}
       */
      this.len = writer.len;

      /**
       * Next state.
       * @type {State|null}
       */
      this.next = writer.states;
  }

  /**
   * Constructs a new writer instance.
   * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
   * @constructor
   */
  function Writer$1() {

      /**
       * Current length.
       * @type {number}
       */
      this.len = 0;

      /**
       * Operations head.
       * @type {Object}
       */
      this.head = new Op(noop, 0, 0);

      /**
       * Operations tail
       * @type {Object}
       */
      this.tail = this.head;

      /**
       * Linked forked states.
       * @type {Object|null}
       */
      this.states = null;

      // When a value is written, the writer calculates its byte length and puts it into a linked
      // list of operations to perform when finish() is called. This both allows us to allocate
      // buffers of the exact required size and reduces the amount of work we have to do compared
      // to first calculating over objects and then encoding over objects. In our case, the encoding
      // part is just a linked list walk calling operations with already prepared values.
  }

  var create$1 = function create() {
      return util$4.Buffer
          ? function create_buffer_setup() {
              return (Writer$1.create = function create_buffer() {
                  return new BufferWriter$1();
              })();
          }
          /* istanbul ignore next */
          : function create_array() {
              return new Writer$1();
          };
  };

  /**
   * Creates a new writer.
   * @function
   * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
   */
  Writer$1.create = create$1();

  /**
   * Allocates a buffer of the specified size.
   * @param {number} size Buffer size
   * @returns {Uint8Array} Buffer
   */
  Writer$1.alloc = function alloc(size) {
      return new util$4.Array(size);
  };

  // Use Uint8Array buffer pool in the browser, just like node does with buffers
  /* istanbul ignore else */
  if (util$4.Array !== Array)
      Writer$1.alloc = util$4.pool(Writer$1.alloc, util$4.Array.prototype.subarray);

  /**
   * Pushes a new operation to the queue.
   * @param {function(Uint8Array, number, *)} fn Function to call
   * @param {number} len Value byte length
   * @param {number} val Value to write
   * @returns {Writer} `this`
   * @private
   */
  Writer$1.prototype._push = function push(fn, len, val) {
      this.tail = this.tail.next = new Op(fn, len, val);
      this.len += len;
      return this;
  };

  function writeByte(val, buf, pos) {
      buf[pos] = val & 255;
  }

  function writeVarint32(val, buf, pos) {
      while (val > 127) {
          buf[pos++] = val & 127 | 128;
          val >>>= 7;
      }
      buf[pos] = val;
  }

  /**
   * Constructs a new varint writer operation instance.
   * @classdesc Scheduled varint writer operation.
   * @extends Op
   * @constructor
   * @param {number} len Value byte length
   * @param {number} val Value to write
   * @ignore
   */
  function VarintOp(len, val) {
      this.len = len;
      this.next = undefined;
      this.val = val;
  }

  VarintOp.prototype = Object.create(Op.prototype);
  VarintOp.prototype.fn = writeVarint32;

  /**
   * Writes an unsigned 32 bit value as a varint.
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$1.prototype.uint32 = function write_uint32(value) {
      // here, the call to this.push has been inlined and a varint specific Op subclass is used.
      // uint32 is by far the most frequently used operation and benefits significantly from this.
      this.len += (this.tail = this.tail.next = new VarintOp(
          (value = value >>> 0)
                  < 128       ? 1
          : value < 16384     ? 2
          : value < 2097152   ? 3
          : value < 268435456 ? 4
          :                     5,
      value)).len;
      return this;
  };

  /**
   * Writes a signed 32 bit value as a varint.
   * @function
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$1.prototype.int32 = function write_int32(value) {
      return value < 0
          ? this._push(writeVarint64, 10, LongBits$1.fromNumber(value)) // 10 bytes per spec
          : this.uint32(value);
  };

  /**
   * Writes a 32 bit value as a varint, zig-zag encoded.
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$1.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
  };

  function writeVarint64(val, buf, pos) {
      while (val.hi) {
          buf[pos++] = val.lo & 127 | 128;
          val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
          val.hi >>>= 7;
      }
      while (val.lo > 127) {
          buf[pos++] = val.lo & 127 | 128;
          val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
  }

  /**
   * Writes an unsigned 64 bit value as a varint.
   * @param {Long|number|string} value Value to write
   * @returns {Writer} `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  Writer$1.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits$1.from(value);
      return this._push(writeVarint64, bits.length(), bits);
  };

  /**
   * Writes a signed 64 bit value as a varint.
   * @function
   * @param {Long|number|string} value Value to write
   * @returns {Writer} `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  Writer$1.prototype.int64 = Writer$1.prototype.uint64;

  /**
   * Writes a signed 64 bit value as a varint, zig-zag encoded.
   * @param {Long|number|string} value Value to write
   * @returns {Writer} `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  Writer$1.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits$1.from(value).zzEncode();
      return this._push(writeVarint64, bits.length(), bits);
  };

  /**
   * Writes a boolish value as a varint.
   * @param {boolean} value Value to write
   * @returns {Writer} `this`
   */
  Writer$1.prototype.bool = function write_bool(value) {
      return this._push(writeByte, 1, value ? 1 : 0);
  };

  function writeFixed32(val, buf, pos) {
      buf[pos    ] =  val         & 255;
      buf[pos + 1] =  val >>> 8   & 255;
      buf[pos + 2] =  val >>> 16  & 255;
      buf[pos + 3] =  val >>> 24;
  }

  /**
   * Writes an unsigned 32 bit value as fixed 32 bits.
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$1.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32, 4, value >>> 0);
  };

  /**
   * Writes a signed 32 bit value as fixed 32 bits.
   * @function
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$1.prototype.sfixed32 = Writer$1.prototype.fixed32;

  /**
   * Writes an unsigned 64 bit value as fixed 64 bits.
   * @param {Long|number|string} value Value to write
   * @returns {Writer} `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  Writer$1.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits$1.from(value);
      return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
  };

  /**
   * Writes a signed 64 bit value as fixed 64 bits.
   * @function
   * @param {Long|number|string} value Value to write
   * @returns {Writer} `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  Writer$1.prototype.sfixed64 = Writer$1.prototype.fixed64;

  /**
   * Writes a float (32 bit).
   * @function
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$1.prototype.float = function write_float(value) {
      return this._push(util$4.float.writeFloatLE, 4, value);
  };

  /**
   * Writes a double (64 bit float).
   * @function
   * @param {number} value Value to write
   * @returns {Writer} `this`
   */
  Writer$1.prototype.double = function write_double(value) {
      return this._push(util$4.float.writeDoubleLE, 8, value);
  };

  var writeBytes = util$4.Array.prototype.set
      ? function writeBytes_set(val, buf, pos) {
          buf.set(val, pos); // also works for plain array values
      }
      /* istanbul ignore next */
      : function writeBytes_for(val, buf, pos) {
          for (var i = 0; i < val.length; ++i)
              buf[pos + i] = val[i];
      };

  /**
   * Writes a sequence of bytes.
   * @param {Uint8Array|string} value Buffer or base64 encoded string to write
   * @returns {Writer} `this`
   */
  Writer$1.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
          return this._push(writeByte, 1, 0);
      if (util$4.isString(value)) {
          var buf = Writer$1.alloc(len = base64.length(value));
          base64.decode(value, buf, 0);
          value = buf;
      }
      return this.uint32(len)._push(writeBytes, len, value);
  };

  /**
   * Writes a string.
   * @param {string} value Value to write
   * @returns {Writer} `this`
   */
  Writer$1.prototype.string = function write_string(value) {
      var len = utf8$1.length(value);
      return len
          ? this.uint32(len)._push(utf8$1.write, len, value)
          : this._push(writeByte, 1, 0);
  };

  /**
   * Forks this writer's state by pushing it to a stack.
   * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
   * @returns {Writer} `this`
   */
  Writer$1.prototype.fork = function fork() {
      this.states = new State(this);
      this.head = this.tail = new Op(noop, 0, 0);
      this.len = 0;
      return this;
  };

  /**
   * Resets this instance to the last state.
   * @returns {Writer} `this`
   */
  Writer$1.prototype.reset = function reset() {
      if (this.states) {
          this.head   = this.states.head;
          this.tail   = this.states.tail;
          this.len    = this.states.len;
          this.states = this.states.next;
      } else {
          this.head = this.tail = new Op(noop, 0, 0);
          this.len  = 0;
      }
      return this;
  };

  /**
   * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
   * @returns {Writer} `this`
   */
  Writer$1.prototype.ldelim = function ldelim() {
      var head = this.head,
          tail = this.tail,
          len  = this.len;
      this.reset().uint32(len);
      if (len) {
          this.tail.next = head.next; // skip noop
          this.tail = tail;
          this.len += len;
      }
      return this;
  };

  /**
   * Finishes the write operation.
   * @returns {Uint8Array} Finished buffer
   */
  Writer$1.prototype.finish = function finish() {
      var head = this.head.next, // skip noop
          buf  = this.constructor.alloc(this.len),
          pos  = 0;
      while (head) {
          head.fn(head.val, buf, pos);
          pos += head.len;
          head = head.next;
      }
      // this.head = this.tail = null;
      return buf;
  };

  Writer$1._configure = function(BufferWriter_) {
      BufferWriter$1 = BufferWriter_;
      Writer$1.create = create$1();
      BufferWriter$1._configure();
  };

  var writer_buffer = BufferWriter;

  // extends Writer
  var Writer = writer;
  (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

  var util$3 = requireMinimal();

  /**
   * Constructs a new buffer writer instance.
   * @classdesc Wire format writer using node buffers.
   * @extends Writer
   * @constructor
   */
  function BufferWriter() {
      Writer.call(this);
  }

  BufferWriter._configure = function () {
      /**
       * Allocates a buffer of the specified size.
       * @function
       * @param {number} size Buffer size
       * @returns {Buffer} Buffer
       */
      BufferWriter.alloc = util$3._Buffer_allocUnsafe;

      BufferWriter.writeBytesBuffer = util$3.Buffer && util$3.Buffer.prototype instanceof Uint8Array && util$3.Buffer.prototype.set.name === "set"
          ? function writeBytesBuffer_set(val, buf, pos) {
            buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
            // also works for plain array values
          }
          /* istanbul ignore next */
          : function writeBytesBuffer_copy(val, buf, pos) {
            if (val.copy) // Buffer values
              val.copy(buf, pos, 0, val.length);
            else for (var i = 0; i < val.length;) // plain array values
              buf[pos++] = val[i++];
          };
  };


  /**
   * @override
   */
  BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
      if (util$3.isString(value))
          value = util$3._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
          this._push(BufferWriter.writeBytesBuffer, len, value);
      return this;
  };

  function writeStringBuffer(val, buf, pos) {
      if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
          util$3.utf8.write(val, buf, pos);
      else if (buf.utf8Write)
          buf.utf8Write(val, pos);
      else
          buf.write(val, pos);
  }

  /**
   * @override
   */
  BufferWriter.prototype.string = function write_string_buffer(value) {
      var len = util$3.Buffer.byteLength(value);
      this.uint32(len);
      if (len)
          this._push(writeStringBuffer, len, value);
      return this;
  };


  /**
   * Finishes the write operation.
   * @name BufferWriter#finish
   * @function
   * @returns {Buffer} Finished buffer
   */

  BufferWriter._configure();

  var reader = Reader$1;

  var util$2      = requireMinimal();

  var BufferReader$1; // cyclic

  var LongBits  = util$2.LongBits,
      utf8      = util$2.utf8;

  /* istanbul ignore next */
  function indexOutOfRange(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
  }

  /**
   * Constructs a new reader instance using the specified buffer.
   * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
   * @constructor
   * @param {Uint8Array} buffer Buffer to read from
   */
  function Reader$1(buffer) {

      /**
       * Read buffer.
       * @type {Uint8Array}
       */
      this.buf = buffer;

      /**
       * Read buffer position.
       * @type {number}
       */
      this.pos = 0;

      /**
       * Read buffer length.
       * @type {number}
       */
      this.len = buffer.length;
  }

  var create_array = typeof Uint8Array !== "undefined"
      ? function create_typed_array(buffer) {
          if (buffer instanceof Uint8Array || Array.isArray(buffer))
              return new Reader$1(buffer);
          throw Error("illegal buffer");
      }
      /* istanbul ignore next */
      : function create_array(buffer) {
          if (Array.isArray(buffer))
              return new Reader$1(buffer);
          throw Error("illegal buffer");
      };

  var create = function create() {
      return util$2.Buffer
          ? function create_buffer_setup(buffer) {
              return (Reader$1.create = function create_buffer(buffer) {
                  return util$2.Buffer.isBuffer(buffer)
                      ? new BufferReader$1(buffer)
                      /* istanbul ignore next */
                      : create_array(buffer);
              })(buffer);
          }
          /* istanbul ignore next */
          : create_array;
  };

  /**
   * Creates a new reader using the specified buffer.
   * @function
   * @param {Uint8Array|Buffer} buffer Buffer to read from
   * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
   * @throws {Error} If `buffer` is not a valid buffer
   */
  Reader$1.create = create();

  Reader$1.prototype._slice = util$2.Array.prototype.subarray || /* istanbul ignore next */ util$2.Array.prototype.slice;

  /**
   * Reads a varint as an unsigned 32 bit value.
   * @function
   * @returns {number} Value read
   */
  Reader$1.prototype.uint32 = (function read_uint32_setup() {
      var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
      return function read_uint32() {
          value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
          value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

          /* istanbul ignore if */
          if ((this.pos += 5) > this.len) {
              this.pos = this.len;
              throw indexOutOfRange(this, 10);
          }
          return value;
      };
  })();

  /**
   * Reads a varint as a signed 32 bit value.
   * @returns {number} Value read
   */
  Reader$1.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
  };

  /**
   * Reads a zig-zag encoded varint as a signed 32 bit value.
   * @returns {number} Value read
   */
  Reader$1.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
  };

  /* eslint-disable no-invalid-this */

  function readLongVarint() {
      // tends to deopt with local vars for octet etc.
      var bits = new LongBits(0, 0);
      var i = 0;
      if (this.len - this.pos > 4) { // fast route (lo)
          for (; i < 4; ++i) {
              // 1st..4th
              bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
              if (this.buf[this.pos++] < 128)
                  return bits;
          }
          // 5th
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
          if (this.buf[this.pos++] < 128)
              return bits;
          i = 0;
      } else {
          for (; i < 3; ++i) {
              /* istanbul ignore if */
              if (this.pos >= this.len)
                  throw indexOutOfRange(this);
              // 1st..3th
              bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
              if (this.buf[this.pos++] < 128)
                  return bits;
          }
          // 4th
          bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
          return bits;
      }
      if (this.len - this.pos > 4) { // fast route (hi)
          for (; i < 5; ++i) {
              // 6th..10th
              bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
              if (this.buf[this.pos++] < 128)
                  return bits;
          }
      } else {
          for (; i < 5; ++i) {
              /* istanbul ignore if */
              if (this.pos >= this.len)
                  throw indexOutOfRange(this);
              // 6th..10th
              bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
              if (this.buf[this.pos++] < 128)
                  return bits;
          }
      }
      /* istanbul ignore next */
      throw Error("invalid varint encoding");
  }

  /* eslint-enable no-invalid-this */

  /**
   * Reads a varint as a signed 64 bit value.
   * @name Reader#int64
   * @function
   * @returns {Long} Value read
   */

  /**
   * Reads a varint as an unsigned 64 bit value.
   * @name Reader#uint64
   * @function
   * @returns {Long} Value read
   */

  /**
   * Reads a zig-zag encoded varint as a signed 64 bit value.
   * @name Reader#sint64
   * @function
   * @returns {Long} Value read
   */

  /**
   * Reads a varint as a boolean.
   * @returns {boolean} Value read
   */
  Reader$1.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
  };

  function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
      return (buf[end - 4]
            | buf[end - 3] << 8
            | buf[end - 2] << 16
            | buf[end - 1] << 24) >>> 0;
  }

  /**
   * Reads fixed 32 bits as an unsigned 32 bit integer.
   * @returns {number} Value read
   */
  Reader$1.prototype.fixed32 = function read_fixed32() {

      /* istanbul ignore if */
      if (this.pos + 4 > this.len)
          throw indexOutOfRange(this, 4);

      return readFixed32_end(this.buf, this.pos += 4);
  };

  /**
   * Reads fixed 32 bits as a signed 32 bit integer.
   * @returns {number} Value read
   */
  Reader$1.prototype.sfixed32 = function read_sfixed32() {

      /* istanbul ignore if */
      if (this.pos + 4 > this.len)
          throw indexOutOfRange(this, 4);

      return readFixed32_end(this.buf, this.pos += 4) | 0;
  };

  /* eslint-disable no-invalid-this */

  function readFixed64(/* this: Reader */) {

      /* istanbul ignore if */
      if (this.pos + 8 > this.len)
          throw indexOutOfRange(this, 8);

      return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
  }

  /* eslint-enable no-invalid-this */

  /**
   * Reads fixed 64 bits.
   * @name Reader#fixed64
   * @function
   * @returns {Long} Value read
   */

  /**
   * Reads zig-zag encoded fixed 64 bits.
   * @name Reader#sfixed64
   * @function
   * @returns {Long} Value read
   */

  /**
   * Reads a float (32 bit) as a number.
   * @function
   * @returns {number} Value read
   */
  Reader$1.prototype.float = function read_float() {

      /* istanbul ignore if */
      if (this.pos + 4 > this.len)
          throw indexOutOfRange(this, 4);

      var value = util$2.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
  };

  /**
   * Reads a double (64 bit float) as a number.
   * @function
   * @returns {number} Value read
   */
  Reader$1.prototype.double = function read_double() {

      /* istanbul ignore if */
      if (this.pos + 8 > this.len)
          throw indexOutOfRange(this, 4);

      var value = util$2.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
  };

  /**
   * Reads a sequence of bytes preceeded by its length as a varint.
   * @returns {Uint8Array} Value read
   */
  Reader$1.prototype.bytes = function read_bytes() {
      var length = this.uint32(),
          start  = this.pos,
          end    = this.pos + length;

      /* istanbul ignore if */
      if (end > this.len)
          throw indexOutOfRange(this, length);

      this.pos += length;
      if (Array.isArray(this.buf)) // plain array
          return this.buf.slice(start, end);
      return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
          ? new this.buf.constructor(0)
          : this._slice.call(this.buf, start, end);
  };

  /**
   * Reads a string preceeded by its byte length as a varint.
   * @returns {string} Value read
   */
  Reader$1.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf8.read(bytes, 0, bytes.length);
  };

  /**
   * Skips the specified number of bytes if specified, otherwise skips a varint.
   * @param {number} [length] Length if known, otherwise a varint is assumed
   * @returns {Reader} `this`
   */
  Reader$1.prototype.skip = function skip(length) {
      if (typeof length === "number") {
          /* istanbul ignore if */
          if (this.pos + length > this.len)
              throw indexOutOfRange(this, length);
          this.pos += length;
      } else {
          do {
              /* istanbul ignore if */
              if (this.pos >= this.len)
                  throw indexOutOfRange(this);
          } while (this.buf[this.pos++] & 128);
      }
      return this;
  };

  /**
   * Skips the next element of the specified wire type.
   * @param {number} wireType Wire type received
   * @returns {Reader} `this`
   */
  Reader$1.prototype.skipType = function(wireType) {
      switch (wireType) {
          case 0:
              this.skip();
              break;
          case 1:
              this.skip(8);
              break;
          case 2:
              this.skip(this.uint32());
              break;
          case 3:
              while ((wireType = this.uint32() & 7) !== 4) {
                  this.skipType(wireType);
              }
              break;
          case 5:
              this.skip(4);
              break;

          /* istanbul ignore next */
          default:
              throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
  };

  Reader$1._configure = function(BufferReader_) {
      BufferReader$1 = BufferReader_;
      Reader$1.create = create();
      BufferReader$1._configure();

      var fn = util$2.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
      util$2.merge(Reader$1.prototype, {

          int64: function read_int64() {
              return readLongVarint.call(this)[fn](false);
          },

          uint64: function read_uint64() {
              return readLongVarint.call(this)[fn](true);
          },

          sint64: function read_sint64() {
              return readLongVarint.call(this).zzDecode()[fn](false);
          },

          fixed64: function read_fixed64() {
              return readFixed64.call(this)[fn](true);
          },

          sfixed64: function read_sfixed64() {
              return readFixed64.call(this)[fn](false);
          }

      });
  };

  var reader_buffer = BufferReader;

  // extends Reader
  var Reader = reader;
  (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

  var util$1 = requireMinimal();

  /**
   * Constructs a new buffer reader instance.
   * @classdesc Wire format reader using node buffers.
   * @extends Reader
   * @constructor
   * @param {Buffer} buffer Buffer to read from
   */
  function BufferReader(buffer) {
      Reader.call(this, buffer);

      /**
       * Read buffer.
       * @name BufferReader#buf
       * @type {Buffer}
       */
  }

  BufferReader._configure = function () {
      /* istanbul ignore else */
      if (util$1.Buffer)
          BufferReader.prototype._slice = util$1.Buffer.prototype.slice;
  };


  /**
   * @override
   */
  BufferReader.prototype.string = function read_string_buffer() {
      var len = this.uint32(); // modifies pos
      return this.buf.utf8Slice
          ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
          : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
  };

  /**
   * Reads a sequence of bytes preceeded by its length as a varint.
   * @name BufferReader#bytes
   * @function
   * @returns {Buffer} Value read
   */

  BufferReader._configure();

  var rpc = {};

  var service = Service;

  var util = requireMinimal();

  // Extends EventEmitter
  (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

  /**
   * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
   *
   * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
   * @typedef rpc.ServiceMethodCallback
   * @template TRes extends Message<TRes>
   * @type {function}
   * @param {Error|null} error Error, if any
   * @param {TRes} [response] Response message
   * @returns {undefined}
   */

  /**
   * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
   * @typedef rpc.ServiceMethod
   * @template TReq extends Message<TReq>
   * @template TRes extends Message<TRes>
   * @type {function}
   * @param {TReq|Properties<TReq>} request Request message or plain object
   * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
   * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
   */

  /**
   * Constructs a new RPC service instance.
   * @classdesc An RPC service as returned by {@link Service#create}.
   * @exports rpc.Service
   * @extends util.EventEmitter
   * @constructor
   * @param {RPCImpl} rpcImpl RPC implementation
   * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
   * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
   */
  function Service(rpcImpl, requestDelimited, responseDelimited) {

      if (typeof rpcImpl !== "function")
          throw TypeError("rpcImpl must be a function");

      util.EventEmitter.call(this);

      /**
       * RPC implementation. Becomes `null` once the service is ended.
       * @type {RPCImpl|null}
       */
      this.rpcImpl = rpcImpl;

      /**
       * Whether requests are length-delimited.
       * @type {boolean}
       */
      this.requestDelimited = Boolean(requestDelimited);

      /**
       * Whether responses are length-delimited.
       * @type {boolean}
       */
      this.responseDelimited = Boolean(responseDelimited);
  }

  /**
   * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
   * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
   * @param {Constructor<TReq>} requestCtor Request constructor
   * @param {Constructor<TRes>} responseCtor Response constructor
   * @param {TReq|Properties<TReq>} request Request message or plain object
   * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
   * @returns {undefined}
   * @template TReq extends Message<TReq>
   * @template TRes extends Message<TRes>
   */
  Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

      if (!request)
          throw TypeError("request must be specified");

      var self = this;
      if (!callback)
          return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

      if (!self.rpcImpl) {
          setTimeout(function() { callback(Error("already ended")); }, 0);
          return undefined;
      }

      try {
          return self.rpcImpl(
              method,
              requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
              function rpcCallback(err, response) {

                  if (err) {
                      self.emit("error", err, method);
                      return callback(err);
                  }

                  if (response === null) {
                      self.end(/* endedByRPC */ true);
                      return undefined;
                  }

                  if (!(response instanceof responseCtor)) {
                      try {
                          response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                      } catch (err) {
                          self.emit("error", err, method);
                          return callback(err);
                      }
                  }

                  self.emit("data", response, method);
                  return callback(null, response);
              }
          );
      } catch (err) {
          self.emit("error", err, method);
          setTimeout(function() { callback(err); }, 0);
          return undefined;
      }
  };

  /**
   * Ends this service and emits the `end` event.
   * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
   * @returns {rpc.Service} `this`
   */
  Service.prototype.end = function end(endedByRPC) {
      if (this.rpcImpl) {
          if (!endedByRPC) // signal end to rpcImpl
              this.rpcImpl(null, null, null);
          this.rpcImpl = null;
          this.emit("end").off();
      }
      return this;
  };

  (function (exports) {

  	/**
  	 * Streaming RPC helpers.
  	 * @namespace
  	 */
  	var rpc = exports;

  	/**
  	 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
  	 * @typedef RPCImpl
  	 * @type {function}
  	 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
  	 * @param {Uint8Array} requestData Request data
  	 * @param {RPCImplCallback} callback Callback function
  	 * @returns {undefined}
  	 * @example
  	 * function rpcImpl(method, requestData, callback) {
  	 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
  	 *         throw Error("no such method");
  	 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
  	 *         callback(err, responseData);
  	 *     });
  	 * }
  	 */

  	/**
  	 * Node-style callback as used by {@link RPCImpl}.
  	 * @typedef RPCImplCallback
  	 * @type {function}
  	 * @param {Error|null} error Error, if any, otherwise `null`
  	 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
  	 * @returns {undefined}
  	 */

  	rpc.Service = service; 
  } (rpc));

  var roots = {};

  (function (exports) {
  	var protobuf = exports;

  	/**
  	 * Build type, one of `"full"`, `"light"` or `"minimal"`.
  	 * @name build
  	 * @type {string}
  	 * @const
  	 */
  	protobuf.build = "minimal";

  	// Serialization
  	protobuf.Writer       = writer;
  	protobuf.BufferWriter = writer_buffer;
  	protobuf.Reader       = reader;
  	protobuf.BufferReader = reader_buffer;

  	// Utility
  	protobuf.util         = requireMinimal();
  	protobuf.rpc          = rpc;
  	protobuf.roots        = roots;
  	protobuf.configure    = configure;

  	/* istanbul ignore next */
  	/**
  	 * Reconfigures the library according to the environment.
  	 * @returns {undefined}
  	 */
  	function configure() {
  	    protobuf.util._configure();
  	    protobuf.Writer._configure(protobuf.BufferWriter);
  	    protobuf.Reader._configure(protobuf.BufferReader);
  	}

  	// Set up buffer utility according to the environment
  	configure(); 
  } (indexMinimal));

  var minimal = indexMinimal;

  var protobuf = /*@__PURE__*/getDefaultExportFromCjs(minimal);

  (function (module) {
  	// @ts-nocheck
  	/*eslint-disable*/
  	(function(global, factory) { /* global define, require, module */

  	    /* AMD */ if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports)
  	        module.exports = factory(minimal);

  	})(commonjsGlobal, function($protobuf) {

  	    // Common aliases
  	    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

  	    // Exported root namespace
  	    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

  	    $root.RPC = (function() {

  	        /**
  	         * Properties of a RPC.
  	         * @exports IRPC
  	         * @interface IRPC
  	         * @property {Array.<RPC.ISubOpts>|null} [subscriptions] RPC subscriptions
  	         * @property {Array.<RPC.IMessage>|null} [messages] RPC messages
  	         * @property {RPC.IControlMessage|null} [control] RPC control
  	         */

  	        /**
  	         * Constructs a new RPC.
  	         * @exports RPC
  	         * @classdesc Represents a RPC.
  	         * @implements IRPC
  	         * @constructor
  	         * @param {IRPC=} [p] Properties to set
  	         */
  	        function RPC(p) {
  	            this.subscriptions = [];
  	            this.messages = [];
  	            if (p)
  	                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
  	                    if (p[ks[i]] != null)
  	                        this[ks[i]] = p[ks[i]];
  	        }

  	        /**
  	         * RPC subscriptions.
  	         * @member {Array.<RPC.ISubOpts>} subscriptions
  	         * @memberof RPC
  	         * @instance
  	         */
  	        RPC.prototype.subscriptions = $util.emptyArray;

  	        /**
  	         * RPC messages.
  	         * @member {Array.<RPC.IMessage>} messages
  	         * @memberof RPC
  	         * @instance
  	         */
  	        RPC.prototype.messages = $util.emptyArray;

  	        /**
  	         * RPC control.
  	         * @member {RPC.IControlMessage|null|undefined} control
  	         * @memberof RPC
  	         * @instance
  	         */
  	        RPC.prototype.control = null;

  	        // OneOf field names bound to virtual getters and setters
  	        var $oneOfFields;

  	        /**
  	         * RPC _control.
  	         * @member {"control"|undefined} _control
  	         * @memberof RPC
  	         * @instance
  	         */
  	        Object.defineProperty(RPC.prototype, "_control", {
  	            get: $util.oneOfGetter($oneOfFields = ["control"]),
  	            set: $util.oneOfSetter($oneOfFields)
  	        });

  	        /**
  	         * Encodes the specified RPC message. Does not implicitly {@link RPC.verify|verify} messages.
  	         * @function encode
  	         * @memberof RPC
  	         * @static
  	         * @param {IRPC} m RPC message or plain object to encode
  	         * @param {$protobuf.Writer} [w] Writer to encode to
  	         * @returns {$protobuf.Writer} Writer
  	         */
  	        RPC.encode = function encode(m, w) {
  	            if (!w)
  	                w = $Writer.create();
  	            if (m.subscriptions != null && m.subscriptions.length) {
  	                for (var i = 0; i < m.subscriptions.length; ++i)
  	                    $root.RPC.SubOpts.encode(m.subscriptions[i], w.uint32(10).fork()).ldelim();
  	            }
  	            if (m.messages != null && m.messages.length) {
  	                for (var i = 0; i < m.messages.length; ++i)
  	                    $root.RPC.Message.encode(m.messages[i], w.uint32(18).fork()).ldelim();
  	            }
  	            if (m.control != null && Object.hasOwnProperty.call(m, "control"))
  	                $root.RPC.ControlMessage.encode(m.control, w.uint32(26).fork()).ldelim();
  	            return w;
  	        };

  	        /**
  	         * Decodes a RPC message from the specified reader or buffer.
  	         * @function decode
  	         * @memberof RPC
  	         * @static
  	         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
  	         * @param {number} [l] Message length if known beforehand
  	         * @returns {RPC} RPC
  	         * @throws {Error} If the payload is not a reader or valid buffer
  	         * @throws {$protobuf.util.ProtocolError} If required fields are missing
  	         */
  	        RPC.decode = function decode(r, l) {
  	            if (!(r instanceof $Reader))
  	                r = $Reader.create(r);
  	            var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC();
  	            while (r.pos < c) {
  	                var t = r.uint32();
  	                switch (t >>> 3) {
  	                case 1:
  	                    if (!(m.subscriptions && m.subscriptions.length))
  	                        m.subscriptions = [];
  	                    m.subscriptions.push($root.RPC.SubOpts.decode(r, r.uint32()));
  	                    break;
  	                case 2:
  	                    if (!(m.messages && m.messages.length))
  	                        m.messages = [];
  	                    m.messages.push($root.RPC.Message.decode(r, r.uint32()));
  	                    break;
  	                case 3:
  	                    m.control = $root.RPC.ControlMessage.decode(r, r.uint32());
  	                    break;
  	                default:
  	                    r.skipType(t & 7);
  	                    break;
  	                }
  	            }
  	            return m;
  	        };

  	        /**
  	         * Creates a RPC message from a plain object. Also converts values to their respective internal types.
  	         * @function fromObject
  	         * @memberof RPC
  	         * @static
  	         * @param {Object.<string,*>} d Plain object
  	         * @returns {RPC} RPC
  	         */
  	        RPC.fromObject = function fromObject(d) {
  	            if (d instanceof $root.RPC)
  	                return d;
  	            var m = new $root.RPC();
  	            if (d.subscriptions) {
  	                if (!Array.isArray(d.subscriptions))
  	                    throw TypeError(".RPC.subscriptions: array expected");
  	                m.subscriptions = [];
  	                for (var i = 0; i < d.subscriptions.length; ++i) {
  	                    if (typeof d.subscriptions[i] !== "object")
  	                        throw TypeError(".RPC.subscriptions: object expected");
  	                    m.subscriptions[i] = $root.RPC.SubOpts.fromObject(d.subscriptions[i]);
  	                }
  	            }
  	            if (d.messages) {
  	                if (!Array.isArray(d.messages))
  	                    throw TypeError(".RPC.messages: array expected");
  	                m.messages = [];
  	                for (var i = 0; i < d.messages.length; ++i) {
  	                    if (typeof d.messages[i] !== "object")
  	                        throw TypeError(".RPC.messages: object expected");
  	                    m.messages[i] = $root.RPC.Message.fromObject(d.messages[i]);
  	                }
  	            }
  	            if (d.control != null) {
  	                if (typeof d.control !== "object")
  	                    throw TypeError(".RPC.control: object expected");
  	                m.control = $root.RPC.ControlMessage.fromObject(d.control);
  	            }
  	            return m;
  	        };

  	        /**
  	         * Creates a plain object from a RPC message. Also converts values to other types if specified.
  	         * @function toObject
  	         * @memberof RPC
  	         * @static
  	         * @param {RPC} m RPC
  	         * @param {$protobuf.IConversionOptions} [o] Conversion options
  	         * @returns {Object.<string,*>} Plain object
  	         */
  	        RPC.toObject = function toObject(m, o) {
  	            if (!o)
  	                o = {};
  	            var d = {};
  	            if (o.arrays || o.defaults) {
  	                d.subscriptions = [];
  	                d.messages = [];
  	            }
  	            if (m.subscriptions && m.subscriptions.length) {
  	                d.subscriptions = [];
  	                for (var j = 0; j < m.subscriptions.length; ++j) {
  	                    d.subscriptions[j] = $root.RPC.SubOpts.toObject(m.subscriptions[j], o);
  	                }
  	            }
  	            if (m.messages && m.messages.length) {
  	                d.messages = [];
  	                for (var j = 0; j < m.messages.length; ++j) {
  	                    d.messages[j] = $root.RPC.Message.toObject(m.messages[j], o);
  	                }
  	            }
  	            if (m.control != null && m.hasOwnProperty("control")) {
  	                d.control = $root.RPC.ControlMessage.toObject(m.control, o);
  	                if (o.oneofs)
  	                    d._control = "control";
  	            }
  	            return d;
  	        };

  	        /**
  	         * Converts this RPC to JSON.
  	         * @function toJSON
  	         * @memberof RPC
  	         * @instance
  	         * @returns {Object.<string,*>} JSON object
  	         */
  	        RPC.prototype.toJSON = function toJSON() {
  	            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
  	        };

  	        RPC.SubOpts = (function() {

  	            /**
  	             * Properties of a SubOpts.
  	             * @memberof RPC
  	             * @interface ISubOpts
  	             * @property {boolean|null} [subscribe] SubOpts subscribe
  	             * @property {string|null} [topic] SubOpts topic
  	             */

  	            /**
  	             * Constructs a new SubOpts.
  	             * @memberof RPC
  	             * @classdesc Represents a SubOpts.
  	             * @implements ISubOpts
  	             * @constructor
  	             * @param {RPC.ISubOpts=} [p] Properties to set
  	             */
  	            function SubOpts(p) {
  	                if (p)
  	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
  	                        if (p[ks[i]] != null)
  	                            this[ks[i]] = p[ks[i]];
  	            }

  	            /**
  	             * SubOpts subscribe.
  	             * @member {boolean|null|undefined} subscribe
  	             * @memberof RPC.SubOpts
  	             * @instance
  	             */
  	            SubOpts.prototype.subscribe = null;

  	            /**
  	             * SubOpts topic.
  	             * @member {string|null|undefined} topic
  	             * @memberof RPC.SubOpts
  	             * @instance
  	             */
  	            SubOpts.prototype.topic = null;

  	            // OneOf field names bound to virtual getters and setters
  	            var $oneOfFields;

  	            /**
  	             * SubOpts _subscribe.
  	             * @member {"subscribe"|undefined} _subscribe
  	             * @memberof RPC.SubOpts
  	             * @instance
  	             */
  	            Object.defineProperty(SubOpts.prototype, "_subscribe", {
  	                get: $util.oneOfGetter($oneOfFields = ["subscribe"]),
  	                set: $util.oneOfSetter($oneOfFields)
  	            });

  	            /**
  	             * SubOpts _topic.
  	             * @member {"topic"|undefined} _topic
  	             * @memberof RPC.SubOpts
  	             * @instance
  	             */
  	            Object.defineProperty(SubOpts.prototype, "_topic", {
  	                get: $util.oneOfGetter($oneOfFields = ["topic"]),
  	                set: $util.oneOfSetter($oneOfFields)
  	            });

  	            /**
  	             * Encodes the specified SubOpts message. Does not implicitly {@link RPC.SubOpts.verify|verify} messages.
  	             * @function encode
  	             * @memberof RPC.SubOpts
  	             * @static
  	             * @param {RPC.ISubOpts} m SubOpts message or plain object to encode
  	             * @param {$protobuf.Writer} [w] Writer to encode to
  	             * @returns {$protobuf.Writer} Writer
  	             */
  	            SubOpts.encode = function encode(m, w) {
  	                if (!w)
  	                    w = $Writer.create();
  	                if (m.subscribe != null && Object.hasOwnProperty.call(m, "subscribe"))
  	                    w.uint32(8).bool(m.subscribe);
  	                if (m.topic != null && Object.hasOwnProperty.call(m, "topic"))
  	                    w.uint32(18).string(m.topic);
  	                return w;
  	            };

  	            /**
  	             * Decodes a SubOpts message from the specified reader or buffer.
  	             * @function decode
  	             * @memberof RPC.SubOpts
  	             * @static
  	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
  	             * @param {number} [l] Message length if known beforehand
  	             * @returns {RPC.SubOpts} SubOpts
  	             * @throws {Error} If the payload is not a reader or valid buffer
  	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
  	             */
  	            SubOpts.decode = function decode(r, l) {
  	                if (!(r instanceof $Reader))
  	                    r = $Reader.create(r);
  	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.SubOpts();
  	                while (r.pos < c) {
  	                    var t = r.uint32();
  	                    switch (t >>> 3) {
  	                    case 1:
  	                        m.subscribe = r.bool();
  	                        break;
  	                    case 2:
  	                        m.topic = r.string();
  	                        break;
  	                    default:
  	                        r.skipType(t & 7);
  	                        break;
  	                    }
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a SubOpts message from a plain object. Also converts values to their respective internal types.
  	             * @function fromObject
  	             * @memberof RPC.SubOpts
  	             * @static
  	             * @param {Object.<string,*>} d Plain object
  	             * @returns {RPC.SubOpts} SubOpts
  	             */
  	            SubOpts.fromObject = function fromObject(d) {
  	                if (d instanceof $root.RPC.SubOpts)
  	                    return d;
  	                var m = new $root.RPC.SubOpts();
  	                if (d.subscribe != null) {
  	                    m.subscribe = Boolean(d.subscribe);
  	                }
  	                if (d.topic != null) {
  	                    m.topic = String(d.topic);
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a plain object from a SubOpts message. Also converts values to other types if specified.
  	             * @function toObject
  	             * @memberof RPC.SubOpts
  	             * @static
  	             * @param {RPC.SubOpts} m SubOpts
  	             * @param {$protobuf.IConversionOptions} [o] Conversion options
  	             * @returns {Object.<string,*>} Plain object
  	             */
  	            SubOpts.toObject = function toObject(m, o) {
  	                if (!o)
  	                    o = {};
  	                var d = {};
  	                if (m.subscribe != null && m.hasOwnProperty("subscribe")) {
  	                    d.subscribe = m.subscribe;
  	                    if (o.oneofs)
  	                        d._subscribe = "subscribe";
  	                }
  	                if (m.topic != null && m.hasOwnProperty("topic")) {
  	                    d.topic = m.topic;
  	                    if (o.oneofs)
  	                        d._topic = "topic";
  	                }
  	                return d;
  	            };

  	            /**
  	             * Converts this SubOpts to JSON.
  	             * @function toJSON
  	             * @memberof RPC.SubOpts
  	             * @instance
  	             * @returns {Object.<string,*>} JSON object
  	             */
  	            SubOpts.prototype.toJSON = function toJSON() {
  	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
  	            };

  	            return SubOpts;
  	        })();

  	        RPC.Message = (function() {

  	            /**
  	             * Properties of a Message.
  	             * @memberof RPC
  	             * @interface IMessage
  	             * @property {Uint8Array|null} [from] Message from
  	             * @property {Uint8Array|null} [data] Message data
  	             * @property {Uint8Array|null} [seqno] Message seqno
  	             * @property {string} topic Message topic
  	             * @property {Uint8Array|null} [signature] Message signature
  	             * @property {Uint8Array|null} [key] Message key
  	             */

  	            /**
  	             * Constructs a new Message.
  	             * @memberof RPC
  	             * @classdesc Represents a Message.
  	             * @implements IMessage
  	             * @constructor
  	             * @param {RPC.IMessage=} [p] Properties to set
  	             */
  	            function Message(p) {
  	                if (p)
  	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
  	                        if (p[ks[i]] != null)
  	                            this[ks[i]] = p[ks[i]];
  	            }

  	            /**
  	             * Message from.
  	             * @member {Uint8Array|null|undefined} from
  	             * @memberof RPC.Message
  	             * @instance
  	             */
  	            Message.prototype.from = null;

  	            /**
  	             * Message data.
  	             * @member {Uint8Array|null|undefined} data
  	             * @memberof RPC.Message
  	             * @instance
  	             */
  	            Message.prototype.data = null;

  	            /**
  	             * Message seqno.
  	             * @member {Uint8Array|null|undefined} seqno
  	             * @memberof RPC.Message
  	             * @instance
  	             */
  	            Message.prototype.seqno = null;

  	            /**
  	             * Message topic.
  	             * @member {string} topic
  	             * @memberof RPC.Message
  	             * @instance
  	             */
  	            Message.prototype.topic = "";

  	            /**
  	             * Message signature.
  	             * @member {Uint8Array|null|undefined} signature
  	             * @memberof RPC.Message
  	             * @instance
  	             */
  	            Message.prototype.signature = null;

  	            /**
  	             * Message key.
  	             * @member {Uint8Array|null|undefined} key
  	             * @memberof RPC.Message
  	             * @instance
  	             */
  	            Message.prototype.key = null;

  	            // OneOf field names bound to virtual getters and setters
  	            var $oneOfFields;

  	            /**
  	             * Message _from.
  	             * @member {"from"|undefined} _from
  	             * @memberof RPC.Message
  	             * @instance
  	             */
  	            Object.defineProperty(Message.prototype, "_from", {
  	                get: $util.oneOfGetter($oneOfFields = ["from"]),
  	                set: $util.oneOfSetter($oneOfFields)
  	            });

  	            /**
  	             * Message _data.
  	             * @member {"data"|undefined} _data
  	             * @memberof RPC.Message
  	             * @instance
  	             */
  	            Object.defineProperty(Message.prototype, "_data", {
  	                get: $util.oneOfGetter($oneOfFields = ["data"]),
  	                set: $util.oneOfSetter($oneOfFields)
  	            });

  	            /**
  	             * Message _seqno.
  	             * @member {"seqno"|undefined} _seqno
  	             * @memberof RPC.Message
  	             * @instance
  	             */
  	            Object.defineProperty(Message.prototype, "_seqno", {
  	                get: $util.oneOfGetter($oneOfFields = ["seqno"]),
  	                set: $util.oneOfSetter($oneOfFields)
  	            });

  	            /**
  	             * Message _signature.
  	             * @member {"signature"|undefined} _signature
  	             * @memberof RPC.Message
  	             * @instance
  	             */
  	            Object.defineProperty(Message.prototype, "_signature", {
  	                get: $util.oneOfGetter($oneOfFields = ["signature"]),
  	                set: $util.oneOfSetter($oneOfFields)
  	            });

  	            /**
  	             * Message _key.
  	             * @member {"key"|undefined} _key
  	             * @memberof RPC.Message
  	             * @instance
  	             */
  	            Object.defineProperty(Message.prototype, "_key", {
  	                get: $util.oneOfGetter($oneOfFields = ["key"]),
  	                set: $util.oneOfSetter($oneOfFields)
  	            });

  	            /**
  	             * Encodes the specified Message message. Does not implicitly {@link RPC.Message.verify|verify} messages.
  	             * @function encode
  	             * @memberof RPC.Message
  	             * @static
  	             * @param {RPC.IMessage} m Message message or plain object to encode
  	             * @param {$protobuf.Writer} [w] Writer to encode to
  	             * @returns {$protobuf.Writer} Writer
  	             */
  	            Message.encode = function encode(m, w) {
  	                if (!w)
  	                    w = $Writer.create();
  	                if (m.from != null && Object.hasOwnProperty.call(m, "from"))
  	                    w.uint32(10).bytes(m.from);
  	                if (m.data != null && Object.hasOwnProperty.call(m, "data"))
  	                    w.uint32(18).bytes(m.data);
  	                if (m.seqno != null && Object.hasOwnProperty.call(m, "seqno"))
  	                    w.uint32(26).bytes(m.seqno);
  	                w.uint32(34).string(m.topic);
  	                if (m.signature != null && Object.hasOwnProperty.call(m, "signature"))
  	                    w.uint32(42).bytes(m.signature);
  	                if (m.key != null && Object.hasOwnProperty.call(m, "key"))
  	                    w.uint32(50).bytes(m.key);
  	                return w;
  	            };

  	            /**
  	             * Decodes a Message message from the specified reader or buffer.
  	             * @function decode
  	             * @memberof RPC.Message
  	             * @static
  	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
  	             * @param {number} [l] Message length if known beforehand
  	             * @returns {RPC.Message} Message
  	             * @throws {Error} If the payload is not a reader or valid buffer
  	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
  	             */
  	            Message.decode = function decode(r, l) {
  	                if (!(r instanceof $Reader))
  	                    r = $Reader.create(r);
  	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.Message();
  	                while (r.pos < c) {
  	                    var t = r.uint32();
  	                    switch (t >>> 3) {
  	                    case 1:
  	                        m.from = r.bytes();
  	                        break;
  	                    case 2:
  	                        m.data = r.bytes();
  	                        break;
  	                    case 3:
  	                        m.seqno = r.bytes();
  	                        break;
  	                    case 4:
  	                        m.topic = r.string();
  	                        break;
  	                    case 5:
  	                        m.signature = r.bytes();
  	                        break;
  	                    case 6:
  	                        m.key = r.bytes();
  	                        break;
  	                    default:
  	                        r.skipType(t & 7);
  	                        break;
  	                    }
  	                }
  	                if (!m.hasOwnProperty("topic"))
  	                    throw $util.ProtocolError("missing required 'topic'", { instance: m });
  	                return m;
  	            };

  	            /**
  	             * Creates a Message message from a plain object. Also converts values to their respective internal types.
  	             * @function fromObject
  	             * @memberof RPC.Message
  	             * @static
  	             * @param {Object.<string,*>} d Plain object
  	             * @returns {RPC.Message} Message
  	             */
  	            Message.fromObject = function fromObject(d) {
  	                if (d instanceof $root.RPC.Message)
  	                    return d;
  	                var m = new $root.RPC.Message();
  	                if (d.from != null) {
  	                    if (typeof d.from === "string")
  	                        $util.base64.decode(d.from, m.from = $util.newBuffer($util.base64.length(d.from)), 0);
  	                    else if (d.from.length)
  	                        m.from = d.from;
  	                }
  	                if (d.data != null) {
  	                    if (typeof d.data === "string")
  	                        $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);
  	                    else if (d.data.length)
  	                        m.data = d.data;
  	                }
  	                if (d.seqno != null) {
  	                    if (typeof d.seqno === "string")
  	                        $util.base64.decode(d.seqno, m.seqno = $util.newBuffer($util.base64.length(d.seqno)), 0);
  	                    else if (d.seqno.length)
  	                        m.seqno = d.seqno;
  	                }
  	                if (d.topic != null) {
  	                    m.topic = String(d.topic);
  	                }
  	                if (d.signature != null) {
  	                    if (typeof d.signature === "string")
  	                        $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);
  	                    else if (d.signature.length)
  	                        m.signature = d.signature;
  	                }
  	                if (d.key != null) {
  	                    if (typeof d.key === "string")
  	                        $util.base64.decode(d.key, m.key = $util.newBuffer($util.base64.length(d.key)), 0);
  	                    else if (d.key.length)
  	                        m.key = d.key;
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a plain object from a Message message. Also converts values to other types if specified.
  	             * @function toObject
  	             * @memberof RPC.Message
  	             * @static
  	             * @param {RPC.Message} m Message
  	             * @param {$protobuf.IConversionOptions} [o] Conversion options
  	             * @returns {Object.<string,*>} Plain object
  	             */
  	            Message.toObject = function toObject(m, o) {
  	                if (!o)
  	                    o = {};
  	                var d = {};
  	                if (o.defaults) {
  	                    d.topic = "";
  	                }
  	                if (m.from != null && m.hasOwnProperty("from")) {
  	                    d.from = o.bytes === String ? $util.base64.encode(m.from, 0, m.from.length) : o.bytes === Array ? Array.prototype.slice.call(m.from) : m.from;
  	                    if (o.oneofs)
  	                        d._from = "from";
  	                }
  	                if (m.data != null && m.hasOwnProperty("data")) {
  	                    d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;
  	                    if (o.oneofs)
  	                        d._data = "data";
  	                }
  	                if (m.seqno != null && m.hasOwnProperty("seqno")) {
  	                    d.seqno = o.bytes === String ? $util.base64.encode(m.seqno, 0, m.seqno.length) : o.bytes === Array ? Array.prototype.slice.call(m.seqno) : m.seqno;
  	                    if (o.oneofs)
  	                        d._seqno = "seqno";
  	                }
  	                if (m.topic != null && m.hasOwnProperty("topic")) {
  	                    d.topic = m.topic;
  	                }
  	                if (m.signature != null && m.hasOwnProperty("signature")) {
  	                    d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;
  	                    if (o.oneofs)
  	                        d._signature = "signature";
  	                }
  	                if (m.key != null && m.hasOwnProperty("key")) {
  	                    d.key = o.bytes === String ? $util.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;
  	                    if (o.oneofs)
  	                        d._key = "key";
  	                }
  	                return d;
  	            };

  	            /**
  	             * Converts this Message to JSON.
  	             * @function toJSON
  	             * @memberof RPC.Message
  	             * @instance
  	             * @returns {Object.<string,*>} JSON object
  	             */
  	            Message.prototype.toJSON = function toJSON() {
  	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
  	            };

  	            return Message;
  	        })();

  	        RPC.ControlMessage = (function() {

  	            /**
  	             * Properties of a ControlMessage.
  	             * @memberof RPC
  	             * @interface IControlMessage
  	             * @property {Array.<RPC.IControlIHave>|null} [ihave] ControlMessage ihave
  	             * @property {Array.<RPC.IControlIWant>|null} [iwant] ControlMessage iwant
  	             * @property {Array.<RPC.IControlGraft>|null} [graft] ControlMessage graft
  	             * @property {Array.<RPC.IControlPrune>|null} [prune] ControlMessage prune
  	             */

  	            /**
  	             * Constructs a new ControlMessage.
  	             * @memberof RPC
  	             * @classdesc Represents a ControlMessage.
  	             * @implements IControlMessage
  	             * @constructor
  	             * @param {RPC.IControlMessage=} [p] Properties to set
  	             */
  	            function ControlMessage(p) {
  	                this.ihave = [];
  	                this.iwant = [];
  	                this.graft = [];
  	                this.prune = [];
  	                if (p)
  	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
  	                        if (p[ks[i]] != null)
  	                            this[ks[i]] = p[ks[i]];
  	            }

  	            /**
  	             * ControlMessage ihave.
  	             * @member {Array.<RPC.IControlIHave>} ihave
  	             * @memberof RPC.ControlMessage
  	             * @instance
  	             */
  	            ControlMessage.prototype.ihave = $util.emptyArray;

  	            /**
  	             * ControlMessage iwant.
  	             * @member {Array.<RPC.IControlIWant>} iwant
  	             * @memberof RPC.ControlMessage
  	             * @instance
  	             */
  	            ControlMessage.prototype.iwant = $util.emptyArray;

  	            /**
  	             * ControlMessage graft.
  	             * @member {Array.<RPC.IControlGraft>} graft
  	             * @memberof RPC.ControlMessage
  	             * @instance
  	             */
  	            ControlMessage.prototype.graft = $util.emptyArray;

  	            /**
  	             * ControlMessage prune.
  	             * @member {Array.<RPC.IControlPrune>} prune
  	             * @memberof RPC.ControlMessage
  	             * @instance
  	             */
  	            ControlMessage.prototype.prune = $util.emptyArray;

  	            /**
  	             * Encodes the specified ControlMessage message. Does not implicitly {@link RPC.ControlMessage.verify|verify} messages.
  	             * @function encode
  	             * @memberof RPC.ControlMessage
  	             * @static
  	             * @param {RPC.IControlMessage} m ControlMessage message or plain object to encode
  	             * @param {$protobuf.Writer} [w] Writer to encode to
  	             * @returns {$protobuf.Writer} Writer
  	             */
  	            ControlMessage.encode = function encode(m, w) {
  	                if (!w)
  	                    w = $Writer.create();
  	                if (m.ihave != null && m.ihave.length) {
  	                    for (var i = 0; i < m.ihave.length; ++i)
  	                        $root.RPC.ControlIHave.encode(m.ihave[i], w.uint32(10).fork()).ldelim();
  	                }
  	                if (m.iwant != null && m.iwant.length) {
  	                    for (var i = 0; i < m.iwant.length; ++i)
  	                        $root.RPC.ControlIWant.encode(m.iwant[i], w.uint32(18).fork()).ldelim();
  	                }
  	                if (m.graft != null && m.graft.length) {
  	                    for (var i = 0; i < m.graft.length; ++i)
  	                        $root.RPC.ControlGraft.encode(m.graft[i], w.uint32(26).fork()).ldelim();
  	                }
  	                if (m.prune != null && m.prune.length) {
  	                    for (var i = 0; i < m.prune.length; ++i)
  	                        $root.RPC.ControlPrune.encode(m.prune[i], w.uint32(34).fork()).ldelim();
  	                }
  	                return w;
  	            };

  	            /**
  	             * Decodes a ControlMessage message from the specified reader or buffer.
  	             * @function decode
  	             * @memberof RPC.ControlMessage
  	             * @static
  	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
  	             * @param {number} [l] Message length if known beforehand
  	             * @returns {RPC.ControlMessage} ControlMessage
  	             * @throws {Error} If the payload is not a reader or valid buffer
  	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
  	             */
  	            ControlMessage.decode = function decode(r, l) {
  	                if (!(r instanceof $Reader))
  	                    r = $Reader.create(r);
  	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlMessage();
  	                while (r.pos < c) {
  	                    var t = r.uint32();
  	                    switch (t >>> 3) {
  	                    case 1:
  	                        if (!(m.ihave && m.ihave.length))
  	                            m.ihave = [];
  	                        m.ihave.push($root.RPC.ControlIHave.decode(r, r.uint32()));
  	                        break;
  	                    case 2:
  	                        if (!(m.iwant && m.iwant.length))
  	                            m.iwant = [];
  	                        m.iwant.push($root.RPC.ControlIWant.decode(r, r.uint32()));
  	                        break;
  	                    case 3:
  	                        if (!(m.graft && m.graft.length))
  	                            m.graft = [];
  	                        m.graft.push($root.RPC.ControlGraft.decode(r, r.uint32()));
  	                        break;
  	                    case 4:
  	                        if (!(m.prune && m.prune.length))
  	                            m.prune = [];
  	                        m.prune.push($root.RPC.ControlPrune.decode(r, r.uint32()));
  	                        break;
  	                    default:
  	                        r.skipType(t & 7);
  	                        break;
  	                    }
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a ControlMessage message from a plain object. Also converts values to their respective internal types.
  	             * @function fromObject
  	             * @memberof RPC.ControlMessage
  	             * @static
  	             * @param {Object.<string,*>} d Plain object
  	             * @returns {RPC.ControlMessage} ControlMessage
  	             */
  	            ControlMessage.fromObject = function fromObject(d) {
  	                if (d instanceof $root.RPC.ControlMessage)
  	                    return d;
  	                var m = new $root.RPC.ControlMessage();
  	                if (d.ihave) {
  	                    if (!Array.isArray(d.ihave))
  	                        throw TypeError(".RPC.ControlMessage.ihave: array expected");
  	                    m.ihave = [];
  	                    for (var i = 0; i < d.ihave.length; ++i) {
  	                        if (typeof d.ihave[i] !== "object")
  	                            throw TypeError(".RPC.ControlMessage.ihave: object expected");
  	                        m.ihave[i] = $root.RPC.ControlIHave.fromObject(d.ihave[i]);
  	                    }
  	                }
  	                if (d.iwant) {
  	                    if (!Array.isArray(d.iwant))
  	                        throw TypeError(".RPC.ControlMessage.iwant: array expected");
  	                    m.iwant = [];
  	                    for (var i = 0; i < d.iwant.length; ++i) {
  	                        if (typeof d.iwant[i] !== "object")
  	                            throw TypeError(".RPC.ControlMessage.iwant: object expected");
  	                        m.iwant[i] = $root.RPC.ControlIWant.fromObject(d.iwant[i]);
  	                    }
  	                }
  	                if (d.graft) {
  	                    if (!Array.isArray(d.graft))
  	                        throw TypeError(".RPC.ControlMessage.graft: array expected");
  	                    m.graft = [];
  	                    for (var i = 0; i < d.graft.length; ++i) {
  	                        if (typeof d.graft[i] !== "object")
  	                            throw TypeError(".RPC.ControlMessage.graft: object expected");
  	                        m.graft[i] = $root.RPC.ControlGraft.fromObject(d.graft[i]);
  	                    }
  	                }
  	                if (d.prune) {
  	                    if (!Array.isArray(d.prune))
  	                        throw TypeError(".RPC.ControlMessage.prune: array expected");
  	                    m.prune = [];
  	                    for (var i = 0; i < d.prune.length; ++i) {
  	                        if (typeof d.prune[i] !== "object")
  	                            throw TypeError(".RPC.ControlMessage.prune: object expected");
  	                        m.prune[i] = $root.RPC.ControlPrune.fromObject(d.prune[i]);
  	                    }
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a plain object from a ControlMessage message. Also converts values to other types if specified.
  	             * @function toObject
  	             * @memberof RPC.ControlMessage
  	             * @static
  	             * @param {RPC.ControlMessage} m ControlMessage
  	             * @param {$protobuf.IConversionOptions} [o] Conversion options
  	             * @returns {Object.<string,*>} Plain object
  	             */
  	            ControlMessage.toObject = function toObject(m, o) {
  	                if (!o)
  	                    o = {};
  	                var d = {};
  	                if (o.arrays || o.defaults) {
  	                    d.ihave = [];
  	                    d.iwant = [];
  	                    d.graft = [];
  	                    d.prune = [];
  	                }
  	                if (m.ihave && m.ihave.length) {
  	                    d.ihave = [];
  	                    for (var j = 0; j < m.ihave.length; ++j) {
  	                        d.ihave[j] = $root.RPC.ControlIHave.toObject(m.ihave[j], o);
  	                    }
  	                }
  	                if (m.iwant && m.iwant.length) {
  	                    d.iwant = [];
  	                    for (var j = 0; j < m.iwant.length; ++j) {
  	                        d.iwant[j] = $root.RPC.ControlIWant.toObject(m.iwant[j], o);
  	                    }
  	                }
  	                if (m.graft && m.graft.length) {
  	                    d.graft = [];
  	                    for (var j = 0; j < m.graft.length; ++j) {
  	                        d.graft[j] = $root.RPC.ControlGraft.toObject(m.graft[j], o);
  	                    }
  	                }
  	                if (m.prune && m.prune.length) {
  	                    d.prune = [];
  	                    for (var j = 0; j < m.prune.length; ++j) {
  	                        d.prune[j] = $root.RPC.ControlPrune.toObject(m.prune[j], o);
  	                    }
  	                }
  	                return d;
  	            };

  	            /**
  	             * Converts this ControlMessage to JSON.
  	             * @function toJSON
  	             * @memberof RPC.ControlMessage
  	             * @instance
  	             * @returns {Object.<string,*>} JSON object
  	             */
  	            ControlMessage.prototype.toJSON = function toJSON() {
  	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
  	            };

  	            return ControlMessage;
  	        })();

  	        RPC.ControlIHave = (function() {

  	            /**
  	             * Properties of a ControlIHave.
  	             * @memberof RPC
  	             * @interface IControlIHave
  	             * @property {string|null} [topicID] ControlIHave topicID
  	             * @property {Array.<Uint8Array>|null} [messageIDs] ControlIHave messageIDs
  	             */

  	            /**
  	             * Constructs a new ControlIHave.
  	             * @memberof RPC
  	             * @classdesc Represents a ControlIHave.
  	             * @implements IControlIHave
  	             * @constructor
  	             * @param {RPC.IControlIHave=} [p] Properties to set
  	             */
  	            function ControlIHave(p) {
  	                this.messageIDs = [];
  	                if (p)
  	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
  	                        if (p[ks[i]] != null)
  	                            this[ks[i]] = p[ks[i]];
  	            }

  	            /**
  	             * ControlIHave topicID.
  	             * @member {string|null|undefined} topicID
  	             * @memberof RPC.ControlIHave
  	             * @instance
  	             */
  	            ControlIHave.prototype.topicID = null;

  	            /**
  	             * ControlIHave messageIDs.
  	             * @member {Array.<Uint8Array>} messageIDs
  	             * @memberof RPC.ControlIHave
  	             * @instance
  	             */
  	            ControlIHave.prototype.messageIDs = $util.emptyArray;

  	            // OneOf field names bound to virtual getters and setters
  	            var $oneOfFields;

  	            /**
  	             * ControlIHave _topicID.
  	             * @member {"topicID"|undefined} _topicID
  	             * @memberof RPC.ControlIHave
  	             * @instance
  	             */
  	            Object.defineProperty(ControlIHave.prototype, "_topicID", {
  	                get: $util.oneOfGetter($oneOfFields = ["topicID"]),
  	                set: $util.oneOfSetter($oneOfFields)
  	            });

  	            /**
  	             * Encodes the specified ControlIHave message. Does not implicitly {@link RPC.ControlIHave.verify|verify} messages.
  	             * @function encode
  	             * @memberof RPC.ControlIHave
  	             * @static
  	             * @param {RPC.IControlIHave} m ControlIHave message or plain object to encode
  	             * @param {$protobuf.Writer} [w] Writer to encode to
  	             * @returns {$protobuf.Writer} Writer
  	             */
  	            ControlIHave.encode = function encode(m, w) {
  	                if (!w)
  	                    w = $Writer.create();
  	                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
  	                    w.uint32(10).string(m.topicID);
  	                if (m.messageIDs != null && m.messageIDs.length) {
  	                    for (var i = 0; i < m.messageIDs.length; ++i)
  	                        w.uint32(18).bytes(m.messageIDs[i]);
  	                }
  	                return w;
  	            };

  	            /**
  	             * Decodes a ControlIHave message from the specified reader or buffer.
  	             * @function decode
  	             * @memberof RPC.ControlIHave
  	             * @static
  	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
  	             * @param {number} [l] Message length if known beforehand
  	             * @returns {RPC.ControlIHave} ControlIHave
  	             * @throws {Error} If the payload is not a reader or valid buffer
  	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
  	             */
  	            ControlIHave.decode = function decode(r, l) {
  	                if (!(r instanceof $Reader))
  	                    r = $Reader.create(r);
  	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlIHave();
  	                while (r.pos < c) {
  	                    var t = r.uint32();
  	                    switch (t >>> 3) {
  	                    case 1:
  	                        m.topicID = r.string();
  	                        break;
  	                    case 2:
  	                        if (!(m.messageIDs && m.messageIDs.length))
  	                            m.messageIDs = [];
  	                        m.messageIDs.push(r.bytes());
  	                        break;
  	                    default:
  	                        r.skipType(t & 7);
  	                        break;
  	                    }
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a ControlIHave message from a plain object. Also converts values to their respective internal types.
  	             * @function fromObject
  	             * @memberof RPC.ControlIHave
  	             * @static
  	             * @param {Object.<string,*>} d Plain object
  	             * @returns {RPC.ControlIHave} ControlIHave
  	             */
  	            ControlIHave.fromObject = function fromObject(d) {
  	                if (d instanceof $root.RPC.ControlIHave)
  	                    return d;
  	                var m = new $root.RPC.ControlIHave();
  	                if (d.topicID != null) {
  	                    m.topicID = String(d.topicID);
  	                }
  	                if (d.messageIDs) {
  	                    if (!Array.isArray(d.messageIDs))
  	                        throw TypeError(".RPC.ControlIHave.messageIDs: array expected");
  	                    m.messageIDs = [];
  	                    for (var i = 0; i < d.messageIDs.length; ++i) {
  	                        if (typeof d.messageIDs[i] === "string")
  	                            $util.base64.decode(d.messageIDs[i], m.messageIDs[i] = $util.newBuffer($util.base64.length(d.messageIDs[i])), 0);
  	                        else if (d.messageIDs[i].length)
  	                            m.messageIDs[i] = d.messageIDs[i];
  	                    }
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a plain object from a ControlIHave message. Also converts values to other types if specified.
  	             * @function toObject
  	             * @memberof RPC.ControlIHave
  	             * @static
  	             * @param {RPC.ControlIHave} m ControlIHave
  	             * @param {$protobuf.IConversionOptions} [o] Conversion options
  	             * @returns {Object.<string,*>} Plain object
  	             */
  	            ControlIHave.toObject = function toObject(m, o) {
  	                if (!o)
  	                    o = {};
  	                var d = {};
  	                if (o.arrays || o.defaults) {
  	                    d.messageIDs = [];
  	                }
  	                if (m.topicID != null && m.hasOwnProperty("topicID")) {
  	                    d.topicID = m.topicID;
  	                    if (o.oneofs)
  	                        d._topicID = "topicID";
  	                }
  	                if (m.messageIDs && m.messageIDs.length) {
  	                    d.messageIDs = [];
  	                    for (var j = 0; j < m.messageIDs.length; ++j) {
  	                        d.messageIDs[j] = o.bytes === String ? $util.base64.encode(m.messageIDs[j], 0, m.messageIDs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.messageIDs[j]) : m.messageIDs[j];
  	                    }
  	                }
  	                return d;
  	            };

  	            /**
  	             * Converts this ControlIHave to JSON.
  	             * @function toJSON
  	             * @memberof RPC.ControlIHave
  	             * @instance
  	             * @returns {Object.<string,*>} JSON object
  	             */
  	            ControlIHave.prototype.toJSON = function toJSON() {
  	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
  	            };

  	            return ControlIHave;
  	        })();

  	        RPC.ControlIWant = (function() {

  	            /**
  	             * Properties of a ControlIWant.
  	             * @memberof RPC
  	             * @interface IControlIWant
  	             * @property {Array.<Uint8Array>|null} [messageIDs] ControlIWant messageIDs
  	             */

  	            /**
  	             * Constructs a new ControlIWant.
  	             * @memberof RPC
  	             * @classdesc Represents a ControlIWant.
  	             * @implements IControlIWant
  	             * @constructor
  	             * @param {RPC.IControlIWant=} [p] Properties to set
  	             */
  	            function ControlIWant(p) {
  	                this.messageIDs = [];
  	                if (p)
  	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
  	                        if (p[ks[i]] != null)
  	                            this[ks[i]] = p[ks[i]];
  	            }

  	            /**
  	             * ControlIWant messageIDs.
  	             * @member {Array.<Uint8Array>} messageIDs
  	             * @memberof RPC.ControlIWant
  	             * @instance
  	             */
  	            ControlIWant.prototype.messageIDs = $util.emptyArray;

  	            /**
  	             * Encodes the specified ControlIWant message. Does not implicitly {@link RPC.ControlIWant.verify|verify} messages.
  	             * @function encode
  	             * @memberof RPC.ControlIWant
  	             * @static
  	             * @param {RPC.IControlIWant} m ControlIWant message or plain object to encode
  	             * @param {$protobuf.Writer} [w] Writer to encode to
  	             * @returns {$protobuf.Writer} Writer
  	             */
  	            ControlIWant.encode = function encode(m, w) {
  	                if (!w)
  	                    w = $Writer.create();
  	                if (m.messageIDs != null && m.messageIDs.length) {
  	                    for (var i = 0; i < m.messageIDs.length; ++i)
  	                        w.uint32(10).bytes(m.messageIDs[i]);
  	                }
  	                return w;
  	            };

  	            /**
  	             * Decodes a ControlIWant message from the specified reader or buffer.
  	             * @function decode
  	             * @memberof RPC.ControlIWant
  	             * @static
  	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
  	             * @param {number} [l] Message length if known beforehand
  	             * @returns {RPC.ControlIWant} ControlIWant
  	             * @throws {Error} If the payload is not a reader or valid buffer
  	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
  	             */
  	            ControlIWant.decode = function decode(r, l) {
  	                if (!(r instanceof $Reader))
  	                    r = $Reader.create(r);
  	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlIWant();
  	                while (r.pos < c) {
  	                    var t = r.uint32();
  	                    switch (t >>> 3) {
  	                    case 1:
  	                        if (!(m.messageIDs && m.messageIDs.length))
  	                            m.messageIDs = [];
  	                        m.messageIDs.push(r.bytes());
  	                        break;
  	                    default:
  	                        r.skipType(t & 7);
  	                        break;
  	                    }
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a ControlIWant message from a plain object. Also converts values to their respective internal types.
  	             * @function fromObject
  	             * @memberof RPC.ControlIWant
  	             * @static
  	             * @param {Object.<string,*>} d Plain object
  	             * @returns {RPC.ControlIWant} ControlIWant
  	             */
  	            ControlIWant.fromObject = function fromObject(d) {
  	                if (d instanceof $root.RPC.ControlIWant)
  	                    return d;
  	                var m = new $root.RPC.ControlIWant();
  	                if (d.messageIDs) {
  	                    if (!Array.isArray(d.messageIDs))
  	                        throw TypeError(".RPC.ControlIWant.messageIDs: array expected");
  	                    m.messageIDs = [];
  	                    for (var i = 0; i < d.messageIDs.length; ++i) {
  	                        if (typeof d.messageIDs[i] === "string")
  	                            $util.base64.decode(d.messageIDs[i], m.messageIDs[i] = $util.newBuffer($util.base64.length(d.messageIDs[i])), 0);
  	                        else if (d.messageIDs[i].length)
  	                            m.messageIDs[i] = d.messageIDs[i];
  	                    }
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a plain object from a ControlIWant message. Also converts values to other types if specified.
  	             * @function toObject
  	             * @memberof RPC.ControlIWant
  	             * @static
  	             * @param {RPC.ControlIWant} m ControlIWant
  	             * @param {$protobuf.IConversionOptions} [o] Conversion options
  	             * @returns {Object.<string,*>} Plain object
  	             */
  	            ControlIWant.toObject = function toObject(m, o) {
  	                if (!o)
  	                    o = {};
  	                var d = {};
  	                if (o.arrays || o.defaults) {
  	                    d.messageIDs = [];
  	                }
  	                if (m.messageIDs && m.messageIDs.length) {
  	                    d.messageIDs = [];
  	                    for (var j = 0; j < m.messageIDs.length; ++j) {
  	                        d.messageIDs[j] = o.bytes === String ? $util.base64.encode(m.messageIDs[j], 0, m.messageIDs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.messageIDs[j]) : m.messageIDs[j];
  	                    }
  	                }
  	                return d;
  	            };

  	            /**
  	             * Converts this ControlIWant to JSON.
  	             * @function toJSON
  	             * @memberof RPC.ControlIWant
  	             * @instance
  	             * @returns {Object.<string,*>} JSON object
  	             */
  	            ControlIWant.prototype.toJSON = function toJSON() {
  	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
  	            };

  	            return ControlIWant;
  	        })();

  	        RPC.ControlGraft = (function() {

  	            /**
  	             * Properties of a ControlGraft.
  	             * @memberof RPC
  	             * @interface IControlGraft
  	             * @property {string|null} [topicID] ControlGraft topicID
  	             */

  	            /**
  	             * Constructs a new ControlGraft.
  	             * @memberof RPC
  	             * @classdesc Represents a ControlGraft.
  	             * @implements IControlGraft
  	             * @constructor
  	             * @param {RPC.IControlGraft=} [p] Properties to set
  	             */
  	            function ControlGraft(p) {
  	                if (p)
  	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
  	                        if (p[ks[i]] != null)
  	                            this[ks[i]] = p[ks[i]];
  	            }

  	            /**
  	             * ControlGraft topicID.
  	             * @member {string|null|undefined} topicID
  	             * @memberof RPC.ControlGraft
  	             * @instance
  	             */
  	            ControlGraft.prototype.topicID = null;

  	            // OneOf field names bound to virtual getters and setters
  	            var $oneOfFields;

  	            /**
  	             * ControlGraft _topicID.
  	             * @member {"topicID"|undefined} _topicID
  	             * @memberof RPC.ControlGraft
  	             * @instance
  	             */
  	            Object.defineProperty(ControlGraft.prototype, "_topicID", {
  	                get: $util.oneOfGetter($oneOfFields = ["topicID"]),
  	                set: $util.oneOfSetter($oneOfFields)
  	            });

  	            /**
  	             * Encodes the specified ControlGraft message. Does not implicitly {@link RPC.ControlGraft.verify|verify} messages.
  	             * @function encode
  	             * @memberof RPC.ControlGraft
  	             * @static
  	             * @param {RPC.IControlGraft} m ControlGraft message or plain object to encode
  	             * @param {$protobuf.Writer} [w] Writer to encode to
  	             * @returns {$protobuf.Writer} Writer
  	             */
  	            ControlGraft.encode = function encode(m, w) {
  	                if (!w)
  	                    w = $Writer.create();
  	                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
  	                    w.uint32(10).string(m.topicID);
  	                return w;
  	            };

  	            /**
  	             * Decodes a ControlGraft message from the specified reader or buffer.
  	             * @function decode
  	             * @memberof RPC.ControlGraft
  	             * @static
  	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
  	             * @param {number} [l] Message length if known beforehand
  	             * @returns {RPC.ControlGraft} ControlGraft
  	             * @throws {Error} If the payload is not a reader or valid buffer
  	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
  	             */
  	            ControlGraft.decode = function decode(r, l) {
  	                if (!(r instanceof $Reader))
  	                    r = $Reader.create(r);
  	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlGraft();
  	                while (r.pos < c) {
  	                    var t = r.uint32();
  	                    switch (t >>> 3) {
  	                    case 1:
  	                        m.topicID = r.string();
  	                        break;
  	                    default:
  	                        r.skipType(t & 7);
  	                        break;
  	                    }
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a ControlGraft message from a plain object. Also converts values to their respective internal types.
  	             * @function fromObject
  	             * @memberof RPC.ControlGraft
  	             * @static
  	             * @param {Object.<string,*>} d Plain object
  	             * @returns {RPC.ControlGraft} ControlGraft
  	             */
  	            ControlGraft.fromObject = function fromObject(d) {
  	                if (d instanceof $root.RPC.ControlGraft)
  	                    return d;
  	                var m = new $root.RPC.ControlGraft();
  	                if (d.topicID != null) {
  	                    m.topicID = String(d.topicID);
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a plain object from a ControlGraft message. Also converts values to other types if specified.
  	             * @function toObject
  	             * @memberof RPC.ControlGraft
  	             * @static
  	             * @param {RPC.ControlGraft} m ControlGraft
  	             * @param {$protobuf.IConversionOptions} [o] Conversion options
  	             * @returns {Object.<string,*>} Plain object
  	             */
  	            ControlGraft.toObject = function toObject(m, o) {
  	                if (!o)
  	                    o = {};
  	                var d = {};
  	                if (m.topicID != null && m.hasOwnProperty("topicID")) {
  	                    d.topicID = m.topicID;
  	                    if (o.oneofs)
  	                        d._topicID = "topicID";
  	                }
  	                return d;
  	            };

  	            /**
  	             * Converts this ControlGraft to JSON.
  	             * @function toJSON
  	             * @memberof RPC.ControlGraft
  	             * @instance
  	             * @returns {Object.<string,*>} JSON object
  	             */
  	            ControlGraft.prototype.toJSON = function toJSON() {
  	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
  	            };

  	            return ControlGraft;
  	        })();

  	        RPC.ControlPrune = (function() {

  	            /**
  	             * Properties of a ControlPrune.
  	             * @memberof RPC
  	             * @interface IControlPrune
  	             * @property {string|null} [topicID] ControlPrune topicID
  	             * @property {Array.<RPC.IPeerInfo>|null} [peers] ControlPrune peers
  	             * @property {number|null} [backoff] ControlPrune backoff
  	             */

  	            /**
  	             * Constructs a new ControlPrune.
  	             * @memberof RPC
  	             * @classdesc Represents a ControlPrune.
  	             * @implements IControlPrune
  	             * @constructor
  	             * @param {RPC.IControlPrune=} [p] Properties to set
  	             */
  	            function ControlPrune(p) {
  	                this.peers = [];
  	                if (p)
  	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
  	                        if (p[ks[i]] != null)
  	                            this[ks[i]] = p[ks[i]];
  	            }

  	            /**
  	             * ControlPrune topicID.
  	             * @member {string|null|undefined} topicID
  	             * @memberof RPC.ControlPrune
  	             * @instance
  	             */
  	            ControlPrune.prototype.topicID = null;

  	            /**
  	             * ControlPrune peers.
  	             * @member {Array.<RPC.IPeerInfo>} peers
  	             * @memberof RPC.ControlPrune
  	             * @instance
  	             */
  	            ControlPrune.prototype.peers = $util.emptyArray;

  	            /**
  	             * ControlPrune backoff.
  	             * @member {number|null|undefined} backoff
  	             * @memberof RPC.ControlPrune
  	             * @instance
  	             */
  	            ControlPrune.prototype.backoff = null;

  	            // OneOf field names bound to virtual getters and setters
  	            var $oneOfFields;

  	            /**
  	             * ControlPrune _topicID.
  	             * @member {"topicID"|undefined} _topicID
  	             * @memberof RPC.ControlPrune
  	             * @instance
  	             */
  	            Object.defineProperty(ControlPrune.prototype, "_topicID", {
  	                get: $util.oneOfGetter($oneOfFields = ["topicID"]),
  	                set: $util.oneOfSetter($oneOfFields)
  	            });

  	            /**
  	             * ControlPrune _backoff.
  	             * @member {"backoff"|undefined} _backoff
  	             * @memberof RPC.ControlPrune
  	             * @instance
  	             */
  	            Object.defineProperty(ControlPrune.prototype, "_backoff", {
  	                get: $util.oneOfGetter($oneOfFields = ["backoff"]),
  	                set: $util.oneOfSetter($oneOfFields)
  	            });

  	            /**
  	             * Encodes the specified ControlPrune message. Does not implicitly {@link RPC.ControlPrune.verify|verify} messages.
  	             * @function encode
  	             * @memberof RPC.ControlPrune
  	             * @static
  	             * @param {RPC.IControlPrune} m ControlPrune message or plain object to encode
  	             * @param {$protobuf.Writer} [w] Writer to encode to
  	             * @returns {$protobuf.Writer} Writer
  	             */
  	            ControlPrune.encode = function encode(m, w) {
  	                if (!w)
  	                    w = $Writer.create();
  	                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
  	                    w.uint32(10).string(m.topicID);
  	                if (m.peers != null && m.peers.length) {
  	                    for (var i = 0; i < m.peers.length; ++i)
  	                        $root.RPC.PeerInfo.encode(m.peers[i], w.uint32(18).fork()).ldelim();
  	                }
  	                if (m.backoff != null && Object.hasOwnProperty.call(m, "backoff"))
  	                    w.uint32(24).uint64(m.backoff);
  	                return w;
  	            };

  	            /**
  	             * Decodes a ControlPrune message from the specified reader or buffer.
  	             * @function decode
  	             * @memberof RPC.ControlPrune
  	             * @static
  	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
  	             * @param {number} [l] Message length if known beforehand
  	             * @returns {RPC.ControlPrune} ControlPrune
  	             * @throws {Error} If the payload is not a reader or valid buffer
  	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
  	             */
  	            ControlPrune.decode = function decode(r, l) {
  	                if (!(r instanceof $Reader))
  	                    r = $Reader.create(r);
  	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlPrune();
  	                while (r.pos < c) {
  	                    var t = r.uint32();
  	                    switch (t >>> 3) {
  	                    case 1:
  	                        m.topicID = r.string();
  	                        break;
  	                    case 2:
  	                        if (!(m.peers && m.peers.length))
  	                            m.peers = [];
  	                        m.peers.push($root.RPC.PeerInfo.decode(r, r.uint32()));
  	                        break;
  	                    case 3:
  	                        m.backoff = r.uint64();
  	                        break;
  	                    default:
  	                        r.skipType(t & 7);
  	                        break;
  	                    }
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a ControlPrune message from a plain object. Also converts values to their respective internal types.
  	             * @function fromObject
  	             * @memberof RPC.ControlPrune
  	             * @static
  	             * @param {Object.<string,*>} d Plain object
  	             * @returns {RPC.ControlPrune} ControlPrune
  	             */
  	            ControlPrune.fromObject = function fromObject(d) {
  	                if (d instanceof $root.RPC.ControlPrune)
  	                    return d;
  	                var m = new $root.RPC.ControlPrune();
  	                if (d.topicID != null) {
  	                    m.topicID = String(d.topicID);
  	                }
  	                if (d.peers) {
  	                    if (!Array.isArray(d.peers))
  	                        throw TypeError(".RPC.ControlPrune.peers: array expected");
  	                    m.peers = [];
  	                    for (var i = 0; i < d.peers.length; ++i) {
  	                        if (typeof d.peers[i] !== "object")
  	                            throw TypeError(".RPC.ControlPrune.peers: object expected");
  	                        m.peers[i] = $root.RPC.PeerInfo.fromObject(d.peers[i]);
  	                    }
  	                }
  	                if (d.backoff != null) {
  	                    if ($util.Long)
  	                        (m.backoff = $util.Long.fromValue(d.backoff)).unsigned = true;
  	                    else if (typeof d.backoff === "string")
  	                        m.backoff = parseInt(d.backoff, 10);
  	                    else if (typeof d.backoff === "number")
  	                        m.backoff = d.backoff;
  	                    else if (typeof d.backoff === "object")
  	                        m.backoff = new $util.LongBits(d.backoff.low >>> 0, d.backoff.high >>> 0).toNumber(true);
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a plain object from a ControlPrune message. Also converts values to other types if specified.
  	             * @function toObject
  	             * @memberof RPC.ControlPrune
  	             * @static
  	             * @param {RPC.ControlPrune} m ControlPrune
  	             * @param {$protobuf.IConversionOptions} [o] Conversion options
  	             * @returns {Object.<string,*>} Plain object
  	             */
  	            ControlPrune.toObject = function toObject(m, o) {
  	                if (!o)
  	                    o = {};
  	                var d = {};
  	                if (o.arrays || o.defaults) {
  	                    d.peers = [];
  	                }
  	                if (m.topicID != null && m.hasOwnProperty("topicID")) {
  	                    d.topicID = m.topicID;
  	                    if (o.oneofs)
  	                        d._topicID = "topicID";
  	                }
  	                if (m.peers && m.peers.length) {
  	                    d.peers = [];
  	                    for (var j = 0; j < m.peers.length; ++j) {
  	                        d.peers[j] = $root.RPC.PeerInfo.toObject(m.peers[j], o);
  	                    }
  	                }
  	                if (m.backoff != null && m.hasOwnProperty("backoff")) {
  	                    if (typeof m.backoff === "number")
  	                        d.backoff = o.longs === String ? String(m.backoff) : m.backoff;
  	                    else
  	                        d.backoff = o.longs === String ? $util.Long.prototype.toString.call(m.backoff) : o.longs === Number ? new $util.LongBits(m.backoff.low >>> 0, m.backoff.high >>> 0).toNumber(true) : m.backoff;
  	                    if (o.oneofs)
  	                        d._backoff = "backoff";
  	                }
  	                return d;
  	            };

  	            /**
  	             * Converts this ControlPrune to JSON.
  	             * @function toJSON
  	             * @memberof RPC.ControlPrune
  	             * @instance
  	             * @returns {Object.<string,*>} JSON object
  	             */
  	            ControlPrune.prototype.toJSON = function toJSON() {
  	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
  	            };

  	            return ControlPrune;
  	        })();

  	        RPC.PeerInfo = (function() {

  	            /**
  	             * Properties of a PeerInfo.
  	             * @memberof RPC
  	             * @interface IPeerInfo
  	             * @property {Uint8Array|null} [peerID] PeerInfo peerID
  	             * @property {Uint8Array|null} [signedPeerRecord] PeerInfo signedPeerRecord
  	             */

  	            /**
  	             * Constructs a new PeerInfo.
  	             * @memberof RPC
  	             * @classdesc Represents a PeerInfo.
  	             * @implements IPeerInfo
  	             * @constructor
  	             * @param {RPC.IPeerInfo=} [p] Properties to set
  	             */
  	            function PeerInfo(p) {
  	                if (p)
  	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
  	                        if (p[ks[i]] != null)
  	                            this[ks[i]] = p[ks[i]];
  	            }

  	            /**
  	             * PeerInfo peerID.
  	             * @member {Uint8Array|null|undefined} peerID
  	             * @memberof RPC.PeerInfo
  	             * @instance
  	             */
  	            PeerInfo.prototype.peerID = null;

  	            /**
  	             * PeerInfo signedPeerRecord.
  	             * @member {Uint8Array|null|undefined} signedPeerRecord
  	             * @memberof RPC.PeerInfo
  	             * @instance
  	             */
  	            PeerInfo.prototype.signedPeerRecord = null;

  	            // OneOf field names bound to virtual getters and setters
  	            var $oneOfFields;

  	            /**
  	             * PeerInfo _peerID.
  	             * @member {"peerID"|undefined} _peerID
  	             * @memberof RPC.PeerInfo
  	             * @instance
  	             */
  	            Object.defineProperty(PeerInfo.prototype, "_peerID", {
  	                get: $util.oneOfGetter($oneOfFields = ["peerID"]),
  	                set: $util.oneOfSetter($oneOfFields)
  	            });

  	            /**
  	             * PeerInfo _signedPeerRecord.
  	             * @member {"signedPeerRecord"|undefined} _signedPeerRecord
  	             * @memberof RPC.PeerInfo
  	             * @instance
  	             */
  	            Object.defineProperty(PeerInfo.prototype, "_signedPeerRecord", {
  	                get: $util.oneOfGetter($oneOfFields = ["signedPeerRecord"]),
  	                set: $util.oneOfSetter($oneOfFields)
  	            });

  	            /**
  	             * Encodes the specified PeerInfo message. Does not implicitly {@link RPC.PeerInfo.verify|verify} messages.
  	             * @function encode
  	             * @memberof RPC.PeerInfo
  	             * @static
  	             * @param {RPC.IPeerInfo} m PeerInfo message or plain object to encode
  	             * @param {$protobuf.Writer} [w] Writer to encode to
  	             * @returns {$protobuf.Writer} Writer
  	             */
  	            PeerInfo.encode = function encode(m, w) {
  	                if (!w)
  	                    w = $Writer.create();
  	                if (m.peerID != null && Object.hasOwnProperty.call(m, "peerID"))
  	                    w.uint32(10).bytes(m.peerID);
  	                if (m.signedPeerRecord != null && Object.hasOwnProperty.call(m, "signedPeerRecord"))
  	                    w.uint32(18).bytes(m.signedPeerRecord);
  	                return w;
  	            };

  	            /**
  	             * Decodes a PeerInfo message from the specified reader or buffer.
  	             * @function decode
  	             * @memberof RPC.PeerInfo
  	             * @static
  	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
  	             * @param {number} [l] Message length if known beforehand
  	             * @returns {RPC.PeerInfo} PeerInfo
  	             * @throws {Error} If the payload is not a reader or valid buffer
  	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
  	             */
  	            PeerInfo.decode = function decode(r, l) {
  	                if (!(r instanceof $Reader))
  	                    r = $Reader.create(r);
  	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.PeerInfo();
  	                while (r.pos < c) {
  	                    var t = r.uint32();
  	                    switch (t >>> 3) {
  	                    case 1:
  	                        m.peerID = r.bytes();
  	                        break;
  	                    case 2:
  	                        m.signedPeerRecord = r.bytes();
  	                        break;
  	                    default:
  	                        r.skipType(t & 7);
  	                        break;
  	                    }
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a PeerInfo message from a plain object. Also converts values to their respective internal types.
  	             * @function fromObject
  	             * @memberof RPC.PeerInfo
  	             * @static
  	             * @param {Object.<string,*>} d Plain object
  	             * @returns {RPC.PeerInfo} PeerInfo
  	             */
  	            PeerInfo.fromObject = function fromObject(d) {
  	                if (d instanceof $root.RPC.PeerInfo)
  	                    return d;
  	                var m = new $root.RPC.PeerInfo();
  	                if (d.peerID != null) {
  	                    if (typeof d.peerID === "string")
  	                        $util.base64.decode(d.peerID, m.peerID = $util.newBuffer($util.base64.length(d.peerID)), 0);
  	                    else if (d.peerID.length)
  	                        m.peerID = d.peerID;
  	                }
  	                if (d.signedPeerRecord != null) {
  	                    if (typeof d.signedPeerRecord === "string")
  	                        $util.base64.decode(d.signedPeerRecord, m.signedPeerRecord = $util.newBuffer($util.base64.length(d.signedPeerRecord)), 0);
  	                    else if (d.signedPeerRecord.length)
  	                        m.signedPeerRecord = d.signedPeerRecord;
  	                }
  	                return m;
  	            };

  	            /**
  	             * Creates a plain object from a PeerInfo message. Also converts values to other types if specified.
  	             * @function toObject
  	             * @memberof RPC.PeerInfo
  	             * @static
  	             * @param {RPC.PeerInfo} m PeerInfo
  	             * @param {$protobuf.IConversionOptions} [o] Conversion options
  	             * @returns {Object.<string,*>} Plain object
  	             */
  	            PeerInfo.toObject = function toObject(m, o) {
  	                if (!o)
  	                    o = {};
  	                var d = {};
  	                if (m.peerID != null && m.hasOwnProperty("peerID")) {
  	                    d.peerID = o.bytes === String ? $util.base64.encode(m.peerID, 0, m.peerID.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerID) : m.peerID;
  	                    if (o.oneofs)
  	                        d._peerID = "peerID";
  	                }
  	                if (m.signedPeerRecord != null && m.hasOwnProperty("signedPeerRecord")) {
  	                    d.signedPeerRecord = o.bytes === String ? $util.base64.encode(m.signedPeerRecord, 0, m.signedPeerRecord.length) : o.bytes === Array ? Array.prototype.slice.call(m.signedPeerRecord) : m.signedPeerRecord;
  	                    if (o.oneofs)
  	                        d._signedPeerRecord = "signedPeerRecord";
  	                }
  	                return d;
  	            };

  	            /**
  	             * Converts this PeerInfo to JSON.
  	             * @function toJSON
  	             * @memberof RPC.PeerInfo
  	             * @instance
  	             * @returns {Object.<string,*>} JSON object
  	             */
  	            PeerInfo.prototype.toJSON = function toJSON() {
  	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
  	            };

  	            return PeerInfo;
  	        })();

  	        return RPC;
  	    })();

  	    return $root;
  	}); 
  } (rpc$1));

  var rpcExports = rpc$1.exports;
  var cjs = /*@__PURE__*/getDefaultExportFromCjs(rpcExports);

  const {RPC} = cjs;

  const second = 1000;
  const minute = 60 * second;
  // Protocol identifiers
  const FloodsubID = '/floodsub/1.0.0';
  /**
   * The protocol ID for version 1.0.0 of the Gossipsub protocol
   * It is advertised along with GossipsubIDv11 for backwards compatability
   */
  const GossipsubIDv10 = '/meshsub/1.0.0';
  /**
   * The protocol ID for version 1.1.0 of the Gossipsub protocol
   * See the spec for details about how v1.1.0 compares to v1.0.0:
   * https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md
   */
  const GossipsubIDv11 = '/meshsub/1.1.0';
  // Overlay parameters
  /**
   * GossipsubD sets the optimal degree for a Gossipsub topic mesh. For example, if GossipsubD == 6,
   * each peer will want to have about six peers in their mesh for each topic they're subscribed to.
   * GossipsubD should be set somewhere between GossipsubDlo and GossipsubDhi.
   */
  const GossipsubD = 6;
  /**
   * GossipsubDlo sets the lower bound on the number of peers we keep in a Gossipsub topic mesh.
   * If we have fewer than GossipsubDlo peers, we will attempt to graft some more into the mesh at
   * the next heartbeat.
   */
  const GossipsubDlo = 4;
  /**
   * GossipsubDhi sets the upper bound on the number of peers we keep in a Gossipsub topic mesh.
   * If we have more than GossipsubDhi peers, we will select some to prune from the mesh at the next heartbeat.
   */
  const GossipsubDhi = 12;
  /**
   * GossipsubDscore affects how peers are selected when pruning a mesh due to over subscription.
   * At least GossipsubDscore of the retained peers will be high-scoring, while the remainder are
   * chosen randomly.
   */
  const GossipsubDscore = 4;
  /**
   * GossipsubDout sets the quota for the number of outbound connections to maintain in a topic mesh.
   * When the mesh is pruned due to over subscription, we make sure that we have outbound connections
   * to at least GossipsubDout of the survivor peers. This prevents sybil attackers from overwhelming
   * our mesh with incoming connections.
   *
   * GossipsubDout must be set below GossipsubDlo, and must not exceed GossipsubD / 2.
   */
  const GossipsubDout = 2;
  // Gossip parameters
  /**
   * GossipsubHistoryLength controls the size of the message cache used for gossip.
   * The message cache will remember messages for GossipsubHistoryLength heartbeats.
   */
  const GossipsubHistoryLength = 5;
  /**
   * GossipsubHistoryGossip controls how many cached message ids we will advertise in
   * IHAVE gossip messages. When asked for our seen message IDs, we will return
   * only those from the most recent GossipsubHistoryGossip heartbeats. The slack between
   * GossipsubHistoryGossip and GossipsubHistoryLength allows us to avoid advertising messages
   * that will be expired by the time they're requested.
   *
   * GossipsubHistoryGossip must be less than or equal to GossipsubHistoryLength to
   * avoid a runtime panic.
   */
  const GossipsubHistoryGossip = 3;
  /**
   * GossipsubDlazy affects how many peers we will emit gossip to at each heartbeat.
   * We will send gossip to at least GossipsubDlazy peers outside our mesh. The actual
   * number may be more, depending on GossipsubGossipFactor and how many peers we're
   * connected to.
   */
  const GossipsubDlazy = 6;
  /**
   * GossipsubGossipFactor affects how many peers we will emit gossip to at each heartbeat.
   * We will send gossip to GossipsubGossipFactor * (total number of non-mesh peers), or
   * GossipsubDlazy, whichever is greater.
   */
  const GossipsubGossipFactor = 0.25;
  /**
   * GossipsubGossipRetransmission controls how many times we will allow a peer to request
   * the same message id through IWANT gossip before we start ignoring them. This is designed
   * to prevent peers from spamming us with requests and wasting our resources.
   */
  const GossipsubGossipRetransmission = 3;
  // Heartbeat interval
  /**
   * GossipsubHeartbeatInitialDelay is the short delay before the heartbeat timer begins
   * after the router is initialized.
   */
  const GossipsubHeartbeatInitialDelay = 100;
  /**
   * GossipsubHeartbeatInterval controls the time between heartbeats.
   */
  const GossipsubHeartbeatInterval = second;
  /**
   * GossipsubFanoutTTL controls how long we keep track of the fanout state. If it's been
   * GossipsubFanoutTTL since we've published to a topic that we're not subscribed to,
   * we'll delete the fanout map for that topic.
   */
  const GossipsubFanoutTTL = minute;
  /**
   * GossipsubPrunePeers controls the number of peers to include in prune Peer eXchange.
   * When we prune a peer that's eligible for PX (has a good score, etc), we will try to
   * send them signed peer records for up to GossipsubPrunePeers other peers that we
   * know of.
   */
  const GossipsubPrunePeers = 16;
  /**
   * GossipsubPruneBackoff controls the backoff time for pruned peers. This is how long
   * a peer must wait before attempting to graft into our mesh again after being pruned.
   * When pruning a peer, we send them our value of GossipsubPruneBackoff so they know
   * the minimum time to wait. Peers running older versions may not send a backoff time,
   * so if we receive a prune message without one, we will wait at least GossipsubPruneBackoff
   * before attempting to re-graft.
   */
  const GossipsubPruneBackoff = minute;
  /**
   * Backoff to use when unsuscribing from a topic. Should not resubscribe to this topic before it expired.
   */
  const GossipsubUnsubscribeBackoff = 10 * second;
  /**
   * GossipsubPruneBackoffTicks is the number of heartbeat ticks for attempting to prune expired
   * backoff timers.
   */
  const GossipsubPruneBackoffTicks = 15;
  /**
   * GossipsubDirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers
   * that are not currently connected.
   */
  const GossipsubDirectConnectTicks = 300;
  /**
   * GossipsubDirectConnectInitialDelay is the initial delay before opening connections to direct peers
   */
  const GossipsubDirectConnectInitialDelay = second;
  /**
   * GossipsubOpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh
   * with opportunistic grafting. Every GossipsubOpportunisticGraftTicks we will attempt to select some
   * high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls
   * below a threshold
   */
  const GossipsubOpportunisticGraftTicks = 60;
  /**
   * GossipsubOpportunisticGraftPeers is the number of peers to opportunistically graft.
   */
  const GossipsubOpportunisticGraftPeers = 2;
  /**
   * If a GRAFT comes before GossipsubGraftFloodThreshold has elapsed since the last PRUNE,
   * then there is an extra score penalty applied to the peer through P7.
   */
  const GossipsubGraftFloodThreshold = 10 * second;
  /**
   * GossipsubMaxIHaveLength is the maximum number of messages to include in an IHAVE message.
   * Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a
   * peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the
   * default if your system is pushing more than 5000 messages in GossipsubHistoryGossip heartbeats;
   * with the defaults this is 1666 messages/s.
   */
  const GossipsubMaxIHaveLength = 5000;
  /**
   * GossipsubMaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat.
   */
  const GossipsubMaxIHaveMessages = 10;
  /**
   * Time to wait for a message requested through IWANT following an IHAVE advertisement.
   * If the message is not received within this window, a broken promise is declared and
   * the router may apply bahavioural penalties.
   */
  const GossipsubIWantFollowupTime = 3 * second;
  /**
   * Time in milliseconds to keep message ids in the seen cache
   */
  const GossipsubSeenTTL = 2 * minute;
  const TimeCacheDuration = 120 * 1000;
  const ERR_TOPIC_VALIDATOR_REJECT = 'ERR_TOPIC_VALIDATOR_REJECT';
  const ERR_TOPIC_VALIDATOR_IGNORE = 'ERR_TOPIC_VALIDATOR_IGNORE';
  /**
   * If peer score is better than this, we accept messages from this peer
   * within ACCEPT_FROM_WHITELIST_DURATION_MS from the last time computing score.
   **/
  const ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE = 0;
  /**
   * If peer score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE, accept up to this
   * number of messages from that peer.
   */
  const ACCEPT_FROM_WHITELIST_MAX_MESSAGES = 128;
  /**
   * If peer score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE, accept messages from
   * this peer up to this time duration.
   */
  const ACCEPT_FROM_WHITELIST_DURATION_MS = 1000;
  /**
   * The default MeshMessageDeliveriesWindow to be used in metrics.
   */
  const DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS = 1000;
  /** Wait for 1 more heartbeats before clearing a backoff */
  const BACKOFF_SLACK = 1;

  /**
   * Pseudo-randomly shuffles an array
   *
   * Mutates the input array
   */
  function shuffle(arr) {
      if (arr.length <= 1) {
          return arr;
      }
      const randInt = () => {
          return Math.floor(Math.random() * Math.floor(arr.length));
      };
      for (let i = 0; i < arr.length; i++) {
          const j = randInt();
          const tmp = arr[i];
          arr[i] = arr[j];
          arr[j] = tmp;
      }
      return arr;
  }

  /**
   * Browser friendly function to convert Uint8Array message id to base64 string.
   */
  function messageIdToString(msgId) {
      return toString$1(msgId, 'base64');
  }

  /**
   * On the producing side:
   * * Build messages with the signature, key (from may be enough for certain inlineable public key types), from and seqno fields.
   *
   * On the consuming side:
   * * Enforce the fields to be present, reject otherwise.
   * * Propagate only if the fields are valid and signature can be verified, reject otherwise.
   */
  const StrictSign = 'StrictSign';
  /**
   * On the producing side:
   * * Build messages without the signature, key, from and seqno fields.
   * * The corresponding protobuf key-value pairs are absent from the marshalled message, not just empty.
   *
   * On the consuming side:
   * * Enforce the fields to be absent, reject otherwise.
   * * Propagate only if the fields are absent, reject otherwise.
   * * A message_id function will not be able to use the above fields, and should instead rely on the data field. A commonplace strategy is to calculate a hash.
   */
  const StrictNoSign = 'StrictNoSign';
  var TopicValidatorResult;
  (function (TopicValidatorResult) {
      /**
       * The message is considered valid, and it should be delivered and forwarded to the network
       */
      TopicValidatorResult["Accept"] = "accept";
      /**
       * The message is neither delivered nor forwarded to the network
       */
      TopicValidatorResult["Ignore"] = "ignore";
      /**
       * The message is considered invalid, and it should be rejected
       */
      TopicValidatorResult["Reject"] = "reject";
  })(TopicValidatorResult || (TopicValidatorResult = {}));

  var SignaturePolicy;
  (function (SignaturePolicy) {
      /**
       * On the producing side:
       * - Build messages with the signature, key (from may be enough for certain inlineable public key types), from and seqno fields.
       *
       * On the consuming side:
       * - Enforce the fields to be present, reject otherwise.
       * - Propagate only if the fields are valid and signature can be verified, reject otherwise.
       */
      SignaturePolicy["StrictSign"] = "StrictSign";
      /**
       * On the producing side:
       * - Build messages without the signature, key, from and seqno fields.
       * - The corresponding protobuf key-value pairs are absent from the marshalled message, not just empty.
       *
       * On the consuming side:
       * - Enforce the fields to be absent, reject otherwise.
       * - Propagate only if the fields are absent, reject otherwise.
       * - A message_id function will not be able to use the above fields, and should instead rely on the data field. A commonplace strategy is to calculate a hash.
       */
      SignaturePolicy["StrictNoSign"] = "StrictNoSign";
  })(SignaturePolicy || (SignaturePolicy = {}));
  var PublishConfigType;
  (function (PublishConfigType) {
      PublishConfigType[PublishConfigType["Signing"] = 0] = "Signing";
      PublishConfigType[PublishConfigType["Anonymous"] = 1] = "Anonymous";
  })(PublishConfigType || (PublishConfigType = {}));
  var RejectReason;
  (function (RejectReason) {
      /**
       * The message failed the configured validation during decoding.
       * SelfOrigin is considered a ValidationError
       */
      RejectReason["Error"] = "error";
      /**
       * Custom validator fn reported status IGNORE.
       */
      RejectReason["Ignore"] = "ignore";
      /**
       * Custom validator fn reported status REJECT.
       */
      RejectReason["Reject"] = "reject";
      /**
       * The peer that sent the message OR the source from field is blacklisted.
       * Causes messages to be ignored, not penalized, neither do score record creation.
       */
      RejectReason["Blacklisted"] = "blacklisted";
  })(RejectReason || (RejectReason = {}));
  var ValidateError;
  (function (ValidateError) {
      /// The message has an invalid signature,
      ValidateError["InvalidSignature"] = "invalid_signature";
      /// The sequence number was the incorrect size
      ValidateError["InvalidSeqno"] = "invalid_seqno";
      /// The PeerId was invalid
      ValidateError["InvalidPeerId"] = "invalid_peerid";
      /// Signature existed when validation has been sent to
      /// [`crate::behaviour::MessageAuthenticity::Anonymous`].
      ValidateError["SignaturePresent"] = "signature_present";
      /// Sequence number existed when validation has been sent to
      /// [`crate::behaviour::MessageAuthenticity::Anonymous`].
      ValidateError["SeqnoPresent"] = "seqno_present";
      /// Message source existed when validation has been sent to
      /// [`crate::behaviour::MessageAuthenticity::Anonymous`].
      ValidateError["FromPresent"] = "from_present";
      /// The data transformation failed.
      ValidateError["TransformFailed"] = "transform_failed";
  })(ValidateError || (ValidateError = {}));
  var MessageStatus;
  (function (MessageStatus) {
      MessageStatus["duplicate"] = "duplicate";
      MessageStatus["invalid"] = "invalid";
      MessageStatus["valid"] = "valid";
  })(MessageStatus || (MessageStatus = {}));
  /**
   * Typesafe conversion of MessageAcceptance -> RejectReason. TS ensures all values covered
   */
  function rejectReasonFromAcceptance(acceptance) {
      switch (acceptance) {
          case TopicValidatorResult.Ignore:
              return RejectReason.Ignore;
          case TopicValidatorResult.Reject:
              return RejectReason.Reject;
      }
  }

  /**
   * Prepare a PublishConfig object from a PeerId.
   */
  async function getPublishConfigFromPeerId(signaturePolicy, peerId) {
      switch (signaturePolicy) {
          case StrictSign: {
              if (!peerId) {
                  throw Error('Must provide PeerId');
              }
              if (peerId.privateKey == null) {
                  throw Error('Cannot sign message, no private key present');
              }
              if (peerId.publicKey == null) {
                  throw Error('Cannot sign message, no public key present');
              }
              // Transform privateKey once at initialization time instead of once per message
              const privateKey = await unmarshalPrivateKey(peerId.privateKey);
              return {
                  type: PublishConfigType.Signing,
                  author: peerId,
                  key: peerId.publicKey,
                  privateKey
              };
          }
          case StrictNoSign:
              return {
                  type: PublishConfigType.Anonymous
              };
          default:
              throw new Error(`Unknown signature policy "${signaturePolicy}"`);
      }
  }

  const ERR_INVALID_PEER_SCORE_PARAMS = 'ERR_INVALID_PEER_SCORE_PARAMS';

  const defaultPeerScoreParams = {
      topics: {},
      topicScoreCap: 10.0,
      appSpecificScore: () => 0.0,
      appSpecificWeight: 10.0,
      IPColocationFactorWeight: -5.0,
      IPColocationFactorThreshold: 10.0,
      IPColocationFactorWhitelist: new Set(),
      behaviourPenaltyWeight: -10.0,
      behaviourPenaltyThreshold: 0.0,
      behaviourPenaltyDecay: 0.2,
      decayInterval: 1000.0,
      decayToZero: 0.1,
      retainScore: 3600 * 1000
  };
  const defaultTopicScoreParams = {
      topicWeight: 0.5,
      timeInMeshWeight: 1,
      timeInMeshQuantum: 1,
      timeInMeshCap: 3600,
      firstMessageDeliveriesWeight: 1,
      firstMessageDeliveriesDecay: 0.5,
      firstMessageDeliveriesCap: 2000,
      meshMessageDeliveriesWeight: -1,
      meshMessageDeliveriesDecay: 0.5,
      meshMessageDeliveriesCap: 100,
      meshMessageDeliveriesThreshold: 20,
      meshMessageDeliveriesWindow: 10,
      meshMessageDeliveriesActivation: 5000,
      meshFailurePenaltyWeight: -1,
      meshFailurePenaltyDecay: 0.5,
      invalidMessageDeliveriesWeight: -1,
      invalidMessageDeliveriesDecay: 0.3
  };
  function createPeerScoreParams(p = {}) {
      return {
          ...defaultPeerScoreParams,
          ...p,
          topics: p.topics
              ? Object.entries(p.topics).reduce((topics, [topic, topicScoreParams]) => {
                  topics[topic] = createTopicScoreParams(topicScoreParams);
                  return topics;
              }, {})
              : {}
      };
  }
  function createTopicScoreParams(p = {}) {
      return {
          ...defaultTopicScoreParams,
          ...p
      };
  }
  // peer score parameter validation
  function validatePeerScoreParams(p) {
      for (const [topic, params] of Object.entries(p.topics)) {
          try {
              validateTopicScoreParams(params);
          }
          catch (e) {
              throw new CodeError(`invalid score parameters for topic ${topic}: ${e.message}`, ERR_INVALID_PEER_SCORE_PARAMS);
          }
      }
      // check that the topic score is 0 or something positive
      if (p.topicScoreCap < 0) {
          throw new CodeError('invalid topic score cap; must be positive (or 0 for no cap)', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      // check that we have an app specific score; the weight can be anything (but expected positive)
      if (p.appSpecificScore === null || p.appSpecificScore === undefined) {
          throw new CodeError('missing application specific score function', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      // check the IP colocation factor
      if (p.IPColocationFactorWeight > 0) {
          throw new CodeError('invalid IPColocationFactorWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.IPColocationFactorWeight !== 0 && p.IPColocationFactorThreshold < 1) {
          throw new CodeError('invalid IPColocationFactorThreshold; must be at least 1', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      // check the behaviour penalty
      if (p.behaviourPenaltyWeight > 0) {
          throw new CodeError('invalid BehaviourPenaltyWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.behaviourPenaltyWeight !== 0 && (p.behaviourPenaltyDecay <= 0 || p.behaviourPenaltyDecay >= 1)) {
          throw new CodeError('invalid BehaviourPenaltyDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      // check the decay parameters
      if (p.decayInterval < 1000) {
          throw new CodeError('invalid DecayInterval; must be at least 1s', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.decayToZero <= 0 || p.decayToZero >= 1) {
          throw new CodeError('invalid DecayToZero; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      // no need to check the score retention; a value of 0 means that we don't retain scores
  }
  function validateTopicScoreParams(p) {
      // make sure we have a sane topic weight
      if (p.topicWeight < 0) {
          throw new CodeError('invalid topic weight; must be >= 0', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      // check P1
      if (p.timeInMeshQuantum === 0) {
          throw new CodeError('invalid TimeInMeshQuantum; must be non zero', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.timeInMeshWeight < 0) {
          throw new CodeError('invalid TimeInMeshWeight; must be positive (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.timeInMeshWeight !== 0 && p.timeInMeshQuantum <= 0) {
          throw new CodeError('invalid TimeInMeshQuantum; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.timeInMeshWeight !== 0 && p.timeInMeshCap <= 0) {
          throw new CodeError('invalid TimeInMeshCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      // check P2
      if (p.firstMessageDeliveriesWeight < 0) {
          throw new CodeError('invallid FirstMessageDeliveriesWeight; must be positive (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.firstMessageDeliveriesWeight !== 0 &&
          (p.firstMessageDeliveriesDecay <= 0 || p.firstMessageDeliveriesDecay >= 1)) {
          throw new CodeError('invalid FirstMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.firstMessageDeliveriesWeight !== 0 && p.firstMessageDeliveriesCap <= 0) {
          throw new CodeError('invalid FirstMessageDeliveriesCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      // check P3
      if (p.meshMessageDeliveriesWeight > 0) {
          throw new CodeError('invalid MeshMessageDeliveriesWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.meshMessageDeliveriesWeight !== 0 && (p.meshMessageDeliveriesDecay <= 0 || p.meshMessageDeliveriesDecay >= 1)) {
          throw new CodeError('invalid MeshMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesCap <= 0) {
          throw new CodeError('invalid MeshMessageDeliveriesCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesThreshold <= 0) {
          throw new CodeError('invalid MeshMessageDeliveriesThreshold; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.meshMessageDeliveriesWindow < 0) {
          throw new CodeError('invalid MeshMessageDeliveriesWindow; must be non-negative', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesActivation < 1000) {
          throw new CodeError('invalid MeshMessageDeliveriesActivation; must be at least 1s', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      // check P3b
      if (p.meshFailurePenaltyWeight > 0) {
          throw new CodeError('invalid MeshFailurePenaltyWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.meshFailurePenaltyWeight !== 0 && (p.meshFailurePenaltyDecay <= 0 || p.meshFailurePenaltyDecay >= 1)) {
          throw new CodeError('invalid MeshFailurePenaltyDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      // check P4
      if (p.invalidMessageDeliveriesWeight > 0) {
          throw new CodeError('invalid InvalidMessageDeliveriesWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);
      }
      if (p.invalidMessageDeliveriesDecay <= 0 || p.invalidMessageDeliveriesDecay >= 1) {
          throw new CodeError('invalid InvalidMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);
      }
  }

  const defaultPeerScoreThresholds = {
      gossipThreshold: -10,
      publishThreshold: -50,
      graylistThreshold: -80,
      acceptPXThreshold: 10,
      opportunisticGraftThreshold: 20
  };
  function createPeerScoreThresholds(p = {}) {
      return {
          ...defaultPeerScoreThresholds,
          ...p
      };
  }

  function computeScore(peer, pstats, params, peerIPs) {
      let score = 0;
      // topic stores
      Object.entries(pstats.topics).forEach(([topic, tstats]) => {
          // the topic parameters
          const topicParams = params.topics[topic];
          if (topicParams === undefined) {
              // we are not scoring this topic
              return;
          }
          let topicScore = 0;
          // P1: time in Mesh
          if (tstats.inMesh) {
              let p1 = tstats.meshTime / topicParams.timeInMeshQuantum;
              if (p1 > topicParams.timeInMeshCap) {
                  p1 = topicParams.timeInMeshCap;
              }
              topicScore += p1 * topicParams.timeInMeshWeight;
          }
          // P2: first message deliveries
          let p2 = tstats.firstMessageDeliveries;
          if (p2 > topicParams.firstMessageDeliveriesCap) {
              p2 = topicParams.firstMessageDeliveriesCap;
          }
          topicScore += p2 * topicParams.firstMessageDeliveriesWeight;
          // P3: mesh message deliveries
          if (tstats.meshMessageDeliveriesActive &&
              tstats.meshMessageDeliveries < topicParams.meshMessageDeliveriesThreshold) {
              const deficit = topicParams.meshMessageDeliveriesThreshold - tstats.meshMessageDeliveries;
              const p3 = deficit * deficit;
              topicScore += p3 * topicParams.meshMessageDeliveriesWeight;
          }
          // P3b:
          // NOTE: the weight of P3b is negative (validated in validateTopicScoreParams) so this detracts
          const p3b = tstats.meshFailurePenalty;
          topicScore += p3b * topicParams.meshFailurePenaltyWeight;
          // P4: invalid messages
          // NOTE: the weight of P4 is negative (validated in validateTopicScoreParams) so this detracts
          const p4 = tstats.invalidMessageDeliveries * tstats.invalidMessageDeliveries;
          topicScore += p4 * topicParams.invalidMessageDeliveriesWeight;
          // update score, mixing with topic weight
          score += topicScore * topicParams.topicWeight;
      });
      // apply the topic score cap, if any
      if (params.topicScoreCap > 0 && score > params.topicScoreCap) {
          score = params.topicScoreCap;
      }
      // P5: application-specific score
      const p5 = params.appSpecificScore(peer);
      score += p5 * params.appSpecificWeight;
      // P6: IP colocation factor
      pstats.knownIPs.forEach((ip) => {
          if (params.IPColocationFactorWhitelist.has(ip)) {
              return;
          }
          // P6 has a cliff (IPColocationFactorThreshold)
          // It's only applied if at least that many peers are connected to us from that source IP addr.
          // It is quadratic, and the weight is negative (validated in validatePeerScoreParams)
          const peersInIP = peerIPs.get(ip);
          const numPeersInIP = peersInIP ? peersInIP.size : 0;
          if (numPeersInIP > params.IPColocationFactorThreshold) {
              const surplus = numPeersInIP - params.IPColocationFactorThreshold;
              const p6 = surplus * surplus;
              score += p6 * params.IPColocationFactorWeight;
          }
      });
      // P7: behavioural pattern penalty
      if (pstats.behaviourPenalty > params.behaviourPenaltyThreshold) {
          const excess = pstats.behaviourPenalty - params.behaviourPenaltyThreshold;
          const p7 = excess * excess;
          score += p7 * params.behaviourPenaltyWeight;
      }
      return score;
  }

  /**
   * Custom implementation of a double ended queue.
   */
  function Denque(array, options) {
    var options = options || {};

    this._head = 0;
    this._tail = 0;
    this._capacity = options.capacity;
    this._capacityMask = 0x3;
    this._list = new Array(4);
    if (Array.isArray(array)) {
      this._fromArray(array);
    }
  }

  /**
   * -------------
   *  PUBLIC API
   * -------------
   */

  /**
   * Returns the item at the specified index from the list.
   * 0 is the first element, 1 is the second, and so on...
   * Elements at negative values are that many from the end: -1 is one before the end
   * (the last element), -2 is two before the end (one before last), etc.
   * @param index
   * @returns {*}
   */
  Denque.prototype.peekAt = function peekAt(index) {
    var i = index;
    // expect a number or return undefined
    if ((i !== (i | 0))) {
      return void 0;
    }
    var len = this.size();
    if (i >= len || i < -len) return undefined;
    if (i < 0) i += len;
    i = (this._head + i) & this._capacityMask;
    return this._list[i];
  };

  /**
   * Alias for peekAt()
   * @param i
   * @returns {*}
   */
  Denque.prototype.get = function get(i) {
    return this.peekAt(i);
  };

  /**
   * Returns the first item in the list without removing it.
   * @returns {*}
   */
  Denque.prototype.peek = function peek() {
    if (this._head === this._tail) return undefined;
    return this._list[this._head];
  };

  /**
   * Alias for peek()
   * @returns {*}
   */
  Denque.prototype.peekFront = function peekFront() {
    return this.peek();
  };

  /**
   * Returns the item that is at the back of the queue without removing it.
   * Uses peekAt(-1)
   */
  Denque.prototype.peekBack = function peekBack() {
    return this.peekAt(-1);
  };

  /**
   * Returns the current length of the queue
   * @return {Number}
   */
  Object.defineProperty(Denque.prototype, 'length', {
    get: function length() {
      return this.size();
    }
  });

  /**
   * Return the number of items on the list, or 0 if empty.
   * @returns {number}
   */
  Denque.prototype.size = function size() {
    if (this._head === this._tail) return 0;
    if (this._head < this._tail) return this._tail - this._head;
    else return this._capacityMask + 1 - (this._head - this._tail);
  };

  /**
   * Add an item at the beginning of the list.
   * @param item
   */
  Denque.prototype.unshift = function unshift(item) {
    if (item === undefined) return this.size();
    var len = this._list.length;
    this._head = (this._head - 1 + len) & this._capacityMask;
    this._list[this._head] = item;
    if (this._tail === this._head) this._growArray();
    if (this._capacity && this.size() > this._capacity) this.pop();
    if (this._head < this._tail) return this._tail - this._head;
    else return this._capacityMask + 1 - (this._head - this._tail);
  };

  /**
   * Remove and return the first item on the list,
   * Returns undefined if the list is empty.
   * @returns {*}
   */
  Denque.prototype.shift = function shift() {
    var head = this._head;
    if (head === this._tail) return undefined;
    var item = this._list[head];
    this._list[head] = undefined;
    this._head = (head + 1) & this._capacityMask;
    if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();
    return item;
  };

  /**
   * Add an item to the bottom of the list.
   * @param item
   */
  Denque.prototype.push = function push(item) {
    if (item === undefined) return this.size();
    var tail = this._tail;
    this._list[tail] = item;
    this._tail = (tail + 1) & this._capacityMask;
    if (this._tail === this._head) {
      this._growArray();
    }
    if (this._capacity && this.size() > this._capacity) {
      this.shift();
    }
    if (this._head < this._tail) return this._tail - this._head;
    else return this._capacityMask + 1 - (this._head - this._tail);
  };

  /**
   * Remove and return the last item on the list.
   * Returns undefined if the list is empty.
   * @returns {*}
   */
  Denque.prototype.pop = function pop() {
    var tail = this._tail;
    if (tail === this._head) return undefined;
    var len = this._list.length;
    this._tail = (tail - 1 + len) & this._capacityMask;
    var item = this._list[this._tail];
    this._list[this._tail] = undefined;
    if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();
    return item;
  };

  /**
   * Remove and return the item at the specified index from the list.
   * Returns undefined if the list is empty.
   * @param index
   * @returns {*}
   */
  Denque.prototype.removeOne = function removeOne(index) {
    var i = index;
    // expect a number or return undefined
    if ((i !== (i | 0))) {
      return void 0;
    }
    if (this._head === this._tail) return void 0;
    var size = this.size();
    var len = this._list.length;
    if (i >= size || i < -size) return void 0;
    if (i < 0) i += size;
    i = (this._head + i) & this._capacityMask;
    var item = this._list[i];
    var k;
    if (index < size / 2) {
      for (k = index; k > 0; k--) {
        this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];
      }
      this._list[i] = void 0;
      this._head = (this._head + 1 + len) & this._capacityMask;
    } else {
      for (k = size - 1 - index; k > 0; k--) {
        this._list[i] = this._list[i = ( i + 1 + len) & this._capacityMask];
      }
      this._list[i] = void 0;
      this._tail = (this._tail - 1 + len) & this._capacityMask;
    }
    return item;
  };

  /**
   * Remove number of items from the specified index from the list.
   * Returns array of removed items.
   * Returns undefined if the list is empty.
   * @param index
   * @param count
   * @returns {array}
   */
  Denque.prototype.remove = function remove(index, count) {
    var i = index;
    var removed;
    var del_count = count;
    // expect a number or return undefined
    if ((i !== (i | 0))) {
      return void 0;
    }
    if (this._head === this._tail) return void 0;
    var size = this.size();
    var len = this._list.length;
    if (i >= size || i < -size || count < 1) return void 0;
    if (i < 0) i += size;
    if (count === 1 || !count) {
      removed = new Array(1);
      removed[0] = this.removeOne(i);
      return removed;
    }
    if (i === 0 && i + count >= size) {
      removed = this.toArray();
      this.clear();
      return removed;
    }
    if (i + count > size) count = size - i;
    var k;
    removed = new Array(count);
    for (k = 0; k < count; k++) {
      removed[k] = this._list[(this._head + i + k) & this._capacityMask];
    }
    i = (this._head + i) & this._capacityMask;
    if (index + count === size) {
      this._tail = (this._tail - count + len) & this._capacityMask;
      for (k = count; k > 0; k--) {
        this._list[i = (i + 1 + len) & this._capacityMask] = void 0;
      }
      return removed;
    }
    if (index === 0) {
      this._head = (this._head + count + len) & this._capacityMask;
      for (k = count - 1; k > 0; k--) {
        this._list[i = (i + 1 + len) & this._capacityMask] = void 0;
      }
      return removed;
    }
    if (i < size / 2) {
      this._head = (this._head + index + count + len) & this._capacityMask;
      for (k = index; k > 0; k--) {
        this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);
      }
      i = (this._head - 1 + len) & this._capacityMask;
      while (del_count > 0) {
        this._list[i = (i - 1 + len) & this._capacityMask] = void 0;
        del_count--;
      }
      if (index < 0) this._tail = i;
    } else {
      this._tail = i;
      i = (i + count + len) & this._capacityMask;
      for (k = size - (count + index); k > 0; k--) {
        this.push(this._list[i++]);
      }
      i = this._tail;
      while (del_count > 0) {
        this._list[i = (i + 1 + len) & this._capacityMask] = void 0;
        del_count--;
      }
    }
    if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();
    return removed;
  };

  /**
   * Native splice implementation.
   * Remove number of items from the specified index from the list and/or add new elements.
   * Returns array of removed items or empty array if count == 0.
   * Returns undefined if the list is empty.
   *
   * @param index
   * @param count
   * @param {...*} [elements]
   * @returns {array}
   */
  Denque.prototype.splice = function splice(index, count) {
    var i = index;
    // expect a number or return undefined
    if ((i !== (i | 0))) {
      return void 0;
    }
    var size = this.size();
    if (i < 0) i += size;
    if (i > size) return void 0;
    if (arguments.length > 2) {
      var k;
      var temp;
      var removed;
      var arg_len = arguments.length;
      var len = this._list.length;
      var arguments_index = 2;
      if (!size || i < size / 2) {
        temp = new Array(i);
        for (k = 0; k < i; k++) {
          temp[k] = this._list[(this._head + k) & this._capacityMask];
        }
        if (count === 0) {
          removed = [];
          if (i > 0) {
            this._head = (this._head + i + len) & this._capacityMask;
          }
        } else {
          removed = this.remove(i, count);
          this._head = (this._head + i + len) & this._capacityMask;
        }
        while (arg_len > arguments_index) {
          this.unshift(arguments[--arg_len]);
        }
        for (k = i; k > 0; k--) {
          this.unshift(temp[k - 1]);
        }
      } else {
        temp = new Array(size - (i + count));
        var leng = temp.length;
        for (k = 0; k < leng; k++) {
          temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];
        }
        if (count === 0) {
          removed = [];
          if (i != size) {
            this._tail = (this._head + i + len) & this._capacityMask;
          }
        } else {
          removed = this.remove(i, count);
          this._tail = (this._tail - leng + len) & this._capacityMask;
        }
        while (arguments_index < arg_len) {
          this.push(arguments[arguments_index++]);
        }
        for (k = 0; k < leng; k++) {
          this.push(temp[k]);
        }
      }
      return removed;
    } else {
      return this.remove(i, count);
    }
  };

  /**
   * Soft clear - does not reset capacity.
   */
  Denque.prototype.clear = function clear() {
    this._head = 0;
    this._tail = 0;
  };

  /**
   * Returns true or false whether the list is empty.
   * @returns {boolean}
   */
  Denque.prototype.isEmpty = function isEmpty() {
    return this._head === this._tail;
  };

  /**
   * Returns an array of all queue items.
   * @returns {Array}
   */
  Denque.prototype.toArray = function toArray() {
    return this._copyArray(false);
  };

  /**
   * -------------
   *   INTERNALS
   * -------------
   */

  /**
   * Fills the queue with items from an array
   * For use in the constructor
   * @param array
   * @private
   */
  Denque.prototype._fromArray = function _fromArray(array) {
    for (var i = 0; i < array.length; i++) this.push(array[i]);
  };

  /**
   *
   * @param fullCopy
   * @returns {Array}
   * @private
   */
  Denque.prototype._copyArray = function _copyArray(fullCopy) {
    var newArray = [];
    var list = this._list;
    var len = list.length;
    var i;
    if (fullCopy || this._head > this._tail) {
      for (i = this._head; i < len; i++) newArray.push(list[i]);
      for (i = 0; i < this._tail; i++) newArray.push(list[i]);
    } else {
      for (i = this._head; i < this._tail; i++) newArray.push(list[i]);
    }
    return newArray;
  };

  /**
   * Grows the internal list array.
   * @private
   */
  Denque.prototype._growArray = function _growArray() {
    if (this._head) {
      // copy existing data, head to end, then beginning to tail.
      this._list = this._copyArray(true);
      this._head = 0;
    }

    // head is at 0 and array is now full, safe to extend
    this._tail = this._list.length;

    this._list.length <<= 1;
    this._capacityMask = (this._capacityMask << 1) | 1;
  };

  /**
   * Shrinks the internal list array.
   * @private
   */
  Denque.prototype._shrinkArray = function _shrinkArray() {
    this._list.length >>>= 1;
    this._capacityMask >>>= 1;
  };


  var denque = Denque;

  var Denque$1 = /*@__PURE__*/getDefaultExportFromCjs(denque);

  var DeliveryRecordStatus;
  (function (DeliveryRecordStatus) {
      /**
       * we don't know (yet) if the message is valid
       */
      DeliveryRecordStatus[DeliveryRecordStatus["unknown"] = 0] = "unknown";
      /**
       * we know the message is valid
       */
      DeliveryRecordStatus[DeliveryRecordStatus["valid"] = 1] = "valid";
      /**
       * we know the message is invalid
       */
      DeliveryRecordStatus[DeliveryRecordStatus["invalid"] = 2] = "invalid";
      /**
       * we were instructed by the validator to ignore the message
       */
      DeliveryRecordStatus[DeliveryRecordStatus["ignored"] = 3] = "ignored";
  })(DeliveryRecordStatus || (DeliveryRecordStatus = {}));
  /**
   * Map of canonical message ID to DeliveryRecord
   *
   * Maintains an internal queue for efficient gc of old messages
   */
  class MessageDeliveries {
      constructor() {
          this.records = new Map();
          this.queue = new Denque$1();
      }
      getRecord(msgIdStr) {
          return this.records.get(msgIdStr);
      }
      ensureRecord(msgIdStr) {
          let drec = this.records.get(msgIdStr);
          if (drec) {
              return drec;
          }
          // record doesn't exist yet
          // create record
          drec = {
              status: DeliveryRecordStatus.unknown,
              firstSeenTsMs: Date.now(),
              validated: 0,
              peers: new Set()
          };
          this.records.set(msgIdStr, drec);
          // and add msgId to the queue
          const entry = {
              msgId: msgIdStr,
              expire: Date.now() + TimeCacheDuration
          };
          this.queue.push(entry);
          return drec;
      }
      gc() {
          const now = Date.now();
          // queue is sorted by expiry time
          // remove expired messages, remove from queue until first un-expired message found
          let head = this.queue.peekFront();
          while (head && head.expire < now) {
              this.records.delete(head.msgId);
              this.queue.shift();
              head = this.queue.peekFront();
          }
      }
      clear() {
          this.records.clear();
          this.queue.clear();
      }
  }

  /**
   * Exclude up to `ineed` items from a set if item meets condition `cond`
   */
  function removeItemsFromSet(superSet, ineed, cond = () => true) {
      const subset = new Set();
      if (ineed <= 0)
          return subset;
      for (const id of superSet) {
          if (subset.size >= ineed)
              break;
          if (cond(id)) {
              subset.add(id);
              superSet.delete(id);
          }
      }
      return subset;
  }
  /**
   * Exclude up to `ineed` items from a set
   */
  function removeFirstNItemsFromSet(superSet, ineed) {
      return removeItemsFromSet(superSet, ineed, () => true);
  }
  class MapDef extends Map {
      constructor(getDefault) {
          super();
          this.getDefault = getDefault;
      }
      getOrDefault(key) {
          let value = super.get(key);
          if (value === undefined) {
              value = this.getDefault();
              this.set(key, value);
          }
          return value;
      }
  }

  const log = logger('libp2p:gossipsub:score');
  class PeerScore {
      constructor(params, metrics, opts) {
          this.params = params;
          this.metrics = metrics;
          /**
           * Per-peer stats for score calculation
           */
          this.peerStats = new Map();
          /**
           * IP colocation tracking; maps IP => set of peers.
           */
          this.peerIPs = new MapDef(() => new Set());
          /**
           * Cache score up to decayInterval if topic stats are unchanged.
           */
          this.scoreCache = new Map();
          /**
           * Recent message delivery timing/participants
           */
          this.deliveryRecords = new MessageDeliveries();
          validatePeerScoreParams(params);
          this.scoreCacheValidityMs = opts.scoreCacheValidityMs;
          this.computeScore = opts.computeScore ?? computeScore;
      }
      get size() {
          return this.peerStats.size;
      }
      /**
       * Start PeerScore instance
       */
      start() {
          if (this._backgroundInterval) {
              log('Peer score already running');
              return;
          }
          this._backgroundInterval = setInterval(() => this.background(), this.params.decayInterval);
          log('started');
      }
      /**
       * Stop PeerScore instance
       */
      stop() {
          if (!this._backgroundInterval) {
              log('Peer score already stopped');
              return;
          }
          clearInterval(this._backgroundInterval);
          delete this._backgroundInterval;
          this.peerIPs.clear();
          this.peerStats.clear();
          this.deliveryRecords.clear();
          log('stopped');
      }
      /**
       * Periodic maintenance
       */
      background() {
          this.refreshScores();
          this.deliveryRecords.gc();
      }
      dumpPeerScoreStats() {
          return Object.fromEntries(Array.from(this.peerStats.entries()).map(([peer, stats]) => [peer, stats]));
      }
      messageFirstSeenTimestampMs(msgIdStr) {
          const drec = this.deliveryRecords.getRecord(msgIdStr);
          return drec ? drec.firstSeenTsMs : null;
      }
      /**
       * Decays scores, and purges score records for disconnected peers once their expiry has elapsed.
       */
      refreshScores() {
          const now = Date.now();
          const decayToZero = this.params.decayToZero;
          this.peerStats.forEach((pstats, id) => {
              if (!pstats.connected) {
                  // has the retention period expired?
                  if (now > pstats.expire) {
                      // yes, throw it away (but clean up the IP tracking first)
                      this.removeIPsForPeer(id, pstats.knownIPs);
                      this.peerStats.delete(id);
                      this.scoreCache.delete(id);
                  }
                  // we don't decay retained scores, as the peer is not active.
                  // this way the peer cannot reset a negative score by simply disconnecting and reconnecting,
                  // unless the retention period has elapsed.
                  // similarly, a well behaved peer does not lose its score by getting disconnected.
                  return;
              }
              Object.entries(pstats.topics).forEach(([topic, tstats]) => {
                  const tparams = this.params.topics[topic];
                  if (tparams === undefined) {
                      // we are not scoring this topic
                      // should be unreachable, we only add scored topics to pstats
                      return;
                  }
                  // decay counters
                  tstats.firstMessageDeliveries *= tparams.firstMessageDeliveriesDecay;
                  if (tstats.firstMessageDeliveries < decayToZero) {
                      tstats.firstMessageDeliveries = 0;
                  }
                  tstats.meshMessageDeliveries *= tparams.meshMessageDeliveriesDecay;
                  if (tstats.meshMessageDeliveries < decayToZero) {
                      tstats.meshMessageDeliveries = 0;
                  }
                  tstats.meshFailurePenalty *= tparams.meshFailurePenaltyDecay;
                  if (tstats.meshFailurePenalty < decayToZero) {
                      tstats.meshFailurePenalty = 0;
                  }
                  tstats.invalidMessageDeliveries *= tparams.invalidMessageDeliveriesDecay;
                  if (tstats.invalidMessageDeliveries < decayToZero) {
                      tstats.invalidMessageDeliveries = 0;
                  }
                  // update mesh time and activate mesh message delivery parameter if need be
                  if (tstats.inMesh) {
                      tstats.meshTime = now - tstats.graftTime;
                      if (tstats.meshTime > tparams.meshMessageDeliveriesActivation) {
                          tstats.meshMessageDeliveriesActive = true;
                      }
                  }
              });
              // decay P7 counter
              pstats.behaviourPenalty *= this.params.behaviourPenaltyDecay;
              if (pstats.behaviourPenalty < decayToZero) {
                  pstats.behaviourPenalty = 0;
              }
          });
      }
      /**
       * Return the score for a peer
       */
      score(id) {
          this.metrics?.scoreFnCalls.inc();
          const pstats = this.peerStats.get(id);
          if (!pstats) {
              return 0;
          }
          const now = Date.now();
          const cacheEntry = this.scoreCache.get(id);
          // Found cached score within validity period
          if (cacheEntry && cacheEntry.cacheUntil > now) {
              return cacheEntry.score;
          }
          this.metrics?.scoreFnRuns.inc();
          const score = this.computeScore(id, pstats, this.params, this.peerIPs);
          const cacheUntil = now + this.scoreCacheValidityMs;
          if (cacheEntry) {
              this.metrics?.scoreCachedDelta.observe(Math.abs(score - cacheEntry.score));
              cacheEntry.score = score;
              cacheEntry.cacheUntil = cacheUntil;
          }
          else {
              this.scoreCache.set(id, { score, cacheUntil });
          }
          return score;
      }
      /**
       * Apply a behavioural penalty to a peer
       */
      addPenalty(id, penalty, penaltyLabel) {
          const pstats = this.peerStats.get(id);
          if (pstats) {
              pstats.behaviourPenalty += penalty;
              this.metrics?.onScorePenalty(penaltyLabel);
          }
      }
      addPeer(id) {
          // create peer stats (not including topic stats for each topic to be scored)
          // topic stats will be added as needed
          const pstats = {
              connected: true,
              expire: 0,
              topics: {},
              knownIPs: new Set(),
              behaviourPenalty: 0
          };
          this.peerStats.set(id, pstats);
      }
      /** Adds a new IP to a peer, if the peer is not known the update is ignored */
      addIP(id, ip) {
          const pstats = this.peerStats.get(id);
          if (pstats) {
              pstats.knownIPs.add(ip);
          }
          this.peerIPs.getOrDefault(ip).add(id);
      }
      /** Remove peer association with IP */
      removeIP(id, ip) {
          const pstats = this.peerStats.get(id);
          if (pstats) {
              pstats.knownIPs.delete(ip);
          }
          const peersWithIP = this.peerIPs.get(ip);
          if (peersWithIP) {
              peersWithIP.delete(id);
              if (peersWithIP.size === 0) {
                  this.peerIPs.delete(ip);
              }
          }
      }
      removePeer(id) {
          const pstats = this.peerStats.get(id);
          if (!pstats) {
              return;
          }
          // decide whether to retain the score; this currently only retains non-positive scores
          // to dissuade attacks on the score function.
          if (this.score(id) > 0) {
              this.removeIPsForPeer(id, pstats.knownIPs);
              this.peerStats.delete(id);
              return;
          }
          // furthermore, when we decide to retain the score, the firstMessageDelivery counters are
          // reset to 0 and mesh delivery penalties applied.
          Object.entries(pstats.topics).forEach(([topic, tstats]) => {
              tstats.firstMessageDeliveries = 0;
              const threshold = this.params.topics[topic].meshMessageDeliveriesThreshold;
              if (tstats.inMesh && tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {
                  const deficit = threshold - tstats.meshMessageDeliveries;
                  tstats.meshFailurePenalty += deficit * deficit;
              }
              tstats.inMesh = false;
              tstats.meshMessageDeliveriesActive = false;
          });
          pstats.connected = false;
          pstats.expire = Date.now() + this.params.retainScore;
      }
      /** Handles scoring functionality as a peer GRAFTs to a topic. */
      graft(id, topic) {
          const pstats = this.peerStats.get(id);
          if (pstats) {
              const tstats = this.getPtopicStats(pstats, topic);
              if (tstats) {
                  // if we are scoring the topic, update the mesh status.
                  tstats.inMesh = true;
                  tstats.graftTime = Date.now();
                  tstats.meshTime = 0;
                  tstats.meshMessageDeliveriesActive = false;
              }
          }
      }
      /** Handles scoring functionality as a peer PRUNEs from a topic. */
      prune(id, topic) {
          const pstats = this.peerStats.get(id);
          if (pstats) {
              const tstats = this.getPtopicStats(pstats, topic);
              if (tstats) {
                  // sticky mesh delivery rate failure penalty
                  const threshold = this.params.topics[topic].meshMessageDeliveriesThreshold;
                  if (tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {
                      const deficit = threshold - tstats.meshMessageDeliveries;
                      tstats.meshFailurePenalty += deficit * deficit;
                  }
                  tstats.meshMessageDeliveriesActive = false;
                  tstats.inMesh = false;
                  // TODO: Consider clearing score cache on important penalties
                  // this.scoreCache.delete(id)
              }
          }
      }
      validateMessage(msgIdStr) {
          this.deliveryRecords.ensureRecord(msgIdStr);
      }
      deliverMessage(from, msgIdStr, topic) {
          this.markFirstMessageDelivery(from, topic);
          const drec = this.deliveryRecords.ensureRecord(msgIdStr);
          const now = Date.now();
          // defensive check that this is the first delivery trace -- delivery status should be unknown
          if (drec.status !== DeliveryRecordStatus.unknown) {
              log('unexpected delivery: message from %s was first seen %s ago and has delivery status %s', from, now - drec.firstSeenTsMs, DeliveryRecordStatus[drec.status]);
              return;
          }
          // mark the message as valid and reward mesh peers that have already forwarded it to us
          drec.status = DeliveryRecordStatus.valid;
          drec.validated = now;
          drec.peers.forEach((p) => {
              // this check is to make sure a peer can't send us a message twice and get a double count
              // if it is a first delivery.
              if (p !== from.toString()) {
                  this.markDuplicateMessageDelivery(p, topic);
              }
          });
      }
      /**
       * Similar to `rejectMessage` except does not require the message id or reason for an invalid message.
       */
      rejectInvalidMessage(from, topic) {
          this.markInvalidMessageDelivery(from, topic);
      }
      rejectMessage(from, msgIdStr, topic, reason) {
          switch (reason) {
              // these messages are not tracked, but the peer is penalized as they are invalid
              case RejectReason.Error:
                  this.markInvalidMessageDelivery(from, topic);
                  return;
              // we ignore those messages, so do nothing.
              case RejectReason.Blacklisted:
                  return;
              // the rest are handled after record creation
          }
          const drec = this.deliveryRecords.ensureRecord(msgIdStr);
          // defensive check that this is the first rejection -- delivery status should be unknown
          if (drec.status !== DeliveryRecordStatus.unknown) {
              log('unexpected rejection: message from %s was first seen %s ago and has delivery status %d', from, Date.now() - drec.firstSeenTsMs, DeliveryRecordStatus[drec.status]);
              return;
          }
          if (reason === RejectReason.Ignore) {
              // we were explicitly instructed by the validator to ignore the message but not penalize the peer
              drec.status = DeliveryRecordStatus.ignored;
              drec.peers.clear();
              return;
          }
          // mark the message as invalid and penalize peers that have already forwarded it.
          drec.status = DeliveryRecordStatus.invalid;
          this.markInvalidMessageDelivery(from, topic);
          drec.peers.forEach((p) => {
              this.markInvalidMessageDelivery(p, topic);
          });
          // release the delivery time tracking map to free some memory early
          drec.peers.clear();
      }
      duplicateMessage(from, msgIdStr, topic) {
          const drec = this.deliveryRecords.ensureRecord(msgIdStr);
          if (drec.peers.has(from)) {
              // we have already seen this duplicate
              return;
          }
          switch (drec.status) {
              case DeliveryRecordStatus.unknown:
                  // the message is being validated; track the peer delivery and wait for
                  // the Deliver/Reject/Ignore notification.
                  drec.peers.add(from);
                  break;
              case DeliveryRecordStatus.valid:
                  // mark the peer delivery time to only count a duplicate delivery once.
                  drec.peers.add(from);
                  this.markDuplicateMessageDelivery(from, topic, drec.validated);
                  break;
              case DeliveryRecordStatus.invalid:
                  // we no longer track delivery time
                  this.markInvalidMessageDelivery(from, topic);
                  break;
              case DeliveryRecordStatus.ignored:
                  // the message was ignored; do nothing (we don't know if it was valid)
                  break;
          }
      }
      /**
       * Increments the "invalid message deliveries" counter for all scored topics the message is published in.
       */
      markInvalidMessageDelivery(from, topic) {
          const pstats = this.peerStats.get(from);
          if (pstats) {
              const tstats = this.getPtopicStats(pstats, topic);
              if (tstats) {
                  tstats.invalidMessageDeliveries += 1;
              }
          }
      }
      /**
       * Increments the "first message deliveries" counter for all scored topics the message is published in,
       * as well as the "mesh message deliveries" counter, if the peer is in the mesh for the topic.
       * Messages already known (with the seenCache) are counted with markDuplicateMessageDelivery()
       */
      markFirstMessageDelivery(from, topic) {
          const pstats = this.peerStats.get(from);
          if (pstats) {
              const tstats = this.getPtopicStats(pstats, topic);
              if (tstats) {
                  let cap = this.params.topics[topic].firstMessageDeliveriesCap;
                  tstats.firstMessageDeliveries = Math.min(cap, tstats.firstMessageDeliveries + 1);
                  if (tstats.inMesh) {
                      cap = this.params.topics[topic].meshMessageDeliveriesCap;
                      tstats.meshMessageDeliveries = Math.min(cap, tstats.meshMessageDeliveries + 1);
                  }
              }
          }
      }
      /**
       * Increments the "mesh message deliveries" counter for messages we've seen before,
       * as long the message was received within the P3 window.
       */
      markDuplicateMessageDelivery(from, topic, validatedTime) {
          const pstats = this.peerStats.get(from);
          if (pstats) {
              const now = validatedTime !== undefined ? Date.now() : 0;
              const tstats = this.getPtopicStats(pstats, topic);
              if (tstats && tstats.inMesh) {
                  const tparams = this.params.topics[topic];
                  // check against the mesh delivery window -- if the validated time is passed as 0, then
                  // the message was received before we finished validation and thus falls within the mesh
                  // delivery window.
                  if (validatedTime !== undefined) {
                      const deliveryDelayMs = now - validatedTime;
                      const isLateDelivery = deliveryDelayMs > tparams.meshMessageDeliveriesWindow;
                      this.metrics?.onDuplicateMsgDelivery(topic, deliveryDelayMs, isLateDelivery);
                      if (isLateDelivery) {
                          return;
                      }
                  }
                  const cap = tparams.meshMessageDeliveriesCap;
                  tstats.meshMessageDeliveries = Math.min(cap, tstats.meshMessageDeliveries + 1);
              }
          }
      }
      /**
       * Removes an IP list from the tracking list for a peer.
       */
      removeIPsForPeer(id, ipsToRemove) {
          for (const ipToRemove of ipsToRemove) {
              const peerSet = this.peerIPs.get(ipToRemove);
              if (peerSet) {
                  peerSet.delete(id);
                  if (peerSet.size === 0) {
                      this.peerIPs.delete(ipToRemove);
                  }
              }
          }
      }
      /**
       * Returns topic stats if they exist, otherwise if the supplied parameters score the
       * topic, inserts the default stats and returns a reference to those. If neither apply, returns None.
       */
      getPtopicStats(pstats, topic) {
          let topicStats = pstats.topics[topic];
          if (topicStats !== undefined) {
              return topicStats;
          }
          if (this.params.topics[topic] !== undefined) {
              topicStats = {
                  inMesh: false,
                  graftTime: 0,
                  meshTime: 0,
                  firstMessageDeliveries: 0,
                  meshMessageDeliveries: 0,
                  meshMessageDeliveriesActive: false,
                  meshFailurePenalty: 0,
                  invalidMessageDeliveries: 0
              };
              pstats.topics[topic] = topicStats;
              return topicStats;
          }
          return null;
      }
  }

  /**
   * IWantTracer is an internal tracer that tracks IWANT requests in order to penalize
   * peers who don't follow up on IWANT requests after an IHAVE advertisement.
   * The tracking of promises is probabilistic to avoid using too much memory.
   *
   * Note: Do not confuse these 'promises' with JS Promise objects.
   * These 'promises' are merely expectations of a peer's behavior.
   */
  class IWantTracer {
      constructor(gossipsubIWantFollowupMs, msgIdToStrFn, metrics) {
          this.gossipsubIWantFollowupMs = gossipsubIWantFollowupMs;
          this.msgIdToStrFn = msgIdToStrFn;
          this.metrics = metrics;
          /**
           * Promises to deliver a message
           * Map per message id, per peer, promise expiration time
           */
          this.promises = new Map();
          /**
           * First request time by msgId. Used for metrics to track expire times.
           * Necessary to know if peers are actually breaking promises or simply sending them a bit later
           */
          this.requestMsByMsg = new Map();
          this.requestMsByMsgExpire = 10 * gossipsubIWantFollowupMs;
      }
      get size() {
          return this.promises.size;
      }
      get requestMsByMsgSize() {
          return this.requestMsByMsg.size;
      }
      /**
       * Track a promise to deliver a message from a list of msgIds we are requesting
       */
      addPromise(from, msgIds) {
          // pick msgId randomly from the list
          const ix = Math.floor(Math.random() * msgIds.length);
          const msgId = msgIds[ix];
          const msgIdStr = this.msgIdToStrFn(msgId);
          let expireByPeer = this.promises.get(msgIdStr);
          if (!expireByPeer) {
              expireByPeer = new Map();
              this.promises.set(msgIdStr, expireByPeer);
          }
          const now = Date.now();
          // If a promise for this message id and peer already exists we don't update the expiry
          if (!expireByPeer.has(from)) {
              expireByPeer.set(from, now + this.gossipsubIWantFollowupMs);
              if (this.metrics) {
                  this.metrics.iwantPromiseStarted.inc(1);
                  if (!this.requestMsByMsg.has(msgIdStr)) {
                      this.requestMsByMsg.set(msgIdStr, now);
                  }
              }
          }
      }
      /**
       * Returns the number of broken promises for each peer who didn't follow up on an IWANT request.
       *
       * This should be called not too often relative to the expire times, since it iterates over the whole data.
       */
      getBrokenPromises() {
          const now = Date.now();
          const result = new Map();
          let brokenPromises = 0;
          this.promises.forEach((expireByPeer, msgId) => {
              expireByPeer.forEach((expire, p) => {
                  // the promise has been broken
                  if (expire < now) {
                      // add 1 to result
                      result.set(p, (result.get(p) ?? 0) + 1);
                      // delete from tracked promises
                      expireByPeer.delete(p);
                      // for metrics
                      brokenPromises++;
                  }
              });
              // clean up empty promises for a msgId
              if (!expireByPeer.size) {
                  this.promises.delete(msgId);
              }
          });
          this.metrics?.iwantPromiseBroken.inc(brokenPromises);
          return result;
      }
      /**
       * Someone delivered a message, stop tracking promises for it
       */
      deliverMessage(msgIdStr, isDuplicate = false) {
          this.trackMessage(msgIdStr);
          const expireByPeer = this.promises.get(msgIdStr);
          // Expired promise, check requestMsByMsg
          if (expireByPeer) {
              this.promises.delete(msgIdStr);
              if (this.metrics) {
                  this.metrics.iwantPromiseResolved.inc(1);
                  if (isDuplicate)
                      this.metrics.iwantPromiseResolvedFromDuplicate.inc(1);
                  this.metrics.iwantPromiseResolvedPeers.inc(expireByPeer.size);
              }
          }
      }
      /**
       * A message got rejected, so we can stop tracking promises and let the score penalty apply from invalid message delivery,
       * unless its an obviously invalid message.
       */
      rejectMessage(msgIdStr, reason) {
          this.trackMessage(msgIdStr);
          // A message got rejected, so we can stop tracking promises and let the score penalty apply.
          // With the expection of obvious invalid messages
          switch (reason) {
              case RejectReason.Error:
                  return;
          }
          this.promises.delete(msgIdStr);
      }
      clear() {
          this.promises.clear();
      }
      prune() {
          const maxMs = Date.now() - this.requestMsByMsgExpire;
          let count = 0;
          for (const [k, v] of this.requestMsByMsg.entries()) {
              if (v < maxMs) {
                  // messages that stay too long in the requestMsByMsg map, delete
                  this.requestMsByMsg.delete(k);
                  count++;
              }
              else {
                  // recent messages, keep them
                  // sort by insertion order
                  break;
              }
          }
          this.metrics?.iwantMessagePruned.inc(count);
      }
      trackMessage(msgIdStr) {
          if (this.metrics) {
              const requestMs = this.requestMsByMsg.get(msgIdStr);
              if (requestMs !== undefined) {
                  this.metrics.iwantPromiseDeliveryTime.observe((Date.now() - requestMs) / 1000);
                  this.requestMsByMsg.delete(msgIdStr);
              }
          }
      }
  }

  /**
   * This is similar to https://github.com/daviddias/time-cache/blob/master/src/index.js
   * for our own need, we don't use lodash throttle to improve performance.
   * This gives 4x - 5x performance gain compared to npm TimeCache
   */
  class SimpleTimeCache {
      constructor(opts) {
          this.entries = new Map();
          this.validityMs = opts.validityMs;
          // allow negative validityMs so that this does not cache anything, spec test compliance.spec.js
          // sends duplicate messages and expect peer to receive all. Application likely uses positive validityMs
      }
      get size() {
          return this.entries.size;
      }
      /** Returns true if there was a key collision and the entry is dropped */
      put(key, value) {
          if (this.entries.has(key)) {
              // Key collisions break insertion order in the entries cache, which break prune logic.
              // prune relies on each iterated entry to have strictly ascending validUntilMs, else it
              // won't prune expired entries and SimpleTimeCache will grow unexpectedly.
              // As of Oct 2022 NodeJS v16, inserting the same key twice with different value does not
              // change the key position in the iterator stream. A unit test asserts this behaviour.
              return true;
          }
          this.entries.set(key, { value, validUntilMs: Date.now() + this.validityMs });
          return false;
      }
      prune() {
          const now = Date.now();
          for (const [k, v] of this.entries.entries()) {
              if (v.validUntilMs < now) {
                  this.entries.delete(k);
              }
              else {
                  // Entries are inserted with strictly ascending validUntilMs.
                  // Stop early to save iterations
                  break;
              }
          }
      }
      has(key) {
          return this.entries.has(key);
      }
      get(key) {
          const value = this.entries.get(key);
          return value && value.validUntilMs >= Date.now() ? value.value : undefined;
      }
      clear() {
          this.entries.clear();
      }
  }

  var MessageSource;
  (function (MessageSource) {
      MessageSource["forward"] = "forward";
      MessageSource["publish"] = "publish";
  })(MessageSource || (MessageSource = {}));
  var InclusionReason;
  (function (InclusionReason) {
      /** Peer was a fanaout peer. */
      InclusionReason["Fanout"] = "fanout";
      /** Included from random selection. */
      InclusionReason["Random"] = "random";
      /** Peer subscribed. */
      InclusionReason["Subscribed"] = "subscribed";
      /** On heartbeat, peer was included to fill the outbound quota. */
      InclusionReason["Outbound"] = "outbound";
      /** On heartbeat, not enough peers in mesh */
      InclusionReason["NotEnough"] = "not_enough";
      /** On heartbeat opportunistic grafting due to low mesh score */
      InclusionReason["Opportunistic"] = "opportunistic";
  })(InclusionReason || (InclusionReason = {}));
  /// Reasons why a peer was removed from the mesh.
  var ChurnReason;
  (function (ChurnReason) {
      /// Peer disconnected.
      ChurnReason["Dc"] = "disconnected";
      /// Peer had a bad score.
      ChurnReason["BadScore"] = "bad_score";
      /// Peer sent a PRUNE.
      ChurnReason["Prune"] = "prune";
      /// Too many peers.
      ChurnReason["Excess"] = "excess";
  })(ChurnReason || (ChurnReason = {}));
  /// Kinds of reasons a peer's score has been penalized
  var ScorePenalty;
  (function (ScorePenalty) {
      /// A peer grafted before waiting the back-off time.
      ScorePenalty["GraftBackoff"] = "graft_backoff";
      /// A Peer did not respond to an IWANT request in time.
      ScorePenalty["BrokenPromise"] = "broken_promise";
      /// A Peer did not send enough messages as expected.
      ScorePenalty["MessageDeficit"] = "message_deficit";
      /// Too many peers under one IP address.
      ScorePenalty["IPColocation"] = "IP_colocation";
  })(ScorePenalty || (ScorePenalty = {}));
  var IHaveIgnoreReason;
  (function (IHaveIgnoreReason) {
      IHaveIgnoreReason["LowScore"] = "low_score";
      IHaveIgnoreReason["MaxIhave"] = "max_ihave";
      IHaveIgnoreReason["MaxIasked"] = "max_iasked";
  })(IHaveIgnoreReason || (IHaveIgnoreReason = {}));
  var ScoreThreshold;
  (function (ScoreThreshold) {
      ScoreThreshold["graylist"] = "graylist";
      ScoreThreshold["publish"] = "publish";
      ScoreThreshold["gossip"] = "gossip";
      ScoreThreshold["mesh"] = "mesh";
  })(ScoreThreshold || (ScoreThreshold = {}));
  /**
   * A collection of metrics used throughout the Gossipsub behaviour.
   * NOTE: except for special reasons, do not add more than 1 label for frequent metrics,
   * there's a performance penalty as of June 2023.
   */
  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
  function getMetrics(register, topicStrToLabel, opts) {
      // Using function style instead of class to prevent having to re-declare all MetricsPrometheus types.
      return {
          /* Metrics for static config */
          protocolsEnabled: register.gauge({
              name: 'gossipsub_protocol',
              help: 'Status of enabled protocols',
              labelNames: ['protocol']
          }),
          /* Metrics per known topic */
          /** Status of our subscription to this topic. This metric allows analyzing other topic metrics
           *  filtered by our current subscription status.
           *  = rust-libp2p `topic_subscription_status` */
          topicSubscriptionStatus: register.gauge({
              name: 'gossipsub_topic_subscription_status',
              help: 'Status of our subscription to this topic',
              labelNames: ['topicStr']
          }),
          /** Number of peers subscribed to each topic. This allows us to analyze a topic's behaviour
           * regardless of our subscription status. */
          topicPeersCount: register.gauge({
              name: 'gossipsub_topic_peer_count',
              help: 'Number of peers subscribed to each topic',
              labelNames: ['topicStr']
          }),
          /* Metrics regarding mesh state */
          /** Number of peers in our mesh. This metric should be updated with the count of peers for a
           *  topic in the mesh regardless of inclusion and churn events.
           *  = rust-libp2p `mesh_peer_counts` */
          meshPeerCounts: register.gauge({
              name: 'gossipsub_mesh_peer_count',
              help: 'Number of peers in our mesh',
              labelNames: ['topicStr']
          }),
          /** Number of times we include peers in a topic mesh for different reasons.
           *  = rust-libp2p `mesh_peer_inclusion_events` */
          meshPeerInclusionEvents: register.gauge({
              name: 'gossipsub_mesh_peer_inclusion_events_total',
              help: 'Number of times we include peers in a topic mesh for different reasons',
              labelNames: ['reason']
          }),
          meshPeerInclusionEventsByTopic: register.gauge({
              name: 'gossipsub_mesh_peer_inclusion_events_by_topic_total',
              help: 'Number of times we include peers in a topic',
              labelNames: ['topic']
          }),
          /** Number of times we remove peers in a topic mesh for different reasons.
           *  = rust-libp2p `mesh_peer_churn_events` */
          meshPeerChurnEvents: register.gauge({
              name: 'gossipsub_peer_churn_events_total',
              help: 'Number of times we remove peers in a topic mesh for different reasons',
              labelNames: ['reason']
          }),
          meshPeerChurnEventsByTopic: register.gauge({
              name: 'gossipsub_peer_churn_events_by_topic_total',
              help: 'Number of times we remove peers in a topic',
              labelNames: ['topic']
          }),
          /* General Metrics */
          /** Gossipsub supports floodsub, gossipsub v1.0 and gossipsub v1.1. Peers are classified based
           *  on which protocol they support. This metric keeps track of the number of peers that are
           *  connected of each type. */
          peersPerProtocol: register.gauge({
              name: 'gossipsub_peers_per_protocol_count',
              help: 'Peers connected for each topic',
              labelNames: ['protocol']
          }),
          /** The time it takes to complete one iteration of the heartbeat. */
          heartbeatDuration: register.histogram({
              name: 'gossipsub_heartbeat_duration_seconds',
              help: 'The time it takes to complete one iteration of the heartbeat',
              // Should take <10ms, over 1s it's a huge issue that needs debugging, since a heartbeat will be cancelled
              buckets: [0.01, 0.1, 1]
          }),
          /** Heartbeat run took longer than heartbeat interval so next is skipped */
          heartbeatSkipped: register.gauge({
              name: 'gossipsub_heartbeat_skipped',
              help: 'Heartbeat run took longer than heartbeat interval so next is skipped'
          }),
          /** Message validation results for each topic.
           *  Invalid == Reject?
           *  = rust-libp2p `invalid_messages`, `accepted_messages`, `ignored_messages`, `rejected_messages` */
          asyncValidationResult: register.gauge({
              name: 'gossipsub_async_validation_result_total',
              help: 'Message validation result',
              labelNames: ['acceptance']
          }),
          asyncValidationResultByTopic: register.gauge({
              name: 'gossipsub_async_validation_result_by_topic_total',
              help: 'Message validation result for each topic',
              labelNames: ['topic']
          }),
          /** When the user validates a message, it tries to re propagate it to its mesh peers. If the
           *  message expires from the memcache before it can be validated, we count this a cache miss
           *  and it is an indicator that the memcache size should be increased.
           *  = rust-libp2p `mcache_misses` */
          asyncValidationMcacheHit: register.gauge({
              name: 'gossipsub_async_validation_mcache_hit_total',
              help: 'Async validation result reported by the user layer',
              labelNames: ['hit']
          }),
          asyncValidationDelayFromFirstSeenSec: register.histogram({
              name: 'gossipsub_async_validation_delay_from_first_seen',
              help: 'Async validation report delay from first seen in second',
              labelNames: ['topic'],
              buckets: [0.01, 0.03, 0.1, 0.3, 1, 3, 10]
          }),
          asyncValidationUnknownFirstSeen: register.gauge({
              name: 'gossipsub_async_validation_unknown_first_seen_count_total',
              help: 'Async validation report unknown first seen value for message'
          }),
          // peer stream
          peerReadStreamError: register.gauge({
              name: 'gossipsub_peer_read_stream_err_count_total',
              help: 'Peer read stream error'
          }),
          // RPC outgoing. Track byte length + data structure sizes
          rpcRecvBytes: register.gauge({ name: 'gossipsub_rpc_recv_bytes_total', help: 'RPC recv' }),
          rpcRecvCount: register.gauge({ name: 'gossipsub_rpc_recv_count_total', help: 'RPC recv' }),
          rpcRecvSubscription: register.gauge({ name: 'gossipsub_rpc_recv_subscription_total', help: 'RPC recv' }),
          rpcRecvMessage: register.gauge({ name: 'gossipsub_rpc_recv_message_total', help: 'RPC recv' }),
          rpcRecvControl: register.gauge({ name: 'gossipsub_rpc_recv_control_total', help: 'RPC recv' }),
          rpcRecvIHave: register.gauge({ name: 'gossipsub_rpc_recv_ihave_total', help: 'RPC recv' }),
          rpcRecvIWant: register.gauge({ name: 'gossipsub_rpc_recv_iwant_total', help: 'RPC recv' }),
          rpcRecvGraft: register.gauge({ name: 'gossipsub_rpc_recv_graft_total', help: 'RPC recv' }),
          rpcRecvPrune: register.gauge({ name: 'gossipsub_rpc_recv_prune_total', help: 'RPC recv' }),
          rpcDataError: register.gauge({ name: 'gossipsub_rpc_data_err_count_total', help: 'RPC data error' }),
          rpcRecvError: register.gauge({ name: 'gossipsub_rpc_recv_err_count_total', help: 'RPC recv error' }),
          /** Total count of RPC dropped because acceptFrom() == false */
          rpcRecvNotAccepted: register.gauge({
              name: 'gossipsub_rpc_rcv_not_accepted_total',
              help: 'Total count of RPC dropped because acceptFrom() == false'
          }),
          // RPC incoming. Track byte length + data structure sizes
          rpcSentBytes: register.gauge({ name: 'gossipsub_rpc_sent_bytes_total', help: 'RPC sent' }),
          rpcSentCount: register.gauge({ name: 'gossipsub_rpc_sent_count_total', help: 'RPC sent' }),
          rpcSentSubscription: register.gauge({ name: 'gossipsub_rpc_sent_subscription_total', help: 'RPC sent' }),
          rpcSentMessage: register.gauge({ name: 'gossipsub_rpc_sent_message_total', help: 'RPC sent' }),
          rpcSentControl: register.gauge({ name: 'gossipsub_rpc_sent_control_total', help: 'RPC sent' }),
          rpcSentIHave: register.gauge({ name: 'gossipsub_rpc_sent_ihave_total', help: 'RPC sent' }),
          rpcSentIWant: register.gauge({ name: 'gossipsub_rpc_sent_iwant_total', help: 'RPC sent' }),
          rpcSentGraft: register.gauge({ name: 'gossipsub_rpc_sent_graft_total', help: 'RPC sent' }),
          rpcSentPrune: register.gauge({ name: 'gossipsub_rpc_sent_prune_total', help: 'RPC sent' }),
          // publish message. Track peers sent to and bytes
          /** Total count of msg published by topic */
          msgPublishCount: register.gauge({
              name: 'gossipsub_msg_publish_count_total',
              help: 'Total count of msg published by topic',
              labelNames: ['topic']
          }),
          /** Total count of peers that we publish a msg to */
          msgPublishPeersByTopic: register.gauge({
              name: 'gossipsub_msg_publish_peers_total',
              help: 'Total count of peers that we publish a msg to',
              labelNames: ['topic']
          }),
          /** Total count of peers (by group) that we publish a msg to */
          // NOTE: Do not use 'group' label since it's a generic already used by Prometheus to group instances
          msgPublishPeersByGroup: register.gauge({
              name: 'gossipsub_msg_publish_peers_by_group',
              help: 'Total count of peers (by group) that we publish a msg to',
              labelNames: ['peerGroup']
          }),
          /** Total count of msg publish data.length bytes */
          msgPublishBytes: register.gauge({
              name: 'gossipsub_msg_publish_bytes_total',
              help: 'Total count of msg publish data.length bytes',
              labelNames: ['topic']
          }),
          /** Total count of msg forwarded by topic */
          msgForwardCount: register.gauge({
              name: 'gossipsub_msg_forward_count_total',
              help: 'Total count of msg forwarded by topic',
              labelNames: ['topic']
          }),
          /** Total count of peers that we forward a msg to */
          msgForwardPeers: register.gauge({
              name: 'gossipsub_msg_forward_peers_total',
              help: 'Total count of peers that we forward a msg to',
              labelNames: ['topic']
          }),
          /** Total count of recv msgs before any validation */
          msgReceivedPreValidation: register.gauge({
              name: 'gossipsub_msg_received_prevalidation_total',
              help: 'Total count of recv msgs before any validation',
              labelNames: ['topic']
          }),
          /** Total count of recv msgs error */
          msgReceivedError: register.gauge({
              name: 'gossipsub_msg_received_error_total',
              help: 'Total count of recv msgs error',
              labelNames: ['topic']
          }),
          /** Tracks distribution of recv msgs by duplicate, invalid, valid */
          msgReceivedStatus: register.gauge({
              name: 'gossipsub_msg_received_status_total',
              help: 'Tracks distribution of recv msgs by duplicate, invalid, valid',
              labelNames: ['status']
          }),
          msgReceivedTopic: register.gauge({
              name: 'gossipsub_msg_received_topic_total',
              help: 'Tracks distribution of recv msgs by topic label',
              labelNames: ['topic']
          }),
          /** Tracks specific reason of invalid */
          msgReceivedInvalid: register.gauge({
              name: 'gossipsub_msg_received_invalid_total',
              help: 'Tracks specific reason of invalid',
              labelNames: ['error']
          }),
          msgReceivedInvalidByTopic: register.gauge({
              name: 'gossipsub_msg_received_invalid_by_topic_total',
              help: 'Tracks specific invalid message by topic',
              labelNames: ['topic']
          }),
          /** Track duplicate message delivery time */
          duplicateMsgDeliveryDelay: register.histogram({
              name: 'gossisub_duplicate_msg_delivery_delay_seconds',
              help: 'Time since the 1st duplicated message validated',
              labelNames: ['topic'],
              buckets: [
                  0.25 * opts.maxMeshMessageDeliveriesWindowSec,
                  0.5 * opts.maxMeshMessageDeliveriesWindowSec,
                  1 * opts.maxMeshMessageDeliveriesWindowSec,
                  2 * opts.maxMeshMessageDeliveriesWindowSec,
                  4 * opts.maxMeshMessageDeliveriesWindowSec
              ]
          }),
          /** Total count of late msg delivery total by topic */
          duplicateMsgLateDelivery: register.gauge({
              name: 'gossisub_duplicate_msg_late_delivery_total',
              help: 'Total count of late duplicate message delivery by topic, which triggers P3 penalty',
              labelNames: ['topic']
          }),
          duplicateMsgIgnored: register.gauge({
              name: 'gossisub_ignored_published_duplicate_msgs_total',
              help: 'Total count of published duplicate message ignored by topic',
              labelNames: ['topic']
          }),
          /* Metrics related to scoring */
          /** Total times score() is called */
          scoreFnCalls: register.gauge({
              name: 'gossipsub_score_fn_calls_total',
              help: 'Total times score() is called'
          }),
          /** Total times score() call actually computed computeScore(), no cache */
          scoreFnRuns: register.gauge({
              name: 'gossipsub_score_fn_runs_total',
              help: 'Total times score() call actually computed computeScore(), no cache'
          }),
          scoreCachedDelta: register.histogram({
              name: 'gossipsub_score_cache_delta',
              help: 'Delta of score between cached values that expired',
              buckets: [10, 100, 1000]
          }),
          /** Current count of peers by score threshold */
          peersByScoreThreshold: register.gauge({
              name: 'gossipsub_peers_by_score_threshold_count',
              help: 'Current count of peers by score threshold',
              labelNames: ['threshold']
          }),
          score: register.avgMinMax({
              name: 'gossipsub_score',
              help: 'Avg min max of gossip scores'
          }),
          /**
           * Separate score weights
           * Need to use 2-label metrics in this case to debug the score weights
           **/
          scoreWeights: register.avgMinMax({
              name: 'gossipsub_score_weights',
              help: 'Separate score weights',
              labelNames: ['topic', 'p']
          }),
          /** Histogram of the scores for each mesh topic. */
          // TODO: Not implemented
          scorePerMesh: register.avgMinMax({
              name: 'gossipsub_score_per_mesh',
              help: 'Histogram of the scores for each mesh topic',
              labelNames: ['topic']
          }),
          /** A counter of the kind of penalties being applied to peers. */
          // TODO: Not fully implemented
          scoringPenalties: register.gauge({
              name: 'gossipsub_scoring_penalties_total',
              help: 'A counter of the kind of penalties being applied to peers',
              labelNames: ['penalty']
          }),
          behaviourPenalty: register.histogram({
              name: 'gossipsub_peer_stat_behaviour_penalty',
              help: 'Current peer stat behaviour_penalty at each scrape',
              buckets: [
                  0.25 * opts.behaviourPenaltyThreshold,
                  0.5 * opts.behaviourPenaltyThreshold,
                  1 * opts.behaviourPenaltyThreshold,
                  2 * opts.behaviourPenaltyThreshold,
                  4 * opts.behaviourPenaltyThreshold
              ]
          }),
          // TODO:
          // - iasked per peer (on heartbeat)
          // - when promise is resolved, track messages from promises
          /** Total received IHAVE messages that we ignore for some reason */
          ihaveRcvIgnored: register.gauge({
              name: 'gossipsub_ihave_rcv_ignored_total',
              help: 'Total received IHAVE messages that we ignore for some reason',
              labelNames: ['reason']
          }),
          /** Total received IHAVE messages by topic */
          ihaveRcvMsgids: register.gauge({
              name: 'gossipsub_ihave_rcv_msgids_total',
              help: 'Total received IHAVE messages by topic',
              labelNames: ['topic']
          }),
          /** Total messages per topic we don't have. Not actual requests.
           *  The number of times we have decided that an IWANT control message is required for this
           *  topic. A very high metric might indicate an underperforming network.
           *  = rust-libp2p `topic_iwant_msgs` */
          ihaveRcvNotSeenMsgids: register.gauge({
              name: 'gossipsub_ihave_rcv_not_seen_msgids_total',
              help: 'Total messages per topic we do not have, not actual requests',
              labelNames: ['topic']
          }),
          /** Total received IWANT messages by topic */
          iwantRcvMsgids: register.gauge({
              name: 'gossipsub_iwant_rcv_msgids_total',
              help: 'Total received IWANT messages by topic',
              labelNames: ['topic']
          }),
          /** Total requested messageIDs that we don't have */
          iwantRcvDonthaveMsgids: register.gauge({
              name: 'gossipsub_iwant_rcv_dont_have_msgids_total',
              help: 'Total requested messageIDs that we do not have'
          }),
          iwantPromiseStarted: register.gauge({
              name: 'gossipsub_iwant_promise_sent_total',
              help: 'Total count of started IWANT promises'
          }),
          /** Total count of resolved IWANT promises */
          iwantPromiseResolved: register.gauge({
              name: 'gossipsub_iwant_promise_resolved_total',
              help: 'Total count of resolved IWANT promises'
          }),
          /** Total count of resolved IWANT promises from duplicate messages */
          iwantPromiseResolvedFromDuplicate: register.gauge({
              name: 'gossipsub_iwant_promise_resolved_from_duplicate_total',
              help: 'Total count of resolved IWANT promises from duplicate messages'
          }),
          /** Total count of peers we have asked IWANT promises that are resolved */
          iwantPromiseResolvedPeers: register.gauge({
              name: 'gossipsub_iwant_promise_resolved_peers',
              help: 'Total count of peers we have asked IWANT promises that are resolved'
          }),
          iwantPromiseBroken: register.gauge({
              name: 'gossipsub_iwant_promise_broken',
              help: 'Total count of broken IWANT promises'
          }),
          iwantMessagePruned: register.gauge({
              name: 'gossipsub_iwant_message_pruned',
              help: 'Total count of pruned IWANT messages'
          }),
          /** Histogram of delivery time of resolved IWANT promises */
          iwantPromiseDeliveryTime: register.histogram({
              name: 'gossipsub_iwant_promise_delivery_seconds',
              help: 'Histogram of delivery time of resolved IWANT promises',
              buckets: [
                  0.5 * opts.gossipPromiseExpireSec,
                  1 * opts.gossipPromiseExpireSec,
                  2 * opts.gossipPromiseExpireSec,
                  4 * opts.gossipPromiseExpireSec
              ]
          }),
          iwantPromiseUntracked: register.gauge({
              name: 'gossip_iwant_promise_untracked',
              help: 'Total count of untracked IWANT promise'
          }),
          /** Backoff time */
          connectedPeersBackoffSec: register.histogram({
              name: 'gossipsub_connected_peers_backoff_seconds',
              help: 'Backoff time in seconds',
              // Using 1 seconds as minimum as that's close to the heartbeat duration, no need for more resolution.
              // As per spec, backoff times are 10 seconds for UnsubscribeBackoff and 60 seconds for PruneBackoff.
              // Higher values of 60 seconds should not occur, but we add 120 seconds just in case
              // https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md#overview-of-new-parameters
              buckets: [1, 2, 4, 10, 20, 60, 120]
          }),
          /* Data structure sizes */
          /** Unbounded cache sizes */
          cacheSize: register.gauge({
              name: 'gossipsub_cache_size',
              help: 'Unbounded cache sizes',
              labelNames: ['cache']
          }),
          /** Current mcache msg count */
          mcacheSize: register.gauge({
              name: 'gossipsub_mcache_size',
              help: 'Current mcache msg count'
          }),
          mcacheNotValidatedCount: register.gauge({
              name: 'gossipsub_mcache_not_validated_count',
              help: 'Current mcache msg count not validated'
          }),
          fastMsgIdCacheCollision: register.gauge({
              name: 'gossipsub_fastmsgid_cache_collision_total',
              help: 'Total count of key collisions on fastmsgid cache put'
          }),
          newConnectionCount: register.gauge({
              name: 'gossipsub_new_connection_total',
              help: 'Total new connection by status',
              labelNames: ['status']
          }),
          topicStrToLabel: topicStrToLabel,
          toTopic(topicStr) {
              return this.topicStrToLabel.get(topicStr) ?? topicStr;
          },
          /** We joined a topic */
          onJoin(topicStr) {
              this.topicSubscriptionStatus.set({ topicStr }, 1);
              this.meshPeerCounts.set({ topicStr }, 0); // Reset count
          },
          /** We left a topic */
          onLeave(topicStr) {
              this.topicSubscriptionStatus.set({ topicStr }, 0);
              this.meshPeerCounts.set({ topicStr }, 0); // Reset count
          },
          /** Register the inclusion of peers in our mesh due to some reason. */
          onAddToMesh(topicStr, reason, count) {
              const topic = this.toTopic(topicStr);
              this.meshPeerInclusionEvents.inc({ reason }, count);
              this.meshPeerInclusionEventsByTopic.inc({ topic }, count);
          },
          /** Register the removal of peers in our mesh due to some reason */
          // - remove_peer_from_mesh()
          // - heartbeat() Churn::BadScore
          // - heartbeat() Churn::Excess
          // - on_disconnect() Churn::Ds
          onRemoveFromMesh(topicStr, reason, count) {
              const topic = this.toTopic(topicStr);
              this.meshPeerChurnEvents.inc({ reason }, count);
              this.meshPeerChurnEventsByTopic.inc({ topic }, count);
          },
          /**
           * Update validation result to metrics
           * @param messageRecord null means the message's mcache record was not known at the time of acceptance report
           */
          onReportValidation(messageRecord, acceptance, firstSeenTimestampMs) {
              this.asyncValidationMcacheHit.inc({ hit: messageRecord != null ? 'hit' : 'miss' });
              if (messageRecord != null) {
                  const topic = this.toTopic(messageRecord.message.topic);
                  this.asyncValidationResult.inc({ acceptance });
                  this.asyncValidationResultByTopic.inc({ topic });
              }
              if (firstSeenTimestampMs != null) {
                  this.asyncValidationDelayFromFirstSeenSec.observe((Date.now() - firstSeenTimestampMs) / 1000);
              }
              else {
                  this.asyncValidationUnknownFirstSeen.inc();
              }
          },
          /**
           * - in handle_graft() Penalty::GraftBackoff
           * - in apply_iwant_penalties() Penalty::BrokenPromise
           * - in metric_score() P3 Penalty::MessageDeficit
           * - in metric_score() P6 Penalty::IPColocation
           */
          onScorePenalty(penalty) {
              // Can this be labeled by topic too?
              this.scoringPenalties.inc({ penalty }, 1);
          },
          onIhaveRcv(topicStr, ihave, idonthave) {
              const topic = this.toTopic(topicStr);
              this.ihaveRcvMsgids.inc({ topic }, ihave);
              this.ihaveRcvNotSeenMsgids.inc({ topic }, idonthave);
          },
          onIwantRcv(iwantByTopic, iwantDonthave) {
              for (const [topicStr, iwant] of iwantByTopic) {
                  const topic = this.toTopic(topicStr);
                  this.iwantRcvMsgids.inc({ topic }, iwant);
              }
              this.iwantRcvDonthaveMsgids.inc(iwantDonthave);
          },
          onForwardMsg(topicStr, tosendCount) {
              const topic = this.toTopic(topicStr);
              this.msgForwardCount.inc({ topic }, 1);
              this.msgForwardPeers.inc({ topic }, tosendCount);
          },
          onPublishMsg(topicStr, tosendGroupCount, tosendCount, dataLen) {
              const topic = this.toTopic(topicStr);
              this.msgPublishCount.inc({ topic }, 1);
              this.msgPublishBytes.inc({ topic }, tosendCount * dataLen);
              this.msgPublishPeersByTopic.inc({ topic }, tosendCount);
              this.msgPublishPeersByGroup.inc({ peerGroup: 'direct' }, tosendGroupCount.direct);
              this.msgPublishPeersByGroup.inc({ peerGroup: 'floodsub' }, tosendGroupCount.floodsub);
              this.msgPublishPeersByGroup.inc({ peerGroup: 'mesh' }, tosendGroupCount.mesh);
              this.msgPublishPeersByGroup.inc({ peerGroup: 'fanout' }, tosendGroupCount.fanout);
          },
          onMsgRecvPreValidation(topicStr) {
              const topic = this.toTopic(topicStr);
              this.msgReceivedPreValidation.inc({ topic }, 1);
          },
          onMsgRecvError(topicStr) {
              const topic = this.toTopic(topicStr);
              this.msgReceivedError.inc({ topic }, 1);
          },
          onMsgRecvResult(topicStr, status) {
              const topic = this.toTopic(topicStr);
              this.msgReceivedTopic.inc({ topic });
              this.msgReceivedStatus.inc({ status });
          },
          onMsgRecvInvalid(topicStr, reason) {
              const topic = this.toTopic(topicStr);
              const error = reason.reason === RejectReason.Error ? reason.error : reason.reason;
              this.msgReceivedInvalid.inc({ error }, 1);
              this.msgReceivedInvalidByTopic.inc({ topic }, 1);
          },
          onDuplicateMsgDelivery(topicStr, deliveryDelayMs, isLateDelivery) {
              this.duplicateMsgDeliveryDelay.observe(deliveryDelayMs / 1000);
              if (isLateDelivery) {
                  const topic = this.toTopic(topicStr);
                  this.duplicateMsgLateDelivery.inc({ topic }, 1);
              }
          },
          onPublishDuplicateMsg(topicStr) {
              const topic = this.toTopic(topicStr);
              this.duplicateMsgIgnored.inc({ topic }, 1);
          },
          onPeerReadStreamError() {
              this.peerReadStreamError.inc(1);
          },
          onRpcRecvError() {
              this.rpcRecvError.inc(1);
          },
          onRpcDataError() {
              this.rpcDataError.inc(1);
          },
          onRpcRecv(rpc, rpcBytes) {
              this.rpcRecvBytes.inc(rpcBytes);
              this.rpcRecvCount.inc(1);
              if (rpc.subscriptions)
                  this.rpcRecvSubscription.inc(rpc.subscriptions.length);
              if (rpc.messages)
                  this.rpcRecvMessage.inc(rpc.messages.length);
              if (rpc.control) {
                  this.rpcRecvControl.inc(1);
                  if (rpc.control.ihave)
                      this.rpcRecvIHave.inc(rpc.control.ihave.length);
                  if (rpc.control.iwant)
                      this.rpcRecvIWant.inc(rpc.control.iwant.length);
                  if (rpc.control.graft)
                      this.rpcRecvGraft.inc(rpc.control.graft.length);
                  if (rpc.control.prune)
                      this.rpcRecvPrune.inc(rpc.control.prune.length);
              }
          },
          onRpcSent(rpc, rpcBytes) {
              this.rpcSentBytes.inc(rpcBytes);
              this.rpcSentCount.inc(1);
              if (rpc.subscriptions)
                  this.rpcSentSubscription.inc(rpc.subscriptions.length);
              if (rpc.messages)
                  this.rpcSentMessage.inc(rpc.messages.length);
              if (rpc.control) {
                  const ihave = rpc.control.ihave?.length ?? 0;
                  const iwant = rpc.control.iwant?.length ?? 0;
                  const graft = rpc.control.graft?.length ?? 0;
                  const prune = rpc.control.prune?.length ?? 0;
                  if (ihave > 0)
                      this.rpcSentIHave.inc(ihave);
                  if (iwant > 0)
                      this.rpcSentIWant.inc(iwant);
                  if (graft > 0)
                      this.rpcSentGraft.inc(graft);
                  if (prune > 0)
                      this.rpcSentPrune.inc(prune);
                  if (ihave > 0 || iwant > 0 || graft > 0 || prune > 0)
                      this.rpcSentControl.inc(1);
              }
          },
          registerScores(scores, scoreThresholds) {
              let graylist = 0;
              let publish = 0;
              let gossip = 0;
              let mesh = 0;
              for (const score of scores) {
                  if (score >= scoreThresholds.graylistThreshold)
                      graylist++;
                  if (score >= scoreThresholds.publishThreshold)
                      publish++;
                  if (score >= scoreThresholds.gossipThreshold)
                      gossip++;
                  if (score >= 0)
                      mesh++;
              }
              this.peersByScoreThreshold.set({ threshold: ScoreThreshold.graylist }, graylist);
              this.peersByScoreThreshold.set({ threshold: ScoreThreshold.publish }, publish);
              this.peersByScoreThreshold.set({ threshold: ScoreThreshold.gossip }, gossip);
              this.peersByScoreThreshold.set({ threshold: ScoreThreshold.mesh }, mesh);
              // Register full score too
              this.score.set(scores);
          },
          registerScoreWeights(sw) {
              for (const [topic, wsTopic] of sw.byTopic) {
                  this.scoreWeights.set({ topic, p: 'p1' }, wsTopic.p1w);
                  this.scoreWeights.set({ topic, p: 'p2' }, wsTopic.p2w);
                  this.scoreWeights.set({ topic, p: 'p3' }, wsTopic.p3w);
                  this.scoreWeights.set({ topic, p: 'p3b' }, wsTopic.p3bw);
                  this.scoreWeights.set({ topic, p: 'p4' }, wsTopic.p4w);
              }
              this.scoreWeights.set({ p: 'p5' }, sw.p5w);
              this.scoreWeights.set({ p: 'p6' }, sw.p6w);
              this.scoreWeights.set({ p: 'p7' }, sw.p7w);
          },
          registerScorePerMesh(mesh, scoreByPeer) {
              const peersPerTopicLabel = new Map();
              mesh.forEach((peers, topicStr) => {
                  // Aggregate by known topicLabel or throw to 'unknown'. This prevent too high cardinality
                  const topicLabel = this.topicStrToLabel.get(topicStr) ?? 'unknown';
                  let peersInMesh = peersPerTopicLabel.get(topicLabel);
                  if (!peersInMesh) {
                      peersInMesh = new Set();
                      peersPerTopicLabel.set(topicLabel, peersInMesh);
                  }
                  peers.forEach((p) => peersInMesh?.add(p));
              });
              for (const [topic, peers] of peersPerTopicLabel) {
                  const meshScores = [];
                  peers.forEach((peer) => {
                      meshScores.push(scoreByPeer.get(peer) ?? 0);
                  });
                  this.scorePerMesh.set({ topic }, meshScores);
              }
          }
      };
  }

  const SignPrefix = fromString$1('libp2p-pubsub:');
  async function buildRawMessage(publishConfig, topic, originalData, transformedData) {
      switch (publishConfig.type) {
          case PublishConfigType.Signing: {
              const rpcMsg = {
                  from: publishConfig.author.toBytes(),
                  data: transformedData,
                  seqno: randomBytes(8),
                  topic,
                  signature: undefined,
                  key: undefined // Exclude key field for signing
              };
              // Get the message in bytes, and prepend with the pubsub prefix
              // the signature is over the bytes "libp2p-pubsub:<protobuf-message>"
              const bytes = concat([SignPrefix, RPC.Message.encode(rpcMsg).finish()]);
              rpcMsg.signature = await publishConfig.privateKey.sign(bytes);
              rpcMsg.key = publishConfig.key;
              const msg = {
                  type: 'signed',
                  from: publishConfig.author,
                  data: originalData,
                  sequenceNumber: BigInt(`0x${toString$1(rpcMsg.seqno, 'base16')}`),
                  topic,
                  signature: rpcMsg.signature,
                  key: rpcMsg.key
              };
              return {
                  raw: rpcMsg,
                  msg: msg
              };
          }
          case PublishConfigType.Anonymous: {
              return {
                  raw: {
                      from: undefined,
                      data: transformedData,
                      seqno: undefined,
                      topic,
                      signature: undefined,
                      key: undefined
                  },
                  msg: {
                      type: 'unsigned',
                      data: originalData,
                      topic
                  }
              };
          }
      }
  }
  async function validateToRawMessage(signaturePolicy, msg) {
      // If strict-sign, verify all
      // If anonymous (no-sign), ensure no preven
      switch (signaturePolicy) {
          case StrictNoSign:
              if (msg.signature != null)
                  return { valid: false, error: ValidateError.SignaturePresent };
              if (msg.seqno != null)
                  return { valid: false, error: ValidateError.SeqnoPresent };
              if (msg.key != null)
                  return { valid: false, error: ValidateError.FromPresent };
              return { valid: true, message: { type: 'unsigned', topic: msg.topic, data: msg.data ?? new Uint8Array(0) } };
          case StrictSign: {
              // Verify seqno
              if (msg.seqno == null)
                  return { valid: false, error: ValidateError.InvalidSeqno };
              if (msg.seqno.length !== 8) {
                  return { valid: false, error: ValidateError.InvalidSeqno };
              }
              if (msg.signature == null)
                  return { valid: false, error: ValidateError.InvalidSignature };
              if (msg.from == null)
                  return { valid: false, error: ValidateError.InvalidPeerId };
              let fromPeerId;
              try {
                  // TODO: Fix PeerId types
                  fromPeerId = peerIdFromBytes(msg.from);
              }
              catch (e) {
                  return { valid: false, error: ValidateError.InvalidPeerId };
              }
              // - check from defined
              // - transform source to PeerId
              // - parse signature
              // - get .key, else from source
              // - check key == source if present
              // - verify sig
              let publicKey;
              if (msg.key) {
                  publicKey = unmarshalPublicKey(msg.key);
                  // TODO: Should `fromPeerId.pubKey` be optional?
                  if (fromPeerId.publicKey !== undefined && !equals(publicKey.bytes, fromPeerId.publicKey)) {
                      return { valid: false, error: ValidateError.InvalidPeerId };
                  }
              }
              else {
                  if (fromPeerId.publicKey == null) {
                      return { valid: false, error: ValidateError.InvalidPeerId };
                  }
                  publicKey = unmarshalPublicKey(fromPeerId.publicKey);
              }
              const rpcMsgPreSign = {
                  from: msg.from,
                  data: msg.data,
                  seqno: msg.seqno,
                  topic: msg.topic,
                  signature: undefined,
                  key: undefined // Exclude key field for signing
              };
              // Get the message in bytes, and prepend with the pubsub prefix
              // the signature is over the bytes "libp2p-pubsub:<protobuf-message>"
              const bytes = concat([SignPrefix, RPC.Message.encode(rpcMsgPreSign).finish()]);
              if (!(await publicKey.verify(bytes, msg.signature))) {
                  return { valid: false, error: ValidateError.InvalidSignature };
              }
              return {
                  valid: true,
                  message: {
                      type: 'signed',
                      from: fromPeerId,
                      data: msg.data ?? new Uint8Array(0),
                      sequenceNumber: BigInt(`0x${toString$1(msg.seqno, 'base16')}`),
                      topic: msg.topic,
                      signature: msg.signature,
                      key: msg.key ?? marshalPublicKey(publicKey)
                  }
              };
          }
      }
  }

  /**
   * Generate a message id, based on the `key` and `seqno`
   */
  const msgId = (key, seqno) => {
      const seqnoBytes = fromString$1(seqno.toString(16).padStart(16, '0'), 'base16');
      const msgId = new Uint8Array(key.length + seqnoBytes.length);
      msgId.set(key, 0);
      msgId.set(seqnoBytes, key.length);
      return msgId;
  };

  /**
   * Generate a message id, based on the `key` and `seqno`
   */
  function msgIdFnStrictSign(msg) {
      if (msg.type !== 'signed') {
          throw new Error('expected signed message type');
      }
      // Should never happen
      if (msg.sequenceNumber == null)
          throw Error('missing seqno field');
      // TODO: Should use .from here or key?
      return msgId(msg.from.toBytes(), msg.sequenceNumber);
  }
  /**
   * Generate a message id, based on message `data`
   */
  async function msgIdFnStrictNoSign(msg) {
      return await sha256.encode(msg.data);
  }

  function computeScoreWeights(peer, pstats, params, peerIPs, topicStrToLabel) {
      let score = 0;
      const byTopic = new Map();
      // topic stores
      Object.entries(pstats.topics).forEach(([topic, tstats]) => {
          // the topic parameters
          // Aggregate by known topicLabel or throw to 'unknown'. This prevent too high cardinality
          const topicLabel = topicStrToLabel.get(topic) ?? 'unknown';
          const topicParams = params.topics[topic];
          if (topicParams === undefined) {
              // we are not scoring this topic
              return;
          }
          let topicScores = byTopic.get(topicLabel);
          if (!topicScores) {
              topicScores = {
                  p1w: 0,
                  p2w: 0,
                  p3w: 0,
                  p3bw: 0,
                  p4w: 0
              };
              byTopic.set(topicLabel, topicScores);
          }
          let p1w = 0;
          let p2w = 0;
          let p3w = 0;
          let p3bw = 0;
          let p4w = 0;
          // P1: time in Mesh
          if (tstats.inMesh) {
              const p1 = Math.max(tstats.meshTime / topicParams.timeInMeshQuantum, topicParams.timeInMeshCap);
              p1w += p1 * topicParams.timeInMeshWeight;
          }
          // P2: first message deliveries
          let p2 = tstats.firstMessageDeliveries;
          if (p2 > topicParams.firstMessageDeliveriesCap) {
              p2 = topicParams.firstMessageDeliveriesCap;
          }
          p2w += p2 * topicParams.firstMessageDeliveriesWeight;
          // P3: mesh message deliveries
          if (tstats.meshMessageDeliveriesActive &&
              tstats.meshMessageDeliveries < topicParams.meshMessageDeliveriesThreshold) {
              const deficit = topicParams.meshMessageDeliveriesThreshold - tstats.meshMessageDeliveries;
              const p3 = deficit * deficit;
              p3w += p3 * topicParams.meshMessageDeliveriesWeight;
          }
          // P3b:
          // NOTE: the weight of P3b is negative (validated in validateTopicScoreParams) so this detracts
          const p3b = tstats.meshFailurePenalty;
          p3bw += p3b * topicParams.meshFailurePenaltyWeight;
          // P4: invalid messages
          // NOTE: the weight of P4 is negative (validated in validateTopicScoreParams) so this detracts
          const p4 = tstats.invalidMessageDeliveries * tstats.invalidMessageDeliveries;
          p4w += p4 * topicParams.invalidMessageDeliveriesWeight;
          // update score, mixing with topic weight
          score += (p1w + p2w + p3w + p3bw + p4w) * topicParams.topicWeight;
          topicScores.p1w += p1w;
          topicScores.p2w += p2w;
          topicScores.p3w += p3w;
          topicScores.p3bw += p3bw;
          topicScores.p4w += p4w;
      });
      // apply the topic score cap, if any
      if (params.topicScoreCap > 0 && score > params.topicScoreCap) {
          score = params.topicScoreCap;
          // Proportionally apply cap to all individual contributions
          const capF = params.topicScoreCap / score;
          for (const ws of byTopic.values()) {
              ws.p1w *= capF;
              ws.p2w *= capF;
              ws.p3w *= capF;
              ws.p3bw *= capF;
              ws.p4w *= capF;
          }
      }
      let p5w = 0;
      let p6w = 0;
      let p7w = 0;
      // P5: application-specific score
      const p5 = params.appSpecificScore(peer);
      p5w += p5 * params.appSpecificWeight;
      // P6: IP colocation factor
      pstats.knownIPs.forEach((ip) => {
          if (params.IPColocationFactorWhitelist.has(ip)) {
              return;
          }
          // P6 has a cliff (IPColocationFactorThreshold)
          // It's only applied if at least that many peers are connected to us from that source IP addr.
          // It is quadratic, and the weight is negative (validated in validatePeerScoreParams)
          const peersInIP = peerIPs.get(ip);
          const numPeersInIP = peersInIP ? peersInIP.size : 0;
          if (numPeersInIP > params.IPColocationFactorThreshold) {
              const surplus = numPeersInIP - params.IPColocationFactorThreshold;
              const p6 = surplus * surplus;
              p6w += p6 * params.IPColocationFactorWeight;
          }
      });
      // P7: behavioural pattern penalty
      const p7 = pstats.behaviourPenalty * pstats.behaviourPenalty;
      p7w += p7 * params.behaviourPenaltyWeight;
      score += p5w + p6w + p7w;
      return {
          byTopic,
          p5w,
          p6w,
          p7w,
          score
      };
  }
  function computeAllPeersScoreWeights(peerIdStrs, peerStats, params, peerIPs, topicStrToLabel) {
      const sw = {
          byTopic: new Map(),
          p5w: [],
          p6w: [],
          p7w: [],
          score: []
      };
      for (const peerIdStr of peerIdStrs) {
          const pstats = peerStats.get(peerIdStr);
          if (pstats) {
              const swPeer = computeScoreWeights(peerIdStr, pstats, params, peerIPs, topicStrToLabel);
              for (const [topic, swPeerTopic] of swPeer.byTopic) {
                  let swTopic = sw.byTopic.get(topic);
                  if (!swTopic) {
                      swTopic = {
                          p1w: [],
                          p2w: [],
                          p3w: [],
                          p3bw: [],
                          p4w: []
                      };
                      sw.byTopic.set(topic, swTopic);
                  }
                  swTopic.p1w.push(swPeerTopic.p1w);
                  swTopic.p2w.push(swPeerTopic.p2w);
                  swTopic.p3w.push(swPeerTopic.p3w);
                  swTopic.p3bw.push(swPeerTopic.p3bw);
                  swTopic.p4w.push(swPeerTopic.p4w);
              }
              sw.p5w.push(swPeer.p5w);
              sw.p6w.push(swPeer.p6w);
              sw.p7w.push(swPeer.p7w);
              sw.score.push(swPeer.score);
          }
          else {
              sw.p5w.push(0);
              sw.p6w.push(0);
              sw.p7w.push(0);
              sw.score.push(0);
          }
      }
      return sw;
  }

  class OutboundStream {
      constructor(rawStream, errCallback, opts) {
          this.rawStream = rawStream;
          this.pushable = pushable({ objectMode: false });
          this.closeController = new AbortController();
          this.maxBufferSize = opts.maxBufferSize ?? Infinity;
          pipe(abortableSource(this.pushable, this.closeController.signal, { returnOnAbort: true }), (source) => encode$1(source), this.rawStream).catch(errCallback);
      }
      get protocol() {
          // TODO remove this non-nullish assertion after https://github.com/libp2p/js-libp2p-interfaces/pull/265 is incorporated
          return this.rawStream.stat.protocol;
      }
      push(data) {
          if (this.pushable.readableLength > this.maxBufferSize) {
              throw Error(`OutboundStream buffer full, size > ${this.maxBufferSize}`);
          }
          this.pushable.push(data);
      }
      close() {
          this.closeController.abort();
          // similar to pushable.end() but clear the internal buffer
          this.pushable.return();
          this.rawStream.close();
      }
  }
  class InboundStream {
      constructor(rawStream, opts = {}) {
          this.rawStream = rawStream;
          this.closeController = new AbortController();
          this.source = abortableSource(pipe(this.rawStream, (source) => decode(source, opts)), this.closeController.signal, {
              returnOnAbort: true
          });
      }
      close() {
          this.closeController.abort();
          this.rawStream.close();
      }
  }

  const defaultDecodeRpcLimits = {
      maxSubscriptions: Infinity,
      maxMessages: Infinity,
      maxIhaveMessageIDs: Infinity,
      maxIwantMessageIDs: Infinity,
      maxControlMessages: Infinity,
      maxPeerInfos: Infinity
  };
  /**
   * Copied code from src/message/rpc.cjs but with decode limits to prevent OOM attacks
   */
  function decodeRpc(bytes, opts) {
      // Mutate to use the option as stateful counter. Must limit the total count of messageIDs across all IWANT, IHAVE
      // else one count put 100 messageIDs into each 100 IWANT and "get around" the limit
      opts = { ...opts };
      const r = protobuf.Reader.create(bytes);
      const l = bytes.length;
      const c = l === undefined ? r.len : r.pos + l;
      const m = {};
      while (r.pos < c) {
          const t = r.uint32();
          switch (t >>> 3) {
              case 1:
                  if (!(m.subscriptions && m.subscriptions.length))
                      m.subscriptions = [];
                  if (m.subscriptions.length < opts.maxSubscriptions)
                      m.subscriptions.push(decodeSubOpts(r, r.uint32()));
                  else
                      r.skipType(t & 7);
                  break;
              case 2:
                  if (!(m.messages && m.messages.length))
                      m.messages = [];
                  if (m.messages.length < opts.maxMessages)
                      m.messages.push(decodeMessage(r, r.uint32()));
                  else
                      r.skipType(t & 7);
                  break;
              case 3:
                  m.control = decodeControlMessage(r, r.uint32(), opts);
                  break;
              default:
                  r.skipType(t & 7);
                  break;
          }
      }
      return m;
  }
  function decodeSubOpts(r, l) {
      const c = l === undefined ? r.len : r.pos + l;
      const m = {};
      while (r.pos < c) {
          const t = r.uint32();
          switch (t >>> 3) {
              case 1:
                  m.subscribe = r.bool();
                  break;
              case 2:
                  m.topic = r.string();
                  break;
              default:
                  r.skipType(t & 7);
                  break;
          }
      }
      return m;
  }
  function decodeMessage(r, l) {
      const c = l === undefined ? r.len : r.pos + l;
      const m = {};
      while (r.pos < c) {
          const t = r.uint32();
          switch (t >>> 3) {
              case 1:
                  m.from = r.bytes();
                  break;
              case 2:
                  m.data = r.bytes();
                  break;
              case 3:
                  m.seqno = r.bytes();
                  break;
              case 4:
                  m.topic = r.string();
                  break;
              case 5:
                  m.signature = r.bytes();
                  break;
              case 6:
                  m.key = r.bytes();
                  break;
              default:
                  r.skipType(t & 7);
                  break;
          }
      }
      if (!m.topic)
          throw Error("missing required 'topic'");
      return m;
  }
  function decodeControlMessage(r, l, opts) {
      const c = l === undefined ? r.len : r.pos + l;
      const m = {};
      while (r.pos < c) {
          const t = r.uint32();
          switch (t >>> 3) {
              case 1:
                  if (!(m.ihave && m.ihave.length))
                      m.ihave = [];
                  if (m.ihave.length < opts.maxControlMessages)
                      m.ihave.push(decodeControlIHave(r, r.uint32(), opts));
                  else
                      r.skipType(t & 7);
                  break;
              case 2:
                  if (!(m.iwant && m.iwant.length))
                      m.iwant = [];
                  if (m.iwant.length < opts.maxControlMessages)
                      m.iwant.push(decodeControlIWant(r, r.uint32(), opts));
                  else
                      r.skipType(t & 7);
                  break;
              case 3:
                  if (!(m.graft && m.graft.length))
                      m.graft = [];
                  if (m.graft.length < opts.maxControlMessages)
                      m.graft.push(decodeControlGraft(r, r.uint32()));
                  else
                      r.skipType(t & 7);
                  break;
              case 4:
                  if (!(m.prune && m.prune.length))
                      m.prune = [];
                  if (m.prune.length < opts.maxControlMessages)
                      m.prune.push(decodeControlPrune(r, r.uint32(), opts));
                  else
                      r.skipType(t & 7);
                  break;
              default:
                  r.skipType(t & 7);
                  break;
          }
      }
      return m;
  }
  function decodeControlIHave(r, l, opts) {
      const c = l === undefined ? r.len : r.pos + l;
      const m = {};
      while (r.pos < c) {
          const t = r.uint32();
          switch (t >>> 3) {
              case 1:
                  m.topicID = r.string();
                  break;
              case 2:
                  if (!(m.messageIDs && m.messageIDs.length))
                      m.messageIDs = [];
                  if (opts.maxIhaveMessageIDs-- > 0)
                      m.messageIDs.push(r.bytes());
                  else
                      r.skipType(t & 7);
                  break;
              default:
                  r.skipType(t & 7);
                  break;
          }
      }
      return m;
  }
  function decodeControlIWant(r, l, opts) {
      const c = l === undefined ? r.len : r.pos + l;
      const m = {};
      while (r.pos < c) {
          const t = r.uint32();
          switch (t >>> 3) {
              case 1:
                  if (!(m.messageIDs && m.messageIDs.length))
                      m.messageIDs = [];
                  if (opts.maxIwantMessageIDs-- > 0)
                      m.messageIDs.push(r.bytes());
                  else
                      r.skipType(t & 7);
                  break;
              default:
                  r.skipType(t & 7);
                  break;
          }
      }
      return m;
  }
  function decodeControlGraft(r, l) {
      const c = l === undefined ? r.len : r.pos + l;
      const m = {};
      while (r.pos < c) {
          const t = r.uint32();
          switch (t >>> 3) {
              case 1:
                  m.topicID = r.string();
                  break;
              default:
                  r.skipType(t & 7);
                  break;
          }
      }
      return m;
  }
  function decodeControlPrune(r, l, opts) {
      const c = l === undefined ? r.len : r.pos + l;
      const m = {};
      while (r.pos < c) {
          const t = r.uint32();
          switch (t >>> 3) {
              case 1:
                  m.topicID = r.string();
                  break;
              case 2:
                  if (!(m.peers && m.peers.length))
                      m.peers = [];
                  if (opts.maxPeerInfos-- > 0)
                      m.peers.push(decodePeerInfo(r, r.uint32()));
                  else
                      r.skipType(t & 7);
                  break;
              case 3:
                  m.backoff = r.uint64();
                  break;
              default:
                  r.skipType(t & 7);
                  break;
          }
      }
      return m;
  }
  function decodePeerInfo(r, l) {
      const c = l === undefined ? r.len : r.pos + l;
      const m = {};
      while (r.pos < c) {
          const t = r.uint32();
          switch (t >>> 3) {
              case 1:
                  m.peerID = r.bytes();
                  break;
              case 2:
                  m.signedPeerRecord = r.bytes();
                  break;
              default:
                  r.skipType(t & 7);
                  break;
          }
      }
      return m;
  }

  // Protocols https://github.com/multiformats/multiaddr/blob/master/protocols.csv
  // code  size  name
  // 4     32    ip4
  // 41    128   ip6
  var Protocol;
  (function (Protocol) {
      Protocol[Protocol["ip4"] = 4] = "ip4";
      Protocol[Protocol["ip6"] = 41] = "ip6";
  })(Protocol || (Protocol = {}));
  function multiaddrToIPStr(multiaddr) {
      for (const tuple of multiaddr.tuples()) {
          switch (tuple[0]) {
              case Protocol.ip4:
              case Protocol.ip6:
                  return convertToString(tuple[0], tuple[1]);
          }
      }
      return null;
  }

  var GossipStatusCode;
  (function (GossipStatusCode) {
      GossipStatusCode[GossipStatusCode["started"] = 0] = "started";
      GossipStatusCode[GossipStatusCode["stopped"] = 1] = "stopped";
  })(GossipStatusCode || (GossipStatusCode = {}));
  class GossipSub extends EventEmitter$1 {
      constructor(components, options = {}) {
          super();
          this.multicodecs = [GossipsubIDv11, GossipsubIDv10];
          // State
          this.peers = new Set();
          this.streamsInbound = new Map();
          this.streamsOutbound = new Map();
          /** Ensures outbound streams are created sequentially */
          this.outboundInflightQueue = pushable({ objectMode: true });
          /** Direct peers */
          this.direct = new Set();
          /** Floodsub peers */
          this.floodsubPeers = new Set();
          /**
           * Map of peer id and AcceptRequestWhileListEntry
           */
          this.acceptFromWhitelist = new Map();
          /**
           * Map of topics to which peers are subscribed to
           */
          this.topics = new Map();
          /**
           * List of our subscriptions
           */
          this.subscriptions = new Set();
          /**
           * Map of topic meshes
           * topic => peer id set
           */
          this.mesh = new Map();
          /**
           * Map of topics to set of peers. These mesh peers are the ones to which we are publishing without a topic membership
           * topic => peer id set
           */
          this.fanout = new Map();
          /**
           * Map of last publish time for fanout topics
           * topic => last publish time
           */
          this.fanoutLastpub = new Map();
          /**
           * Map of pending messages to gossip
           * peer id => control messages
           */
          this.gossip = new Map();
          /**
           * Map of control messages
           * peer id => control message
           */
          this.control = new Map();
          /**
           * Number of IHAVEs received from peer in the last heartbeat
           */
          this.peerhave = new Map();
          /** Number of messages we have asked from peer in the last heartbeat */
          this.iasked = new Map();
          /** Prune backoff map */
          this.backoff = new Map();
          /**
           * Connection direction cache, marks peers with outbound connections
           * peer id => direction
           */
          this.outbound = new Map();
          /**
           * Custom validator function per topic.
           * Must return or resolve quickly (< 100ms) to prevent causing penalties for late messages.
           * If you need to apply validation that may require longer times use `asyncValidation` option and callback the
           * validation result through `Gossipsub.reportValidationResult`
           */
          this.topicValidators = new Map();
          /**
           * Number of heartbeats since the beginning of time
           * This allows us to amortize some resource cleanup -- eg: backoff cleanup
           */
          this.heartbeatTicks = 0;
          this.directPeerInitial = null;
          this.status = { code: GossipStatusCode.stopped };
          this.heartbeatTimer = null;
          this.runHeartbeat = () => {
              const timer = this.metrics?.heartbeatDuration.startTimer();
              this.heartbeat()
                  .catch((err) => {
                  this.log('Error running heartbeat', err);
              })
                  .finally(() => {
                  if (timer != null) {
                      timer();
                  }
                  // Schedule the next run if still in started status
                  if (this.status.code === GossipStatusCode.started) {
                      // Clear previous timeout before overwriting `status.heartbeatTimeout`, it should be completed tho.
                      clearTimeout(this.status.heartbeatTimeout);
                      // NodeJS setInterval function is innexact, calls drift by a few miliseconds on each call.
                      // To run the heartbeat precisely setTimeout() must be used recomputing the delay on every loop.
                      let msToNextHeartbeat = this.opts.heartbeatInterval - ((Date.now() - this.status.hearbeatStartMs) % this.opts.heartbeatInterval);
                      // If too close to next heartbeat, skip one
                      if (msToNextHeartbeat < this.opts.heartbeatInterval * 0.25) {
                          msToNextHeartbeat += this.opts.heartbeatInterval;
                          this.metrics?.heartbeatSkipped.inc();
                      }
                      this.status.heartbeatTimeout = setTimeout(this.runHeartbeat, msToNextHeartbeat);
                  }
              });
          };
          const opts = {
              fallbackToFloodsub: true,
              floodPublish: true,
              doPX: false,
              directPeers: [],
              D: GossipsubD,
              Dlo: GossipsubDlo,
              Dhi: GossipsubDhi,
              Dscore: GossipsubDscore,
              Dout: GossipsubDout,
              Dlazy: GossipsubDlazy,
              heartbeatInterval: GossipsubHeartbeatInterval,
              fanoutTTL: GossipsubFanoutTTL,
              mcacheLength: GossipsubHistoryLength,
              mcacheGossip: GossipsubHistoryGossip,
              seenTTL: GossipsubSeenTTL,
              gossipsubIWantFollowupMs: GossipsubIWantFollowupTime,
              prunePeers: GossipsubPrunePeers,
              pruneBackoff: GossipsubPruneBackoff,
              unsubcribeBackoff: GossipsubUnsubscribeBackoff,
              graftFloodThreshold: GossipsubGraftFloodThreshold,
              opportunisticGraftPeers: GossipsubOpportunisticGraftPeers,
              opportunisticGraftTicks: GossipsubOpportunisticGraftTicks,
              directConnectTicks: GossipsubDirectConnectTicks,
              ...options,
              scoreParams: createPeerScoreParams(options.scoreParams),
              scoreThresholds: createPeerScoreThresholds(options.scoreThresholds)
          };
          this.components = components;
          this.decodeRpcLimits = opts.decodeRpcLimits ?? defaultDecodeRpcLimits;
          this.globalSignaturePolicy = opts.globalSignaturePolicy ?? StrictSign;
          // Also wants to get notified of peers connected using floodsub
          if (opts.fallbackToFloodsub) {
              this.multicodecs.push(FloodsubID);
          }
          // From pubsub
          this.log = logger(opts.debugName ?? 'libp2p:gossipsub');
          // Gossipsub
          this.opts = opts;
          this.direct = new Set(opts.directPeers.map((p) => p.id.toString()));
          this.seenCache = new SimpleTimeCache({ validityMs: opts.seenTTL });
          this.publishedMessageIds = new SimpleTimeCache({ validityMs: opts.seenTTL });
          if (options.msgIdFn) {
              // Use custom function
              this.msgIdFn = options.msgIdFn;
          }
          else {
              switch (this.globalSignaturePolicy) {
                  case StrictSign:
                      this.msgIdFn = msgIdFnStrictSign;
                      break;
                  case StrictNoSign:
                      this.msgIdFn = msgIdFnStrictNoSign;
                      break;
              }
          }
          if (options.fastMsgIdFn) {
              this.fastMsgIdFn = options.fastMsgIdFn;
              this.fastMsgIdCache = new SimpleTimeCache({ validityMs: opts.seenTTL });
          }
          // By default, gossipsub only provide a browser friendly function to convert Uint8Array message id to string.
          this.msgIdToStrFn = options.msgIdToStrFn ?? messageIdToString;
          this.mcache = options.messageCache || new MessageCache(opts.mcacheGossip, opts.mcacheLength, this.msgIdToStrFn);
          if (options.dataTransform) {
              this.dataTransform = options.dataTransform;
          }
          if (options.metricsRegister) {
              if (!options.metricsTopicStrToLabel) {
                  throw Error('Must set metricsTopicStrToLabel with metrics');
              }
              // in theory, each topic has its own meshMessageDeliveriesWindow param
              // however in lodestar, we configure it mostly the same so just pick the max of positive ones
              // (some topics have meshMessageDeliveriesWindow as 0)
              const maxMeshMessageDeliveriesWindowMs = Math.max(...Object.values(opts.scoreParams.topics).map((topicParam) => topicParam.meshMessageDeliveriesWindow), DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS);
              const metrics = getMetrics(options.metricsRegister, options.metricsTopicStrToLabel, {
                  gossipPromiseExpireSec: this.opts.gossipsubIWantFollowupMs / 1000,
                  behaviourPenaltyThreshold: opts.scoreParams.behaviourPenaltyThreshold,
                  maxMeshMessageDeliveriesWindowSec: maxMeshMessageDeliveriesWindowMs / 1000
              });
              metrics.mcacheSize.addCollect(() => this.onScrapeMetrics(metrics));
              for (const protocol of this.multicodecs) {
                  metrics.protocolsEnabled.set({ protocol }, 1);
              }
              this.metrics = metrics;
          }
          else {
              this.metrics = null;
          }
          this.gossipTracer = new IWantTracer(this.opts.gossipsubIWantFollowupMs, this.msgIdToStrFn, this.metrics);
          /**
           * libp2p
           */
          this.score = new PeerScore(this.opts.scoreParams, this.metrics, {
              scoreCacheValidityMs: opts.heartbeatInterval
          });
          this.maxInboundStreams = options.maxInboundStreams;
          this.maxOutboundStreams = options.maxOutboundStreams;
          this.allowedTopics = opts.allowedTopics ? new Set(opts.allowedTopics) : null;
      }
      getPeers() {
          return [...this.peers.keys()].map((str) => peerIdFromString(str));
      }
      isStarted() {
          return this.status.code === GossipStatusCode.started;
      }
      // LIFECYCLE METHODS
      /**
       * Mounts the gossipsub protocol onto the libp2p node and sends our
       * our subscriptions to every peer connected
       */
      async start() {
          // From pubsub
          if (this.isStarted()) {
              return;
          }
          this.log('starting');
          this.publishConfig = await getPublishConfigFromPeerId(this.globalSignaturePolicy, this.components.peerId);
          // Create the outbound inflight queue
          // This ensures that outbound stream creation happens sequentially
          this.outboundInflightQueue = pushable({ objectMode: true });
          pipe(this.outboundInflightQueue, async (source) => {
              for await (const { peerId, connection } of source) {
                  await this.createOutboundStream(peerId, connection);
              }
          }).catch((e) => this.log.error('outbound inflight queue error', e));
          // set direct peer addresses in the address book
          await Promise.all(this.opts.directPeers.map(async (p) => {
              await this.components.peerStore.merge(p.id, {
                  multiaddrs: p.addrs
              });
          }));
          const registrar = this.components.registrar;
          // Incoming streams
          // Called after a peer dials us
          await Promise.all(this.multicodecs.map((multicodec) => registrar.handle(multicodec, this.onIncomingStream.bind(this), {
              maxInboundStreams: this.maxInboundStreams,
              maxOutboundStreams: this.maxOutboundStreams
          })));
          // # How does Gossipsub interact with libp2p? Rough guide from Mar 2022
          //
          // ## Setup:
          // Gossipsub requests libp2p to callback, TBD
          //
          // `this.libp2p.handle()` registers a handler for `/meshsub/1.1.0` and other Gossipsub protocols
          // The handler callback is registered in libp2p Upgrader.protocols map.
          //
          // Upgrader receives an inbound connection from some transport and (`Upgrader.upgradeInbound`):
          // - Adds encryption (NOISE in our case)
          // - Multiplex stream
          // - Create a muxer and register that for each new stream call Upgrader.protocols handler
          //
          // ## Topology
          // - new instance of Topology (unlinked to libp2p) with handlers
          // - registar.register(topology)
          // register protocol with topology
          // Topology callbacks called on connection manager changes
          const topology = createTopology({
              onConnect: this.onPeerConnected.bind(this),
              onDisconnect: this.onPeerDisconnected.bind(this)
          });
          const registrarTopologyIds = await Promise.all(this.multicodecs.map((multicodec) => registrar.register(multicodec, topology)));
          // Schedule to start heartbeat after `GossipsubHeartbeatInitialDelay`
          const heartbeatTimeout = setTimeout(this.runHeartbeat, GossipsubHeartbeatInitialDelay);
          // Then, run heartbeat every `heartbeatInterval` offset by `GossipsubHeartbeatInitialDelay`
          this.status = {
              code: GossipStatusCode.started,
              registrarTopologyIds,
              heartbeatTimeout: heartbeatTimeout,
              hearbeatStartMs: Date.now() + GossipsubHeartbeatInitialDelay
          };
          this.score.start();
          // connect to direct peers
          this.directPeerInitial = setTimeout(() => {
              Promise.resolve()
                  .then(async () => {
                  await Promise.all(Array.from(this.direct).map(async (id) => await this.connect(id)));
              })
                  .catch((err) => {
                  this.log(err);
              });
          }, GossipsubDirectConnectInitialDelay);
          this.log('started');
      }
      /**
       * Unmounts the gossipsub protocol and shuts down every connection
       */
      async stop() {
          this.log('stopping');
          // From pubsub
          if (this.status.code !== GossipStatusCode.started) {
              return;
          }
          const { registrarTopologyIds } = this.status;
          this.status = { code: GossipStatusCode.stopped };
          // unregister protocol and handlers
          const registrar = this.components.registrar;
          await Promise.all(this.multicodecs.map((multicodec) => registrar.unhandle(multicodec)));
          registrarTopologyIds.forEach((id) => registrar.unregister(id));
          this.outboundInflightQueue.end();
          for (const outboundStream of this.streamsOutbound.values()) {
              outboundStream.close();
          }
          this.streamsOutbound.clear();
          for (const inboundStream of this.streamsInbound.values()) {
              inboundStream.close();
          }
          this.streamsInbound.clear();
          this.peers.clear();
          this.subscriptions.clear();
          // Gossipsub
          if (this.heartbeatTimer) {
              this.heartbeatTimer.cancel();
              this.heartbeatTimer = null;
          }
          this.score.stop();
          this.mesh.clear();
          this.fanout.clear();
          this.fanoutLastpub.clear();
          this.gossip.clear();
          this.control.clear();
          this.peerhave.clear();
          this.iasked.clear();
          this.backoff.clear();
          this.outbound.clear();
          this.gossipTracer.clear();
          this.seenCache.clear();
          if (this.fastMsgIdCache)
              this.fastMsgIdCache.clear();
          if (this.directPeerInitial)
              clearTimeout(this.directPeerInitial);
          this.log('stopped');
      }
      /** FOR DEBUG ONLY - Dump peer stats for all peers. Data is cloned, safe to mutate */
      dumpPeerScoreStats() {
          return this.score.dumpPeerScoreStats();
      }
      /**
       * On an inbound stream opened
       */
      onIncomingStream({ stream, connection }) {
          if (!this.isStarted()) {
              return;
          }
          const peerId = connection.remotePeer;
          // add peer to router
          this.addPeer(peerId, connection.stat.direction, connection.remoteAddr);
          // create inbound stream
          this.createInboundStream(peerId, stream);
          // attempt to create outbound stream
          this.outboundInflightQueue.push({ peerId, connection });
      }
      /**
       * Registrar notifies an established connection with pubsub protocol
       */
      onPeerConnected(peerId, connection) {
          this.metrics?.newConnectionCount.inc({ status: connection.stat.status });
          // libp2p may emit a closed connection and never issue peer:disconnect event
          // see https://github.com/ChainSafe/js-libp2p-gossipsub/issues/398
          if (!this.isStarted() || connection.stat.status !== 'OPEN') {
              return;
          }
          this.addPeer(peerId, connection.stat.direction, connection.remoteAddr);
          this.outboundInflightQueue.push({ peerId, connection });
      }
      /**
       * Registrar notifies a closing connection with pubsub protocol
       */
      onPeerDisconnected(peerId) {
          this.log('connection ended %p', peerId);
          this.removePeer(peerId);
      }
      async createOutboundStream(peerId, connection) {
          if (!this.isStarted()) {
              return;
          }
          const id = peerId.toString();
          if (!this.peers.has(id)) {
              return;
          }
          // TODO make this behavior more robust
          // This behavior is different than for inbound streams
          // If an outbound stream already exists, don't create a new stream
          if (this.streamsOutbound.has(id)) {
              return;
          }
          try {
              const stream = new OutboundStream(await connection.newStream(this.multicodecs), (e) => this.log.error('outbound pipe error', e), { maxBufferSize: this.opts.maxOutboundBufferSize });
              this.log('create outbound stream %p', peerId);
              this.streamsOutbound.set(id, stream);
              const protocol = stream.protocol;
              if (protocol === FloodsubID) {
                  this.floodsubPeers.add(id);
              }
              this.metrics?.peersPerProtocol.inc({ protocol }, 1);
              // Immediately send own subscriptions via the newly attached stream
              if (this.subscriptions.size > 0) {
                  this.log('send subscriptions to', id);
                  this.sendSubscriptions(id, Array.from(this.subscriptions), true);
              }
          }
          catch (e) {
              this.log.error('createOutboundStream error', e);
          }
      }
      async createInboundStream(peerId, stream) {
          if (!this.isStarted()) {
              return;
          }
          const id = peerId.toString();
          if (!this.peers.has(id)) {
              return;
          }
          // TODO make this behavior more robust
          // This behavior is different than for outbound streams
          // If a peer initiates a new inbound connection
          // we assume that one is the new canonical inbound stream
          const priorInboundStream = this.streamsInbound.get(id);
          if (priorInboundStream !== undefined) {
              this.log('replacing existing inbound steam %s', id);
              priorInboundStream.close();
          }
          this.log('create inbound stream %s', id);
          const inboundStream = new InboundStream(stream, { maxDataLength: this.opts.maxInboundDataLength });
          this.streamsInbound.set(id, inboundStream);
          this.pipePeerReadStream(peerId, inboundStream.source).catch((err) => this.log(err));
      }
      /**
       * Add a peer to the router
       */
      addPeer(peerId, direction, addr) {
          const id = peerId.toString();
          if (!this.peers.has(id)) {
              this.log('new peer %p', peerId);
              this.peers.add(id);
              // Add to peer scoring
              this.score.addPeer(id);
              const currentIP = multiaddrToIPStr(addr);
              if (currentIP !== null) {
                  this.score.addIP(id, currentIP);
              }
              else {
                  this.log('Added peer has no IP in current address %s %s', id, addr.toString());
              }
              // track the connection direction. Don't allow to unset outbound
              if (!this.outbound.has(id)) {
                  this.outbound.set(id, direction === 'outbound');
              }
          }
      }
      /**
       * Removes a peer from the router
       */
      removePeer(peerId) {
          const id = peerId.toString();
          if (!this.peers.has(id)) {
              return;
          }
          // delete peer
          this.log('delete peer %p', peerId);
          this.peers.delete(id);
          const outboundStream = this.streamsOutbound.get(id);
          const inboundStream = this.streamsInbound.get(id);
          if (outboundStream) {
              this.metrics?.peersPerProtocol.inc({ protocol: outboundStream.protocol }, -1);
          }
          // close streams
          outboundStream?.close();
          inboundStream?.close();
          // remove streams
          this.streamsOutbound.delete(id);
          this.streamsInbound.delete(id);
          // remove peer from topics map
          for (const peers of this.topics.values()) {
              peers.delete(id);
          }
          // Remove this peer from the mesh
          for (const [topicStr, peers] of this.mesh) {
              if (peers.delete(id) === true) {
                  this.metrics?.onRemoveFromMesh(topicStr, ChurnReason.Dc, 1);
              }
          }
          // Remove this peer from the fanout
          for (const peers of this.fanout.values()) {
              peers.delete(id);
          }
          // Remove from floodsubPeers
          this.floodsubPeers.delete(id);
          // Remove from gossip mapping
          this.gossip.delete(id);
          // Remove from control mapping
          this.control.delete(id);
          // Remove from backoff mapping
          this.outbound.delete(id);
          // Remove from peer scoring
          this.score.removePeer(id);
          this.acceptFromWhitelist.delete(id);
      }
      // API METHODS
      get started() {
          return this.status.code === GossipStatusCode.started;
      }
      /**
       * Get a the peer-ids in a topic mesh
       */
      getMeshPeers(topic) {
          const peersInTopic = this.mesh.get(topic);
          return peersInTopic ? Array.from(peersInTopic) : [];
      }
      /**
       * Get a list of the peer-ids that are subscribed to one topic.
       */
      getSubscribers(topic) {
          const peersInTopic = this.topics.get(topic);
          return (peersInTopic ? Array.from(peersInTopic) : []).map((str) => peerIdFromString(str));
      }
      /**
       * Get the list of topics which the peer is subscribed to.
       */
      getTopics() {
          return Array.from(this.subscriptions);
      }
      // TODO: Reviewing Pubsub API
      // MESSAGE METHODS
      /**
       * Responsible for processing each RPC message received by other peers.
       */
      async pipePeerReadStream(peerId, stream) {
          try {
              await pipe(stream, async (source) => {
                  for await (const data of source) {
                      try {
                          // TODO: Check max gossip message size, before decodeRpc()
                          const rpcBytes = data.subarray();
                          // Note: This function may throw, it must be wrapped in a try {} catch {} to prevent closing the stream.
                          // TODO: What should we do if the entire RPC is invalid?
                          const rpc = decodeRpc(rpcBytes, this.decodeRpcLimits);
                          this.metrics?.onRpcRecv(rpc, rpcBytes.length);
                          // Since processRpc may be overridden entirely in unsafe ways,
                          // the simplest/safest option here is to wrap in a function and capture all errors
                          // to prevent a top-level unhandled exception
                          // This processing of rpc messages should happen without awaiting full validation/execution of prior messages
                          if (this.opts.awaitRpcHandler) {
                              try {
                                  await this.handleReceivedRpc(peerId, rpc);
                              }
                              catch (err) {
                                  this.metrics?.onRpcRecvError();
                                  this.log(err);
                              }
                          }
                          else {
                              this.handleReceivedRpc(peerId, rpc).catch((err) => {
                                  this.metrics?.onRpcRecvError();
                                  this.log(err);
                              });
                          }
                      }
                      catch (e) {
                          this.metrics?.onRpcDataError();
                          this.log(e);
                      }
                  }
              });
          }
          catch (err) {
              this.metrics?.onPeerReadStreamError();
              this.handlePeerReadStreamError(err, peerId);
          }
      }
      /**
       * Handle error when read stream pipe throws, less of the functional use but more
       * to for testing purposes to spy on the error handling
       * */
      handlePeerReadStreamError(err, peerId) {
          this.log.error(err);
          this.onPeerDisconnected(peerId);
      }
      /**
       * Handles an rpc request from a peer
       */
      async handleReceivedRpc(from, rpc) {
          // Check if peer is graylisted in which case we ignore the event
          if (!this.acceptFrom(from.toString())) {
              this.log('received message from unacceptable peer %p', from);
              this.metrics?.rpcRecvNotAccepted.inc();
              return;
          }
          const subscriptions = rpc.subscriptions ? rpc.subscriptions.length : 0;
          const messages = rpc.messages ? rpc.messages.length : 0;
          let ihave = 0;
          let iwant = 0;
          let graft = 0;
          let prune = 0;
          if (rpc.control) {
              if (rpc.control.ihave)
                  ihave = rpc.control.ihave.length;
              if (rpc.control.iwant)
                  iwant = rpc.control.iwant.length;
              if (rpc.control.graft)
                  graft = rpc.control.graft.length;
              if (rpc.control.prune)
                  prune = rpc.control.prune.length;
          }
          this.log(`rpc.from ${from.toString()} subscriptions ${subscriptions} messages ${messages} ihave ${ihave} iwant ${iwant} graft ${graft} prune ${prune}`);
          // Handle received subscriptions
          if (rpc.subscriptions && rpc.subscriptions.length > 0) {
              // update peer subscriptions
              const subscriptions = [];
              rpc.subscriptions.forEach((subOpt) => {
                  const topic = subOpt.topic;
                  const subscribe = subOpt.subscribe === true;
                  if (topic != null) {
                      if (this.allowedTopics && !this.allowedTopics.has(topic)) {
                          // Not allowed: subscription data-structures are not bounded by topic count
                          // TODO: Should apply behaviour penalties?
                          return;
                      }
                      this.handleReceivedSubscription(from, topic, subscribe);
                      subscriptions.push({ topic, subscribe });
                  }
              });
              this.dispatchEvent(new CustomEvent('subscription-change', {
                  detail: { peerId: from, subscriptions }
              }));
          }
          // Handle messages
          // TODO: (up to limit)
          if (rpc.messages) {
              for (const message of rpc.messages) {
                  if (this.allowedTopics && !this.allowedTopics.has(message.topic)) {
                      // Not allowed: message cache data-structures are not bounded by topic count
                      // TODO: Should apply behaviour penalties?
                      continue;
                  }
                  const handleReceivedMessagePromise = this.handleReceivedMessage(from, message)
                      // Should never throw, but handle just in case
                      .catch((err) => {
                      this.metrics?.onMsgRecvError(message.topic);
                      this.log(err);
                  });
                  if (this.opts.awaitRpcMessageHandler) {
                      await handleReceivedMessagePromise;
                  }
              }
          }
          // Handle control messages
          if (rpc.control) {
              await this.handleControlMessage(from.toString(), rpc.control);
          }
      }
      /**
       * Handles a subscription change from a peer
       */
      handleReceivedSubscription(from, topic, subscribe) {
          this.log('subscription update from %p topic %s', from, topic);
          let topicSet = this.topics.get(topic);
          if (topicSet == null) {
              topicSet = new Set();
              this.topics.set(topic, topicSet);
          }
          if (subscribe) {
              // subscribe peer to new topic
              topicSet.add(from.toString());
          }
          else {
              // unsubscribe from existing topic
              topicSet.delete(from.toString());
          }
          // TODO: rust-libp2p has A LOT more logic here
      }
      /**
       * Handles a newly received message from an RPC.
       * May forward to all peers in the mesh.
       */
      async handleReceivedMessage(from, rpcMsg) {
          this.metrics?.onMsgRecvPreValidation(rpcMsg.topic);
          const validationResult = await this.validateReceivedMessage(from, rpcMsg);
          this.metrics?.onMsgRecvResult(rpcMsg.topic, validationResult.code);
          switch (validationResult.code) {
              case MessageStatus.duplicate:
                  // Report the duplicate
                  this.score.duplicateMessage(from.toString(), validationResult.msgIdStr, rpcMsg.topic);
                  // due to the collision of fastMsgIdFn, 2 different messages may end up the same fastMsgId
                  // so we need to also mark the duplicate message as delivered or the promise is not resolved
                  // and peer gets penalized. See https://github.com/ChainSafe/js-libp2p-gossipsub/pull/385
                  this.gossipTracer.deliverMessage(validationResult.msgIdStr, true);
                  this.mcache.observeDuplicate(validationResult.msgIdStr, from.toString());
                  return;
              case MessageStatus.invalid:
                  // invalid messages received
                  // metrics.register_invalid_message(&raw_message.topic)
                  // Tell peer_score about reject
                  // Reject the original source, and any duplicates we've seen from other peers.
                  if (validationResult.msgIdStr) {
                      const msgIdStr = validationResult.msgIdStr;
                      this.score.rejectMessage(from.toString(), msgIdStr, rpcMsg.topic, validationResult.reason);
                      this.gossipTracer.rejectMessage(msgIdStr, validationResult.reason);
                  }
                  else {
                      this.score.rejectInvalidMessage(from.toString(), rpcMsg.topic);
                  }
                  this.metrics?.onMsgRecvInvalid(rpcMsg.topic, validationResult);
                  return;
              case MessageStatus.valid:
                  // Tells score that message arrived (but is maybe not fully validated yet).
                  // Consider the message as delivered for gossip promises.
                  this.score.validateMessage(validationResult.messageId.msgIdStr);
                  this.gossipTracer.deliverMessage(validationResult.messageId.msgIdStr);
                  // Add the message to our memcache
                  // if no validation is required, mark the message as validated
                  this.mcache.put(validationResult.messageId, rpcMsg, !this.opts.asyncValidation);
                  // Dispatch the message to the user if we are subscribed to the topic
                  if (this.subscriptions.has(rpcMsg.topic)) {
                      const isFromSelf = this.components.peerId.equals(from);
                      if (!isFromSelf || this.opts.emitSelf) {
                          super.dispatchEvent(new CustomEvent('gossipsub:message', {
                              detail: {
                                  propagationSource: from,
                                  msgId: validationResult.messageId.msgIdStr,
                                  msg: validationResult.msg
                              }
                          }));
                          // TODO: Add option to switch between emit per topic or all messages in one
                          super.dispatchEvent(new CustomEvent('message', { detail: validationResult.msg }));
                      }
                  }
                  // Forward the message to mesh peers, if no validation is required
                  // If asyncValidation is ON, expect the app layer to call reportMessageValidationResult(), then forward
                  if (!this.opts.asyncValidation) {
                      // TODO: in rust-libp2p
                      // .forward_msg(&msg_id, raw_message, Some(propagation_source))
                      this.forwardMessage(validationResult.messageId.msgIdStr, rpcMsg, from.toString());
                  }
          }
      }
      /**
       * Handles a newly received message from an RPC.
       * May forward to all peers in the mesh.
       */
      async validateReceivedMessage(propagationSource, rpcMsg) {
          // Fast message ID stuff
          const fastMsgIdStr = this.fastMsgIdFn?.(rpcMsg);
          const msgIdCached = fastMsgIdStr !== undefined ? this.fastMsgIdCache?.get(fastMsgIdStr) : undefined;
          if (msgIdCached) {
              // This message has been seen previously. Ignore it
              return { code: MessageStatus.duplicate, msgIdStr: msgIdCached };
          }
          // Perform basic validation on message and convert to RawGossipsubMessage for fastMsgIdFn()
          const validationResult = await validateToRawMessage(this.globalSignaturePolicy, rpcMsg);
          if (!validationResult.valid) {
              return { code: MessageStatus.invalid, reason: RejectReason.Error, error: validationResult.error };
          }
          const msg = validationResult.message;
          // Try and perform the data transform to the message. If it fails, consider it invalid.
          try {
              if (this.dataTransform) {
                  msg.data = this.dataTransform.inboundTransform(rpcMsg.topic, msg.data);
              }
          }
          catch (e) {
              this.log('Invalid message, transform failed', e);
              return { code: MessageStatus.invalid, reason: RejectReason.Error, error: ValidateError.TransformFailed };
          }
          // TODO: Check if message is from a blacklisted source or propagation origin
          // - Reject any message from a blacklisted peer
          // - Also reject any message that originated from a blacklisted peer
          // - reject messages claiming to be from ourselves but not locally published
          // Calculate the message id on the transformed data.
          const msgId = await this.msgIdFn(msg);
          const msgIdStr = this.msgIdToStrFn(msgId);
          const messageId = { msgId, msgIdStr };
          // Add the message to the duplicate caches
          if (fastMsgIdStr !== undefined && this.fastMsgIdCache) {
              const collision = this.fastMsgIdCache.put(fastMsgIdStr, msgIdStr);
              if (collision) {
                  this.metrics?.fastMsgIdCacheCollision.inc();
              }
          }
          if (this.seenCache.has(msgIdStr)) {
              return { code: MessageStatus.duplicate, msgIdStr };
          }
          else {
              this.seenCache.put(msgIdStr);
          }
          // (Optional) Provide custom validation here with dynamic validators per topic
          // NOTE: This custom topicValidator() must resolve fast (< 100ms) to allow scores
          // to not penalize peers for long validation times.
          const topicValidator = this.topicValidators.get(rpcMsg.topic);
          if (topicValidator != null) {
              let acceptance;
              // Use try {} catch {} in case topicValidator() is synchronous
              try {
                  acceptance = await topicValidator(propagationSource, msg);
              }
              catch (e) {
                  const errCode = e.code;
                  if (errCode === ERR_TOPIC_VALIDATOR_IGNORE)
                      acceptance = TopicValidatorResult.Ignore;
                  if (errCode === ERR_TOPIC_VALIDATOR_REJECT)
                      acceptance = TopicValidatorResult.Reject;
                  else
                      acceptance = TopicValidatorResult.Ignore;
              }
              if (acceptance !== TopicValidatorResult.Accept) {
                  return { code: MessageStatus.invalid, reason: rejectReasonFromAcceptance(acceptance), msgIdStr };
              }
          }
          return { code: MessageStatus.valid, messageId, msg };
      }
      /**
       * Return score of a peer.
       */
      getScore(peerId) {
          return this.score.score(peerId);
      }
      /**
       * Send an rpc object to a peer with subscriptions
       */
      sendSubscriptions(toPeer, topics, subscribe) {
          this.sendRpc(toPeer, {
              subscriptions: topics.map((topic) => ({ topic, subscribe }))
          });
      }
      /**
       * Handles an rpc control message from a peer
       */
      async handleControlMessage(id, controlMsg) {
          if (controlMsg === undefined) {
              return;
          }
          const iwant = controlMsg.ihave ? this.handleIHave(id, controlMsg.ihave) : [];
          const ihave = controlMsg.iwant ? this.handleIWant(id, controlMsg.iwant) : [];
          const prune = controlMsg.graft ? await this.handleGraft(id, controlMsg.graft) : [];
          controlMsg.prune && (await this.handlePrune(id, controlMsg.prune));
          if (!iwant.length && !ihave.length && !prune.length) {
              return;
          }
          const sent = this.sendRpc(id, { messages: ihave, control: { iwant, prune } });
          const iwantMessageIds = iwant[0]?.messageIDs;
          if (iwantMessageIds) {
              if (sent) {
                  this.gossipTracer.addPromise(id, iwantMessageIds);
              }
              else {
                  this.metrics?.iwantPromiseUntracked.inc(1);
              }
          }
      }
      /**
       * Whether to accept a message from a peer
       */
      acceptFrom(id) {
          if (this.direct.has(id)) {
              return true;
          }
          const now = Date.now();
          const entry = this.acceptFromWhitelist.get(id);
          if (entry && entry.messagesAccepted < ACCEPT_FROM_WHITELIST_MAX_MESSAGES && entry.acceptUntil >= now) {
              entry.messagesAccepted += 1;
              return true;
          }
          const score = this.score.score(id);
          if (score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE) {
              // peer is unlikely to be able to drop its score to `graylistThreshold`
              // after 128 messages or 1s
              this.acceptFromWhitelist.set(id, {
                  messagesAccepted: 0,
                  acceptUntil: now + ACCEPT_FROM_WHITELIST_DURATION_MS
              });
          }
          else {
              this.acceptFromWhitelist.delete(id);
          }
          return score >= this.opts.scoreThresholds.graylistThreshold;
      }
      /**
       * Handles IHAVE messages
       */
      handleIHave(id, ihave) {
          if (!ihave.length) {
              return [];
          }
          // we ignore IHAVE gossip from any peer whose score is below the gossips threshold
          const score = this.score.score(id);
          if (score < this.opts.scoreThresholds.gossipThreshold) {
              this.log('IHAVE: ignoring peer %s with score below threshold [ score = %d ]', id, score);
              this.metrics?.ihaveRcvIgnored.inc({ reason: IHaveIgnoreReason.LowScore });
              return [];
          }
          // IHAVE flood protection
          const peerhave = (this.peerhave.get(id) ?? 0) + 1;
          this.peerhave.set(id, peerhave);
          if (peerhave > GossipsubMaxIHaveMessages) {
              this.log('IHAVE: peer %s has advertised too many times (%d) within this heartbeat interval; ignoring', id, peerhave);
              this.metrics?.ihaveRcvIgnored.inc({ reason: IHaveIgnoreReason.MaxIhave });
              return [];
          }
          const iasked = this.iasked.get(id) ?? 0;
          if (iasked >= GossipsubMaxIHaveLength) {
              this.log('IHAVE: peer %s has already advertised too many messages (%d); ignoring', id, iasked);
              this.metrics?.ihaveRcvIgnored.inc({ reason: IHaveIgnoreReason.MaxIasked });
              return [];
          }
          // string msgId => msgId
          const iwant = new Map();
          ihave.forEach(({ topicID, messageIDs }) => {
              if (!topicID || !messageIDs || !this.mesh.has(topicID)) {
                  return;
              }
              let idonthave = 0;
              messageIDs.forEach((msgId) => {
                  const msgIdStr = this.msgIdToStrFn(msgId);
                  if (!this.seenCache.has(msgIdStr)) {
                      iwant.set(msgIdStr, msgId);
                      idonthave++;
                  }
              });
              this.metrics?.onIhaveRcv(topicID, messageIDs.length, idonthave);
          });
          if (!iwant.size) {
              return [];
          }
          let iask = iwant.size;
          if (iask + iasked > GossipsubMaxIHaveLength) {
              iask = GossipsubMaxIHaveLength - iasked;
          }
          this.log('IHAVE: Asking for %d out of %d messages from %s', iask, iwant.size, id);
          let iwantList = Array.from(iwant.values());
          // ask in random order
          shuffle(iwantList);
          // truncate to the messages we are actually asking for and update the iasked counter
          iwantList = iwantList.slice(0, iask);
          this.iasked.set(id, iasked + iask);
          // do not add gossipTracer promise here until a successful sendRpc()
          return [
              {
                  messageIDs: iwantList
              }
          ];
      }
      /**
       * Handles IWANT messages
       * Returns messages to send back to peer
       */
      handleIWant(id, iwant) {
          if (!iwant.length) {
              return [];
          }
          // we don't respond to IWANT requests from any per whose score is below the gossip threshold
          const score = this.score.score(id);
          if (score < this.opts.scoreThresholds.gossipThreshold) {
              this.log('IWANT: ignoring peer %s with score below threshold [score = %d]', id, score);
              return [];
          }
          const ihave = new Map();
          const iwantByTopic = new Map();
          let iwantDonthave = 0;
          iwant.forEach(({ messageIDs }) => {
              messageIDs &&
                  messageIDs.forEach((msgId) => {
                      const msgIdStr = this.msgIdToStrFn(msgId);
                      const entry = this.mcache.getWithIWantCount(msgIdStr, id);
                      if (entry == null) {
                          iwantDonthave++;
                          return;
                      }
                      iwantByTopic.set(entry.msg.topic, 1 + (iwantByTopic.get(entry.msg.topic) ?? 0));
                      if (entry.count > GossipsubGossipRetransmission) {
                          this.log('IWANT: Peer %s has asked for message %s too many times: ignoring request', id, msgId);
                          return;
                      }
                      ihave.set(msgIdStr, entry.msg);
                  });
          });
          this.metrics?.onIwantRcv(iwantByTopic, iwantDonthave);
          if (!ihave.size) {
              this.log('IWANT: Could not provide any wanted messages to %s', id);
              return [];
          }
          this.log('IWANT: Sending %d messages to %s', ihave.size, id);
          return Array.from(ihave.values());
      }
      /**
       * Handles Graft messages
       */
      async handleGraft(id, graft) {
          const prune = [];
          const score = this.score.score(id);
          const now = Date.now();
          let doPX = this.opts.doPX;
          graft.forEach(({ topicID }) => {
              if (!topicID) {
                  return;
              }
              const peersInMesh = this.mesh.get(topicID);
              if (!peersInMesh) {
                  // don't do PX when there is an unknown topic to avoid leaking our peers
                  doPX = false;
                  // spam hardening: ignore GRAFTs for unknown topics
                  return;
              }
              // check if peer is already in the mesh; if so do nothing
              if (peersInMesh.has(id)) {
                  return;
              }
              // we don't GRAFT to/from direct peers; complain loudly if this happens
              if (this.direct.has(id)) {
                  this.log('GRAFT: ignoring request from direct peer %s', id);
                  // this is possibly a bug from a non-reciprical configuration; send a PRUNE
                  prune.push(topicID);
                  // but don't px
                  doPX = false;
                  return;
              }
              // make sure we are not backing off that peer
              const expire = this.backoff.get(topicID)?.get(id);
              if (typeof expire === 'number' && now < expire) {
                  this.log('GRAFT: ignoring backed off peer %s', id);
                  // add behavioral penalty
                  this.score.addPenalty(id, 1, ScorePenalty.GraftBackoff);
                  // no PX
                  doPX = false;
                  // check the flood cutoff -- is the GRAFT coming too fast?
                  const floodCutoff = expire + this.opts.graftFloodThreshold - this.opts.pruneBackoff;
                  if (now < floodCutoff) {
                      // extra penalty
                      this.score.addPenalty(id, 1, ScorePenalty.GraftBackoff);
                  }
                  // refresh the backoff
                  this.addBackoff(id, topicID);
                  prune.push(topicID);
                  return;
              }
              // check the score
              if (score < 0) {
                  // we don't GRAFT peers with negative score
                  this.log('GRAFT: ignoring peer %s with negative score: score=%d, topic=%s', id, score, topicID);
                  // we do send them PRUNE however, because it's a matter of protocol correctness
                  prune.push(topicID);
                  // but we won't PX to them
                  doPX = false;
                  // add/refresh backoff so that we don't reGRAFT too early even if the score decays
                  this.addBackoff(id, topicID);
                  return;
              }
              // check the number of mesh peers; if it is at (or over) Dhi, we only accept grafts
              // from peers with outbound connections; this is a defensive check to restrict potential
              // mesh takeover attacks combined with love bombing
              if (peersInMesh.size >= this.opts.Dhi && !this.outbound.get(id)) {
                  prune.push(topicID);
                  this.addBackoff(id, topicID);
                  return;
              }
              this.log('GRAFT: Add mesh link from %s in %s', id, topicID);
              this.score.graft(id, topicID);
              peersInMesh.add(id);
              this.metrics?.onAddToMesh(topicID, InclusionReason.Subscribed, 1);
          });
          if (!prune.length) {
              return [];
          }
          const onUnsubscribe = false;
          return await Promise.all(prune.map((topic) => this.makePrune(id, topic, doPX, onUnsubscribe)));
      }
      /**
       * Handles Prune messages
       */
      async handlePrune(id, prune) {
          const score = this.score.score(id);
          for (const { topicID, backoff, peers } of prune) {
              if (topicID == null) {
                  continue;
              }
              const peersInMesh = this.mesh.get(topicID);
              if (!peersInMesh) {
                  return;
              }
              this.log('PRUNE: Remove mesh link to %s in %s', id, topicID);
              this.score.prune(id, topicID);
              if (peersInMesh.has(id)) {
                  peersInMesh.delete(id);
                  this.metrics?.onRemoveFromMesh(topicID, ChurnReason.Prune, 1);
              }
              // is there a backoff specified by the peer? if so obey it
              if (typeof backoff === 'number' && backoff > 0) {
                  this.doAddBackoff(id, topicID, backoff * 1000);
              }
              else {
                  this.addBackoff(id, topicID);
              }
              // PX
              if (peers && peers.length) {
                  // we ignore PX from peers with insufficient scores
                  if (score < this.opts.scoreThresholds.acceptPXThreshold) {
                      this.log('PRUNE: ignoring PX from peer %s with insufficient score [score = %d, topic = %s]', id, score, topicID);
                      continue;
                  }
                  await this.pxConnect(peers);
              }
          }
      }
      /**
       * Add standard backoff log for a peer in a topic
       */
      addBackoff(id, topic) {
          this.doAddBackoff(id, topic, this.opts.pruneBackoff);
      }
      /**
       * Add backoff expiry interval for a peer in a topic
       *
       * @param id
       * @param topic
       * @param intervalMs - backoff duration in milliseconds
       */
      doAddBackoff(id, topic, intervalMs) {
          let backoff = this.backoff.get(topic);
          if (!backoff) {
              backoff = new Map();
              this.backoff.set(topic, backoff);
          }
          const expire = Date.now() + intervalMs;
          const existingExpire = backoff.get(id) ?? 0;
          if (existingExpire < expire) {
              backoff.set(id, expire);
          }
      }
      /**
       * Apply penalties from broken IHAVE/IWANT promises
       */
      applyIwantPenalties() {
          this.gossipTracer.getBrokenPromises().forEach((count, p) => {
              this.log("peer %s didn't follow up in %d IWANT requests; adding penalty", p, count);
              this.score.addPenalty(p, count, ScorePenalty.BrokenPromise);
          });
      }
      /**
       * Clear expired backoff expiries
       */
      clearBackoff() {
          // we only clear once every GossipsubPruneBackoffTicks ticks to avoid iterating over the maps too much
          if (this.heartbeatTicks % GossipsubPruneBackoffTicks !== 0) {
              return;
          }
          const now = Date.now();
          this.backoff.forEach((backoff, topic) => {
              backoff.forEach((expire, id) => {
                  // add some slack time to the expiration, see https://github.com/libp2p/specs/pull/289
                  if (expire + BACKOFF_SLACK * this.opts.heartbeatInterval < now) {
                      backoff.delete(id);
                  }
              });
              if (backoff.size === 0) {
                  this.backoff.delete(topic);
              }
          });
      }
      /**
       * Maybe reconnect to direct peers
       */
      async directConnect() {
          const toconnect = [];
          this.direct.forEach((id) => {
              if (!this.streamsOutbound.has(id)) {
                  toconnect.push(id);
              }
          });
          await Promise.all(toconnect.map(async (id) => await this.connect(id)));
      }
      /**
       * Maybe attempt connection given signed peer records
       */
      async pxConnect(peers) {
          if (peers.length > this.opts.prunePeers) {
              shuffle(peers);
              peers = peers.slice(0, this.opts.prunePeers);
          }
          const toconnect = [];
          await Promise.all(peers.map(async (pi) => {
              if (!pi.peerID) {
                  return;
              }
              const peer = peerIdFromBytes(pi.peerID);
              const p = peer.toString();
              if (this.peers.has(p)) {
                  return;
              }
              if (!pi.signedPeerRecord) {
                  toconnect.push(p);
                  return;
              }
              // The peer sent us a signed record
              // This is not a record from the peer who sent the record, but another peer who is connected with it
              // Ensure that it is valid
              try {
                  if (!(await this.components.peerStore.consumePeerRecord(pi.signedPeerRecord, peer))) {
                      this.log('bogus peer record obtained through px: could not add peer record to address book');
                      return;
                  }
                  toconnect.push(p);
              }
              catch (e) {
                  this.log('bogus peer record obtained through px: invalid signature or not a peer record');
              }
          }));
          if (!toconnect.length) {
              return;
          }
          await Promise.all(toconnect.map(async (id) => await this.connect(id)));
      }
      /**
       * Connect to a peer using the gossipsub protocol
       */
      async connect(id) {
          this.log('Initiating connection with %s', id);
          const peerId = peerIdFromString(id);
          const connection = await this.components.connectionManager.openConnection(peerId);
          for (const multicodec of this.multicodecs) {
              for (const topology of this.components.registrar.getTopologies(multicodec)) {
                  topology.onConnect(peerId, connection);
              }
          }
      }
      /**
       * Subscribes to a topic
       */
      subscribe(topic) {
          if (this.status.code !== GossipStatusCode.started) {
              throw new Error('Pubsub has not started');
          }
          if (!this.subscriptions.has(topic)) {
              this.subscriptions.add(topic);
              for (const peerId of this.peers.keys()) {
                  this.sendSubscriptions(peerId, [topic], true);
              }
          }
          this.join(topic);
      }
      /**
       * Unsubscribe to a topic
       */
      unsubscribe(topic) {
          if (this.status.code !== GossipStatusCode.started) {
              throw new Error('Pubsub is not started');
          }
          const wasSubscribed = this.subscriptions.delete(topic);
          this.log('unsubscribe from %s - am subscribed %s', topic, wasSubscribed);
          if (wasSubscribed) {
              for (const peerId of this.peers.keys()) {
                  this.sendSubscriptions(peerId, [topic], false);
              }
          }
          this.leave(topic);
      }
      /**
       * Join topic
       */
      join(topic) {
          if (this.status.code !== GossipStatusCode.started) {
              throw new Error('Gossipsub has not started');
          }
          // if we are already in the mesh, return
          if (this.mesh.has(topic)) {
              return;
          }
          this.log('JOIN %s', topic);
          this.metrics?.onJoin(topic);
          const toAdd = new Set();
          const backoff = this.backoff.get(topic);
          // check if we have mesh_n peers in fanout[topic] and add them to the mesh if we do,
          // removing the fanout entry.
          const fanoutPeers = this.fanout.get(topic);
          if (fanoutPeers) {
              // Remove fanout entry and the last published time
              this.fanout.delete(topic);
              this.fanoutLastpub.delete(topic);
              // remove explicit peers, peers with negative scores, and backoffed peers
              fanoutPeers.forEach((id) => {
                  if (!this.direct.has(id) && this.score.score(id) >= 0 && (!backoff || !backoff.has(id))) {
                      toAdd.add(id);
                  }
              });
              this.metrics?.onAddToMesh(topic, InclusionReason.Fanout, toAdd.size);
          }
          // check if we need to get more peers, which we randomly select
          if (toAdd.size < this.opts.D) {
              const fanoutCount = toAdd.size;
              const newPeers = this.getRandomGossipPeers(topic, this.opts.D, (id) => 
              // filter direct peers and peers with negative score
              !toAdd.has(id) && !this.direct.has(id) && this.score.score(id) >= 0 && (!backoff || !backoff.has(id)));
              newPeers.forEach((peer) => {
                  toAdd.add(peer);
              });
              this.metrics?.onAddToMesh(topic, InclusionReason.Random, toAdd.size - fanoutCount);
          }
          this.mesh.set(topic, toAdd);
          toAdd.forEach((id) => {
              this.log('JOIN: Add mesh link to %s in %s', id, topic);
              this.sendGraft(id, topic);
              // rust-libp2p
              // - peer_score.graft()
              // - Self::control_pool_add()
              // - peer_added_to_mesh()
          });
      }
      /**
       * Leave topic
       */
      leave(topic) {
          if (this.status.code !== GossipStatusCode.started) {
              throw new Error('Gossipsub has not started');
          }
          this.log('LEAVE %s', topic);
          this.metrics?.onLeave(topic);
          // Send PRUNE to mesh peers
          const meshPeers = this.mesh.get(topic);
          if (meshPeers) {
              Promise.all(Array.from(meshPeers).map(async (id) => {
                  this.log('LEAVE: Remove mesh link to %s in %s', id, topic);
                  return await this.sendPrune(id, topic);
              })).catch((err) => {
                  this.log('Error sending prunes to mesh peers', err);
              });
              this.mesh.delete(topic);
          }
      }
      selectPeersToForward(topic, propagationSource, excludePeers) {
          const tosend = new Set();
          // Add explicit peers
          const peersInTopic = this.topics.get(topic);
          if (peersInTopic) {
              this.direct.forEach((peer) => {
                  if (peersInTopic.has(peer) && propagationSource !== peer && !excludePeers?.has(peer)) {
                      tosend.add(peer);
                  }
              });
              // As of Mar 2022, spec + golang-libp2p include this while rust-libp2p does not
              // rust-libp2p: https://github.com/libp2p/rust-libp2p/blob/6cc3b4ec52c922bfcf562a29b5805c3150e37c75/protocols/gossipsub/src/behaviour.rs#L2693
              // spec: https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/gossipsub-v1.0.md?plain=1#L361
              this.floodsubPeers.forEach((peer) => {
                  if (peersInTopic.has(peer) &&
                      propagationSource !== peer &&
                      !excludePeers?.has(peer) &&
                      this.score.score(peer) >= this.opts.scoreThresholds.publishThreshold) {
                      tosend.add(peer);
                  }
              });
          }
          // add mesh peers
          const meshPeers = this.mesh.get(topic);
          if (meshPeers && meshPeers.size > 0) {
              meshPeers.forEach((peer) => {
                  if (propagationSource !== peer && !excludePeers?.has(peer)) {
                      tosend.add(peer);
                  }
              });
          }
          return tosend;
      }
      selectPeersToPublish(topic) {
          const tosend = new Set();
          const tosendCount = {
              direct: 0,
              floodsub: 0,
              mesh: 0,
              fanout: 0
          };
          const peersInTopic = this.topics.get(topic);
          if (peersInTopic) {
              // flood-publish behavior
              // send to direct peers and _all_ peers meeting the publishThreshold
              if (this.opts.floodPublish) {
                  peersInTopic.forEach((id) => {
                      if (this.direct.has(id)) {
                          tosend.add(id);
                          tosendCount.direct++;
                      }
                      else if (this.score.score(id) >= this.opts.scoreThresholds.publishThreshold) {
                          tosend.add(id);
                          tosendCount.floodsub++;
                      }
                  });
              }
              else {
                  // non-flood-publish behavior
                  // send to direct peers, subscribed floodsub peers
                  // and some mesh peers above publishThreshold
                  // direct peers (if subscribed)
                  this.direct.forEach((id) => {
                      if (peersInTopic.has(id)) {
                          tosend.add(id);
                          tosendCount.direct++;
                      }
                  });
                  // floodsub peers
                  // Note: if there are no floodsub peers, we save a loop through peersInTopic Map
                  this.floodsubPeers.forEach((id) => {
                      if (peersInTopic.has(id) && this.score.score(id) >= this.opts.scoreThresholds.publishThreshold) {
                          tosend.add(id);
                          tosendCount.floodsub++;
                      }
                  });
                  // Gossipsub peers handling
                  const meshPeers = this.mesh.get(topic);
                  if (meshPeers && meshPeers.size > 0) {
                      meshPeers.forEach((peer) => {
                          tosend.add(peer);
                          tosendCount.mesh++;
                      });
                  }
                  // We are not in the mesh for topic, use fanout peers
                  else {
                      const fanoutPeers = this.fanout.get(topic);
                      if (fanoutPeers && fanoutPeers.size > 0) {
                          fanoutPeers.forEach((peer) => {
                              tosend.add(peer);
                              tosendCount.fanout++;
                          });
                      }
                      // We have no fanout peers, select mesh_n of them and add them to the fanout
                      else {
                          // If we are not in the fanout, then pick peers in topic above the publishThreshold
                          const newFanoutPeers = this.getRandomGossipPeers(topic, this.opts.D, (id) => {
                              return this.score.score(id) >= this.opts.scoreThresholds.publishThreshold;
                          });
                          if (newFanoutPeers.size > 0) {
                              // eslint-disable-line max-depth
                              this.fanout.set(topic, newFanoutPeers);
                              newFanoutPeers.forEach((peer) => {
                                  // eslint-disable-line max-depth
                                  tosend.add(peer);
                                  tosendCount.fanout++;
                              });
                          }
                      }
                      // We are publishing to fanout peers - update the time we published
                      this.fanoutLastpub.set(topic, Date.now());
                  }
              }
          }
          return { tosend, tosendCount };
      }
      /**
       * Forwards a message from our peers.
       *
       * For messages published by us (the app layer), this class uses `publish`
       */
      forwardMessage(msgIdStr, rawMsg, propagationSource, excludePeers) {
          // message is fully validated inform peer_score
          if (propagationSource) {
              this.score.deliverMessage(propagationSource, msgIdStr, rawMsg.topic);
          }
          const tosend = this.selectPeersToForward(rawMsg.topic, propagationSource, excludePeers);
          // Note: Don't throw if tosend is empty, we can have a mesh with a single peer
          // forward the message to peers
          tosend.forEach((id) => {
              // sendRpc may mutate RPC message on piggyback, create a new message for each peer
              this.sendRpc(id, { messages: [rawMsg] });
          });
          this.metrics?.onForwardMsg(rawMsg.topic, tosend.size);
      }
      /**
       * App layer publishes a message to peers, return number of peers this message is published to
       * Note: `async` due to crypto only if `StrictSign`, otherwise it's a sync fn.
       *
       * For messages not from us, this class uses `forwardMessage`.
       */
      async publish(topic, data, opts) {
          const transformedData = this.dataTransform ? this.dataTransform.outboundTransform(topic, data) : data;
          if (this.publishConfig == null) {
              throw Error('PublishError.Uninitialized');
          }
          // Prepare raw message with user's publishConfig
          const { raw: rawMsg, msg } = await buildRawMessage(this.publishConfig, topic, data, transformedData);
          // calculate the message id from the un-transformed data
          const msgId = await this.msgIdFn(msg);
          const msgIdStr = this.msgIdToStrFn(msgId);
          // Current publish opt takes precedence global opts, while preserving false value
          const ignoreDuplicatePublishError = opts?.ignoreDuplicatePublishError ?? this.opts.ignoreDuplicatePublishError;
          if (this.seenCache.has(msgIdStr)) {
              // This message has already been seen. We don't re-publish messages that have already
              // been published on the network.
              if (ignoreDuplicatePublishError) {
                  this.metrics?.onPublishDuplicateMsg(topic);
                  return { recipients: [] };
              }
              throw Error('PublishError.Duplicate');
          }
          const { tosend, tosendCount } = this.selectPeersToPublish(topic);
          const willSendToSelf = this.opts.emitSelf === true && this.subscriptions.has(topic);
          // Current publish opt takes precedence global opts, while preserving false value
          const allowPublishToZeroPeers = opts?.allowPublishToZeroPeers ?? this.opts.allowPublishToZeroPeers;
          if (tosend.size === 0 && !allowPublishToZeroPeers && !willSendToSelf) {
              throw Error('PublishError.InsufficientPeers');
          }
          // If the message isn't a duplicate and we have sent it to some peers add it to the
          // duplicate cache and memcache.
          this.seenCache.put(msgIdStr);
          // all published messages are valid
          this.mcache.put({ msgId, msgIdStr }, rawMsg, true);
          // If the message is anonymous or has a random author add it to the published message ids cache.
          this.publishedMessageIds.put(msgIdStr);
          // Send to set of peers aggregated from direct, mesh, fanout
          for (const id of tosend) {
              // sendRpc may mutate RPC message on piggyback, create a new message for each peer
              const sent = this.sendRpc(id, { messages: [rawMsg] });
              // did not actually send the message
              if (!sent) {
                  tosend.delete(id);
              }
          }
          this.metrics?.onPublishMsg(topic, tosendCount, tosend.size, rawMsg.data != null ? rawMsg.data.length : 0);
          // Dispatch the message to the user if we are subscribed to the topic
          if (willSendToSelf) {
              tosend.add(this.components.peerId.toString());
              super.dispatchEvent(new CustomEvent('gossipsub:message', {
                  detail: {
                      propagationSource: this.components.peerId,
                      msgId: msgIdStr,
                      msg
                  }
              }));
              // TODO: Add option to switch between emit per topic or all messages in one
              super.dispatchEvent(new CustomEvent('message', { detail: msg }));
          }
          return {
              recipients: Array.from(tosend.values()).map((str) => peerIdFromString(str))
          };
      }
      /**
       * This function should be called when `asyncValidation` is `true` after
       * the message got validated by the caller. Messages are stored in the `mcache` and
       * validation is expected to be fast enough that the messages should still exist in the cache.
       * There are three possible validation outcomes and the outcome is given in acceptance.
       *
       * If acceptance = `MessageAcceptance.Accept` the message will get propagated to the
       * network. The `propagation_source` parameter indicates who the message was received by and
       * will not be forwarded back to that peer.
       *
       * If acceptance = `MessageAcceptance.Reject` the message will be deleted from the memcache
       * and the P₄ penalty will be applied to the `propagationSource`.
       *
       * If acceptance = `MessageAcceptance.Ignore` the message will be deleted from the memcache
       * but no P₄ penalty will be applied.
       *
       * This function will return true if the message was found in the cache and false if was not
       * in the cache anymore.
       *
       * This should only be called once per message.
       */
      reportMessageValidationResult(msgId, propagationSource, acceptance) {
          let cacheEntry;
          if (acceptance === TopicValidatorResult.Accept) {
              cacheEntry = this.mcache.validate(msgId);
              if (cacheEntry != null) {
                  const { message: rawMsg, originatingPeers } = cacheEntry;
                  // message is fully validated inform peer_score
                  this.score.deliverMessage(propagationSource, msgId, rawMsg.topic);
                  this.forwardMessage(msgId, cacheEntry.message, propagationSource, originatingPeers);
              }
              // else, Message not in cache. Ignoring forwarding
          }
          // Not valid
          else {
              cacheEntry = this.mcache.remove(msgId);
              if (cacheEntry) {
                  const rejectReason = rejectReasonFromAcceptance(acceptance);
                  const { message: rawMsg, originatingPeers } = cacheEntry;
                  // Tell peer_score about reject
                  // Reject the original source, and any duplicates we've seen from other peers.
                  this.score.rejectMessage(propagationSource, msgId, rawMsg.topic, rejectReason);
                  for (const peer of originatingPeers) {
                      this.score.rejectMessage(peer, msgId, rawMsg.topic, rejectReason);
                  }
              }
              // else, Message not in cache. Ignoring forwarding
          }
          const firstSeenTimestampMs = this.score.messageFirstSeenTimestampMs(msgId);
          this.metrics?.onReportValidation(cacheEntry, acceptance, firstSeenTimestampMs);
      }
      /**
       * Sends a GRAFT message to a peer
       */
      sendGraft(id, topic) {
          const graft = [
              {
                  topicID: topic
              }
          ];
          this.sendRpc(id, { control: { graft } });
      }
      /**
       * Sends a PRUNE message to a peer
       */
      async sendPrune(id, topic) {
          // this is only called from leave() function
          const onUnsubscribe = true;
          const prune = [await this.makePrune(id, topic, this.opts.doPX, onUnsubscribe)];
          this.sendRpc(id, { control: { prune } });
      }
      /**
       * Send an rpc object to a peer
       */
      sendRpc(id, rpc) {
          const outboundStream = this.streamsOutbound.get(id);
          if (!outboundStream) {
              this.log(`Cannot send RPC to ${id} as there is no open stream to it available`);
              return false;
          }
          // piggyback control message retries
          const ctrl = this.control.get(id);
          if (ctrl) {
              this.piggybackControl(id, rpc, ctrl);
              this.control.delete(id);
          }
          // piggyback gossip
          const ihave = this.gossip.get(id);
          if (ihave) {
              this.piggybackGossip(id, rpc, ihave);
              this.gossip.delete(id);
          }
          const rpcBytes = RPC.encode(rpc).finish();
          try {
              outboundStream.push(rpcBytes);
          }
          catch (e) {
              this.log.error(`Cannot send rpc to ${id}`, e);
              // if the peer had control messages or gossip, re-attach
              if (ctrl) {
                  this.control.set(id, ctrl);
              }
              if (ihave) {
                  this.gossip.set(id, ihave);
              }
              return false;
          }
          this.metrics?.onRpcSent(rpc, rpcBytes.length);
          return true;
      }
      /** Mutates `outRpc` adding graft and prune control messages */
      piggybackControl(id, outRpc, ctrl) {
          if (ctrl.graft) {
              if (!outRpc.control)
                  outRpc.control = {};
              if (!outRpc.control.graft)
                  outRpc.control.graft = [];
              for (const graft of ctrl.graft) {
                  if (graft.topicID && this.mesh.get(graft.topicID)?.has(id)) {
                      outRpc.control.graft.push(graft);
                  }
              }
          }
          if (ctrl.prune) {
              if (!outRpc.control)
                  outRpc.control = {};
              if (!outRpc.control.prune)
                  outRpc.control.prune = [];
              for (const prune of ctrl.prune) {
                  if (prune.topicID && !this.mesh.get(prune.topicID)?.has(id)) {
                      outRpc.control.prune.push(prune);
                  }
              }
          }
      }
      /** Mutates `outRpc` adding ihave control messages */
      piggybackGossip(id, outRpc, ihave) {
          if (!outRpc.control)
              outRpc.control = {};
          outRpc.control.ihave = ihave;
      }
      /**
       * Send graft and prune messages
       *
       * @param tograft - peer id => topic[]
       * @param toprune - peer id => topic[]
       */
      async sendGraftPrune(tograft, toprune, noPX) {
          const doPX = this.opts.doPX;
          const onUnsubscribe = false;
          for (const [id, topics] of tograft) {
              const graft = topics.map((topicID) => ({ topicID }));
              let prune = [];
              // If a peer also has prunes, process them now
              const pruning = toprune.get(id);
              if (pruning) {
                  prune = await Promise.all(pruning.map(async (topicID) => await this.makePrune(id, topicID, doPX && !(noPX.get(id) ?? false), onUnsubscribe)));
                  toprune.delete(id);
              }
              this.sendRpc(id, { control: { graft, prune } });
          }
          for (const [id, topics] of toprune) {
              const prune = await Promise.all(topics.map(async (topicID) => await this.makePrune(id, topicID, doPX && !(noPX.get(id) ?? false), onUnsubscribe)));
              this.sendRpc(id, { control: { prune } });
          }
      }
      /**
       * Emits gossip - Send IHAVE messages to a random set of gossip peers
       */
      emitGossip(peersToGossipByTopic) {
          const gossipIDsByTopic = this.mcache.getGossipIDs(new Set(peersToGossipByTopic.keys()));
          for (const [topic, peersToGossip] of peersToGossipByTopic) {
              this.doEmitGossip(topic, peersToGossip, gossipIDsByTopic.get(topic) ?? []);
          }
      }
      /**
       * Send gossip messages to GossipFactor peers above threshold with a minimum of D_lazy
       * Peers are randomly selected from the heartbeat which exclude mesh + fanout peers
       * We also exclude direct peers, as there is no reason to emit gossip to them
       * @param topic
       * @param candidateToGossip - peers to gossip
       * @param messageIDs - message ids to gossip
       */
      doEmitGossip(topic, candidateToGossip, messageIDs) {
          if (!messageIDs.length) {
              return;
          }
          // shuffle to emit in random order
          shuffle(messageIDs);
          // if we are emitting more than GossipsubMaxIHaveLength ids, truncate the list
          if (messageIDs.length > GossipsubMaxIHaveLength) {
              // we do the truncation (with shuffling) per peer below
              this.log('too many messages for gossip; will truncate IHAVE list (%d messages)', messageIDs.length);
          }
          if (!candidateToGossip.size)
              return;
          let target = this.opts.Dlazy;
          const factor = GossipsubGossipFactor * candidateToGossip.size;
          let peersToGossip = candidateToGossip;
          if (factor > target) {
              target = factor;
          }
          if (target > peersToGossip.size) {
              target = peersToGossip.size;
          }
          else {
              // only shuffle if needed
              peersToGossip = shuffle(Array.from(peersToGossip)).slice(0, target);
          }
          // Emit the IHAVE gossip to the selected peers up to the target
          peersToGossip.forEach((id) => {
              let peerMessageIDs = messageIDs;
              if (messageIDs.length > GossipsubMaxIHaveLength) {
                  // shuffle and slice message IDs per peer so that we emit a different set for each peer
                  // we have enough reduncancy in the system that this will significantly increase the message
                  // coverage when we do truncate
                  peerMessageIDs = shuffle(peerMessageIDs.slice()).slice(0, GossipsubMaxIHaveLength);
              }
              this.pushGossip(id, {
                  topicID: topic,
                  messageIDs: peerMessageIDs
              });
          });
      }
      /**
       * Flush gossip and control messages
       */
      flush() {
          // send gossip first, which will also piggyback control
          for (const [peer, ihave] of this.gossip.entries()) {
              this.gossip.delete(peer);
              this.sendRpc(peer, { control: { ihave } });
          }
          // send the remaining control messages
          for (const [peer, control] of this.control.entries()) {
              this.control.delete(peer);
              this.sendRpc(peer, { control: { graft: control.graft, prune: control.prune } });
          }
      }
      /**
       * Adds new IHAVE messages to pending gossip
       */
      pushGossip(id, controlIHaveMsgs) {
          this.log('Add gossip to %s', id);
          const gossip = this.gossip.get(id) || [];
          this.gossip.set(id, gossip.concat(controlIHaveMsgs));
      }
      /**
       * Make a PRUNE control message for a peer in a topic
       */
      async makePrune(id, topic, doPX, onUnsubscribe) {
          this.score.prune(id, topic);
          if (this.streamsOutbound.get(id).protocol === GossipsubIDv10) {
              // Gossipsub v1.0 -- no backoff, the peer won't be able to parse it anyway
              return {
                  topicID: topic,
                  peers: []
              };
          }
          // backoff is measured in seconds
          // GossipsubPruneBackoff and GossipsubUnsubscribeBackoff are measured in milliseconds
          // The protobuf has it as a uint64
          const backoffMs = onUnsubscribe ? this.opts.unsubcribeBackoff : this.opts.pruneBackoff;
          const backoff = backoffMs / 1000;
          this.doAddBackoff(id, topic, backoffMs);
          if (!doPX) {
              return {
                  topicID: topic,
                  peers: [],
                  backoff: backoff
              };
          }
          // select peers for Peer eXchange
          const peers = this.getRandomGossipPeers(topic, this.opts.prunePeers, (xid) => {
              return xid !== id && this.score.score(xid) >= 0;
          });
          const px = await Promise.all(Array.from(peers).map(async (peerId) => {
              // see if we have a signed record to send back; if we don't, just send
              // the peer ID and let the pruned peer find them in the DHT -- we can't trust
              // unsigned address records through PX anyways
              // Finding signed records in the DHT is not supported at the time of writing in js-libp2p
              const id = peerIdFromString(peerId);
              let peerInfo;
              try {
                  peerInfo = await this.components.peerStore.get(id);
              }
              catch (err) {
                  if (err.code !== 'ERR_NOT_FOUND') {
                      throw err;
                  }
              }
              return {
                  peerID: id.toBytes(),
                  signedPeerRecord: peerInfo?.peerRecordEnvelope
              };
          }));
          return {
              topicID: topic,
              peers: px,
              backoff: backoff
          };
      }
      /**
       * Maintains the mesh and fanout maps in gossipsub.
       */
      async heartbeat() {
          const { D, Dlo, Dhi, Dscore, Dout, fanoutTTL } = this.opts;
          this.heartbeatTicks++;
          // cache scores throught the heartbeat
          const scores = new Map();
          const getScore = (id) => {
              let s = scores.get(id);
              if (s === undefined) {
                  s = this.score.score(id);
                  scores.set(id, s);
              }
              return s;
          };
          // peer id => topic[]
          const tograft = new Map();
          // peer id => topic[]
          const toprune = new Map();
          // peer id => don't px
          const noPX = new Map();
          // clean up expired backoffs
          this.clearBackoff();
          // clean up peerhave/iasked counters
          this.peerhave.clear();
          this.metrics?.cacheSize.set({ cache: 'iasked' }, this.iasked.size);
          this.iasked.clear();
          // apply IWANT request penalties
          this.applyIwantPenalties();
          // ensure direct peers are connected
          if (this.heartbeatTicks % this.opts.directConnectTicks === 0) {
              // we only do this every few ticks to allow pending connections to complete and account for restarts/downtime
              await this.directConnect();
          }
          // EXTRA: Prune caches
          this.fastMsgIdCache?.prune();
          this.seenCache.prune();
          this.gossipTracer.prune();
          this.publishedMessageIds.prune();
          /**
           * Instead of calling getRandomGossipPeers multiple times to:
           *   + get more mesh peers
           *   + more outbound peers
           *   + oppportunistic grafting
           *   + emitGossip
           *
           * We want to loop through the topic peers only a single time and prepare gossip peers for all topics to improve the performance
           */
          const peersToGossipByTopic = new Map();
          // maintain the mesh for topics we have joined
          this.mesh.forEach((peers, topic) => {
              const peersInTopic = this.topics.get(topic);
              const candidateMeshPeers = new Set();
              const peersToGossip = new Set();
              peersToGossipByTopic.set(topic, peersToGossip);
              if (peersInTopic) {
                  const shuffledPeers = shuffle(Array.from(peersInTopic));
                  const backoff = this.backoff.get(topic);
                  for (const id of shuffledPeers) {
                      const peerStreams = this.streamsOutbound.get(id);
                      if (peerStreams &&
                          this.multicodecs.includes(peerStreams.protocol) &&
                          !peers.has(id) &&
                          !this.direct.has(id)) {
                          const score = getScore(id);
                          if ((!backoff || !backoff.has(id)) && score >= 0)
                              candidateMeshPeers.add(id);
                          // instead of having to find gossip peers after heartbeat which require another loop
                          // we prepare peers to gossip in a topic within heartbeat to improve performance
                          if (score >= this.opts.scoreThresholds.gossipThreshold)
                              peersToGossip.add(id);
                      }
                  }
              }
              // prune/graft helper functions (defined per topic)
              const prunePeer = (id, reason) => {
                  this.log('HEARTBEAT: Remove mesh link to %s in %s', id, topic);
                  // no need to update peer score here as we do it in makePrune
                  // add prune backoff record
                  this.addBackoff(id, topic);
                  // remove peer from mesh
                  peers.delete(id);
                  // after pruning a peer from mesh, we want to gossip topic to it if its score meet the gossip threshold
                  if (getScore(id) >= this.opts.scoreThresholds.gossipThreshold)
                      peersToGossip.add(id);
                  this.metrics?.onRemoveFromMesh(topic, reason, 1);
                  // add to toprune
                  const topics = toprune.get(id);
                  if (!topics) {
                      toprune.set(id, [topic]);
                  }
                  else {
                      topics.push(topic);
                  }
              };
              const graftPeer = (id, reason) => {
                  this.log('HEARTBEAT: Add mesh link to %s in %s', id, topic);
                  // update peer score
                  this.score.graft(id, topic);
                  // add peer to mesh
                  peers.add(id);
                  // when we add a new mesh peer, we don't want to gossip messages to it
                  peersToGossip.delete(id);
                  this.metrics?.onAddToMesh(topic, reason, 1);
                  // add to tograft
                  const topics = tograft.get(id);
                  if (!topics) {
                      tograft.set(id, [topic]);
                  }
                  else {
                      topics.push(topic);
                  }
              };
              // drop all peers with negative score, without PX
              peers.forEach((id) => {
                  const score = getScore(id);
                  // Record the score
                  if (score < 0) {
                      this.log('HEARTBEAT: Prune peer %s with negative score: score=%d, topic=%s', id, score, topic);
                      prunePeer(id, ChurnReason.BadScore);
                      noPX.set(id, true);
                  }
              });
              // do we have enough peers?
              if (peers.size < Dlo) {
                  const ineed = D - peers.size;
                  // slice up to first `ineed` items and remove them from candidateMeshPeers
                  // same to `const newMeshPeers = candidateMeshPeers.slice(0, ineed)`
                  const newMeshPeers = removeFirstNItemsFromSet(candidateMeshPeers, ineed);
                  newMeshPeers.forEach((p) => {
                      graftPeer(p, InclusionReason.NotEnough);
                  });
              }
              // do we have to many peers?
              if (peers.size > Dhi) {
                  let peersArray = Array.from(peers);
                  // sort by score
                  peersArray.sort((a, b) => getScore(b) - getScore(a));
                  // We keep the first D_score peers by score and the remaining up to D randomly
                  // under the constraint that we keep D_out peers in the mesh (if we have that many)
                  peersArray = peersArray.slice(0, Dscore).concat(shuffle(peersArray.slice(Dscore)));
                  // count the outbound peers we are keeping
                  let outbound = 0;
                  peersArray.slice(0, D).forEach((p) => {
                      if (this.outbound.get(p)) {
                          outbound++;
                      }
                  });
                  // if it's less than D_out, bubble up some outbound peers from the random selection
                  if (outbound < Dout) {
                      const rotate = (i) => {
                          // rotate the peersArray to the right and put the ith peer in the front
                          const p = peersArray[i];
                          for (let j = i; j > 0; j--) {
                              peersArray[j] = peersArray[j - 1];
                          }
                          peersArray[0] = p;
                      };
                      // first bubble up all outbound peers already in the selection to the front
                      if (outbound > 0) {
                          let ihave = outbound;
                          for (let i = 1; i < D && ihave > 0; i++) {
                              if (this.outbound.get(peersArray[i])) {
                                  rotate(i);
                                  ihave--;
                              }
                          }
                      }
                      // now bubble up enough outbound peers outside the selection to the front
                      let ineed = D - outbound;
                      for (let i = D; i < peersArray.length && ineed > 0; i++) {
                          if (this.outbound.get(peersArray[i])) {
                              rotate(i);
                              ineed--;
                          }
                      }
                  }
                  // prune the excess peers
                  peersArray.slice(D).forEach((p) => {
                      prunePeer(p, ChurnReason.Excess);
                  });
              }
              // do we have enough outbound peers?
              if (peers.size >= Dlo) {
                  // count the outbound peers we have
                  let outbound = 0;
                  peers.forEach((p) => {
                      if (this.outbound.get(p)) {
                          outbound++;
                      }
                  });
                  // if it's less than D_out, select some peers with outbound connections and graft them
                  if (outbound < Dout) {
                      const ineed = Dout - outbound;
                      const newMeshPeers = removeItemsFromSet(candidateMeshPeers, ineed, (id) => this.outbound.get(id) === true);
                      newMeshPeers.forEach((p) => {
                          graftPeer(p, InclusionReason.Outbound);
                      });
                  }
              }
              // should we try to improve the mesh with opportunistic grafting?
              if (this.heartbeatTicks % this.opts.opportunisticGraftTicks === 0 && peers.size > 1) {
                  // Opportunistic grafting works as follows: we check the median score of peers in the
                  // mesh; if this score is below the opportunisticGraftThreshold, we select a few peers at
                  // random with score over the median.
                  // The intention is to (slowly) improve an underperforming mesh by introducing good
                  // scoring peers that may have been gossiping at us. This allows us to get out of sticky
                  // situations where we are stuck with poor peers and also recover from churn of good peers.
                  // now compute the median peer score in the mesh
                  const peersList = Array.from(peers).sort((a, b) => getScore(a) - getScore(b));
                  const medianIndex = Math.floor(peers.size / 2);
                  const medianScore = getScore(peersList[medianIndex]);
                  // if the median score is below the threshold, select a better peer (if any) and GRAFT
                  if (medianScore < this.opts.scoreThresholds.opportunisticGraftThreshold) {
                      const ineed = this.opts.opportunisticGraftPeers;
                      const newMeshPeers = removeItemsFromSet(candidateMeshPeers, ineed, (id) => getScore(id) > medianScore);
                      for (const id of newMeshPeers) {
                          this.log('HEARTBEAT: Opportunistically graft peer %s on topic %s', id, topic);
                          graftPeer(id, InclusionReason.Opportunistic);
                      }
                  }
              }
          });
          // expire fanout for topics we haven't published to in a while
          const now = Date.now();
          this.fanoutLastpub.forEach((lastpb, topic) => {
              if (lastpb + fanoutTTL < now) {
                  this.fanout.delete(topic);
                  this.fanoutLastpub.delete(topic);
              }
          });
          // maintain our fanout for topics we are publishing but we have not joined
          this.fanout.forEach((fanoutPeers, topic) => {
              // checks whether our peers are still in the topic and have a score above the publish threshold
              const topicPeers = this.topics.get(topic);
              fanoutPeers.forEach((id) => {
                  if (!topicPeers.has(id) || getScore(id) < this.opts.scoreThresholds.publishThreshold) {
                      fanoutPeers.delete(id);
                  }
              });
              const peersInTopic = this.topics.get(topic);
              const candidateFanoutPeers = [];
              // the fanout map contains topics to which we are not subscribed.
              const peersToGossip = new Set();
              peersToGossipByTopic.set(topic, peersToGossip);
              if (peersInTopic) {
                  const shuffledPeers = shuffle(Array.from(peersInTopic));
                  for (const id of shuffledPeers) {
                      const peerStreams = this.streamsOutbound.get(id);
                      if (peerStreams &&
                          this.multicodecs.includes(peerStreams.protocol) &&
                          !fanoutPeers.has(id) &&
                          !this.direct.has(id)) {
                          const score = getScore(id);
                          if (score >= this.opts.scoreThresholds.publishThreshold)
                              candidateFanoutPeers.push(id);
                          // instead of having to find gossip peers after heartbeat which require another loop
                          // we prepare peers to gossip in a topic within heartbeat to improve performance
                          if (score >= this.opts.scoreThresholds.gossipThreshold)
                              peersToGossip.add(id);
                      }
                  }
              }
              // do we need more peers?
              if (fanoutPeers.size < D) {
                  const ineed = D - fanoutPeers.size;
                  candidateFanoutPeers.slice(0, ineed).forEach((id) => {
                      fanoutPeers.add(id);
                      peersToGossip?.delete(id);
                  });
              }
          });
          this.emitGossip(peersToGossipByTopic);
          // send coalesced GRAFT/PRUNE messages (will piggyback gossip)
          await this.sendGraftPrune(tograft, toprune, noPX);
          // flush pending gossip that wasn't piggybacked above
          this.flush();
          // advance the message history window
          this.mcache.shift();
          this.dispatchEvent(new CustomEvent('gossipsub:heartbeat'));
      }
      /**
       * Given a topic, returns up to count peers subscribed to that topic
       * that pass an optional filter function
       *
       * @param topic
       * @param count
       * @param filter - a function to filter acceptable peers
       */
      getRandomGossipPeers(topic, count, filter = () => true) {
          const peersInTopic = this.topics.get(topic);
          if (!peersInTopic) {
              return new Set();
          }
          // Adds all peers using our protocol
          // that also pass the filter function
          let peers = [];
          peersInTopic.forEach((id) => {
              const peerStreams = this.streamsOutbound.get(id);
              if (!peerStreams) {
                  return;
              }
              if (this.multicodecs.includes(peerStreams.protocol) && filter(id)) {
                  peers.push(id);
              }
          });
          // Pseudo-randomly shuffles peers
          peers = shuffle(peers);
          if (count > 0 && peers.length > count) {
              peers = peers.slice(0, count);
          }
          return new Set(peers);
      }
      onScrapeMetrics(metrics) {
          /* Data structure sizes */
          metrics.mcacheSize.set(this.mcache.size);
          metrics.mcacheNotValidatedCount.set(this.mcache.notValidatedCount);
          // Arbitrary size
          metrics.cacheSize.set({ cache: 'direct' }, this.direct.size);
          metrics.cacheSize.set({ cache: 'seenCache' }, this.seenCache.size);
          metrics.cacheSize.set({ cache: 'fastMsgIdCache' }, this.fastMsgIdCache?.size ?? 0);
          metrics.cacheSize.set({ cache: 'publishedMessageIds' }, this.publishedMessageIds.size);
          metrics.cacheSize.set({ cache: 'mcache' }, this.mcache.size);
          metrics.cacheSize.set({ cache: 'score' }, this.score.size);
          metrics.cacheSize.set({ cache: 'gossipTracer.promises' }, this.gossipTracer.size);
          metrics.cacheSize.set({ cache: 'gossipTracer.requests' }, this.gossipTracer.requestMsByMsgSize);
          // Bounded by topic
          metrics.cacheSize.set({ cache: 'topics' }, this.topics.size);
          metrics.cacheSize.set({ cache: 'subscriptions' }, this.subscriptions.size);
          metrics.cacheSize.set({ cache: 'mesh' }, this.mesh.size);
          metrics.cacheSize.set({ cache: 'fanout' }, this.fanout.size);
          // Bounded by peer
          metrics.cacheSize.set({ cache: 'peers' }, this.peers.size);
          metrics.cacheSize.set({ cache: 'streamsOutbound' }, this.streamsOutbound.size);
          metrics.cacheSize.set({ cache: 'streamsInbound' }, this.streamsInbound.size);
          metrics.cacheSize.set({ cache: 'acceptFromWhitelist' }, this.acceptFromWhitelist.size);
          metrics.cacheSize.set({ cache: 'gossip' }, this.gossip.size);
          metrics.cacheSize.set({ cache: 'control' }, this.control.size);
          metrics.cacheSize.set({ cache: 'peerhave' }, this.peerhave.size);
          metrics.cacheSize.set({ cache: 'outbound' }, this.outbound.size);
          // 2D nested data structure
          let backoffSize = 0;
          const now = Date.now();
          metrics.connectedPeersBackoffSec.reset();
          for (const backoff of this.backoff.values()) {
              backoffSize += backoff.size;
              for (const [peer, expiredMs] of backoff.entries()) {
                  if (this.peers.has(peer)) {
                      metrics.connectedPeersBackoffSec.observe(Math.max(0, expiredMs - now) / 1000);
                  }
              }
          }
          metrics.cacheSize.set({ cache: 'backoff' }, backoffSize);
          // Peer counts
          for (const [topicStr, peers] of this.topics) {
              metrics.topicPeersCount.set({ topicStr }, peers.size);
          }
          for (const [topicStr, peers] of this.mesh) {
              metrics.meshPeerCounts.set({ topicStr }, peers.size);
          }
          // Peer scores
          const scores = [];
          const scoreByPeer = new Map();
          metrics.behaviourPenalty.reset();
          for (const peerIdStr of this.peers.keys()) {
              const score = this.score.score(peerIdStr);
              scores.push(score);
              scoreByPeer.set(peerIdStr, score);
              metrics.behaviourPenalty.observe(this.score.peerStats.get(peerIdStr)?.behaviourPenalty ?? 0);
          }
          metrics.registerScores(scores, this.opts.scoreThresholds);
          // Breakdown score per mesh topicLabel
          metrics.registerScorePerMesh(this.mesh, scoreByPeer);
          // Breakdown on each score weight
          const sw = computeAllPeersScoreWeights(this.peers.keys(), this.score.peerStats, this.score.params, this.score.peerIPs, metrics.topicStrToLabel);
          metrics.registerScoreWeights(sw);
      }
  }
  GossipSub.multicodec = GossipsubIDv11;
  function gossipsub(init = {}) {
      return (components) => new GossipSub(components, init);
  }

  var createLibp2pNode = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(topic, rendezvousString) {
      var libp2p;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 3;
            return createLibp2p({
              // Other libp2p options can be put here...
              modules: {
                pubsub: gossipsub
              },
              config: {
                pubsub: {
                  enabled: true
                }
                // Other configuration options...
              }
            });
          case 3:
            libp2p = _context.sent;
            libp2p.on('peer:discovery', function (peerId) {
              console.log('Discovered:', peerId.toB58String()); // Log discovered peers
            });
            _context.next = 7;
            return libp2p.start();
          case 7:
            libp2p.pubsub.on('message', function (message) {
              console.log("".concat(message.topic, ":"), new TextDecoder().decode(message.data));
            });
            _context.next = 10;
            return libp2p.pubsub.subscribe(topic);
          case 10:
            // Publish a message to the topic
            libp2p.pubsub.publish(topic, new TextEncoder().encode(rendezvousString));
            return _context.abrupt("return", libp2p);
          case 12:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function createLibp2pNode(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();

  var terminal = new xtermExports.Terminal();
  var fitAddon = new xtermAddonFitExports.FitAddon();
  terminal.loadAddon(fitAddon);
  terminal.open(document.getElementById('terminal-container'));
  fitAddon.fit();

  // Load createLibp2pNode from gossipsub.js
  var topic = 'myspace';
  var rendezvousString = 'myspace';
  var node;

  // Handle the input field
  var inputField = document.getElementById('input-field');
  inputField.addEventListener('keydown', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!(event.key === 'Enter')) {
              _context.next = 9;
              break;
            }
            // Prevent the form from being submitted
            event.preventDefault();

            // Initialize the node if it is not yet created
            if (node) {
              _context.next = 7;
              break;
            }
            _context.next = 5;
            return createLibp2pNode(topic, rendezvousString);
          case 5:
            node = _context.sent;
            node.pubsub.on(topic, function (msg) {
              terminal.writeln(msg.data.toString());
            });
          case 7:
            // Publish the message
            node.pubsub.publish(topic, Buffer.from(inputField.value));

            // Clear the input field
            inputField.value = '';
          case 9:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());

})();
